<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 愿星光伴你左右</title>
    <link>http://shanks.link/post/</link>
    <description>Recent content in Posts on 愿星光伴你左右</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 22 Mar 2022 18:00:34 +0800</lastBuildDate><atom:link href="http://shanks.link/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WebAssembly 系列（五）为什么 WebAssembly 更快？</title>
      <link>http://shanks.link/blog/2022/03/22/webassembly-%E7%B3%BB%E5%88%97%E4%BA%94%E4%B8%BA%E4%BB%80%E4%B9%88-webassembly-%E6%9B%B4%E5%BF%AB/</link>
      <pubDate>Tue, 22 Mar 2022 18:00:34 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/03/22/webassembly-%E7%B3%BB%E5%88%97%E4%BA%94%E4%B8%BA%E4%BB%80%E4%B9%88-webassembly-%E6%9B%B4%E5%BF%AB/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Go更细粒度的读写锁设计</title>
      <link>http://shanks.link/blog/2022/03/19/go%E6%9B%B4%E7%BB%86%E7%B2%92%E5%BA%A6%E7%9A%84%E8%AF%BB%E5%86%99%E9%94%81%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sat, 19 Mar 2022 17:50:22 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/03/19/go%E6%9B%B4%E7%BB%86%E7%B2%92%E5%BA%A6%E7%9A%84%E8%AF%BB%E5%86%99%E9%94%81%E8%AE%BE%E8%AE%A1/</guid>
      <description>Go更细粒度的读写锁设计 在《Go精妙的互斥锁设计》一文中，我们详细地讲解了互斥锁的实现原理。互斥锁为了避免竞争条件，它只允许一个线程进入代码</description>
    </item>
    
    <item>
      <title>go语言调度器源代码情景分析之九：操作系统线程及线程调度</title>
      <link>http://shanks.link/blog/2022/03/19/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%B9%9D%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BA%BF%E7%A8%8B%E5%8F%8A%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Sat, 19 Mar 2022 16:48:56 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/03/19/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%B9%9D%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BA%BF%E7%A8%8B%E5%8F%8A%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-04-25 本文是《go调度器源代码情景分析》系列 第一章 预备知识的第九小节。 要深入理解goroutine的调度器，就需要对</description>
    </item>
    
    <item>
      <title></title>
      <link>http://shanks.link/blog/2022/03/19/</link>
      <pubDate>Sat, 19 Mar 2022 16:20:26 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/03/19/</guid>
      <description>#&amp;mdash; title: Go：defer 语句如何工作 date: 2021-04-05 11:55:28 tags: [go] categories: [go] 原文链接 Go：defer 语句如何工作 ℹ️ 这篇文章基于 Go 1.12。 defer 语句是在函数返回前执行一段代</description>
    </item>
    
    <item>
      <title>linux中查看端口被那个程序占用</title>
      <link>http://shanks.link/blog/2021/12/13/linux%E4%B8%AD%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E8%A2%AB%E9%82%A3%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%8D%A0%E7%94%A8/</link>
      <pubDate>Mon, 13 Dec 2021 23:31:39 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/12/13/linux%E4%B8%AD%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E8%A2%AB%E9%82%A3%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%8D%A0%E7%94%A8/</guid>
      <description>之前查询端口是否被占用一直搞不明白，问了好多人，终于搞懂了，现在总结下： 1.netstat -anp |grep 端口号 如下，我以3306为例，netstat -anp |grep 3306（此处</description>
    </item>
    
    <item>
      <title>git git@github.com: Permission denied (publickey)</title>
      <link>http://shanks.link/blog/2021/12/13/git-gitgithub.com-permission-denied-publickey/</link>
      <pubDate>Mon, 13 Dec 2021 19:38:35 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/12/13/git-gitgithub.com-permission-denied-publickey/</guid>
      <description>前言 背着 Air，背了好长时间，挤地铁，背着感觉不仅仅是一个 Air，更是希望，压力以及动力。 随着项目一期差不多了，我的 MBP 也该派上用场啦。 早期 LZ</description>
    </item>
    
    <item>
      <title>git squash用法</title>
      <link>http://shanks.link/blog/2021/12/13/git-squash%E7%94%A8%E6%B3%95/</link>
      <pubDate>Mon, 13 Dec 2021 10:24:32 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/12/13/git-squash%E7%94%A8%E6%B3%95/</guid>
      <description>在开发一个功能的时候会反复的提交代码，会造成一个功能有很多次提交，在我们要向master做分支合并的时候，就会出现很多commits，在合并</description>
    </item>
    
    <item>
      <title>git查看文件的历史提交信息</title>
      <link>http://shanks.link/blog/2021/12/13/git%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E7%9A%84%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Mon, 13 Dec 2021 10:22:35 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/12/13/git%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E7%9A%84%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF/</guid>
      <description>工作中我们有时候想要查看某一个文件的历史提交版本,] 还想看都修改过那些内容,那么这两个简单的命令就会帮到你了, 话不多说,comeBaby&amp;h</description>
    </item>
    
    <item>
      <title>Git远程仓库地址变更本地如何修改</title>
      <link>http://shanks.link/blog/2021/12/13/git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80%E5%8F%98%E6%9B%B4%E6%9C%AC%E5%9C%B0%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9/</link>
      <pubDate>Mon, 13 Dec 2021 10:17:13 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/12/13/git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80%E5%8F%98%E6%9B%B4%E6%9C%AC%E5%9C%B0%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9/</guid>
      <description>公司搬移， 作为git仓库的服务器IP地址变了。 本地代码挺多，重新检出太占时间，可以修改一个什么配置让我本地仓库和新的远程仓库建立关联吗， 答案</description>
    </item>
    
    <item>
      <title>git忽略文件权限和所有者</title>
      <link>http://shanks.link/blog/2021/12/13/git%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E5%92%8C%E6%89%80%E6%9C%89%E8%80%85/</link>
      <pubDate>Mon, 13 Dec 2021 10:15:26 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/12/13/git%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E5%92%8C%E6%89%80%E6%9C%89%E8%80%85/</guid>
      <description>在发布项目到线上时，很多时候需要修改文件的权限，如果是使用git版本管理软件来发布的话，那么下次更新线上文件的时候就会提示文件冲突。明明文件</description>
    </item>
    
    <item>
      <title>合并多次提交</title>
      <link>http://shanks.link/blog/2021/12/13/%E5%90%88%E5%B9%B6%E5%A4%9A%E6%AC%A1%E6%8F%90%E4%BA%A4/</link>
      <pubDate>Mon, 13 Dec 2021 10:09:52 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/12/13/%E5%90%88%E5%B9%B6%E5%A4%9A%E6%AC%A1%E6%8F%90%E4%BA%A4/</guid>
      <description>找到需要合并的最后一条commitid的上一条commitid a3953b9 55ecd9c a142bb1 33018e91766fb 比如，这里需要合并前三个commit 则他们的上一个是 33018e91766fb 执行 git rebase -i 33018e91766fb (git rebase</description>
    </item>
    
    <item>
      <title>Centos8更改软件源为阿里源</title>
      <link>http://shanks.link/blog/2021/12/05/centos8%E6%9B%B4%E6%94%B9%E8%BD%AF%E4%BB%B6%E6%BA%90%E4%B8%BA%E9%98%BF%E9%87%8C%E6%BA%90/</link>
      <pubDate>Sun, 05 Dec 2021 20:32:52 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/12/05/centos8%E6%9B%B4%E6%94%B9%E8%BD%AF%E4%BB%B6%E6%BA%90%E4%B8%BA%E9%98%BF%E9%87%8C%E6%BA%90/</guid>
      <description>以上内容转载自 1、备份现有源 cd /etc/yum.repos.d/ mkdir backup mv *.repo ./backup 2、下载阿里云源文件 wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo 或 curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo 3、检查以下是否成功 cat /etc/yum.repos.d/CentOS-Base.repo 4、生成缓存 yum makecache</description>
    </item>
    
    <item>
      <title>linux动态库so调用外部so，运行时出现undefined symbol</title>
      <link>http://shanks.link/blog/2021/11/09/linux%E5%8A%A8%E6%80%81%E5%BA%93so%E8%B0%83%E7%94%A8%E5%A4%96%E9%83%A8so%E8%BF%90%E8%A1%8C%E6%97%B6%E5%87%BA%E7%8E%B0undefined-symbol/</link>
      <pubDate>Tue, 09 Nov 2021 14:41:56 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/11/09/linux%E5%8A%A8%E6%80%81%E5%BA%93so%E8%B0%83%E7%94%A8%E5%A4%96%E9%83%A8so%E8%BF%90%E8%A1%8C%E6%97%B6%E5%87%BA%E7%8E%B0undefined-symbol/</guid>
      <description>出现这种问题，一般为某工程的动态链接库出现问题，一般为以下解决办法： 一、当前工程的.so文件和生成该.so文件的工程代码不一致，当前.so文</description>
    </item>
    
    <item>
      <title>WebAssembly 不完全指北</title>
      <link>http://shanks.link/blog/2021/10/29/webassembly-%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8C%97/</link>
      <pubDate>Fri, 29 Oct 2021 17:22:07 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/29/webassembly-%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8C%97/</guid>
      <description>原文链接 背景：从 JavaScript 说起 JavaScript 占据着统治地位，不管是公开还是私有的项目、任何组织、世界任何地区，JavaScript 都是第一。 -GitHub 2018 年度报告 随着Ja</description>
    </item>
    
    <item>
      <title>Wasm介绍之7：文本格式</title>
      <link>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B7%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Fri, 29 Oct 2021 17:08:46 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B7%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F/</guid>
      <description>原文链接 # Wasm介绍之7：文本格式 前面的文章详细介绍了WebAssembly（简称Wasm）二进制格式和指令集，这篇文章将介绍Wasm文本</description>
    </item>
    
    <item>
      <title>Wasm介绍之6: 间接函数调用</title>
      <link>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B6-%E9%97%B4%E6%8E%A5%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</link>
      <pubDate>Fri, 29 Oct 2021 16:54:22 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B6-%E9%97%B4%E6%8E%A5%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</guid>
      <description># Wasm介绍之6：间接函数调用 在前面的5篇文章里，我们详细讨论了WebAssembly（简称Wasm）二进制格式和除call_indire</description>
    </item>
    
    <item>
      <title>Wasm介绍之5：控制指令</title>
      <link>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B5%E6%8E%A7%E5%88%B6%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Fri, 29 Oct 2021 16:51:54 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B5%E6%8E%A7%E5%88%B6%E6%8C%87%E4%BB%A4/</guid>
      <description>原文链接 # Wasm介绍之5：控制指令 [WebAssembly]https%3A%2F%2Fwebassembly.org%2F)（简称Was</description>
    </item>
    
    <item>
      <title>Wasm介绍之4：函数调用</title>
      <link>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B4%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</link>
      <pubDate>Fri, 29 Oct 2021 16:48:03 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B4%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</guid>
      <description>原文链接 上一篇文章介绍了WebAssembly（简称Wasm）内存和相关指令，这篇文章将介绍变量指令和函数调用指令。 全局变量 Wasm模块可以</description>
    </item>
    
    <item>
      <title>Wasm介绍之3：内存</title>
      <link>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B3%E5%86%85%E5%AD%98/</link>
      <pubDate>Fri, 29 Oct 2021 16:40:13 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B3%E5%86%85%E5%AD%98/</guid>
      <description>原文链接 上一篇文章介绍了WebAssembly（简称Wasm）指令集以及指令的操作码（Opcode）、立即数（Immediate Argume</description>
    </item>
    
    <item>
      <title>Wasm介绍之2：指令集和栈</title>
      <link>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B2%E6%8C%87%E4%BB%A4%E9%9B%86%E5%92%8C%E6%A0%88/</link>
      <pubDate>Fri, 29 Oct 2021 16:36:38 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B2%E6%8C%87%E4%BB%A4%E9%9B%86%E5%92%8C%E6%A0%88/</guid>
      <description>原文链接 上一篇文章介绍了WebAssembly（后文简称Wasm）二进制格式，这一篇文章将介绍Wasm指令集、操作数栈和部分指令。 Wasm指</description>
    </item>
    
    <item>
      <title>Wasm介绍之1：二进制格式</title>
      <link>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B1%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Fri, 29 Oct 2021 16:33:16 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B1%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%A0%BC%E5%BC%8F/</guid>
      <description>原文链接 关于WebAssembly（下文简称Wasm）的介绍已经有很多了，本文不打算再多啰嗦。本文介绍的重点是Wasm二进制格式，我们会把一</description>
    </item>
    
    <item>
      <title>FFI</title>
      <link>http://shanks.link/blog/2021/10/28/ffi/</link>
      <pubDate>Thu, 28 Oct 2021 20:57:17 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/28/ffi/</guid>
      <description>原文链接 FFI 库，是 LuaJIT 中最重要的一个扩展库。它允许从纯 Lua 代码调用外部 C 函数，使用 C 数据结构。有了它，就不用再像 Lua 标准 math 库一样，编写 Lua 扩展库。把开</description>
    </item>
    
    <item>
      <title>linux ucontext族函数的原理及使用</title>
      <link>http://shanks.link/blog/2021/10/28/linux-ucontext%E6%97%8F%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 28 Oct 2021 20:02:45 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/28/linux-ucontext%E6%97%8F%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      <description>原文链接 ucontext函数族 这里的context族是偏向底层的，其实底层就是通过汇编来实现的，但是我们使用的时候就和平常使用变量和函数一样</description>
    </item>
    
    <item>
      <title>WebAssembly完全入门了解wasm的前世今身</title>
      <link>http://shanks.link/blog/2021/10/20/webassembly%E5%AE%8C%E5%85%A8%E5%85%A5%E9%97%A8%E4%BA%86%E8%A7%A3wasm%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E8%BA%AB/</link>
      <pubDate>Wed, 20 Oct 2021 14:43:14 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/20/webassembly%E5%AE%8C%E5%85%A8%E5%85%A5%E9%97%A8%E4%BA%86%E8%A7%A3wasm%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E8%BA%AB/</guid>
      <description>首发于SH的全栈笔记 前言 接触WebAssembly之后，在google上看了很多资料。感觉对WebAssembly的使用、介绍、意义都说的比</description>
    </item>
    
    <item>
      <title>十年磨一剑，WebAssembly是如何诞生的？</title>
      <link>http://shanks.link/blog/2021/10/20/%E5%8D%81%E5%B9%B4%E7%A3%A8%E4%B8%80%E5%89%91webassembly%E6%98%AF%E5%A6%82%E4%BD%95%E8%AF%9E%E7%94%9F%E7%9A%84/</link>
      <pubDate>Wed, 20 Oct 2021 14:34:08 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/20/%E5%8D%81%E5%B9%B4%E7%A3%A8%E4%B8%80%E5%89%91webassembly%E6%98%AF%E5%A6%82%E4%BD%95%E8%AF%9E%E7%94%9F%E7%9A%84/</guid>
      <description>首发于寒雁Talk 创造一个编程语言最好的时间是10年前，其次是现在。 从Emscripten到asm.js再到WebAssembly，从一个业</description>
    </item>
    
    <item>
      <title>深入浅出WebAssembly1-8链接</title>
      <link>http://shanks.link/blog/2021/10/20/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAwebassembly1-8%E9%93%BE%E6%8E%A5/</link>
      <pubDate>Wed, 20 Oct 2021 10:45:41 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/20/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAwebassembly1-8%E9%93%BE%E6%8E%A5/</guid>
      <description>这系列主要是我对WASM研究的笔记，可能内容比较简略。总共包括： 深入浅出WebAssembly(1) Compilation 深入浅出WebAssembly(2) Basic</description>
    </item>
    
    <item>
      <title>深入浅出WebAssembly(2) Basic API</title>
      <link>http://shanks.link/blog/2021/10/20/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAwebassembly2-basic-api/</link>
      <pubDate>Wed, 20 Oct 2021 10:43:19 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/20/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAwebassembly2-basic-api/</guid>
      <description>原文链接 这系列主要是我对WASM研究的笔记，可能内容比较简略。总共包括： 深入浅出WebAssembly(1) Compilation 深入浅出WebAssembly</description>
    </item>
    
    <item>
      <title>深入浅出WebAssembly(1) Compilation</title>
      <link>http://shanks.link/blog/2021/10/20/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAwebassembly1-compilation/</link>
      <pubDate>Wed, 20 Oct 2021 10:39:28 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/20/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAwebassembly1-compilation/</guid>
      <description>原文链接 这系列主要是我对WASM研究的笔记，可能内容比较简略。总共包括： 深入浅出WebAssembly(1) Compilation 深入浅出WebAssembly</description>
    </item>
    
    <item>
      <title>编程语言、虚拟机和 webAssembly 三者有什么关系</title>
      <link>http://shanks.link/blog/2021/10/20/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C-webassembly-%E4%B8%89%E8%80%85%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Wed, 20 Oct 2021 09:43:43 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/20/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C-webassembly-%E4%B8%89%E8%80%85%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB/</guid>
      <description>前言：今天我们聊一聊最近很火热的技术 webAssembly。webAssbemly 作为一项新的技术，自 2015 年诞生之初，就逐渐受到人们的关注。那</description>
    </item>
    
    <item>
      <title>WebAssembly 系列（六）WebAssembly 的现在与未来</title>
      <link>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E5%85%ADwebassembly-%E7%9A%84%E7%8E%B0%E5%9C%A8%E4%B8%8E%E6%9C%AA%E6%9D%A5/</link>
      <pubDate>Wed, 20 Oct 2021 09:34:37 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E5%85%ADwebassembly-%E7%9A%84%E7%8E%B0%E5%9C%A8%E4%B8%8E%E6%9C%AA%E6%9D%A5/</guid>
      <description>本文作者：Lin Clark 翻译原文：http://huziketang.com/blog/posts/detail?postId=58ce7fd3a</description>
    </item>
    
    <item>
      <title>WebAssembly 系列（四）WebAssembly 工作原理</title>
      <link>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E5%9B%9Bwebassembly-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 20 Oct 2021 09:15:58 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E5%9B%9Bwebassembly-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</guid>
      <description>首发于前端大哈 本文作者：Lin Clark 翻译原文：http://huziketang.com/blog/posts/detail?postId=58</description>
    </item>
    
    <item>
      <title>WebAssembly 系列（三）编译器如何生成汇编</title>
      <link>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E4%B8%89%E7%BC%96%E8%AF%91%E5%99%A8%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E6%B1%87%E7%BC%96/</link>
      <pubDate>Wed, 20 Oct 2021 09:13:32 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E4%B8%89%E7%BC%96%E8%AF%91%E5%99%A8%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E6%B1%87%E7%BC%96/</guid>
      <description>本文作者：Lin Clark 翻译原文：http://huziketang.com/blog/posts/detail?postId=58c55a3ba</description>
    </item>
    
    <item>
      <title>WebAssembly 系列（二）JavaScript Just-in-time (JIT) 工作</title>
      <link>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E4%BA%8Cjavascript-just-in-time-jit-%E5%B7%A5%E4%BD%9C/</link>
      <pubDate>Wed, 20 Oct 2021 09:10:21 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E4%BA%8Cjavascript-just-in-time-jit-%E5%B7%A5%E4%BD%9C/</guid>
      <description>作者：Lin Clark 翻译原文：http://huziketang.com/blog/posts/detail?postId=58c12f36a6d</description>
    </item>
    
    <item>
      <title>WebAssembly 系列（一）生动形象地介绍 WebAssembly</title>
      <link>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E4%B8%80%E7%94%9F%E5%8A%A8%E5%BD%A2%E8%B1%A1%E5%9C%B0%E4%BB%8B%E7%BB%8D-webassembly/</link>
      <pubDate>Wed, 20 Oct 2021 09:07:03 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E4%B8%80%E7%94%9F%E5%8A%A8%E5%BD%A2%E8%B1%A1%E5%9C%B0%E4%BB%8B%E7%BB%8D-webassembly/</guid>
      <description>本文作者：Lin Clark 翻译原文：http://huziketang.com/blog/posts/detail?postId=58ce8036a</description>
    </item>
    
    <item>
      <title>CentOS8使用ifconfig没有ens33网卡</title>
      <link>http://shanks.link/blog/2021/10/19/centos8%E4%BD%BF%E7%94%A8ifconfig%E6%B2%A1%E6%9C%89ens33%E7%BD%91%E5%8D%A1/</link>
      <pubDate>Tue, 19 Oct 2021 14:51:27 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/19/centos8%E4%BD%BF%E7%94%A8ifconfig%E6%B2%A1%E6%9C%89ens33%E7%BD%91%E5%8D%A1/</guid>
      <description>原文链接 本人遇到的问题 虚拟机开启 ifconfig 没有ens33网卡，无法上网，同时 图形化模式 没有有线连接选项 手动启动网卡提示： Connection &amp;#39;ens33&amp;#39; is not available on device ens33 because device is strictly unmanaged 有</description>
    </item>
    
    <item>
      <title>git常用命令简介”</title>
      <link>http://shanks.link/blog/2021/10/19/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 19 Oct 2021 11:12:49 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/19/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%AE%80%E4%BB%8B/</guid>
      <description>git config # 显示当前的Git配置 $ git config --list # 编辑Git配置文件 $ git config -e [--global] # 设置提交代码时的用户信息 $ git config [--global] user.name &amp;#34;[name]&amp;#34; $ git config [--global] user.email &amp;#34;[email address]&amp;#34; git workflow http://www.ruanyifeng.com/blog/2012/07/git.html http://www.ruanyifeng.com/blog/2015/08/git-use-process.html http://www.ruanyifeng.com/blog/2015/12/git-workflow.html?bsh_bid=2219775734 http://www.ruanyifeng.com/blog/2019/12/git-undo.html 撤销提交 http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html 撰</description>
    </item>
    
    <item>
      <title>bash: $&#39;&#39;: command not found</title>
      <link>http://shanks.link/blog/2021/10/19/bash-command-not-found/</link>
      <pubDate>Tue, 19 Oct 2021 10:58:10 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/19/bash-command-not-found/</guid>
      <description>原文链接 问题描述 在Windows下编写好sh文件后，在Linux下运行会报错：bash: $’\r’: command not found 问题解决 这是因为Windows系统</description>
    </item>
    
    <item>
      <title>grep搜索</title>
      <link>http://shanks.link/blog/2021/10/18/grep%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Mon, 18 Oct 2021 08:52:46 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/18/grep%E6%90%9C%E7%B4%A2/</guid>
      <description>原文链接 一般在windows上文本编辑器notepad++，UE这些都有这些功能，Linux下就换了一种方式，用grep来完成文件中信息查找</description>
    </item>
    
    <item>
      <title>vim中查找和替换</title>
      <link>http://shanks.link/blog/2021/10/18/vim%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%92%8C%E6%9B%BF%E6%8D%A2/</link>
      <pubDate>Mon, 18 Oct 2021 08:47:44 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/18/vim%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%92%8C%E6%9B%BF%E6%8D%A2/</guid>
      <description>原文链接 1，查找 在normal模式下按下/即可进入查找模式，输入要查找的字符串并按下回车。 Vim会跳转到第一个匹配。按下n查找下一个，按下N</description>
    </item>
    
    <item>
      <title>记录一个完整的git提交pr的过程</title>
      <link>http://shanks.link/blog/2021/10/18/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E7%9A%84git%E6%8F%90%E4%BA%A4pr%E7%9A%84%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Mon, 18 Oct 2021 08:42:13 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/18/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E7%9A%84git%E6%8F%90%E4%BA%A4pr%E7%9A%84%E8%BF%87%E7%A8%8B/</guid>
      <description>原文链接 今天提交了第一个pr，过程中查了很多资料，这里做个总结文字。 git下载 https://git-scm.com/downloads git配置邮箱和用户名 打开git bash，分别执行以下两句命</description>
    </item>
    
    <item>
      <title>centos8防火墙设置</title>
      <link>http://shanks.link/blog/2021/10/18/centos8%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Mon, 18 Oct 2021 08:36:17 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/18/centos8%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE/</guid>
      <description>原文链接 1、centos中firewalld与iptables centos7以前的版本默认使用iptables服务进行管理防火墙规则。cen</description>
    </item>
    
    <item>
      <title>linux中的不同查找命令</title>
      <link>http://shanks.link/blog/2021/10/15/linux%E4%B8%AD%E7%9A%84%E4%B8%8D%E5%90%8C%E6%9F%A5%E6%89%BE%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 15 Oct 2021 14:43:07 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/15/linux%E4%B8%AD%E7%9A%84%E4%B8%8D%E5%90%8C%E6%9F%A5%E6%89%BE%E5%91%BD%E4%BB%A4/</guid>
      <description>在使用linux时，经常需要进行文件查找。其中查找的命令主要有find和grep。两个命令是有区的。 区别：(1)find命令是根据文件的属性</description>
    </item>
    
    <item>
      <title>如何在CentOS上安装RPM软件包</title>
      <link>http://shanks.link/blog/2021/10/14/%E5%A6%82%E4%BD%95%E5%9C%A8centos%E4%B8%8A%E5%AE%89%E8%A3%85rpm%E8%BD%AF%E4%BB%B6%E5%8C%85/</link>
      <pubDate>Thu, 14 Oct 2021 22:38:25 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/14/%E5%A6%82%E4%BD%95%E5%9C%A8centos%E4%B8%8A%E5%AE%89%E8%A3%85rpm%E8%BD%AF%E4%BB%B6%E5%8C%85/</guid>
      <description>原文地址 如何在CentOS上安装RPM软件包 RPM是Red Hat及其衍生产品（如CentOS和Fedora）使用的安装包管理系统。 官方Cen</description>
    </item>
    
    <item>
      <title>axel包的安装</title>
      <link>http://shanks.link/blog/2021/10/14/axel%E5%8C%85%E7%9A%84%E5%AE%89%E8%A3%85/</link>
      <pubDate>Thu, 14 Oct 2021 21:36:22 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/14/axel%E5%8C%85%E7%9A%84%E5%AE%89%E8%A3%85/</guid>
      <description>原文地址 直接安装 有源的情况下，axel 在 CentOS 可以通过 yum 的方式直接安装： ​ sudo yum install -y axel 没有源的情况下，在 CentOS 6/7 中可以先添加 Epel 源再安装： ​ sudo yum install epel-release ​ sudo</description>
    </item>
    
    <item>
      <title>数学之美每章小结</title>
      <link>http://shanks.link/blog/2021/10/09/%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E%E6%AF%8F%E7%AB%A0%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Sat, 09 Oct 2021 14:59:21 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/09/%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E%E6%AF%8F%E7%AB%A0%E5%B0%8F%E7%BB%93/</guid>
      <description>原文链接 书评：本书讲的是道而不是术，真正的术还要自己细致的研究下去，目前看的第一遍总结的不是很好，后面再看会继续完善。 第1章：文字和语言VS</description>
    </item>
    
    <item>
      <title>nginx整体介绍</title>
      <link>http://shanks.link/blog/2021/10/08/nginx%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 08 Oct 2021 23:47:37 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/08/nginx%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D/</guid>
      <description>转载自永恒的留忆 Nginx是什么？ Nginx就是反向代理服务器。 首先我们先来看看什么是代理服务器，代理服务器一般是指局域网内部的机器通过代理</description>
    </item>
    
    <item>
      <title>繁忙的一个月</title>
      <link>http://shanks.link/blog/2021/09/11/%E7%B9%81%E5%BF%99%E7%9A%84%E4%B8%80%E4%B8%AA%E6%9C%88/</link>
      <pubDate>Sat, 11 Sep 2021 16:29:13 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/09/11/%E7%B9%81%E5%BF%99%E7%9A%84%E4%B8%80%E4%B8%AA%E6%9C%88/</guid>
      <description>​ 上篇周记到现在过了一个月，时间过得很快。 最近因为老婆准备考试，我晚上回家要帮忙带娃，周末也要帮忙带娃，另外预感到最近可能换工作，所以工作上</description>
    </item>
    
    <item>
      <title>TiDB 源码阅读系列文章（二）初识 TiDB 源码</title>
      <link>http://shanks.link/blog/2021/09/04/tidb-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E4%BA%8C%E5%88%9D%E8%AF%86-tidb-%E6%BA%90%E7%A0%81/</link>
      <pubDate>Sat, 04 Sep 2021 16:27:11 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/09/04/tidb-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E4%BA%8C%E5%88%9D%E8%AF%86-tidb-%E6%BA%90%E7%A0%81/</guid>
      <description>申砾2018-03-02 本文为 TiDB 源码阅读系列文章的第二篇， 第一篇文章 介绍了 TiDB 整体的架构，知道 TiDB 有哪些模块，分别是做什么的，从哪里入手比较好，</description>
    </item>
    
    <item>
      <title>TiDB 源码阅读系列文章（一）序</title>
      <link>http://shanks.link/blog/2021/09/04/tidb-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E4%B8%80%E5%BA%8F/</link>
      <pubDate>Sat, 04 Sep 2021 15:32:44 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/09/04/tidb-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E4%B8%80%E5%BA%8F/</guid>
      <description>以下内容转载自博客 申砾2018-02-28 在 TiDB DevCon2018 上，我们对外宣布了 TiDB 源码阅读分享活动，承诺对外发布一系列文章以及视频帮助大家理解 TiDB 源码。大家</description>
    </item>
    
    <item>
      <title>分布式系统的Raft算法</title>
      <link>http://shanks.link/blog/2021/09/03/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84raft%E7%AE%97%E6%B3%95/</link>
      <pubDate>Fri, 03 Sep 2021 17:38:11 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/09/03/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84raft%E7%AE%97%E6%B3%95/</guid>
      <description>过去, Paxos一直是分布式协议的标准，但是Paxos难于理解，更难以实现，Google的分布式锁系统Chubby作为Paxos实现曾经遭遇</description>
    </item>
    
    <item>
      <title>More Redis internals: Tracing a GET &amp; SET</title>
      <link>http://shanks.link/blog/2021/09/02/more-redis-internals-tracing-a-get-set/</link>
      <pubDate>Thu, 02 Sep 2021 01:24:09 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/09/02/more-redis-internals-tracing-a-get-set/</guid>
      <description>原文链接 MARCH 10, 2011 In my previous article, I took a superficial look at how Redis starts up and prepares itself to process commands. In this article, I&amp;rsquo;ll follow a GET and a SET command as they move from client through the server and back. The GET will be for a key that doesn&amp;rsquo;t exist, and the SET will set that key. Then I&amp;rsquo;ll look quickly at</description>
    </item>
    
    <item>
      <title>under the hood</title>
      <link>http://shanks.link/blog/2021/09/01/under-the-hood/</link>
      <pubDate>Wed, 01 Sep 2021 19:37:20 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/09/01/under-the-hood/</guid>
      <description>by Paul Smith (@paulsmith)

How does the Redis server work?
I was curious to learn more about Redis’s internals, so I’ve been familiarizing myself with the source, largely by reading and jumping around in Emacs. After I had peeled back enough of the onion’s layers, I realized I was trying to keep track of too many details in my head, and it wasn’t clear how it all hung together. I decided to write out in narrative form how an instance of the Redis server starts up and initializes itself, and how it handles the request/response cycle with a client, as a way of explaining it to myself, hopefully in a clear fashion.</description>
    </item>
    
    <item>
      <title>深入理解Linux IO模型(二)</title>
      <link>http://shanks.link/blog/2021/08/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux-io%E6%A8%A1%E5%9E%8B%E4%BA%8C/</link>
      <pubDate>Thu, 26 Aug 2021 18:09:43 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux-io%E6%A8%A1%E5%9E%8B%E4%BA%8C/</guid>
      <description>深入理解Linux IO模型(二) 原创 Pearl Pearl的仲夏夜之梦 6月13日 为何使用epollselect的缺陷epoll的提出epoll的原理数</description>
    </item>
    
    <item>
      <title>深入理解Linux IO模型(一)</title>
      <link>http://shanks.link/blog/2021/08/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux-io%E6%A8%A1%E5%9E%8B%E4%B8%80/</link>
      <pubDate>Thu, 26 Aug 2021 17:50:32 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux-io%E6%A8%A1%E5%9E%8B%E4%B8%80/</guid>
      <description>深入理解Linux IO模型(一) 原创 Pearl Pearl的仲夏夜之梦 6月12日 Linux IO模型是后端工程师的必备技能。从以往的面试中看，部分后端开发人员对</description>
    </item>
    
    <item>
      <title>Redis的47连环炮，试试你能看住几个 -面前复习</title>
      <link>http://shanks.link/blog/2021/08/26/redis%E7%9A%8447%E8%BF%9E%E7%8E%AF%E7%82%AE%E8%AF%95%E8%AF%95%E4%BD%A0%E8%83%BD%E7%9C%8B%E4%BD%8F%E5%87%A0%E4%B8%AA-%E9%9D%A2%E5%89%8D%E5%A4%8D%E4%B9%A0/</link>
      <pubDate>Thu, 26 Aug 2021 00:59:58 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/26/redis%E7%9A%8447%E8%BF%9E%E7%8E%AF%E7%82%AE%E8%AF%95%E8%AF%95%E4%BD%A0%E8%83%BD%E7%9C%8B%E4%BD%8F%E5%87%A0%E4%B8%AA-%E9%9D%A2%E5%89%8D%E5%A4%8D%E4%B9%A0/</guid>
      <description>java后端技术全栈 写在前面 大家好，我是老田，前面我们已经分享了五篇连环炮文章，今天我们继续。今天我们接着来聊聊Redis。Redis已经成</description>
    </item>
    
    <item>
      <title>redis基础数据结构skiplist</title>
      <link>http://shanks.link/blog/2021/08/25/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84skiplist/</link>
      <pubDate>Wed, 25 Aug 2021 15:18:17 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/25/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84skiplist/</guid>
      <description>以下内容转载自csdn-Knight0xffff 太长不看版 跳跃表是有序集合的底层实现之一， 除此之外它在 Redis 中没有其他应用。 每个跳跃表节点的层高</description>
    </item>
    
    <item>
      <title>操作系统基础56-磁盘调度算法</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8056-%E7%A3%81%E7%9B%98%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 25 Aug 2021 11:30:26 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8056-%E7%A3%81%E7%9B%98%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</guid>
      <description>操作系统基础56-磁盘调度算法 2021-02-08 02:15·重学IT的老猫 操作系统的职责之一是有效使用硬件。对于磁盘驱动器，满足这个要求具有较快的访问速度和</description>
    </item>
    
    <item>
      <title>操作系统基础55-磁盘冗余阵列RAID</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8055-%E7%A3%81%E7%9B%98%E5%86%97%E4%BD%99%E9%98%B5%E5%88%97raid/</link>
      <pubDate>Wed, 25 Aug 2021 11:29:04 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8055-%E7%A3%81%E7%9B%98%E5%86%97%E4%BD%99%E9%98%B5%E5%88%97raid/</guid>
      <description>操作系统基础55-磁盘冗余阵列RAID 2021-02-07 01:17·重学IT的老猫 磁盘驱动器继续变得更小更便宜，如今在一台计算机系统上连接许多磁盘从经济上来</description>
    </item>
    
    <item>
      <title>操作系统基础54-磁盘管理</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8054-%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/</link>
      <pubDate>Wed, 25 Aug 2021 11:27:55 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8054-%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/</guid>
      <description>操作系统基础54-磁盘管理 2021-02-06 01:09·重学IT的老猫 操作系统还负责磁盘管理的其他几个方面。本节讨论磁盘初始化、磁盘引导、坏块恢复等。 磁盘格</description>
    </item>
    
    <item>
      <title>操作系统基础53-磁盘连接</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8053-%E7%A3%81%E7%9B%98%E8%BF%9E%E6%8E%A5/</link>
      <pubDate>Wed, 25 Aug 2021 11:26:11 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8053-%E7%A3%81%E7%9B%98%E8%BF%9E%E6%8E%A5/</guid>
      <description>操作系统基础53-磁盘连接 2021-02-04 02:24·重学IT的老猫 计算机访问磁盘存储有3种方式： 通过 I/O 端口（或直接连接存储(又称“直连式存储”，DAS)</description>
    </item>
    
    <item>
      <title>操作系统基础52-磁盘物理结构</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8052-%E7%A3%81%E7%9B%98%E7%89%A9%E7%90%86%E7%BB%93%E6%9E%84/</link>
      <pubDate>Wed, 25 Aug 2021 11:18:53 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8052-%E7%A3%81%E7%9B%98%E7%89%A9%E7%90%86%E7%BB%93%E6%9E%84/</guid>
      <description>操作系统基础52-磁盘物理结构 2021-02-03 01:25·重学IT的老猫 磁盘 由于内存通常太小而且不能永久保存所有数据和程序，因此计算机系统必须提供外存来备</description>
    </item>
    
    <item>
      <title>操作系统基础51-磁盘空间的分配方法</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8051-%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E7%9A%84%E5%88%86%E9%85%8D%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 25 Aug 2021 11:17:42 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8051-%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E7%9A%84%E5%88%86%E9%85%8D%E6%96%B9%E6%B3%95/</guid>
      <description>操作系统基础51-磁盘空间的分配方法 2021-01-31 20:49·重学IT的老猫 磁盘直接访问的特点在文件实现时提供了灵活性。在几乎每种情况下，很多文件都是存</description>
    </item>
    
    <item>
      <title>操作系统基础50-文件系统实现</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8050-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 25 Aug 2021 11:16:12 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8050-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0/</guid>
      <description>操作系统基础50-文件系统实现 2021-01-30 02:32·重学IT的老猫 文件系统提供了在线存储和访问包括数据和程序在内的文件内容的机制，文件系统永久地驻留</description>
    </item>
    
    <item>
      <title>操作系统基础49-文件共享与保护</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8049-%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E4%B8%8E%E4%BF%9D%E6%8A%A4/</link>
      <pubDate>Wed, 25 Aug 2021 11:14:52 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8049-%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E4%B8%8E%E4%BF%9D%E6%8A%A4/</guid>
      <description>操作系统基础49-文件共享与保护 2021-01-29 02:34·重学IT的老猫 文件共享 1、多用户 Linux是一个真实的、完整的多用户多任务操作系统，多用户多任</description>
    </item>
    
    <item>
      <title>操作系统基础48-目录结构</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8048-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</link>
      <pubDate>Wed, 25 Aug 2021 11:13:41 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8048-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</guid>
      <description>操作系统基础48-目录结构 2021-01-28 02:06·重学IT的老猫 1. 存储结构 文件存储在随机存取设备上，包括硬盘、光盘和固态(基于内存)盘。 一个磁盘可以划</description>
    </item>
    
    <item>
      <title>操作系统基础47-文件访问方法</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8047-%E6%96%87%E4%BB%B6%E8%AE%BF%E9%97%AE%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 25 Aug 2021 11:12:32 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8047-%E6%96%87%E4%BB%B6%E8%AE%BF%E9%97%AE%E6%96%B9%E6%B3%95/</guid>
      <description>操作系统基础47-文件访问方法 2021-01-27 01:58·重学IT的老猫 文件存储信息。当使用时，必须访问这种信息，并将其读到计算机内存。文件信息可按多种方</description>
    </item>
    
    <item>
      <title>操作系统基础46-文件系统</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8046-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Wed, 25 Aug 2021 11:11:07 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8046-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</guid>
      <description>操作系统基础46-文件系统 2021-01-26 01:05·重学IT的老猫 计算机可以在各种存储介质（诸如磁盘、磁带和光盘）上存储信息。为了方便使用计算机系统，操</description>
    </item>
    
    <item>
      <title>两数字之和</title>
      <link>http://shanks.link/blog/2021/08/25/%E4%B8%A4%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Wed, 25 Aug 2021 01:04:23 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/25/%E4%B8%A4%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/</guid>
      <description>场景描述 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。 你可以假设每种输入</description>
    </item>
    
    <item>
      <title>单链表-反转</title>
      <link>http://shanks.link/blog/2021/08/25/%E5%8D%95%E9%93%BE%E8%A1%A8-%E5%8F%8D%E8%BD%AC/</link>
      <pubDate>Wed, 25 Aug 2021 00:56:24 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/25/%E5%8D%95%E9%93%BE%E8%A1%A8-%E5%8F%8D%E8%BD%AC/</guid>
      <description>问题描述 给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。 解答代码 /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ struct ListNode* reverseList(struct ListNode* head){ struct ListNode *pre = NULL, *cur = head, *next</description>
    </item>
    
    <item>
      <title>操作系统基础45-伙伴系统和slab内存分配</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8045-%E4%BC%99%E4%BC%B4%E7%B3%BB%E7%BB%9F%E5%92%8Cslab%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</link>
      <pubDate>Wed, 25 Aug 2021 00:13:53 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8045-%E4%BC%99%E4%BC%B4%E7%B3%BB%E7%BB%9F%E5%92%8Cslab%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</guid>
      <description>操作系统基础45-伙伴系统和slab内存分配 2021-01-25 13:48·重学IT的老猫 当在用户模式下运行进程请求额外内存时，从内核维护的空闲页帧列表上分配</description>
    </item>
    
    <item>
      <title>操作系统基础44-内存映射文件</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8044-%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6/</link>
      <pubDate>Wed, 25 Aug 2021 00:11:31 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8044-%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6/</guid>
      <description>操作系统基础44-内存映射文件 2021-01-23 11:17·重学IT的老猫 假设采用标准系统调用 open()、read() 和 write() 来顺序读取磁盘文件，每个文件访问</description>
    </item>
    
    <item>
      <title>操作系统基础43-帧分配</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8043-%E5%B8%A7%E5%88%86%E9%85%8D/</link>
      <pubDate>Wed, 25 Aug 2021 00:09:58 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8043-%E5%B8%A7%E5%88%86%E9%85%8D/</guid>
      <description>操作系统基础43-帧分配 2021-01-22 23:00·重学IT的老猫 如何在各个进程之间分配一定的空闲内存？ 简单办法是将帧挂在空闲帧链表上，当发生页错误之时即</description>
    </item>
    
    <item>
      <title>操作系统基础42-系统抖动及解决方法</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8042-%E7%B3%BB%E7%BB%9F%E6%8A%96%E5%8A%A8%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 25 Aug 2021 00:08:22 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8042-%E7%B3%BB%E7%BB%9F%E6%8A%96%E5%8A%A8%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid>
      <description>操作系统基础42-系统抖动及解决方法 2021-01-21 21:14·重学IT的老猫 什么是系统抖动 如果低优先级进程所分配的帧数低于计算机体系结构所需的最小数量，</description>
    </item>
    
    <item>
      <title>操作系统基础41-LRU页面置换</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8041-lru%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2/</link>
      <pubDate>Wed, 25 Aug 2021 00:07:03 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8041-lru%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2/</guid>
      <description>操作系统基础41-LRU页面置换 2021-01-06 11:53·重学IT的老猫 如果最优算法不可行，那么最优算法的近似或许成为可能。FIFO和最优页面置换(OP</description>
    </item>
    
    <item>
      <title>操作系统基础40-最优页面置换</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8040-%E6%9C%80%E4%BC%98%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2/</link>
      <pubDate>Wed, 25 Aug 2021 00:05:44 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8040-%E6%9C%80%E4%BC%98%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2/</guid>
      <description>操作系统基础40-最优页面置换 2021-01-06 01:28·重学IT的老猫 发现 Belady 异常的一个结果是寻找最优页面置换算法，这个算法具有所有算法的最低的缺页错误率</description>
    </item>
    
    <item>
      <title>操作系统基础39-FIFO页面置换</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8039-fifo%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2/</link>
      <pubDate>Tue, 24 Aug 2021 23:33:30 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8039-fifo%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2/</guid>
      <description>操作系统基础39-FIFO页面置换 2021-01-04 01:25·重学IT的老猫 进程运行时，若其访问的页面不在内存而需将其调入，但内存已无空闲空间时，就需要从</description>
    </item>
    
    <item>
      <title>操作系统基础38-写时复制技术</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8038-%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Tue, 24 Aug 2021 23:31:51 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8038-%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6%E6%8A%80%E6%9C%AF/</guid>
      <description>操作系统基础38-写时复制技术 2021-01-03 17:04·重学IT的老猫 前面学习一个进程如何采用请求调页，仅调入包括第一条指令的页面，从而能够很 快开始执行</description>
    </item>
    
    <item>
      <title>操作系统基础37-请求调页的性能</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8037-%E8%AF%B7%E6%B1%82%E8%B0%83%E9%A1%B5%E7%9A%84%E6%80%A7%E8%83%BD/</link>
      <pubDate>Tue, 24 Aug 2021 23:30:08 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8037-%E8%AF%B7%E6%B1%82%E8%B0%83%E9%A1%B5%E7%9A%84%E6%80%A7%E8%83%BD/</guid>
      <description>操作系统基础37-请求调页的性能 2020-12-29 01:08·重学IT的老猫 请求调页可以显著影响计算机系统的性能。为了说明起见，下面计算一下请求调页内存的有</description>
    </item>
    
    <item>
      <title>操作系统基础36-请求页面调度概念</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8036-%E8%AF%B7%E6%B1%82%E9%A1%B5%E9%9D%A2%E8%B0%83%E5%BA%A6%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Tue, 24 Aug 2021 22:36:26 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8036-%E8%AF%B7%E6%B1%82%E9%A1%B5%E9%9D%A2%E8%B0%83%E5%BA%A6%E6%A6%82%E5%BF%B5/</guid>
      <description>操作系统基础36-请求页面调度概念 2020-12-28 10:54·重学IT的老猫 如何从磁盘加载可执行程序到内存? 一种选择是在程序执行时将整个程序加载到物理内存</description>
    </item>
    
    <item>
      <title>操作系统基础35-什么是虚拟内存</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8035-%E4%BB%80%E4%B9%88%E6%98%AF%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</link>
      <pubDate>Tue, 24 Aug 2021 22:25:55 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8035-%E4%BB%80%E4%B9%88%E6%98%AF%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</guid>
      <description>操作系统基础35-什么是虚拟内存 2020-12-27 15:32·重学IT的老猫 分页，分段这些策略都有相同的目标，就是同时将多个进程保存在内存中，以便允许多道程</description>
    </item>
    
    <item>
      <title>操作系统基础34-页表结构</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8034-%E9%A1%B5%E8%A1%A8%E7%BB%93%E6%9E%84/</link>
      <pubDate>Tue, 24 Aug 2021 22:24:42 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8034-%E9%A1%B5%E8%A1%A8%E7%BB%93%E6%9E%84/</guid>
      <description>操作系统基础34-页表结构 2020-12-24 13:01·重学IT的老猫 下面将探讨组织页表的一些最常用技术，包括分层分页、哈希页表和倒置页表。 分层分页 大多数现</description>
    </item>
    
    <item>
      <title>操作系统基础33-内存管理-分页</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8033-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%88%86%E9%A1%B5/</link>
      <pubDate>Tue, 24 Aug 2021 22:23:15 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8033-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%88%86%E9%A1%B5/</guid>
      <description>操作系统基础33-内存管理-分页 2020-12-21 12:10·重学IT的老猫 分段允许进程的物理地址空间是非连续的。分页是提供这种优势的另一种内存管理方案。然</description>
    </item>
    
    <item>
      <title>操作系统基础32-内存管理-分段</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8032-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%88%86%E6%AE%B5/</link>
      <pubDate>Tue, 24 Aug 2021 22:21:41 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8032-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%88%86%E6%AE%B5/</guid>
      <description>操作系统基础32-内存管理-分段 2020-12-20 03:27·重学IT的老猫 通过前面的学习我们知道，用户的内存视图与实际的物理内存不一样。这同样适用于程序员</description>
    </item>
    
    <item>
      <title>操作系统基础31-连续内存分配</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8031-%E8%BF%9E%E7%BB%AD%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</link>
      <pubDate>Tue, 24 Aug 2021 22:19:46 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8031-%E8%BF%9E%E7%BB%AD%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</guid>
      <description>操作系统基础31-连续内存分配 2020-12-19 03:40·重学IT的老猫 内存应容纳操作系统和各种用户进程，因此应该尽可能有效地分配内存。下面介绍一种早期方</description>
    </item>
    
    <item>
      <title>HyperLogLog 算法详解</title>
      <link>http://shanks.link/blog/2021/08/24/hyperloglog-%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 24 Aug 2021 18:23:20 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/24/hyperloglog-%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/</guid>
      <description>首发于技术猫开源俱乐部 HyperLogLog 算法详解 Abser Ari 基数计数基本概念 概率算法 实际上目前还没有发现更好的在大数据场景中准确计算基数的高效算法，因此在不追求绝对</description>
    </item>
    
    <item>
      <title>放下自我-认识世界</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%94%BE%E4%B8%8B%E8%87%AA%E6%88%91-%E8%AE%A4%E8%AF%86%E4%B8%96%E7%95%8C/</link>
      <pubDate>Tue, 24 Aug 2021 15:53:00 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/24/%E6%94%BE%E4%B8%8B%E8%87%AA%E6%88%91-%E8%AE%A4%E8%AF%86%E4%B8%96%E7%95%8C/</guid>
      <description>昨晚睡的晚，1点才睡。今天又起的早，所以白天精神欠佳。下午看算法（HyperLogLog），网上的资料讲得云里雾里，转念一想，这个状态不适合</description>
    </item>
    
    <item>
      <title>操作系统基础30-内存交换</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8030-%E5%86%85%E5%AD%98%E4%BA%A4%E6%8D%A2/</link>
      <pubDate>Tue, 24 Aug 2021 11:50:20 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8030-%E5%86%85%E5%AD%98%E4%BA%A4%E6%8D%A2/</guid>
      <description>操作系统基础30-内存交换 2020-12-17 15:21·重学IT的老猫 进程必须在内存中以便执行。不过，进程可以暂时从内存交换到备份存储，当再次执行时再调回到</description>
    </item>
    
    <item>
      <title>操作系统基础29-内存管理的概念</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8029-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%9A%84%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Tue, 24 Aug 2021 11:44:12 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8029-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%9A%84%E6%A6%82%E5%BF%B5/</guid>
      <description>操作系统基础29-内存管理的概念 2020-12-18 03:37·重学IT的老猫 操作系统作为系统资源的管理者，当然也需要对内存进行管理，要管些什么呢? \1. 操作系统</description>
    </item>
    
    <item>
      <title>操作系统基础28-内存基础知识</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8028-%E5%86%85%E5%AD%98%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Tue, 24 Aug 2021 11:42:30 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8028-%E5%86%85%E5%AD%98%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>操作系统基础28-内存基础知识 2020-12-16 05:59·重学IT的老猫 什么是内存，有何作用 进程运行的原理-指令 我们写的代码要翻译成CPU能识别的指令。这</description>
    </item>
    
    <item>
      <title>操作系统基础27-存储器管理</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8027-%E5%AD%98%E5%82%A8%E5%99%A8%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 24 Aug 2021 11:40:53 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8027-%E5%AD%98%E5%82%A8%E5%99%A8%E7%AE%A1%E7%90%86/</guid>
      <description>操作系统基础27-存储器管理 2020-12-15 13:37·重学IT的老猫 前言 在前面学习了处理器调度后，下面接着学习存储器管理，如何对存储器进行有效的管理，直</description>
    </item>
    
    <item>
      <title>操作系统基础26-多级反馈队列调度算法</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8026-%E5%A4%9A%E7%BA%A7%E5%8F%8D%E9%A6%88%E9%98%9F%E5%88%97%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 24 Aug 2021 01:11:41 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8026-%E5%A4%9A%E7%BA%A7%E5%8F%8D%E9%A6%88%E9%98%9F%E5%88%97%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</guid>
      <description>操作系统基础26-多级反馈队列调度算法 2020-12-02 01:54·重学IT的老猫 通常在使用**多级队列调度算法**时，进程进入系统时被永久地分配到某个队列</description>
    </item>
    
    <item>
      <title>操作系统基础25-多级队列调度算法</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8025-%E5%A4%9A%E7%BA%A7%E9%98%9F%E5%88%97%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 24 Aug 2021 01:10:32 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8025-%E5%A4%9A%E7%BA%A7%E9%98%9F%E5%88%97%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</guid>
      <description>操作系统基础25-多级队列调度算法 2020-12-01 13:30·重学IT的老猫 在进程容易分成不同组的情况下，可以有另一类调度算法。例如，进程通常分为前台进程</description>
    </item>
    
    <item>
      <title>操作系统基础24-轮转调度</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8024-%E8%BD%AE%E8%BD%AC%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Tue, 24 Aug 2021 01:09:12 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8024-%E8%BD%AE%E8%BD%AC%E8%B0%83%E5%BA%A6/</guid>
      <description>操作系统基础24-轮转调度(RR)算法 2020-11-30 11:05·重学IT的老猫 时间片轮转（RR）调度算法是专门为分时系统设计的。它类似于FCFS调度，但</description>
    </item>
    
    <item>
      <title>操作系统基础23-优先级调度算法</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8023-%E4%BC%98%E5%85%88%E7%BA%A7%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 24 Aug 2021 01:07:39 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8023-%E4%BC%98%E5%85%88%E7%BA%A7%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</guid>
      <description>操作系统基础23-优先级调度算法 2020-11-29 17:17·重学IT的老猫 上一篇学习了最短作业优先(SJF)算法是通用优先级调度(priority-sch</description>
    </item>
    
    <item>
      <title>操作系统基础22-最短作业优先(SJF)调度算法</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8022-%E6%9C%80%E7%9F%AD%E4%BD%9C%E4%B8%9A%E4%BC%98%E5%85%88sjf%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 24 Aug 2021 01:04:12 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8022-%E6%9C%80%E7%9F%AD%E4%BD%9C%E4%B8%9A%E4%BC%98%E5%85%88sjf%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</guid>
      <description>操作系统基础22-最短作业优先(SJF)调度算法 2020-11-28 17:16·重学IT的老猫 最短作业优先( Shortest Job First SJF)调度算法将每个进程与其下次CPU执行</description>
    </item>
    
    <item>
      <title>操作系统基础21-先来先服务调度(FCFS)算法</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8021-%E5%85%88%E6%9D%A5%E5%85%88%E6%9C%8D%E5%8A%A1%E8%B0%83%E5%BA%A6fcfs%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 24 Aug 2021 00:35:44 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8021-%E5%85%88%E6%9D%A5%E5%85%88%E6%9C%8D%E5%8A%A1%E8%B0%83%E5%BA%A6fcfs%E7%AE%97%E6%B3%95/</guid>
      <description>操作系统基础21-先来先服务调度(FCFS)算法 2020-11-24 09:51·重学IT的老猫 作业、进程和程序之间的联系： 一个作业(job)通常包括程序、数据</description>
    </item>
    
    <item>
      <title>操作系统基础20-调度算法的评价指标</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8020-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%E7%9A%84%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/</link>
      <pubDate>Tue, 24 Aug 2021 00:28:29 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8020-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%E7%9A%84%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/</guid>
      <description>操作系统基础20-调度算法的评价指标 2020-11-23 10:08·重学IT的老猫 不同的CPU调度算法具有不同属性，选择一个特定算法会对某些进程更为有利。为了</description>
    </item>
    
    <item>
      <title>操作系统基础19-CPU调度</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8019-cpu%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Tue, 24 Aug 2021 00:26:41 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8019-cpu%E8%B0%83%E5%BA%A6/</guid>
      <description>操作系统基础19-CPU调度 2020-11-20 13:11·重学IT的老猫 本节是对操作系统基础12-进程调度的一个补充学习。 CPU调度是多道程序操作系统的基础</description>
    </item>
    
    <item>
      <title>操作系统基础18-死锁</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8018-%E6%AD%BB%E9%94%81/</link>
      <pubDate>Tue, 24 Aug 2021 00:25:10 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8018-%E6%AD%BB%E9%94%81/</guid>
      <description>操作系统基础18-死锁 2020-11-18 10:19·重学IT的老猫 在多道程序环境中，多个进程可以竞争有限数量的资源。当一个进程申请资源时，如果这时没有可用资</description>
    </item>
    
    <item>
      <title>操作系统基础17-哲学家就餐问题</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8017-%E5%93%B2%E5%AD%A6%E5%AE%B6%E5%B0%B1%E9%A4%90%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 24 Aug 2021 00:23:44 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8017-%E5%93%B2%E5%AD%A6%E5%AE%B6%E5%B0%B1%E9%A4%90%E9%97%AE%E9%A2%98/</guid>
      <description>操作系统基础17-哲学家就餐问题 2020-11-13 15:55·重学IT的老猫 哲学家就餐问题(dining-philosophers problem)是一个经典</description>
    </item>
    
    <item>
      <title>操作系统基础16-读者写者问题</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8016-%E8%AF%BB%E8%80%85%E5%86%99%E8%80%85%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 24 Aug 2021 00:22:24 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8016-%E8%AF%BB%E8%80%85%E5%86%99%E8%80%85%E9%97%AE%E9%A2%98/</guid>
      <description>操作系统基础16-读者写者问题 2020-11-12 00:56·重学IT的老猫 进程同步问题是一个非常重要且相当有趣的问题，本篇我们对其中比较有名的读者-写者问题</description>
    </item>
    
    <item>
      <title>操作系统基础15-生产者消费者问题</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8015-%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 24 Aug 2021 00:20:52 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8015-%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/</guid>
      <description>操作系统基础15-生产者消费者问题 2020-11-11 11:37·重学IT的老猫 在上一篇操作系统基础14提到通过信号量解决生产者消费者问题。本篇来详细说说操作</description>
    </item>
    
    <item>
      <title>redis源码推荐阅读顺序</title>
      <link>http://shanks.link/blog/2021/08/23/redis%E6%BA%90%E7%A0%81%E6%8E%A8%E8%8D%90%E9%98%85%E8%AF%BB%E9%A1%BA%E5%BA%8F/</link>
      <pubDate>Mon, 23 Aug 2021 19:45:13 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/23/redis%E6%BA%90%E7%A0%81%E6%8E%A8%E8%8D%90%E9%98%85%E8%AF%BB%E9%A1%BA%E5%BA%8F/</guid>
      <description>转载自黄健宏的博客 在这篇文章中， 我将向大家介绍一种我认为比较合理的 Redis 源码阅读顺序， 希望可以给对 Redis 有兴趣并打算阅读 Redis 源码的朋友带来一点帮助。 第</description>
    </item>
    
    <item>
      <title>redis独立模块-慢查询日志</title>
      <link>http://shanks.link/blog/2021/08/23/redis%E7%8B%AC%E7%AB%8B%E6%A8%A1%E5%9D%97-%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97/</link>
      <pubDate>Mon, 23 Aug 2021 16:02:14 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/23/redis%E7%8B%AC%E7%AB%8B%E6%A8%A1%E5%9D%97-%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97/</guid>
      <description>数据结构 /* This structure defines an entry inside the slow log list */ typedef struct slowlogEntry { robj **argv; int argc; long long id; /* Unique entry identifier. */ long long duration; /* Time spent by the query, in nanoseconds. */ time_t time; /* Unix time at which the query was executed. */ } slowlogEntry; 特点 超过阈值时长的操作会</description>
    </item>
    
    <item>
      <title>操作系统基础14-同步与互斥机制</title>
      <link>http://shanks.link/blog/2021/08/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8014-%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BA%92%E6%96%A5%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sun, 22 Aug 2021 11:49:52 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8014-%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BA%92%E6%96%A5%E6%9C%BA%E5%88%B6/</guid>
      <description>操作系统基础14-同步与互斥机制 2020-11-10 22:55·重学IT的老猫 上一篇介绍操心系统中的同步互斥的基本概念，本篇继续对同步互斥进行学习 锁机制 基本概</description>
    </item>
    
    <item>
      <title>操作系统基础13-进程同步与互斥的概念</title>
      <link>http://shanks.link/blog/2021/08/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8013-%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BA%92%E6%96%A5%E7%9A%84%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Sun, 22 Aug 2021 11:22:53 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8013-%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BA%92%E6%96%A5%E7%9A%84%E6%A6%82%E5%BF%B5/</guid>
      <description>操作系统基础13-进程同步与互斥的概念 2020-11-02 11:26·重学IT的老猫 进程同步是一个操作系统级别的概念，在多道程序环境下，进程是并发执行的，不同</description>
    </item>
    
    <item>
      <title>操作系统基础12-进程调度</title>
      <link>http://shanks.link/blog/2021/08/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8012-%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Sun, 22 Aug 2021 11:13:38 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8012-%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/</guid>
      <description>操作系统基础12-进程调度 2020-10-30 11:59·重学IT的老猫 前面操作系统基础8和操作系统基础10已经学习关于进程和线程的的基础知识，本次我们继续学</description>
    </item>
    
    <item>
      <title>操作系统基础11-关于多核编程</title>
      <link>http://shanks.link/blog/2021/08/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8011-%E5%85%B3%E4%BA%8E%E5%A4%9A%E6%A0%B8%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Sun, 22 Aug 2021 11:06:27 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8011-%E5%85%B3%E4%BA%8E%E5%A4%9A%E6%A0%B8%E7%BC%96%E7%A8%8B/</guid>
      <description>2020-10-26 12:43·重学IT的老猫 之前，CPU的性能还主要取决于CPU的主频，经过超摩尔定律的发展后，没过多长时间CPU的主频速度就已接近“极限”</description>
    </item>
    
    <item>
      <title>操作系统基础10-线程及多线程模型</title>
      <link>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8010-%E7%BA%BF%E7%A8%8B%E5%8F%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Sat, 21 Aug 2021 20:26:22 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8010-%E7%BA%BF%E7%A8%8B%E5%8F%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</guid>
      <description>操作系统基础10-线程及多线程模型 2020-10-23 14:42·重学IT的老猫 什么是线程 线程（thread）是操作系统能够进行运算调度的最小单位。它被包含在</description>
    </item>
    
    <item>
      <title>操作系统基础9-进程通信IPC</title>
      <link>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%809-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1ipc/</link>
      <pubDate>Sat, 21 Aug 2021 17:54:41 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%809-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1ipc/</guid>
      <description>操作系统基础9-进程通信IPC 2020-10-21 18:00·重学IT的老猫 什么是进程通信？ 进程通信(Interprocess Communication)就是</description>
    </item>
    
    <item>
      <title>操作系统基础8-进程及进程控制</title>
      <link>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%808-%E8%BF%9B%E7%A8%8B%E5%8F%8A%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Sat, 21 Aug 2021 15:58:32 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%808-%E8%BF%9B%E7%A8%8B%E5%8F%8A%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid>
      <description>操作系统基础8-进程及进程控制 2020-10-20 17:44·重学IT的老猫 进程(Process) 的定义 从不同的角度，进程可以有不同的定义，传统典型的定义： 进</description>
    </item>
    
    <item>
      <title>操作系统基础7-支持操作系统的最基本的硬件-时钟</title>
      <link>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%807-%E6%94%AF%E6%8C%81%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84%E7%A1%AC%E4%BB%B6-%E6%97%B6%E9%92%9F/</link>
      <pubDate>Sat, 21 Aug 2021 15:23:29 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%807-%E6%94%AF%E6%8C%81%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84%E7%A1%AC%E4%BB%B6-%E6%97%B6%E9%92%9F/</guid>
      <description>操作系统基础7-支持操作系统的最基本的硬件-时钟 2020-10-19 13:21·重学IT的老猫 时钟又称为计时器，简单来说作用就是负责维护时间。 可以分为两种时间</description>
    </item>
    
    <item>
      <title>操作系统基础6-支持操作系统的最基本的硬件-中断</title>
      <link>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%806-%E6%94%AF%E6%8C%81%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84%E7%A1%AC%E4%BB%B6-%E4%B8%AD%E6%96%AD/</link>
      <pubDate>Sat, 21 Aug 2021 15:05:05 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%806-%E6%94%AF%E6%8C%81%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84%E7%A1%AC%E4%BB%B6-%E4%B8%AD%E6%96%AD/</guid>
      <description>操作系统基础6-支持操作系统的最基本的硬件-中断 2020-10-17 20:54·重学IT的老猫 无论是桌面PC操作系统还是嵌入式都是多任务的操作系统，而很遗憾，</description>
    </item>
    
    <item>
      <title>操作系统基础5-支持操作系统的最基本的硬件-内存</title>
      <link>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%805-%E6%94%AF%E6%8C%81%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84%E7%A1%AC%E4%BB%B6-%E5%86%85%E5%AD%98/</link>
      <pubDate>Sat, 21 Aug 2021 14:51:33 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%805-%E6%94%AF%E6%8C%81%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84%E7%A1%AC%E4%BB%B6-%E5%86%85%E5%AD%98/</guid>
      <description>操作系统基础5-支持操作系统的最基本的硬件-内存 2020-10-15 16:23·重学IT的老猫 在操心系统基础4我们已经介绍了OS依赖的重要硬件CPU，下面我们</description>
    </item>
    
    <item>
      <title>操作系统基础4-支持操作系统的最基本硬件-CPU</title>
      <link>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%804-%E6%94%AF%E6%8C%81%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%A1%AC%E4%BB%B6-cpu/</link>
      <pubDate>Sat, 21 Aug 2021 11:05:01 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%804-%E6%94%AF%E6%8C%81%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%A1%AC%E4%BB%B6-cpu/</guid>
      <description>操作系统基础4-支持操作系统的最基本硬件-CPU 2020-10-14 11:24·重学IT的老猫 从操作系统基础1我们已经知道：操作系统作为用户与计算机硬件直接的</description>
    </item>
    
    <item>
      <title>操作系统基础3-宏内核与微内核</title>
      <link>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%803-%E5%AE%8F%E5%86%85%E6%A0%B8%E4%B8%8E%E5%BE%AE%E5%86%85%E6%A0%B8/</link>
      <pubDate>Sat, 21 Aug 2021 10:15:56 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%803-%E5%AE%8F%E5%86%85%E6%A0%B8%E4%B8%8E%E5%BE%AE%E5%86%85%E6%A0%B8/</guid>
      <description>操作系统基础3-宏内核与微内核 2020-10-11 22:04·转载自重学IT的老猫 操作系统的内核 内核 是计算机上配置的底层软件，是操作系统最基本、最核心的部分。</description>
    </item>
    
    <item>
      <title>操作系统基础2-发展及分类</title>
      <link>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%802-%E5%8F%91%E5%B1%95%E5%8F%8A%E5%88%86%E7%B1%BB/</link>
      <pubDate>Sat, 21 Aug 2021 09:36:47 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%802-%E5%8F%91%E5%B1%95%E5%8F%8A%E5%88%86%E7%B1%BB/</guid>
      <description>操作系统基础2-发展及分类 2020-10-10 17:50·重学IT的老猫 穿孔卡片 图形操作系统鼻祖-Alto 按照操作系统的使用环境及处理方式的不同，一般可以把操</description>
    </item>
    
    <item>
      <title>操作系统基础1-功能目标及特征</title>
      <link>http://shanks.link/blog/2021/08/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%801-%E5%8A%9F%E8%83%BD%E7%9B%AE%E6%A0%87%E5%8F%8A%E7%89%B9%E5%BE%81/</link>
      <pubDate>Fri, 20 Aug 2021 17:15:15 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%801-%E5%8A%9F%E8%83%BD%E7%9B%AE%E6%A0%87%E5%8F%8A%E7%89%B9%E5%BE%81/</guid>
      <description>操作系统基础1-功能目标及特征 2020-10-09 15:03·重学IT的老猫 操作系统(Operating System，简称OS)是管理计算机硬件与软件资源的计</description>
    </item>
    
    <item>
      <title>动图图解！既然IP层会分片，为什么TCP层也还要分段？</title>
      <link>http://shanks.link/blog/2021/08/20/%E5%8A%A8%E5%9B%BE%E5%9B%BE%E8%A7%A3%E6%97%A2%E7%84%B6ip%E5%B1%82%E4%BC%9A%E5%88%86%E7%89%87%E4%B8%BA%E4%BB%80%E4%B9%88tcp%E5%B1%82%E4%B9%9F%E8%BF%98%E8%A6%81%E5%88%86%E6%AE%B5/</link>
      <pubDate>Fri, 20 Aug 2021 16:42:21 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/20/%E5%8A%A8%E5%9B%BE%E5%9B%BE%E8%A7%A3%E6%97%A2%E7%84%B6ip%E5%B1%82%E4%BC%9A%E5%88%86%E7%89%87%E4%B8%BA%E4%BB%80%E4%B9%88tcp%E5%B1%82%E4%B9%9F%E8%BF%98%E8%A6%81%E5%88%86%E6%AE%B5/</guid>
      <description>动图图解！既然IP层会分片，为什么TCP层也还要分段？ 什么是TCP分段和IP分片 我们知道网络就像一根管子，而管子吧，就会有粗细。 一个数据包想</description>
    </item>
    
    <item>
      <title>golang 中slice 、map、chan作为函数参数分析</title>
      <link>http://shanks.link/blog/2021/08/20/golang-%E4%B8%ADslice-mapchan%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 20 Aug 2021 11:07:45 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/20/golang-%E4%B8%ADslice-mapchan%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%88%86%E6%9E%90/</guid>
      <description>golang 中slice 、map、chan作为函数参数分析 写这篇文章之前考虑一个问题： go里面都是值传递，不存在引用传递？ https://cloud.tencent.com/developer/article/1416563 先来总结一下slice、m</description>
    </item>
    
    <item>
      <title>tcpip精讲</title>
      <link>http://shanks.link/blog/2021/08/20/tcpip%E7%B2%BE%E8%AE%B2/</link>
      <pubDate>Fri, 20 Aug 2021 09:20:21 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/20/tcpip%E7%B2%BE%E8%AE%B2/</guid>
      <description>本文目标 收录tcpip方面主要知识点，方便面试前复习</description>
    </item>
    
    <item>
      <title>热爱生命</title>
      <link>http://shanks.link/blog/2021/08/19/%E7%83%AD%E7%88%B1%E7%94%9F%E5%91%BD/</link>
      <pubDate>Thu, 19 Aug 2021 17:33:48 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/19/%E7%83%AD%E7%88%B1%E7%94%9F%E5%91%BD/</guid>
      <description>热爱生命 &amp;ndash; 汪国真 我不去想， 是否能够成功 ， 既然选择了远方 ， 便只顾风雨兼程。 我不去想， 能否赢得爱情 ， 既然钟情于玫瑰 ， 就勇敢地吐露真诚 。 我不去想，</description>
    </item>
    
    <item>
      <title>落后就奋起直追</title>
      <link>http://shanks.link/blog/2021/08/19/%E8%90%BD%E5%90%8E%E5%B0%B1%E5%A5%8B%E8%B5%B7%E7%9B%B4%E8%BF%BD/</link>
      <pubDate>Thu, 19 Aug 2021 15:06:20 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/19/%E8%90%BD%E5%90%8E%E5%B0%B1%E5%A5%8B%E8%B5%B7%E7%9B%B4%E8%BF%BD/</guid>
      <description>面试，三面没过，期待中的50W+年薪的工作没了，也把自己给浇醒了。工作9年，有效努力的年份也就这两年，所谓工作年限和经验不匹配说的就是我这种</description>
    </item>
    
    <item>
      <title>linux环境内存分配原理</title>
      <link>http://shanks.link/blog/2021/08/18/linux%E7%8E%AF%E5%A2%83%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 18 Aug 2021 18:28:18 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/18/linux%E7%8E%AF%E5%A2%83%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%8E%9F%E7%90%86/</guid>
      <description>linux环境内存分配原理 mallocinfo Linux的虚拟内存管理有几个关键概念： Linux 虚拟地址空间如何分布？malloc和free是如何分配和释放内存？如何</description>
    </item>
    
    <item>
      <title>数据库事务的四大原则</title>
      <link>http://shanks.link/blog/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E5%A4%A7%E5%8E%9F%E5%88%99/</link>
      <pubDate>Wed, 18 Aug 2021 15:42:20 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E5%A4%A7%E5%8E%9F%E5%88%99/</guid>
      <description>数据库的事务四大原则 说到数据库，以前我老师有一句很经典的话。你可以不会写SQL，但是一定不能不知道ACID。 在工业领域，SQL可以说是应用最</description>
    </item>
    
    <item>
      <title>跌宕起伏是常态</title>
      <link>http://shanks.link/blog/2021/08/18/%E8%B7%8C%E5%AE%95%E8%B5%B7%E4%BC%8F%E6%98%AF%E5%B8%B8%E6%80%81/</link>
      <pubDate>Wed, 18 Aug 2021 11:38:56 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/18/%E8%B7%8C%E5%AE%95%E8%B5%B7%E4%BC%8F%E6%98%AF%E5%B8%B8%E6%80%81/</guid>
      <description>昨天三面，今早得知没过，过几天再问原因，可能是学历，也可能是专业方面沾边的不多。 没过面试，一下子让人冷静了下来。 手上计划待做的事情很多，一件</description>
    </item>
    
    <item>
      <title>详解Redis源码中的部分快速排序算法pqsort</title>
      <link>http://shanks.link/blog/2021/08/16/%E8%AF%A6%E8%A7%A3redis%E6%BA%90%E7%A0%81%E4%B8%AD%E7%9A%84%E9%83%A8%E5%88%86%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95pqsort/</link>
      <pubDate>Mon, 16 Aug 2021 17:08:33 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/16/%E8%AF%A6%E8%A7%A3redis%E6%BA%90%E7%A0%81%E4%B8%AD%E7%9A%84%E9%83%A8%E5%88%86%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95pqsort/</guid>
      <description>详解Redis源码中的部分快速排序算法（pqsort.c） 转载自果冻虾仁 2015-06-07 19:08:39 看标题，你可能会疑惑：咦？你这家伙，怎么不讲解完整的快排，只讲一</description>
    </item>
    
    <item>
      <title>一键搞定 VSCode 下的 C/C&#43;&#43;基本开发环境配置</title>
      <link>http://shanks.link/blog/2021/08/13/%E4%B8%80%E9%94%AE%E6%90%9E%E5%AE%9A-vscode-%E4%B8%8B%E7%9A%84-c/c-%E5%9F%BA%E6%9C%AC%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 13 Aug 2021 11:50:48 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/13/%E4%B8%80%E9%94%AE%E6%90%9E%E5%AE%9A-vscode-%E4%B8%8B%E7%9A%84-c/c-%E5%9F%BA%E6%9C%AC%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>以下内容转载自 https://zhuanlan.zhihu.com/p/137760796 如果你能看懂并确认已做到以下两点: C/C++编译器(例如MingGW)环境已经配置好 VSCode已安装C/C++插件 那就废话</description>
    </item>
    
    <item>
      <title>常见的10种排序算法</title>
      <link>http://shanks.link/blog/2021/08/12/%E5%B8%B8%E8%A7%81%E7%9A%8410%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Thu, 12 Aug 2021 23:31:57 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/12/%E5%B8%B8%E8%A7%81%E7%9A%8410%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>[常见的排序算法——常见的10种排序] 常见算法可以分为两大类： 非线性时间比较类排序：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破</description>
    </item>
    
    <item>
      <title>任何时候都要保持冷静</title>
      <link>http://shanks.link/blog/2021/08/12/%E4%BB%BB%E4%BD%95%E6%97%B6%E5%80%99%E9%83%BD%E8%A6%81%E4%BF%9D%E6%8C%81%E5%86%B7%E9%9D%99/</link>
      <pubDate>Thu, 12 Aug 2021 15:07:24 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/12/%E4%BB%BB%E4%BD%95%E6%97%B6%E5%80%99%E9%83%BD%E8%A6%81%E4%BF%9D%E6%8C%81%E5%86%B7%E9%9D%99/</guid>
      <description>昨天面试聊的还不错，就飘飘然起来，不可。冷静啊，冷静，切记，切记。</description>
    </item>
    
    <item>
      <title>让我落泪的一个角色-范德彪</title>
      <link>http://shanks.link/blog/2021/08/11/%E8%AE%A9%E6%88%91%E8%90%BD%E6%B3%AA%E7%9A%84%E4%B8%80%E4%B8%AA%E8%A7%92%E8%89%B2-%E8%8C%83%E5%BE%B7%E5%BD%AA/</link>
      <pubDate>Wed, 11 Aug 2021 23:32:39 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/11/%E8%AE%A9%E6%88%91%E8%90%BD%E6%B3%AA%E7%9A%84%E4%B8%80%E4%B8%AA%E8%A7%92%E8%89%B2-%E8%8C%83%E5%BE%B7%E5%BD%AA/</guid>
      <description>最近比较闲，前不久看完了lua源码后，休息了一段时间，看了一个电视剧《马大帅》第一部，其中有个叫范德彪的角色，看到最后，看到范德彪得知自己得</description>
    </item>
    
    <item>
      <title>Golang知识小结</title>
      <link>http://shanks.link/blog/2021/08/10/golang%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Tue, 10 Aug 2021 20:27:06 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/10/golang%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93/</guid>
      <description>string string类型采用UTF-8编码，且不可修的，len返回byte数量而不是字符数量，eg(len(你好)==6 数组和slice 数组在函数</description>
    </item>
    
    <item>
      <title>redis-lzf压缩算法</title>
      <link>http://shanks.link/blog/2021/08/10/redis-lzf%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 10 Aug 2021 18:20:17 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/10/redis-lzf%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95/</guid>
      <description>文件 lzf.h lzfP.h lzf_c.c (压缩) lzf_d.c (解压) 压缩 默认模式是VERY_FAST 核心思想 对重复值进行压缩 通过hash表来判断是否重复数据 三种模式 模式 （压缩）时间</description>
    </item>
    
    <item>
      <title>redis基础组件-ae简介</title>
      <link>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6-ae%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 10 Aug 2021 17:15:11 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6-ae%E7%AE%80%E4%BB%8B/</guid>
      <description>数据结构 /* File event structure */ typedef struct aeFileEvent { int mask; /* one of AE_(READABLE|WRITABLE) */ aeFileProc *rfileProc; aeFileProc *wfileProc; void *clientData; } aeFileEvent; /* Time event structure */ typedef struct aeTimeEvent { long long id; /* time event identifier. */ long when_sec; /* seconds */ long when_ms; /* milliseconds */ aeTimeProc *timeProc; aeEventFinalizerProc *finalizerProc; void *clientData; struct aeTimeEvent *next; } aeTimeEvent; /* A fired event</description>
    </item>
    
    <item>
      <title>redis基础组件-anet简介</title>
      <link>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6-anet%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 10 Aug 2021 17:06:09 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6-anet%E7%AE%80%E4%BB%8B/</guid>
      <description>特点 模块非常简洁，提供了监听指定端口，链接指定地址，读，写网络句柄等功能 重要的接口函数 监听指定端口 int anetTcpServer(char *err, int port, char *bindaddr) { int s, on = 1; struct sockaddr_in sa; if ((s = socket(AF_INET, SOCK_STREAM,</description>
    </item>
    
    <item>
      <title>redis基础组件-zmalloc简介</title>
      <link>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6-zmalloc%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 10 Aug 2021 16:52:16 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6-zmalloc%E7%AE%80%E4%BB%8B/</guid>
      <description>数据结构 ------------ len|context ------------ 特点 申请内存时，自带整个MEM的len，用于统计当前进程总共消耗的MEM 模糊点 在申请内存的接口中怎么确定ptr+sizeof(</description>
    </item>
    
    <item>
      <title>redis基础数据结构-zipmap简介</title>
      <link>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-zipmap%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 10 Aug 2021 15:57:58 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-zipmap%E7%AE%80%E4%BB%8B/</guid>
      <description>数据结构 -------------------------------------------------------------------------------------------------------------------------------------------------- cnt |key1.len|key1.context|val1.len|free1.len|val1.context|null1.context|key2.len|key2.context|val2.len|free2.len|val2.context|null2.context|0xFF| -------------------------------------------------------------------------------------------------------------------------------------------------- cnt:一个字节，如果&amp;lt;ZIPMAP_BIGLEN(254),则是key-val对的数量，否则==ZIPMAP_BIG</description>
    </item>
    
    <item>
      <title>redis基础数据结构-dict简介</title>
      <link>http://shanks.link/blog/2021/08/09/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-dict%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 09 Aug 2021 15:57:56 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/09/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-dict%E7%AE%80%E4%BB%8B/</guid>
      <description>数据结构 typedef struct dictEntry { void *key; void *val; struct dictEntry *next; } dictEntry; /* This is our hash table structure. Every dictionary has two of this as we * implement incremental rehashing, for the old to the new table. */ typedef struct dictht { dictEntry **table; unsigned long size; unsigned long sizemask; unsigned long used; } dictht; typedef struct dict { dictType *type; void *privdata; dictht</description>
    </item>
    
    <item>
      <title>redis基础数据结构-list简介</title>
      <link>http://shanks.link/blog/2021/08/06/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-list%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Fri, 06 Aug 2021 18:01:06 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/06/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-list%E7%AE%80%E4%BB%8B/</guid>
      <description>数据结构 typedef struct listNode { struct listNode *prev; struct listNode *next; void *value; } listNode; typedef struct listIter { listNode *next; int direction; } listIter; typedef struct list { listNode *head; listNode *tail; void *(*dup)(void *ptr); void (*free)(void *ptr); int (*match)(void *ptr, void *key); unsigned int len; } list; 特点 可以转载任何类型的数据 可以定制d</description>
    </item>
    
    <item>
      <title>redis基础数据结构-sds简介</title>
      <link>http://shanks.link/blog/2021/08/06/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-sds%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Fri, 06 Aug 2021 16:55:31 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/06/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-sds%E7%AE%80%E4%BB%8B/</guid>
      <description>数据结构 /* context = &amp;#34;hello&amp;#34; * len = 5 不包含redis自动添加的&amp;#39;\0&amp;#39; * free = 0 预分配和惰性释放 * buf[5] = &amp;#39;\0&amp;#39; 自动添加一个&amp;#39;\0&amp;#39</description>
    </item>
    
    <item>
      <title>redis源码阅读计划</title>
      <link>http://shanks.link/blog/2021/08/06/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%A1%E5%88%92/</link>
      <pubDate>Fri, 06 Aug 2021 15:21:07 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/06/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%A1%E5%88%92/</guid>
      <description>整体思路 鉴于在DB和分布式方面没有啥知识储备，以及空闲时间的不确定，整体思路：从简到繁，从基础到单机再到分布式 内容计划 阅读0.0.1版本，了</description>
    </item>
    
    <item>
      <title>Go学习建议</title>
      <link>http://shanks.link/blog/2021/08/04/go%E5%AD%A6%E4%B9%A0%E5%BB%BA%E8%AE%AE/</link>
      <pubDate>Wed, 04 Aug 2021 20:10:55 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/04/go%E5%AD%A6%E4%B9%A0%E5%BB%BA%E8%AE%AE/</guid>
      <description>如果学习 Go 整理了目前市面上的各类图书，特别是开源的图书，阅读学习建议分享给你 入门建议 Go 语言入门图书挺多的，根据我的了解和大家的反馈、讨论，比</description>
    </item>
    
    <item>
      <title>3天不看源码，再看源码一脸懵逼</title>
      <link>http://shanks.link/blog/2021/08/03/3%E5%A4%A9%E4%B8%8D%E7%9C%8B%E6%BA%90%E7%A0%81%E5%86%8D%E7%9C%8B%E6%BA%90%E7%A0%81%E4%B8%80%E8%84%B8%E6%87%B5%E9%80%BC/</link>
      <pubDate>Tue, 03 Aug 2021 15:13:12 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/03/3%E5%A4%A9%E4%B8%8D%E7%9C%8B%E6%BA%90%E7%A0%81%E5%86%8D%E7%9C%8B%E6%BA%90%E7%A0%81%E4%B8%80%E8%84%B8%E6%87%B5%E9%80%BC/</guid>
      <description>上周五还在看redis源码，3天没看，今天再看，一脸的懵逼，年纪大了，记忆力也大不如年轻小伙子了，往后做事不能断断续续了。 这几天宝宝生病了，</description>
    </item>
    
    <item>
      <title>Linux内存管理小结三-其他内存相关知识</title>
      <link>http://shanks.link/blog/2021/07/30/linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%B0%8F%E7%BB%93%E4%B8%89-%E5%85%B6%E4%BB%96%E5%86%85%E5%AD%98%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Fri, 30 Jul 2021 18:17:27 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/30/linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%B0%8F%E7%BB%93%E4%B8%89-%E5%85%B6%E4%BB%96%E5%86%85%E5%AD%98%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</guid>
      <description>其他内存相关知识——Linux内存管理小结三 【Overcommit和OOM】 ​ 在Unix中，当一个用户进程使用malloc()函数申请内存时</description>
    </item>
    
    <item>
      <title>Linux内存管理小结二-glibc内存管理</title>
      <link>http://shanks.link/blog/2021/07/30/linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%B0%8F%E7%BB%93%E4%BA%8C-glibc%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
      <pubDate>Fri, 30 Jul 2021 18:14:38 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/30/linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%B0%8F%E7%BB%93%E4%BA%8C-glibc%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
      <description>glibc内存管理——Linux内存管理小结二 【引言】 最近在生产环境遇到一个奇怪的现象，nginx占用的虚拟内存和物理内存都很高，并且一直不</description>
    </item>
    
    <item>
      <title>Linux内存管理小结一-什么是物理/虚拟/共享内存</title>
      <link>http://shanks.link/blog/2021/07/30/linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%B0%8F%E7%BB%93%E4%B8%80-%E4%BB%80%E4%B9%88%E6%98%AF%E7%89%A9%E7%90%86/%E8%99%9A%E6%8B%9F/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/</link>
      <pubDate>Fri, 30 Jul 2021 18:10:45 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/30/linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%B0%8F%E7%BB%93%E4%B8%80-%E4%BB%80%E4%B9%88%E6%98%AF%E7%89%A9%E7%90%86/%E8%99%9A%E6%8B%9F/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/</guid>
      <description>什么是物理/虚拟/共享内存——Linux内存管理小结一 物理内存和虚拟内存到底有什么区别？ 提到内存，我们会想到经常接触的三个词：虚拟内存、物理</description>
    </item>
    
    <item>
      <title>malloc_stats---检查内存泄露的神器</title>
      <link>http://shanks.link/blog/2021/07/30/malloc_stats-%E6%A3%80%E6%9F%A5%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E7%9A%84%E7%A5%9E%E5%99%A8/</link>
      <pubDate>Fri, 30 Jul 2021 17:58:40 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/30/malloc_stats-%E6%A3%80%E6%9F%A5%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E7%9A%84%E7%A5%9E%E5%99%A8/</guid>
      <description>在之前的博客中提到过，valgrind可以用来检测内存泄露，但在使用中，往往会遇到一些问题，给调试工作带来很多不必要的麻烦，我自己遇到的有以</description>
    </item>
    
    <item>
      <title>彻底弄懂TCP协议：从三次握手说起</title>
      <link>http://shanks.link/blog/2021/07/30/%E5%BD%BB%E5%BA%95%E5%BC%84%E6%87%82tcp%E5%8D%8F%E8%AE%AE%E4%BB%8E%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E8%AF%B4%E8%B5%B7/</link>
      <pubDate>Fri, 30 Jul 2021 17:36:14 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/30/%E5%BD%BB%E5%BA%95%E5%BC%84%E6%87%82tcp%E5%8D%8F%E8%AE%AE%E4%BB%8E%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E8%AF%B4%E8%B5%B7/</guid>
      <description>作者：morganhuang，腾讯 IEG 后台开发工程师 说到 TCP 协议，相信大家都比较熟悉了，对于 TCP 协议总能说个一二三来，但是 TCP 协议又是一个非常复杂的</description>
    </item>
    
    <item>
      <title>c运行库、c标准库、windows API的区别和联系</title>
      <link>http://shanks.link/blog/2021/07/30/c%E8%BF%90%E8%A1%8C%E5%BA%93c%E6%A0%87%E5%87%86%E5%BA%93windows-api%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB/</link>
      <pubDate>Fri, 30 Jul 2021 17:29:46 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/30/c%E8%BF%90%E8%A1%8C%E5%BA%93c%E6%A0%87%E5%87%86%E5%BA%93windows-api%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB/</guid>
      <description>c运行库、c标准库、windows API的区别和联系 C运行时库函数 C运行时库函数是指C语言本身支持的一些基本函数，通常是汇编直接实现的。 AP</description>
    </item>
    
    <item>
      <title>为什么请求时,需要使用URLEncode做encode转码操作</title>
      <link>http://shanks.link/blog/2021/07/30/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B7%E6%B1%82%E6%97%B6%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8urlencode%E5%81%9Aencode%E8%BD%AC%E7%A0%81%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Fri, 30 Jul 2021 17:18:15 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/30/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B7%E6%B1%82%E6%97%B6%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8urlencode%E5%81%9Aencode%E8%BD%AC%E7%A0%81%E6%93%8D%E4%BD%9C/</guid>
      <description>为什么请求时,需使用URLEncode做encode转码操作 为什么要对url进行encode 发现现在几乎所有的网站都对url中的汉字和特殊的</description>
    </item>
    
    <item>
      <title>wget命令详解</title>
      <link>http://shanks.link/blog/2021/07/30/wget%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 30 Jul 2021 17:13:32 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/30/wget%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</guid>
      <description>#Linux wget 命令用法详解 Linux wget是一个下载文件的工具，它用在命令行下。对于Linux用户是必不可少的工具，尤其对于网络管理员，经常要下载一些软件或</description>
    </item>
    
    <item>
      <title>如何阅读一份源代码?</title>
      <link>http://shanks.link/blog/2021/07/30/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E4%BB%BD%E6%BA%90%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Fri, 30 Jul 2021 17:04:53 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/30/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E4%BB%BD%E6%BA%90%E4%BB%A3%E7%A0%81/</guid>
      <description>如何阅读一份源代码？ CONTENTS 先跑起来调试手段使用顺手的工具情景分析利用好测试用例厘清核心数据结构之间的关系整体和细节多问自己几个问题写自己的代码阅</description>
    </item>
    
    <item>
      <title>要不断的提高思维的层次</title>
      <link>http://shanks.link/blog/2021/07/28/%E8%A6%81%E4%B8%8D%E6%96%AD%E7%9A%84%E6%8F%90%E9%AB%98%E6%80%9D%E7%BB%B4%E7%9A%84%E5%B1%82%E6%AC%A1/</link>
      <pubDate>Wed, 28 Jul 2021 16:57:12 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/28/%E8%A6%81%E4%B8%8D%E6%96%AD%E7%9A%84%E6%8F%90%E9%AB%98%E6%80%9D%E7%BB%B4%E7%9A%84%E5%B1%82%E6%AC%A1/</guid>
      <description>​ 要不断的提高自己思维的层次，不要总是纠结在细节，打个比方，修一栋高楼大厦，更多的是要关注框架设计，而不要总是纠结这一块砖有没有码好。</description>
    </item>
    
    <item>
      <title>gdb 提示 coredump 文件 truncated 问题排查</title>
      <link>http://shanks.link/blog/2021/07/27/gdb-%E6%8F%90%E7%A4%BA-coredump-%E6%96%87%E4%BB%B6-truncated-%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</link>
      <pubDate>Tue, 27 Jul 2021 18:28:34 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/27/gdb-%E6%8F%90%E7%A4%BA-coredump-%E6%96%87%E4%BB%B6-truncated-%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</guid>
      <description>gdb 提示 coredump 文件 truncated 问题排查 本文选自“字节跳动基础架构实践”系列文章。 “字节跳动基础架构实践”系列文章是由字节跳动基础架构部门各技术团队及专家倾力</description>
    </item>
    
    <item>
      <title>go的一次故障排除</title>
      <link>http://shanks.link/blog/2021/07/27/go%E7%9A%84%E4%B8%80%E6%AC%A1%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4/</link>
      <pubDate>Tue, 27 Jul 2021 18:25:31 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/27/go%E7%9A%84%E4%B8%80%E6%AC%A1%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4/</guid>
      <description>“���”引发的线上事故 最近遇到了一起依赖升级 + 异常数据引发的线上事故，教训惨痛，本文对此进行回故和总结。 背景 起因是我们使用的服务框架版本比</description>
    </item>
    
    <item>
      <title>字节跳动 Flink 单点恢复功能实践</title>
      <link>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8-flink-%E5%8D%95%E7%82%B9%E6%81%A2%E5%A4%8D%E5%8A%9F%E8%83%BD%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 27 Jul 2021 18:21:02 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8-flink-%E5%8D%95%E7%82%B9%E6%81%A2%E5%A4%8D%E5%8A%9F%E8%83%BD%E5%AE%9E%E8%B7%B5/</guid>
      <description>跳动 Flink 单点恢复功能实践 背景 在字节跳动的实时计算场景中，我们有很多任务（数量 2k+）会直接服务于线上，其输出时延和稳定性会直接影响线上产品的用</description>
    </item>
    
    <item>
      <title>Kernel trace tools（三）：中断和软中断关闭时间过长问题追踪</title>
      <link>http://shanks.link/blog/2021/07/27/kernel-trace-tools%E4%B8%89%E4%B8%AD%E6%96%AD%E5%92%8C%E8%BD%AF%E4%B8%AD%E6%96%AD%E5%85%B3%E9%97%AD%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E9%97%AE%E9%A2%98%E8%BF%BD%E8%B8%AA/</link>
      <pubDate>Tue, 27 Jul 2021 18:09:23 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/27/kernel-trace-tools%E4%B8%89%E4%B8%AD%E6%96%AD%E5%92%8C%E8%BD%AF%E4%B8%AD%E6%96%AD%E5%85%B3%E9%97%AD%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E9%97%AE%E9%A2%98%E8%BF%BD%E8%B8%AA/</guid>
      <description>Kernel trace tools（三）：内核 runqueue 延迟跟踪 本文是由字节跳动系统部 STE 团队出品的“kernel trace tools”系列文章之一，以介绍团队自研多类延迟问题追</description>
    </item>
    
    <item>
      <title>Kernel trace tools（二）：中断和软中断关闭时间过长问题追踪</title>
      <link>http://shanks.link/blog/2021/07/27/kernel-trace-tools%E4%BA%8C%E4%B8%AD%E6%96%AD%E5%92%8C%E8%BD%AF%E4%B8%AD%E6%96%AD%E5%85%B3%E9%97%AD%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E9%97%AE%E9%A2%98%E8%BF%BD%E8%B8%AA/</link>
      <pubDate>Tue, 27 Jul 2021 18:03:53 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/27/kernel-trace-tools%E4%BA%8C%E4%B8%AD%E6%96%AD%E5%92%8C%E8%BD%AF%E4%B8%AD%E6%96%AD%E5%85%B3%E9%97%AD%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E9%97%AE%E9%A2%98%E8%BF%BD%E8%B8%AA/</guid>
      <description>Kernel trace tools（二）：内核态执行时间跟踪 本文是由字节跳动系统部 STE 团队出品的“kernel trace tools”系列文章之一，以介绍团队自研多类延迟问</description>
    </item>
    
    <item>
      <title>Kernel trace tools（一）：中断和软中断关闭时间过长问题追踪</title>
      <link>http://shanks.link/blog/2021/07/27/kernel-trace-tools%E4%B8%80%E4%B8%AD%E6%96%AD%E5%92%8C%E8%BD%AF%E4%B8%AD%E6%96%AD%E5%85%B3%E9%97%AD%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E9%97%AE%E9%A2%98%E8%BF%BD%E8%B8%AA/</link>
      <pubDate>Tue, 27 Jul 2021 17:57:14 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/27/kernel-trace-tools%E4%B8%80%E4%B8%AD%E6%96%AD%E5%92%8C%E8%BD%AF%E4%B8%AD%E6%96%AD%E5%85%B3%E9%97%AD%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E9%97%AE%E9%A2%98%E8%BF%BD%E8%B8%AA/</guid>
      <description>kenel trace tools（一）：中断和软中断关闭时间过长问题追踪 本文是由字节跳动系统部 STE 团队出品的 “kernel trace tools” 系列文章，以介绍团队自研</description>
    </item>
    
    <item>
      <title>基于有限状态机与消息队列的三方支付系统补单实践</title>
      <link>http://shanks.link/blog/2021/07/27/%E5%9F%BA%E4%BA%8E%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA%E4%B8%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%A1%A5%E5%8D%95%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 27 Jul 2021 17:46:19 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/27/%E5%9F%BA%E4%BA%8E%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA%E4%B8%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%A1%A5%E5%8D%95%E5%AE%9E%E8%B7%B5/</guid>
      <description>基于有限状态机与消息队列的三方支付系统补单实践 0. 引言 在日常生活中，从线下的超市购物到线上的外卖点餐、电商网购等，支付无时无刻不在发生，不论是</description>
    </item>
    
    <item>
      <title>微服务架构中如何优雅地重试？</title>
      <link>http://shanks.link/blog/2021/07/27/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E9%87%8D%E8%AF%95/</link>
      <pubDate>Tue, 27 Jul 2021 17:38:46 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/27/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E9%87%8D%E8%AF%95/</guid>
      <description>字节跳动 | 微服务架构中如何优雅地重试？ 背景 在微服务架构中，一个大系统被拆分成多个小服务，小服务之间大量 RPC 调用，经常可能因为网络抖动等原因导致</description>
    </item>
    
    <item>
      <title>字节跳动在 Go 网络库上的实践</title>
      <link>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%9C%A8-go-%E7%BD%91%E7%BB%9C%E5%BA%93%E4%B8%8A%E7%9A%84%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 27 Jul 2021 17:11:01 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%9C%A8-go-%E7%BD%91%E7%BB%9C%E5%BA%93%E4%B8%8A%E7%9A%84%E5%AE%9E%E8%B7%B5/</guid>
      <description>字节跳动在 Go 网络库上的实践 本文选自“字节跳动基础架构实践”系列文章。 “字节跳动基础架构实践”系列文章是由字节跳动基础架构部门各技术团队及专家</description>
    </item>
    
    <item>
      <title>字节跳动分布式表格存储系统的演进</title>
      <link>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%88%86%E5%B8%83%E5%BC%8F%E8%A1%A8%E6%A0%BC%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%BC%94%E8%BF%9B/</link>
      <pubDate>Tue, 27 Jul 2021 17:08:00 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%88%86%E5%B8%83%E5%BC%8F%E8%A1%A8%E6%A0%BC%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%BC%94%E8%BF%9B/</guid>
      <description>跳动分布式表格存储系统的演进 本文选自“字节跳动基础架构实践”系列文章。 “字节跳动基础架构实践”系列文章是由字节跳动基础架构部门各技术团队及专</description>
    </item>
    
    <item>
      <title>字节跳动自研线上引流回放系统的架构演进</title>
      <link>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E8%87%AA%E7%A0%94%E7%BA%BF%E4%B8%8A%E5%BC%95%E6%B5%81%E5%9B%9E%E6%94%BE%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/</link>
      <pubDate>Tue, 27 Jul 2021 16:56:51 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E8%87%AA%E7%A0%94%E7%BA%BF%E4%B8%8A%E5%BC%95%E6%B5%81%E5%9B%9E%E6%94%BE%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/</guid>
      <description>字节跳动自研线上引流回放系统的架构演进 本文选自“字节跳动基础架构实践”系列文章。 “字节跳动基础架构实践”系列文章是由字节跳动基础架构部门各技</description>
    </item>
    
    <item>
      <title>字节跳动表格存储中的事务</title>
      <link>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E8%A1%A8%E6%A0%BC%E5%AD%98%E5%82%A8%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Tue, 27 Jul 2021 16:54:59 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E8%A1%A8%E6%A0%BC%E5%AD%98%E5%82%A8%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/</guid>
      <description>表格存储中的事务 1. 背景 分布式表格存储系统在业界拥有广泛的应用场景。Google 先后发布了 Bigtable 和 Spanner 两代分布式表格存储系统，承接了其公司内部和外部</description>
    </item>
    
    <item>
      <title>字节跳动自研强一致在线 KV &amp;表格存储实践 - 下篇</title>
      <link>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E8%87%AA%E7%A0%94%E5%BC%BA%E4%B8%80%E8%87%B4%E5%9C%A8%E7%BA%BF-kv-%E8%A1%A8%E6%A0%BC%E5%AD%98%E5%82%A8%E5%AE%9E%E8%B7%B5-%E4%B8%8B%E7%AF%87/</link>
      <pubDate>Tue, 27 Jul 2021 16:45:17 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E8%87%AA%E7%A0%94%E5%BC%BA%E4%B8%80%E8%87%B4%E5%9C%A8%E7%BA%BF-kv-%E8%A1%A8%E6%A0%BC%E5%AD%98%E5%82%A8%E5%AE%9E%E8%B7%B5-%E4%B8%8B%E7%AF%87/</guid>
      <description>字节跳动自研强一致在线 KV &amp;amp;表格存储实践 - 下篇 本文选自“字节跳动基础架构实践”系列文章。 “字节跳动基础架构实践”系列文章是由字节跳动基</description>
    </item>
    
    <item>
      <title>字节跳动自研强一致在线 KV &amp;表格存储实践 - 上篇</title>
      <link>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E8%87%AA%E7%A0%94%E5%BC%BA%E4%B8%80%E8%87%B4%E5%9C%A8%E7%BA%BF-kv-%E8%A1%A8%E6%A0%BC%E5%AD%98%E5%82%A8%E5%AE%9E%E8%B7%B5-%E4%B8%8A%E7%AF%87/</link>
      <pubDate>Tue, 27 Jul 2021 16:43:26 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E8%87%AA%E7%A0%94%E5%BC%BA%E4%B8%80%E8%87%B4%E5%9C%A8%E7%BA%BF-kv-%E8%A1%A8%E6%A0%BC%E5%AD%98%E5%82%A8%E5%AE%9E%E8%B7%B5-%E4%B8%8A%E7%AF%87/</guid>
      <description>字节跳动自研强一致在线 KV &amp;amp;表格存储实践 - 上篇 本文选自“字节跳动基础架构实践”系列文章。 “字节跳动基础架构实践”系列文章是由字节跳动基</description>
    </item>
    
    <item>
      <title>字节跳动自研万亿级图数据库 &amp; 图计算实践</title>
      <link>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E8%87%AA%E7%A0%94%E4%B8%87%E4%BA%BF%E7%BA%A7%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%9B%BE%E8%AE%A1%E7%AE%97%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 27 Jul 2021 16:39:57 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E8%87%AA%E7%A0%94%E4%B8%87%E4%BA%BF%E7%BA%A7%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%9B%BE%E8%AE%A1%E7%AE%97%E5%AE%9E%E8%B7%B5/</guid>
      <description>跳动自研万亿级图数据库 &amp;amp; 图计算实践 本文选自“字节跳动基础架构实践”系列文章。 “字节跳动基础架构实践”系列文章是由字节跳动基础架构部门各技术团</description>
    </item>
    
    <item>
      <title>数据库面试简答、30道高频面试题</title>
      <link>http://shanks.link/blog/2021/07/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%A2%E8%AF%95%E7%AE%80%E7%AD%9430%E9%81%93%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Tue, 27 Jul 2021 16:16:32 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%A2%E8%AF%95%E7%AE%80%E7%AD%9430%E9%81%93%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description>数据库面试简答、30道高频面试题 一、MySQL问答 1、数据库sql语句查询，跨表查询有哪几种方式 内连接(inner可以不写) select e.name e.age p.product_name p.saled from employee e</description>
    </item>
    
    <item>
      <title>字节跳动混沌工程实践总结</title>
      <link>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E6%B7%B7%E6%B2%8C%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 27 Jul 2021 15:34:27 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E6%B7%B7%E6%B2%8C%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/</guid>
      <description>字节跳动混沌工程实践总结 原创 基础架构团队 字节跳动技术团队 2020-04-27 本文选自“字节跳动基础架构实践”系列文章。 “字节跳动基础架构实践”系列文章是由字节</description>
    </item>
    
    <item>
      <title>字节跳动 EB 级 HDFS 实践</title>
      <link>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8-eb-%E7%BA%A7-hdfs-%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 27 Jul 2021 15:23:52 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8-eb-%E7%BA%A7-hdfs-%E5%AE%9E%E8%B7%B5/</guid>
      <description>字节跳动 EB 级 HDFS 实践 本文选自“字节跳动基础架构实践”系列文章。 “字节跳动基础架构实践”系列文章是由字节跳动基础架构部门各技术团队及专家倾力打造</description>
    </item>
    
    <item>
      <title>日志辅助工具timecat</title>
      <link>http://shanks.link/blog/2021/07/27/%E6%97%A5%E5%BF%97%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7timecat/</link>
      <pubDate>Tue, 27 Jul 2021 14:52:13 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/27/%E6%97%A5%E5%BF%97%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7timecat/</guid>
      <description>日志辅助工具timecat 字节跳动技术团队 2017-09-08 今天我要分享一个用于对日志文件进行二分查找的工具：timecat 0 用途 在线演示页面：http:/</description>
    </item>
    
    <item>
      <title>等待和希望</title>
      <link>http://shanks.link/blog/2021/07/21/%E7%AD%89%E5%BE%85%E5%92%8C%E5%B8%8C%E6%9C%9B/</link>
      <pubDate>Wed, 21 Jul 2021 11:13:22 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/21/%E7%AD%89%E5%BE%85%E5%92%8C%E5%B8%8C%E6%9C%9B/</guid>
      <description>​ 人类全部智慧就包含在两个词中：等待和希望</description>
    </item>
    
    <item>
      <title>C&#43;&#43;面试常见问题</title>
      <link>http://shanks.link/blog/2021/07/20/c-%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 20 Jul 2021 14:43:48 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/20/c-%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>extern关键字的作用 置于变量或函数前，用于标示变量或函数的定义在别的文件中，提示编译器遇到此变量和函数时在其他模块中寻找其定义。它只要有</description>
    </item>
    
    <item>
      <title>面经 | 手把手教你挑选一个吸引人的简历模板</title>
      <link>http://shanks.link/blog/2021/07/19/%E9%9D%A2%E7%BB%8F-%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%8C%91%E9%80%89%E4%B8%80%E4%B8%AA%E5%90%B8%E5%BC%95%E4%BA%BA%E7%9A%84%E7%AE%80%E5%8E%86%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Mon, 19 Jul 2021 18:10:24 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/19/%E9%9D%A2%E7%BB%8F-%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%8C%91%E9%80%89%E4%B8%80%E4%B8%AA%E5%90%B8%E5%BC%95%E4%BA%BA%E7%9A%84%E7%AE%80%E5%8E%86%E6%A8%A1%E6%9D%BF/</guid>
      <description>大家好，这是面试专题的第四篇文章，中间间隔许久，实在是事情比较多，有些忙不过来。好在现在校招时间还没过去，也许还能给大家一点帮助。 前段时间有</description>
    </item>
    
    <item>
      <title>你找我内推，简历就写了这？</title>
      <link>http://shanks.link/blog/2021/07/19/%E4%BD%A0%E6%89%BE%E6%88%91%E5%86%85%E6%8E%A8%E7%AE%80%E5%8E%86%E5%B0%B1%E5%86%99%E4%BA%86%E8%BF%99/</link>
      <pubDate>Mon, 19 Jul 2021 17:55:31 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/19/%E4%BD%A0%E6%89%BE%E6%88%91%E5%86%85%E6%8E%A8%E7%AE%80%E5%8E%86%E5%B0%B1%E5%86%99%E4%BA%86%E8%BF%99/</guid>
      <description>大家好，最近由于我司发展不错。在国内知名度越来越大，这两天从各种渠道收到了朋友送来的几封简历，让我帮忙内推。 收到简历我当然是很开心的，因为通</description>
    </item>
    
    <item>
      <title>leader总让我干杂活，我很不满，该怎么办？</title>
      <link>http://shanks.link/blog/2021/07/19/leader%E6%80%BB%E8%AE%A9%E6%88%91%E5%B9%B2%E6%9D%82%E6%B4%BB%E6%88%91%E5%BE%88%E4%B8%8D%E6%BB%A1%E8%AF%A5%E6%80%8E%E4%B9%88%E5%8A%9E/</link>
      <pubDate>Mon, 19 Jul 2021 17:51:29 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/19/leader%E6%80%BB%E8%AE%A9%E6%88%91%E5%B9%B2%E6%9D%82%E6%B4%BB%E6%88%91%E5%BE%88%E4%B8%8D%E6%BB%A1%E8%AF%A5%E6%80%8E%E4%B9%88%E5%8A%9E/</guid>
      <description>众所周知互联网公司当中充满了套路，什么把年终奖摊平到每个月跟你说薪水的，什么把年终的月份说得特别多，等你发现已经来不及的。明明跟你说的是A岗</description>
    </item>
    
    <item>
      <title>程序员的精进方法，如何从一个底层程序员开始逆袭？</title>
      <link>http://shanks.link/blog/2021/07/19/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E7%B2%BE%E8%BF%9B%E6%96%B9%E6%B3%95%E5%A6%82%E4%BD%95%E4%BB%8E%E4%B8%80%E4%B8%AA%E5%BA%95%E5%B1%82%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BC%80%E5%A7%8B%E9%80%86%E8%A2%AD/</link>
      <pubDate>Mon, 19 Jul 2021 16:55:40 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/19/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E7%B2%BE%E8%BF%9B%E6%96%B9%E6%B3%95%E5%A6%82%E4%BD%95%E4%BB%8E%E4%B8%80%E4%B8%AA%E5%BA%95%E5%B1%82%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BC%80%E5%A7%8B%E9%80%86%E8%A2%AD/</guid>
      <description>前两天有粉丝在群里让我写一下程序员的精进方法，今天就来简单聊一下这个话题。 在我看来程序员和小兵的职业发展路线是一样的，我简单的把小兵到将军的</description>
    </item>
    
    <item>
      <title>golang 的channels 行为</title>
      <link>http://shanks.link/blog/2021/07/19/golang-%E7%9A%84channels-%E8%A1%8C%E4%B8%BA/</link>
      <pubDate>Mon, 19 Jul 2021 16:22:27 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/19/golang-%E7%9A%84channels-%E8%A1%8C%E4%B8%BA/</guid>
      <description>简介 当我第一次使用 Go 的 channels 工作的时候，我犯了一个错误，把 channels 考虑为一个数据结构。我把 channels 看作为 goroutines 之间提供自动同步访问的队列。这种结构上的理解导致我</description>
    </item>
    
    <item>
      <title>GO 开发者对 GO 初学者的建议</title>
      <link>http://shanks.link/blog/2021/07/19/go-%E5%BC%80%E5%8F%91%E8%80%85%E5%AF%B9-go-%E5%88%9D%E5%AD%A6%E8%80%85%E7%9A%84%E5%BB%BA%E8%AE%AE/</link>
      <pubDate>Mon, 19 Jul 2021 16:02:51 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/19/go-%E5%BC%80%E5%8F%91%E8%80%85%E5%AF%B9-go-%E5%88%9D%E5%AD%A6%E8%80%85%E7%9A%84%E5%BB%BA%E8%AE%AE/</guid>
      <description>注：原文地址为 Advise from Go developers to Go programming newbies 以促进 India 的 go 编程作为 GopherConIndia 承诺的一部分。我们采访了 40 位 Gophers（一个 Gopher 代表一个 GO 项目或是任何地方的 GO 程序员）</description>
    </item>
    
    <item>
      <title>lua源码已读完，接下来干什么？</title>
      <link>http://shanks.link/blog/2021/07/15/lua%E6%BA%90%E7%A0%81%E5%B7%B2%E8%AF%BB%E5%AE%8C%E6%8E%A5%E4%B8%8B%E6%9D%A5%E5%B9%B2%E4%BB%80%E4%B9%88/</link>
      <pubDate>Thu, 15 Jul 2021 10:38:49 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/15/lua%E6%BA%90%E7%A0%81%E5%B7%B2%E8%AF%BB%E5%AE%8C%E6%8E%A5%E4%B8%8B%E6%9D%A5%E5%B9%B2%E4%BB%80%E4%B9%88/</guid>
      <description>一个月没有写周记了。 主要原因，还是没有坚持下来。不做过多辩解。 上周结束了lua515的源码阅读，代码的骨干结构，功能实现都已搞明白，想了会要</description>
    </item>
    
    <item>
      <title>这枚让我心仪的男人</title>
      <link>http://shanks.link/blog/2021/07/10/%E8%BF%99%E6%9E%9A%E8%AE%A9%E6%88%91%E5%BF%83%E4%BB%AA%E7%9A%84%E7%94%B7%E4%BA%BA/</link>
      <pubDate>Sat, 10 Jul 2021 17:54:53 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/10/%E8%BF%99%E6%9E%9A%E8%AE%A9%E6%88%91%E5%BF%83%E4%BB%AA%E7%9A%84%E7%94%B7%E4%BA%BA/</guid>
      <description>1.正直。 2.我讲的笑话他都笑。 3.有时候咬下嘴唇的样子很可爱。 4.平头。 5.撒娇对他没有用，生病了他只会想到医生。 6.不道歉。 7.逛街就是</description>
    </item>
    
    <item>
      <title>删除文件出现项目不在请确认该项目的位置</title>
      <link>http://shanks.link/blog/2021/07/10/%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%87%BA%E7%8E%B0%E9%A1%B9%E7%9B%AE%E4%B8%8D%E5%9C%A8%E8%AF%B7%E7%A1%AE%E8%AE%A4%E8%AF%A5%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%BD%8D%E7%BD%AE/</link>
      <pubDate>Sat, 10 Jul 2021 17:12:34 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/10/%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%87%BA%E7%8E%B0%E9%A1%B9%E7%9B%AE%E4%B8%8D%E5%9C%A8%E8%AF%B7%E7%A1%AE%E8%AE%A4%E8%AF%A5%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%BD%8D%E7%BD%AE/</guid>
      <description>删除文件出现”找不到该项目，该项目不在请确认该项目的位置“，如下图： 解决办法： 1、首先新建一个txt文件，把下面的代码复制到里面然后保存 DEL /F</description>
    </item>
    
    <item>
      <title>vscode 解决正在下载程序包C/C&#43;&#43; language components (Linux / x86_64) 失败引起的符号找不到问题</title>
      <link>http://shanks.link/blog/2021/07/10/vscode-%E8%A7%A3%E5%86%B3%E6%AD%A3%E5%9C%A8%E4%B8%8B%E8%BD%BD%E7%A8%8B%E5%BA%8F%E5%8C%85c/c-language-components-linux-/-x86_64-%E5%A4%B1%E8%B4%A5%E5%BC%95%E8%B5%B7%E7%9A%84%E7%AC%A6%E5%8F%B7%E6%89%BE%E4%B8%8D%E5%88%B0%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 10 Jul 2021 16:57:31 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/10/vscode-%E8%A7%A3%E5%86%B3%E6%AD%A3%E5%9C%A8%E4%B8%8B%E8%BD%BD%E7%A8%8B%E5%BA%8F%E5%8C%85c/c-language-components-linux-/-x86_64-%E5%A4%B1%E8%B4%A5%E5%BC%95%E8%B5%B7%E7%9A%84%E7%AC%A6%E5%8F%B7%E6%89%BE%E4%B8%8D%E5%88%B0%E9%97%AE%E9%A2%98/</guid>
      <description>1.问题 vscode ssh远程查看代码时，大纲无法罗列函数列表。 根本原因是远程c/c++插件没有安装成功 错误信息如下 正在下载程序包“C/C++ language components (Linux /</description>
    </item>
    
    <item>
      <title>用十年的时间学会编程，而不是21天</title>
      <link>http://shanks.link/blog/2021/07/09/%E7%94%A8%E5%8D%81%E5%B9%B4%E7%9A%84%E6%97%B6%E9%97%B4%E5%AD%A6%E4%BC%9A%E7%BC%96%E7%A8%8B%E8%80%8C%E4%B8%8D%E6%98%AF21%E5%A4%A9/</link>
      <pubDate>Fri, 09 Jul 2021 16:07:37 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/09/%E7%94%A8%E5%8D%81%E5%B9%B4%E7%9A%84%E6%97%B6%E9%97%B4%E5%AD%A6%E4%BC%9A%E7%BC%96%E7%A8%8B%E8%80%8C%E4%B8%8D%E6%98%AF21%E5%A4%A9/</guid>
      <description>今天是周末，难得有闲暇，抽点时间和大家分享一些心得和感受，希望能够一些在迷茫中的同学带来一点帮助。 为什么拒绝速成 这是我的第一篇闲聊文章，我写</description>
    </item>
    
    <item>
      <title>总有一种力量让我们泪流满面</title>
      <link>http://shanks.link/blog/2021/07/09/%E6%80%BB%E6%9C%89%E4%B8%80%E7%A7%8D%E5%8A%9B%E9%87%8F%E8%AE%A9%E6%88%91%E4%BB%AC%E6%B3%AA%E6%B5%81%E6%BB%A1%E9%9D%A2/</link>
      <pubDate>Fri, 09 Jul 2021 13:06:00 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/09/%E6%80%BB%E6%9C%89%E4%B8%80%E7%A7%8D%E5%8A%9B%E9%87%8F%E8%AE%A9%E6%88%91%E4%BB%AC%E6%B3%AA%E6%B5%81%E6%BB%A1%E9%9D%A2/</guid>
      <description>本文刊载于1999年的《南方周末》 这是新年的第一天。这是我们与你见面的第777次。祝愿阳光打在你的脸上。 阳光打在你的脸上，温暖留在我们心里。</description>
    </item>
    
    <item>
      <title>Git远程操作详解</title>
      <link>http://shanks.link/blog/2021/07/09/git%E8%BF%9C%E7%A8%8B%E6%93%8D%E4%BD%9C%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 09 Jul 2021 11:27:46 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/09/git%E8%BF%9C%E7%A8%8B%E6%93%8D%E4%BD%9C%E8%AF%A6%E8%A7%A3/</guid>
      <description>作者： 阮一峰 日期： 2014年6月12日 Git是目前最流行的版本管理系统，学会Git几乎成了开发者的必备技能。 Git有很多优势，其中之一就是远</description>
    </item>
    
    <item>
      <title>Go 为什么这么快 GPM模型简介</title>
      <link>http://shanks.link/blog/2021/07/08/go-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%B9%88%E5%BF%AB-gpm%E6%A8%A1%E5%9E%8B%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 08 Jul 2021 11:28:22 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/08/go-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%B9%88%E5%BF%AB-gpm%E6%A8%A1%E5%9E%8B%E7%AE%80%E4%BB%8B/</guid>
      <description>作者：joellwang，腾讯 CSIG 后台开发工程师 本文主要介绍了 Go 程序为了实现极高的并发性能，其内部调度器的实现架构（G-P-M 模型），以及为了</description>
    </item>
    
    <item>
      <title>亿级系统的Redis缓存如何设计???</title>
      <link>http://shanks.link/blog/2021/07/05/%E4%BA%BF%E7%BA%A7%E7%B3%BB%E7%BB%9F%E7%9A%84redis%E7%BC%93%E5%AD%98%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Mon, 05 Jul 2021 20:24:32 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/05/%E4%BA%BF%E7%BA%A7%E7%B3%BB%E7%BB%9F%E7%9A%84redis%E7%BC%93%E5%AD%98%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1/</guid>
      <description>亿级系统的Redis缓存如何设计？？？ 以下文章来源于微观技术 ，作者TomGE 缓存设计可谓老生常谈了，早些时候都是采用memcache，现在大</description>
    </item>
    
    <item>
      <title>lua51 Instructions Commment</title>
      <link>http://shanks.link/blog/2021/07/01/lua51-instructions-commment/</link>
      <pubDate>Thu, 01 Jul 2021 00:20:54 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/01/lua51-instructions-commment/</guid>
      <description>typedef enum { /*---------------------------------------------------------------------- name args description ------------------------------------------------------------------------*/ OP_MOVE, /* A B R(A) := R(B) */ OP_LOADK, /* A Bx R(A) := Kst(Bx) */ OP_LOADBOOL, /* A B C R(A) := (Bool)B; if (C) pc++ */ OP_LOADNIL, /* A B R(A) := ... := R(B) := nil */ OP_GETUPVAL, /* A B R(A) := UpValue[B] */ OP_GETGLOBAL, /* A Bx R(A) := Gbl[Kst(Bx)] */ OP_GETTABLE, /* A B C R(A)</description>
    </item>
    
    <item>
      <title>哈希表</title>
      <link>http://shanks.link/blog/2021/06/26/%E5%93%88%E5%B8%8C%E8%A1%A8/</link>
      <pubDate>Sat, 26 Jun 2021 22:55:54 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/06/26/%E5%93%88%E5%B8%8C%E8%A1%A8/</guid>
      <description>哈希表 什么是哈希表 哈希表就是一个元素有一一对应位置的一个表，如下图，哈希表也叫散列表，和函数的一个x对应一个y类似，不存在多个y对应一个x，</description>
    </item>
    
    <item>
      <title>锲而不舍</title>
      <link>http://shanks.link/blog/2021/06/19/%E9%94%B2%E8%80%8C%E4%B8%8D%E8%88%8D/</link>
      <pubDate>Sat, 19 Jun 2021 16:44:28 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/06/19/%E9%94%B2%E8%80%8C%E4%B8%8D%E8%88%8D/</guid>
      <description>照例一周一篇文章，今天的主题是锲而不舍。 照计划，这周看完lua的编译模块，实际上也八九不离十，看完编译模块，最后还剩下GC模块，预计这个月结</description>
    </item>
    
    <item>
      <title>分布式锁实现原理与最佳实践</title>
      <link>http://shanks.link/blog/2021/06/15/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 15 Jun 2021 19:57:11 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/06/15/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
      <description>分布式锁实现原理与最佳实践 分布式锁应用场景 很多应用场景是需要系统保证幂等性的（如api服务或消息消费者），并发情况下或消息重复很容易造成系统</description>
    </item>
    
    <item>
      <title>如何避免Go变量被GC</title>
      <link>http://shanks.link/blog/2021/06/15/%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8Dgo%E5%8F%98%E9%87%8F%E8%A2%ABgc/</link>
      <pubDate>Tue, 15 Jun 2021 17:15:06 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/06/15/%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8Dgo%E5%8F%98%E9%87%8F%E8%A2%ABgc/</guid>
      <description>Illustration created for “A Journey With Go”, made from the original Go Gopher, created by Renee French. 本文基于 Go 1.13。 在 Go 中，我们不需要自己管理内存分配和释放。然而，有些时候我们需要对程序进行更细</description>
    </item>
    
    <item>
      <title>贵在坚持</title>
      <link>http://shanks.link/blog/2021/06/15/%E8%B4%B5%E5%9C%A8%E5%9D%9A%E6%8C%81/</link>
      <pubDate>Tue, 15 Jun 2021 00:46:45 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/06/15/%E8%B4%B5%E5%9C%A8%E5%9D%9A%E6%8C%81/</guid>
      <description>周报好长一段时间没有更新了，难道又要成为一个一时兴起，半途而非的典型代表？从小看大，我们有太多的这样的经历，有时候一时兴起想做某件事，当时热</description>
    </item>
    
    <item>
      <title>lua源码注释lcode.c</title>
      <link>http://shanks.link/blog/2021/06/08/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8Alcode.c/</link>
      <pubDate>Tue, 08 Jun 2021 23:26:48 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/06/08/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8Alcode.c/</guid>
      <description>/* ** $Id: lcode.c,v 2.25.1.5 2011/01/31 14:53:16 roberto Exp $ ** Code generator for Lua ** See Copyright Notice in lua.h */ #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #define lcode_c #define LUA_CORE #include &amp;#34;lua.h&amp;#34; #include &amp;#34;lcode.h&amp;#34;#include &amp;#34;ldebug.h&amp;#34;#include &amp;#34;ldo.h&amp;#34;#include &amp;#34;lgc.h&amp;#34;#include &amp;#34;llex.h&amp;#34;#include &amp;#34;lmem.h&amp;#34;#include &amp;#34;lobject.h&amp;#34;#include &amp;#34;lopcodes.h&amp;#34;#include &amp;#34;lparser.h&amp;#34;#include &amp;#34;ltable.h&amp;#34; /* e的类型 expdesc */ #define hasjumps(e) ((e)-&amp;gt;t != (e)-&amp;gt;f) static int isnumeral(expdesc *e) { return (e-&amp;gt;k == VKNUM &amp;amp;&amp;amp; /* 仅仅e-</description>
    </item>
    
    <item>
      <title>lua源码注释 lparse.c</title>
      <link>http://shanks.link/blog/2021/06/08/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-lparse.c/</link>
      <pubDate>Tue, 08 Jun 2021 23:03:28 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/06/08/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-lparse.c/</guid>
      <description>/* 参考的BNF地址 shankusu.me/lua/TheCompleteSyntaxOfLua51/ */ /* ** $Id: lparser.c,v 2.42.1.4 2011/10/21 19:31:42 roberto Exp $ ** Lua Parser ** See Copyright Notice in lua.h */ #include &amp;lt;string.h&amp;gt;#include &amp;lt;stdio.h&amp;gt; #define lparser_c #define LUA_CORE #include &amp;#34;lua.h&amp;#34; #include &amp;#34;lcode.h&amp;#34;#include &amp;#34;ldebug.h&amp;#34;#include &amp;#34;ldo.h&amp;#34;#include &amp;#34;lfunc.h&amp;#34;#include &amp;#34;llex.h&amp;#34;#include &amp;#34;lmem.h&amp;#34;#include &amp;#34;lobject.h&amp;#34;#include &amp;#34;lopcodes.h&amp;#34;#include &amp;#34;lparser.h&amp;#34;#include &amp;#34;lstate.h&amp;#34;#include &amp;#34;lstring.h&amp;#34;#include &amp;#34;ltable.h&amp;#34; /* 也只有函数调用或变参操作符这两种</description>
    </item>
    
    <item>
      <title>lua源码注释 lparse.h</title>
      <link>http://shanks.link/blog/2021/06/08/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-lparse.h/</link>
      <pubDate>Tue, 08 Jun 2021 23:01:44 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/06/08/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-lparse.h/</guid>
      <description>/* ** $Id: lparser.h,v 1.57.1.1 2007/12/27 13:02:25 roberto Exp $ ** Lua Parser ** See Copyright Notice in lua.h */ #ifndef lparser_h #define lparser_h #include &amp;#34;llimits.h&amp;#34;#include &amp;#34;lobject.h&amp;#34;#include &amp;#34;lzio.h&amp;#34; /**************************** 官方的BNF ********************************** chunk ::= {stat [`;´]} [laststat [`;´]] block ::= chunk stat ::= varlist `=´ explist | functioncall | do block end | while</description>
    </item>
    
    <item>
      <title>lua源码分析4的执行</title>
      <link>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%904%E7%9A%84%E6%89%A7%E8%A1%8C/</link>
      <pubDate>Thu, 03 Jun 2021 19:40:49 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%904%E7%9A%84%E6%89%A7%E8%A1%8C/</guid>
      <description>第3章 lua中函数调用的方法 前面，以及分析了lua中定义一个函数的方法，现在总结如下： ​ 1、 将函数名作为局部变量存在局部变量表里，并在栈上开</description>
    </item>
    
    <item>
      <title>lua源码分析3条件跳转</title>
      <link>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%903%E6%9D%A1%E4%BB%B6%E8%B7%B3%E8%BD%AC/</link>
      <pubDate>Thu, 03 Jun 2021 19:32:57 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%903%E6%9D%A1%E4%BB%B6%E8%B7%B3%E8%BD%AC/</guid>
      <description>第2章 关于条件编译 ​ 首先，解释一下，为什么题目叫做：条件编译。其实很简单，现在这一章要分析的是，if、while、repeat、for语句。</description>
    </item>
    
    <item>
      <title>lua源码分析2（局部函数的定义）</title>
      <link>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902%E5%B1%80%E9%83%A8%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89/</link>
      <pubDate>Thu, 03 Jun 2021 18:17:39 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902%E5%B1%80%E9%83%A8%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89/</guid>
      <description>第二节 局部函数的声明 ​ 前面研究了局部变量的定义，下面就研究下，lua中局部函数定义的方法。 ​ 其中局部函数定义的语法是： ​ local function FuncName (parlist) chunk END ​ 首先，</description>
    </item>
    
    <item>
      <title>lua源码分析1（局部变量的定义）</title>
      <link>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E5%AE%9A%E4%B9%89/</link>
      <pubDate>Thu, 03 Jun 2021 16:51:33 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E5%AE%9A%E4%B9%89/</guid>
      <description>第0节 一切从这里开始 ​ Lua是边进行语法分析，边词法分析。其中，词法分析的模块是：llex。其对外暴露的接口是：llex_next()。并且</description>
    </item>
    
    <item>
      <title>samba 445 被封 公网访问</title>
      <link>http://shanks.link/blog/2021/06/02/samba-445-%E8%A2%AB%E5%B0%81-%E5%85%AC%E7%BD%91%E8%AE%BF%E9%97%AE/</link>
      <pubDate>Wed, 02 Jun 2021 01:29:24 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/06/02/samba-445-%E8%A2%AB%E5%B0%81-%E5%85%AC%E7%BD%91%E8%AE%BF%E9%97%AE/</guid>
      <description>原因 ​ 由于安全原因，tcp的445端口被网络运营商封闭，造成无法访问公网的samba服务，即使打开了腾讯的安全组策略中的端口也无济于事 解决思</description>
    </item>
    
    <item>
      <title>lua源码注释-llex.c</title>
      <link>http://shanks.link/blog/2021/05/31/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-llex.c/</link>
      <pubDate>Mon, 31 May 2021 16:14:08 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/31/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-llex.c/</guid>
      <description>/* ** $Id: llex.c,v 2.20.1.2 2009/11/23 14:58:22 roberto Exp $ ** Lexical Analyzer ** See Copyright Notice in lua.h */ #include &amp;lt;ctype.h&amp;gt;#include &amp;lt;locale.h&amp;gt;#include &amp;lt;string.h&amp;gt; #define llex_c #define LUA_CORE #include &amp;#34;lua.h&amp;#34; #include &amp;#34;ldo.h&amp;#34;#include &amp;#34;llex.h&amp;#34;#include &amp;#34;lobject.h&amp;#34;#include &amp;#34;lparser.h&amp;#34;#include &amp;#34;lstate.h&amp;#34;#include &amp;#34;lstring.h&amp;#34;#include &amp;#34;ltable.h&amp;#34;#include &amp;#34;lzio.h&amp;#34; #define next(ls) (ls-&amp;gt;current = zgetc(ls-&amp;gt;z)) #define currIsNewline(ls) (ls-&amp;gt;current == &amp;#39;\n&amp;#39; || ls-&amp;gt;current == &amp;#39;\r&amp;#39;) /* ORDER RESERVED */ const char *const luaX_tokens [] = { &amp;#34;and&amp;#34;, &amp;#34;break&amp;#34;, &amp;#34;do&amp;#34;, &amp;#34;else&amp;#34;, &amp;#34;elseif&amp;#34;, &amp;#34;end&amp;#34;,</description>
    </item>
    
    <item>
      <title>lua源码注释-ldo.c</title>
      <link>http://shanks.link/blog/2021/05/28/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-ldo.c/</link>
      <pubDate>Fri, 28 May 2021 23:17:07 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/28/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-ldo.c/</guid>
      <description>/* ** $Id: ldo.c,v 2.38.1.4 2012/01/18 02:27:10 roberto Exp $ ** Stack and Call structure of Lua ** See Copyright Notice in lua.h */ #include &amp;lt;setjmp.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;string.h&amp;gt; #define ldo_c #define LUA_CORE #include &amp;#34;lua.h&amp;#34; #include &amp;#34;ldebug.h&amp;#34;#include &amp;#34;ldo.h&amp;#34;#include &amp;#34;lfunc.h&amp;#34;#include &amp;#34;lgc.h&amp;#34;#include &amp;#34;lmem.h&amp;#34;#include &amp;#34;lobject.h&amp;#34;#include &amp;#34;lopcodes.h&amp;#34;#include &amp;#34;lparser.h&amp;#34;#include &amp;#34;lstate.h&amp;#34;#include &amp;#34;lstring.h&amp;#34;#include &amp;#34;ltable.h&amp;#34;#include &amp;#34;ltm.h&amp;#34;#include &amp;#34;lundump.h&amp;#34;#include &amp;#34;lvm.h&amp;#34;#include &amp;#34;lzio.h&amp;#34; /* ** {====================================================== ** Error-recovery functions ** ======================================================= */ /* chain list of long jump buffers */ struct lua_longjmp {</description>
    </item>
    
    <item>
      <title>lua源码阅读总结和Golang学习安排</title>
      <link>http://shanks.link/blog/2021/05/26/lua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93%E5%92%8Cgolang%E5%AD%A6%E4%B9%A0%E5%AE%89%E6%8E%92/</link>
      <pubDate>Wed, 26 May 2021 15:54:01 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/26/lua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93%E5%92%8Cgolang%E5%AD%A6%E4%B9%A0%E5%AE%89%E6%8E%92/</guid>
      <description>​ 看了一段时间的lua源码，复盘下，整体而言勉勉强强，速度有些偏慢，可能是着急快点看完的原因，心态有些急躁，效率有点偏低。 ​ 关于效率，还有个</description>
    </item>
    
    <item>
      <title>Lua 5.1 Reference Manual</title>
      <link>http://shanks.link/blog/2021/05/26/lua-5.1-reference-manual/</link>
      <pubDate>Wed, 26 May 2021 15:31:07 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/26/lua-5.1-reference-manual/</guid>
      <description>Lua 5.1 Reference Manual by Roberto Ierusalimschy, Luiz Henrique de Figueiredo, Waldemar Celes
Copyright © 2006–2012 Lua.org, PUC-Rio. Freely available under the terms of the Lua license.
contents · index · other versions · english · português · español · deutsch 1 – Introduction Lua is an extension programming language designed to support general procedural programming with data description facilities. It also offers good support for object-oriented programming, functional programming, and data-driven programming.</description>
    </item>
    
    <item>
      <title>lua源码注释-lvm.c</title>
      <link>http://shanks.link/blog/2021/05/23/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-lvm.c/</link>
      <pubDate>Sun, 23 May 2021 23:07:16 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/23/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-lvm.c/</guid>
      <description>github链接 lua515子域 /* ** $Id: lvm.c,v 2.63.1.5 2011/08/17 20:43:11 roberto Exp $ ** Lua virtual machine ** See Copyright Notice in lua.h */ #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;string.h&amp;gt; #define lvm_c #define LUA_CORE #include &amp;#34;lua.h&amp;#34; #include &amp;#34;ldebug.h&amp;#34;#include &amp;#34;ldo.h&amp;#34;#include &amp;#34;lfunc.h&amp;#34;#include &amp;#34;lgc.h&amp;#34;#include &amp;#34;lobject.h&amp;#34;#include &amp;#34;lopcodes.h&amp;#34;#include &amp;#34;lstate.h&amp;#34;#include &amp;#34;lstring.h&amp;#34;#include &amp;#34;ltable.h&amp;#34;#include &amp;#34;ltm.h&amp;#34;#include &amp;#34;lvm.h&amp;#34; /* limit for table tag-method chains (to avoid loops) */ #define</description>
    </item>
    
    <item>
      <title>lua源码注释-ltable.c</title>
      <link>http://shanks.link/blog/2021/05/20/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-ltable.c/</link>
      <pubDate>Thu, 20 May 2021 23:44:58 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/20/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-ltable.c/</guid>
      <description>github链接 lua515子域 /* ** $Id: ltable.c,v 2.32.1.2 2007/12/28 15:32:23 roberto Exp $ ** Lua tables (hash) ** See Copyright Notice in lua.h */ /* ** Implementation of tables (aka(又名) arrays, objects, or hash tables). ** Tables keep its elements in two parts: an array part and a hash part.</description>
    </item>
    
    <item>
      <title>too many open files</title>
      <link>http://shanks.link/blog/2021/05/19/too-many-open-files/</link>
      <pubDate>Wed, 19 May 2021 15:05:20 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/19/too-many-open-files/</guid>
      <description>原因 ​ 程序打开的文件/socket 数量超过系统设定值。 查看程序已打开的fd ls -l /proc/pid/fd 详情 lsof -p pid | wc -l 数量 lsof -n | awk &amp;#39;{print $2}&amp;#39; | sort | uniq -c | sort -nr | more 输出fd</description>
    </item>
    
    <item>
      <title>The Complete Syntax of Lua51</title>
      <link>http://shanks.link/blog/2021/05/19/the-complete-syntax-of-lua51/</link>
      <pubDate>Wed, 19 May 2021 12:27:54 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/19/the-complete-syntax-of-lua51/</guid>
      <description>Here is the complete syntax of Lua in extended BNF. (It does not describe operator precedences.)
chunk ::= {stat [`;´]} [laststat [`;´]] block ::= chunk stat ::= varlist `=´ explist | functioncall | do block end | while exp do block end | repeat block until exp | if exp then block {elseif exp then block} [else block] end | for Name `=´ exp `,´ exp [`,´ exp] do block end | for namelist in explist do block end | function funcname funcbody | local function Name funcbody | local namelist [`=´ explist] laststat ::= return [explist] | break funcname ::= Name {`.</description>
    </item>
    
    <item>
      <title>A No-Frills Introduction to Lua 5.1 VM Instructions</title>
      <link>http://shanks.link/blog/2021/05/19/a-no-frills-introduction-to-lua-5.1-vm-instructions/</link>
      <pubDate>Wed, 19 May 2021 11:58:46 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/19/a-no-frills-introduction-to-lua-5.1-vm-instructions/</guid>
      <description>A No-Frills Introduction to Lua 5.1 VM Instructions by Kein-Hong Man, esq. &amp;lt;khman AT users.sf.net&amp;gt; Version 0.1, 20060313 ​ 为了检索指令描述，本人额外做了添加特定的前缀OP_处理，eg: MOVE&amp;mdash;-&amp;gt;OP_M</description>
    </item>
    
    <item>
      <title>寻找接下来的发展方向</title>
      <link>http://shanks.link/blog/2021/05/17/%E5%AF%BB%E6%89%BE%E6%8E%A5%E4%B8%8B%E6%9D%A5%E7%9A%84%E5%8F%91%E5%B1%95%E6%96%B9%E5%90%91/</link>
      <pubDate>Mon, 17 May 2021 17:38:18 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/17/%E5%AF%BB%E6%89%BE%E6%8E%A5%E4%B8%8B%E6%9D%A5%E7%9A%84%E5%8F%91%E5%B1%95%E6%96%B9%E5%90%91/</guid>
      <description>​ 不知道是不是周一综合征，上午读《计算机程序的构造和解释》时精神还不错，下午原本计划学Go，但一觉醒来后，确打不起精神，奇了怪了。 ​ 打不起精</description>
    </item>
    
    <item>
      <title>lua源码阅读之旅-具体排期</title>
      <link>http://shanks.link/blog/2021/05/17/lua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E6%97%85-%E5%85%B7%E4%BD%93%E6%8E%92%E6%9C%9F/</link>
      <pubDate>Mon, 17 May 2021 12:39:24 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/17/lua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E6%97%85-%E5%85%B7%E4%BD%93%E6%8E%92%E6%9C%9F/</guid>
      <description>​ 开篇规划了整理思路，跨度比较大，不利于把控进度，这篇做一个以week为单位的周期安排，以便有效的利用时间和及时复盘自己的学习计划。 资料 5.10-16 《</description>
    </item>
    
    <item>
      <title>github 慢 github.io 访问不了</title>
      <link>http://shanks.link/blog/2021/05/13/github-%E6%85%A2-github.io-%E8%AE%BF%E9%97%AE%E4%B8%8D%E4%BA%86/</link>
      <pubDate>Thu, 13 May 2021 19:04:18 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/13/github-%E6%85%A2-github.io-%E8%AE%BF%E9%97%AE%E4%B8%8D%E4%BA%86/</guid>
      <description>使用国内镜像 ​ 目前已知Github国内镜像网站有 github.com.cnpmjs.org 和 git.sdut.me/ 。速度根据各地情况而定，在clone某个项目的时候将 github.com 替换为 github.com.cnpmjs.org 即可。 使用国外的dns查</description>
    </item>
    
    <item>
      <title>lua源码阅读之旅-再次启航</title>
      <link>http://shanks.link/blog/2021/05/10/lua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E6%97%85-%E5%86%8D%E6%AC%A1%E5%90%AF%E8%88%AA/</link>
      <pubDate>Mon, 10 May 2021 15:45:22 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/10/lua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E6%97%85-%E5%86%8D%E6%AC%A1%E5%90%AF%E8%88%AA/</guid>
      <description>​ 第一次阅读lua源码从2019元旦，哪一年阅读计划失败，去年又心血来潮，尝试阅读，结果又是失败，今年再次重拾这个计划。 ​ 作为本系列文章的开</description>
    </item>
    
    <item>
      <title>blog搭建和lua源码阅读反思</title>
      <link>http://shanks.link/blog/2021/05/08/blog%E6%90%AD%E5%BB%BA%E5%92%8Clua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E5%8F%8D%E6%80%9D/</link>
      <pubDate>Sat, 08 May 2021 11:21:43 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/08/blog%E6%90%AD%E5%BB%BA%E5%92%8Clua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E5%8F%8D%E6%80%9D/</guid>
      <description>​ 折腾来折腾去还是购买了国外的主机，转移了网站，上午更新了DNS，现在能访问了。上周购买域名，搭建网站，前前后后花了不少时间，拖累了lua的</description>
    </item>
    
    <item>
      <title>周记-开篇</title>
      <link>http://shanks.link/blog/2021/05/06/%E5%91%A8%E8%AE%B0-%E5%BC%80%E7%AF%87/</link>
      <pubDate>Thu, 06 May 2021 23:18:54 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/06/%E5%91%A8%E8%AE%B0-%E5%BC%80%E7%AF%87/</guid>
      <description>​ 发现技术上没什么积累，年纪大了，心态有些急，最近收集了蛮多的文章，想想，总是看到文章就收集也不是个好办法，一个人的时间和精力都是有限的，把</description>
    </item>
    
    <item>
      <title>漫画 | 一台Linux服务器最多能支撑多少个TCP连接？</title>
      <link>http://shanks.link/blog/2021/05/06/%E6%BC%AB%E7%94%BB-%E4%B8%80%E5%8F%B0linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%80%E5%A4%9A%E8%83%BD%E6%94%AF%E6%92%91%E5%A4%9A%E5%B0%91%E4%B8%AAtcp%E8%BF%9E%E6%8E%A5/</link>
      <pubDate>Thu, 06 May 2021 18:03:28 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/06/%E6%BC%AB%E7%94%BB-%E4%B8%80%E5%8F%B0linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%80%E5%A4%9A%E8%83%BD%E6%94%AF%E6%92%91%E5%A4%9A%E5%B0%91%E4%B8%AAtcp%E8%BF%9E%E6%8E%A5/</guid>
      <description>漫画 | 一台Linux服务器最多能支撑多少个TCP连接？ 编者荐语： 这篇文章作者用通俗易懂的语言，图文并茂的为大家深入讲解了一台Linux服务器</description>
    </item>
    
    <item>
      <title>Go内存分配器的核心思想</title>
      <link>http://shanks.link/blog/2021/05/06/go%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8%E7%9A%84%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3/</link>
      <pubDate>Thu, 06 May 2021 17:45:50 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/06/go%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8%E7%9A%84%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3/</guid>
      <description>1、内存分配器的核心思想 Go 的内存分配器核心思想是将内存使用多级管理，降低锁的粒度。每个线程都有自己的本地内存，使用时先从线程本地的内存池进行</description>
    </item>
    
    <item>
      <title>Go工具之generate</title>
      <link>http://shanks.link/blog/2021/05/06/go%E5%B7%A5%E5%85%B7%E4%B9%8Bgenerate/</link>
      <pubDate>Thu, 06 May 2021 17:13:09 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/06/go%E5%B7%A5%E5%85%B7%E4%B9%8Bgenerate/</guid>
      <description>Go语言提供了一系列强大的工具，灵活使用这些工具，能够让我们的项目开发更加容易，工具集包含如下。 bug start a bug report build compile packages and dependencies clean remove object files and cached files doc show documentation for package</description>
    </item>
    
    <item>
      <title>Go是如何设计Map的</title>
      <link>http://shanks.link/blog/2021/05/06/go%E6%98%AF%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1map%E7%9A%84/</link>
      <pubDate>Thu, 06 May 2021 15:36:51 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/06/go%E6%98%AF%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1map%E7%9A%84/</guid>
      <description>由于本文篇幅较长，故将目录整理如下 ** ** 什么是Map 维基百科的定义 In computer science, an associative array, map, symbol table, or dictionary is an abstract data type composed of a collection of (key, value) pairs, such that each possible key appears at most once in the collection. 说明</description>
    </item>
    
    <item>
      <title>详解内联优化</title>
      <link>http://shanks.link/blog/2021/04/30/%E8%AF%A6%E8%A7%A3%E5%86%85%E8%81%94%E4%BC%98%E5%8C%96/</link>
      <pubDate>Fri, 30 Apr 2021 17:54:15 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/30/%E8%AF%A6%E8%A7%A3%E5%86%85%E8%81%94%E4%BC%98%E5%8C%96/</guid>
      <description>详解内联优化 为了保证程序的执行高效与安全，现代编译器并不会将程序员的代码直接翻译成相应地机器码，它需要做一系列的检查与优化。Go编译器默认做</description>
    </item>
    
    <item>
      <title>Go精妙的互斥锁设计</title>
      <link>http://shanks.link/blog/2021/04/30/go%E7%B2%BE%E5%A6%99%E7%9A%84%E4%BA%92%E6%96%A5%E9%94%81%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Fri, 30 Apr 2021 16:46:29 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/30/go%E7%B2%BE%E5%A6%99%E7%9A%84%E4%BA%92%E6%96%A5%E9%94%81%E8%AE%BE%E8%AE%A1/</guid>
      <description>*Some people, when confronted with a problem, think, “I know, I’ll use threads,” and then two they hav erpoblesms.* 1. 竞争条件 多线程程序在多核CPU机器上访问共享资源时，难免会遇到问题。我们可以</description>
    </item>
    
    <item>
      <title>Go中看似简单的WaitGroup源码设计，竟然暗含这么多知识？</title>
      <link>http://shanks.link/blog/2021/04/30/go%E4%B8%AD%E7%9C%8B%E4%BC%BC%E7%AE%80%E5%8D%95%E7%9A%84waitgroup%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E7%AB%9F%E7%84%B6%E6%9A%97%E5%90%AB%E8%BF%99%E4%B9%88%E5%A4%9A%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Fri, 30 Apr 2021 16:30:32 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/30/go%E4%B8%AD%E7%9C%8B%E4%BC%BC%E7%AE%80%E5%8D%95%E7%9A%84waitgroup%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E7%AB%9F%E7%84%B6%E6%9A%97%E5%90%AB%E8%BF%99%E4%B9%88%E5%A4%9A%E7%9F%A5%E8%AF%86/</guid>
      <description>Go中看似简单的WaitGroup源码设计，竟然暗含这么多知识？ Go语言提供的协程goroutine可以让我们很容易地写出多线程程序，但是，</description>
    </item>
    
    <item>
      <title>如何有效地测试Go代码</title>
      <link>http://shanks.link/blog/2021/04/30/%E5%A6%82%E4%BD%95%E6%9C%89%E6%95%88%E5%9C%B0%E6%B5%8B%E8%AF%95go%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Fri, 30 Apr 2021 16:21:08 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/30/%E5%A6%82%E4%BD%95%E6%9C%89%E6%95%88%E5%9C%B0%E6%B5%8B%E8%AF%95go%E4%BB%A3%E7%A0%81/</guid>
      <description>如何有效地测试Go代码 单元测试 如果把开发程序比作盖房子，那么我们必须确保所有的用料都是合格的，否则盖起来的房子就会存在问题。对于程序而言，我</description>
    </item>
    
    <item>
      <title>同步原理的基石</title>
      <link>http://shanks.link/blog/2021/04/30/%E5%90%8C%E6%AD%A5%E5%8E%9F%E7%90%86%E7%9A%84%E5%9F%BA%E7%9F%B3/</link>
      <pubDate>Fri, 30 Apr 2021 15:56:17 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/30/%E5%90%8C%E6%AD%A5%E5%8E%9F%E7%90%86%E7%9A%84%E5%9F%BA%E7%9F%B3/</guid>
      <description>同步原语的基石 Go是一门以并发编程见长的语言，它提供了一系列的同步原语方便开发者使用，例如sync包下的Mutex、RWMutex、Wait</description>
    </item>
    
    <item>
      <title>Golang append扩容机制</title>
      <link>http://shanks.link/blog/2021/04/30/golang-append%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Fri, 30 Apr 2021 11:37:56 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/30/golang-append%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/</guid>
      <description>append扩容机制 在《切片传递的隐藏危机》一文，小菜刀有简单地提及到切片扩容的问题。在读者讨论群，有人举了以下例子，并想得到一个合理的回答</description>
    </item>
    
    <item>
      <title>浅谈逃逸分析</title>
      <link>http://shanks.link/blog/2021/04/30/%E6%B5%85%E8%B0%88%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 30 Apr 2021 11:31:37 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/30/%E6%B5%85%E8%B0%88%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</guid>
      <description>详解逃逸分析 Go是一门带有垃圾回收的现代语言，它抛弃了传统C/C++的开发者需要手动管理内存的方式，实现了内存的主动申请和释放的管理。Go的</description>
    </item>
    
    <item>
      <title>Once函数单次调用</title>
      <link>http://shanks.link/blog/2021/04/29/once%E5%87%BD%E6%95%B0%E5%8D%95%E6%AC%A1%E8%B0%83%E7%94%A8/</link>
      <pubDate>Thu, 29 Apr 2021 17:59:10 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/29/once%E5%87%BD%E6%95%B0%E5%8D%95%E6%AC%A1%E8%B0%83%E7%94%A8/</guid>
      <description>认识单例 超超：您好，面试官~ 面试官：你好，你平时开发是用 windows 还是 linux 居多？ 超超：￣□￣｜｜我平时都是用windows开发的。 面试官：那你知道 windows 的</description>
    </item>
    
    <item>
      <title>面试题型系列:滑动窗口技巧</title>
      <link>http://shanks.link/blog/2021/04/29/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%9E%8B%E7%B3%BB%E5%88%97%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Thu, 29 Apr 2021 17:52:09 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/29/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%9E%8B%E7%B3%BB%E5%88%97%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%8A%80%E5%B7%A7/</guid>
      <description>面试题型系列：滑动窗口技巧 本文是公众号读者上山打老虎的第二篇原创投稿，主要内容是讲解算法技巧之滑动窗口。上山兄一直保持着刷题的习惯，并形成了</description>
    </item>
    
    <item>
      <title>切片传递的隐藏危机</title>
      <link>http://shanks.link/blog/2021/04/29/%E5%88%87%E7%89%87%E4%BC%A0%E9%80%92%E7%9A%84%E9%9A%90%E8%97%8F%E5%8D%B1%E6%9C%BA/</link>
      <pubDate>Thu, 29 Apr 2021 11:47:34 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/29/%E5%88%87%E7%89%87%E4%BC%A0%E9%80%92%E7%9A%84%E9%9A%90%E8%97%8F%E5%8D%B1%E6%9C%BA/</guid>
      <description>切片传递的隐藏危机 在Go的源码库或者其他开源项目中，会发现有些函数在需要用到切片入参时，它采用是指向切片类型的指针，而非切片类型。这里未免会</description>
    </item>
    
    <item>
      <title>一文读懂channel设计</title>
      <link>http://shanks.link/blog/2021/04/29/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82channel%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Thu, 29 Apr 2021 11:30:12 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/29/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82channel%E8%AE%BE%E8%AE%A1/</guid>
      <description>在Go中，要理解channel，首先需要认识goroutine。 为什么会有goroutine 现代操作系统中为我们提供了三种基本的构造并发程序</description>
    </item>
    
    <item>
      <title>Go函数调用惯例</title>
      <link>http://shanks.link/blog/2021/04/28/go%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%83%AF%E4%BE%8B/</link>
      <pubDate>Wed, 28 Apr 2021 11:59:41 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/28/go%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%83%AF%E4%BE%8B/</guid>
      <description>Go函数调用惯例 本文旨在探讨Go函数中的一个问题：**为什么Go函数能支持多参数返回，而C/C++、java不行？**这其实牵涉到了一个叫做</description>
    </item>
    
    <item>
      <title>CPU缓存体系对程序的影响</title>
      <link>http://shanks.link/blog/2021/04/28/cpu%E7%BC%93%E5%AD%98%E4%BD%93%E7%B3%BB%E5%AF%B9%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%BD%B1%E5%93%8D/</link>
      <pubDate>Wed, 28 Apr 2021 11:36:26 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/28/cpu%E7%BC%93%E5%AD%98%E4%BD%93%E7%B3%BB%E5%AF%B9%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%BD%B1%E5%93%8D/</guid>
      <description>CPU缓存体系对Go程序的影响 小菜刀最近在medium上阅读了一篇高赞文章《Go and CPU Caches》，其地址为https://teivah.m</description>
    </item>
    
    <item>
      <title>Go的string与[]byte转换原理</title>
      <link>http://shanks.link/blog/2021/04/27/go%E7%9A%84string%E4%B8%8Ebyte%E8%BD%AC%E6%8D%A2%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 27 Apr 2021 15:13:15 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/27/go%E7%9A%84string%E4%B8%8Ebyte%E8%BD%AC%E6%8D%A2%E5%8E%9F%E7%90%86/</guid>
      <description>string类型和[]byte类型是我们编程时最常使用到的数据结构。本文将探讨两者之间的转换方式，通过分析它们之间的内在联系来拨开迷雾。 两种</description>
    </item>
    
    <item>
      <title>Go工具之vet静态诊断器</title>
      <link>http://shanks.link/blog/2021/04/27/go%E5%B7%A5%E5%85%B7%E4%B9%8Bvet%E9%9D%99%E6%80%81%E8%AF%8A%E6%96%AD%E5%99%A8/</link>
      <pubDate>Tue, 27 Apr 2021 15:06:32 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/27/go%E5%B7%A5%E5%85%B7%E4%B9%8Bvet%E9%9D%99%E6%80%81%E8%AF%8A%E6%96%AD%E5%99%A8/</guid>
      <description>Go工具之vet——静态诊断器 go的vet工具是go代码静态诊断器，可以用以检查go项目中可通过编译但仍可能存在错误的代码，例如无法访问的代</description>
    </item>
    
    <item>
      <title>不能忽略GoRoutinue的启动时间</title>
      <link>http://shanks.link/blog/2021/04/27/%E4%B8%8D%E8%83%BD%E5%BF%BD%E7%95%A5goroutinue%E7%9A%84%E5%90%AF%E5%8A%A8%E6%97%B6%E9%97%B4/</link>
      <pubDate>Tue, 27 Apr 2021 14:48:35 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/27/%E4%B8%8D%E8%83%BD%E5%BF%BD%E7%95%A5goroutinue%E7%9A%84%E5%90%AF%E5%8A%A8%E6%97%B6%E9%97%B4/</guid>
      <description>不要忽略goroutine的启动时间 项目中需要将数据推给多个服务器，大致如下 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sync&amp;#34; ) func mockSendToServer(url string) { fmt.Printf(&amp;#34;server url: %s\n&amp;#34;, url) } func main() { urls := []string{&amp;#34;0.0.0.0:5000&amp;#34;, &amp;#34;0.0.0.0:6000&amp;#34;, &amp;#34;0.0.0.0:7000&amp;#34;} wg := sync.WaitGroup{} for _, url := range</description>
    </item>
    
    <item>
      <title>深入理解sync.Once</title>
      <link>http://shanks.link/blog/2021/04/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3sync.once/</link>
      <pubDate>Tue, 27 Apr 2021 11:43:13 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3sync.once/</guid>
      <description>深入理解sync.Once sync.Once是让函数方法只被调用执行一次的实现，其最常应用于单例模式之下，例如初始化系统配置、保持数据库唯一</description>
    </item>
    
    <item>
      <title>数据库连接池</title>
      <link>http://shanks.link/blog/2021/04/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</link>
      <pubDate>Tue, 27 Apr 2021 11:18:05 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</guid>
      <description>数据库连接池 池（Pool）是指某类资源的容器，它是一种用于提高程序效率和降低系统开销的技术，比如线程池、连接池、内存池、对象池。但它们的核心</description>
    </item>
    
    <item>
      <title>Go no copy 机制</title>
      <link>http://shanks.link/blog/2021/04/27/go-no-copy-%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 27 Apr 2021 11:11:13 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/27/go-no-copy-%E6%9C%BA%E5%88%B6/</guid>
      <description>no copy机制 小菜刀读Go源码时，发现一个高频注释语句“XXX must not be copied after first use“。例如sync包下的Pool、Cond、WaitGroup</description>
    </item>
    
    <item>
      <title>万能钥匙中间层</title>
      <link>http://shanks.link/blog/2021/04/26/%E4%B8%87%E8%83%BD%E9%92%A5%E5%8C%99%E4%B8%AD%E9%97%B4%E5%B1%82/</link>
      <pubDate>Mon, 26 Apr 2021 19:13:05 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/26/%E4%B8%87%E8%83%BD%E9%92%A5%E5%8C%99%E4%B8%AD%E9%97%B4%E5%B1%82/</guid>
      <description>万能钥匙-中间层 最近小菜刀重读《程序员的自我修养》，里面提到过一句名言：计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决。 上述名</description>
    </item>
    
    <item>
      <title>信号处理与Go程序的优雅退出</title>
      <link>http://shanks.link/blog/2021/04/26/%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E4%B8%8Ego%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%BC%98%E9%9B%85%E9%80%80%E5%87%BA/</link>
      <pubDate>Mon, 26 Apr 2021 19:00:14 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/26/%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E4%B8%8Ego%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%BC%98%E9%9B%85%E9%80%80%E5%87%BA/</guid>
      <description>信号处理与Go程序的优雅退出 学过计算机系统的人，应该知道异常控制流（ECF）。异常控制流发生在计算机系统的各个层次。比如，在硬件层，硬件检测</description>
    </item>
    
    <item>
      <title>深入理解syncMap</title>
      <link>http://shanks.link/blog/2021/04/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3syncmap/</link>
      <pubDate>Mon, 26 Apr 2021 18:45:00 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3syncmap/</guid>
      <description>深入理解sync.Map golang中内置了map关键字，但是它是非线程安全的。从go 1.9开始，标准库加入了sync.Map，提供用于并发</description>
    </item>
    
    <item>
      <title>高并发系统之限流技术</title>
      <link>http://shanks.link/blog/2021/04/26/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E4%B9%8B%E9%99%90%E6%B5%81%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Mon, 26 Apr 2021 18:19:51 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/26/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E4%B9%8B%E9%99%90%E6%B5%81%E6%8A%80%E6%9C%AF/</guid>
      <description>高并发系统之限流技术 在开发高并发系统时，有三把利器用来保护系统：缓存、降级和限流。限流是指通过对并发访问/请求进行限速或者对一个时间内的的请</description>
    </item>
    
    <item>
      <title>Golang开发者学习图鉴</title>
      <link>http://shanks.link/blog/2021/04/26/golang%E5%BC%80%E5%8F%91%E8%80%85%E5%AD%A6%E4%B9%A0%E5%9B%BE%E9%89%B4/</link>
      <pubDate>Mon, 26 Apr 2021 18:08:01 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/26/golang%E5%BC%80%E5%8F%91%E8%80%85%E5%AD%A6%E4%B9%A0%E5%9B%BE%E9%89%B4/</guid>
      <description>Golang开发者学习图鉴 想成为一名优秀的Golang开发者，你知道需要掌握哪些技能吗？为了帮助你更好的上🚗，本文为你提供了2020版Go开</description>
    </item>
    
    <item>
      <title>Go并发控制</title>
      <link>http://shanks.link/blog/2021/04/26/go%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Mon, 26 Apr 2021 17:54:51 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/26/go%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</guid>
      <description>Golang并发控制简述 引言 Golang中通过go关键字就可开启一个goroutine，因此，在Go中可以轻松写出并发代码。但是，如何对这些</description>
    </item>
    
    <item>
      <title>Go之Sort排序</title>
      <link>http://shanks.link/blog/2021/04/26/go%E4%B9%8Bsort%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Mon, 26 Apr 2021 17:43:34 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/26/go%E4%B9%8Bsort%E6%8E%92%E5%BA%8F/</guid>
      <description>Golang之sort包 Go语言是一门非常简单优雅的语言，其源码更是其风格标杆。看源码，不仅能学习Go的设计哲学，了解如何调用库函数，同时帮</description>
    </item>
    
    <item>
      <title>Go交叉编译</title>
      <link>http://shanks.link/blog/2021/04/26/go%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</link>
      <pubDate>Mon, 26 Apr 2021 17:32:23 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/26/go%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</guid>
      <description>Go交叉编译 交叉编译是指在一个硬件平台生成另一个硬件平台的可执行文件。而Go提供了非常方便的交叉编译方式。 如何编译 Go交叉编译，涉及到几个环</description>
    </item>
    
    <item>
      <title>如何管理自己的时间资产</title>
      <link>http://shanks.link/blog/2021/04/26/%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86%E8%87%AA%E5%B7%B1%E7%9A%84%E6%97%B6%E9%97%B4%E8%B5%84%E4%BA%A7/</link>
      <pubDate>Mon, 26 Apr 2021 17:10:39 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/26/%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86%E8%87%AA%E5%B7%B1%E7%9A%84%E6%97%B6%E9%97%B4%E8%B5%84%E4%BA%A7/</guid>
      <description>时间是我们最重要的资产，对时间的使用和管理决定了我们的个人成长。人的注意力是有限的，我们不能将同一份时间投入到不同的事情中，一旦选择花费时间</description>
    </item>
    
    <item>
      <title>Go语言内部包--控制包成员的对外暴露</title>
      <link>http://shanks.link/blog/2021/04/26/go%E8%AF%AD%E8%A8%80%E5%86%85%E9%83%A8%E5%8C%85-%E6%8E%A7%E5%88%B6%E5%8C%85%E6%88%90%E5%91%98%E7%9A%84%E5%AF%B9%E5%A4%96%E6%9A%B4%E9%9C%B2/</link>
      <pubDate>Mon, 26 Apr 2021 11:21:21 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/26/go%E8%AF%AD%E8%A8%80%E5%86%85%E9%83%A8%E5%8C%85-%E6%8E%A7%E5%88%B6%E5%8C%85%E6%88%90%E5%91%98%E7%9A%84%E5%AF%B9%E5%A4%96%E6%9A%B4%E9%9C%B2/</guid>
      <description>Go语言内部包&amp;ndash;控制包成员的对外暴露 Go 语言中的软件包推荐按照：组织名/项目名 的形式安排软件包的文件目录结构，一般「项目名」文件目</description>
    </item>
    
    <item>
      <title>Go 面试官：什么是协程，协程和线程的区别和联系？</title>
      <link>http://shanks.link/blog/2021/04/25/go-%E9%9D%A2%E8%AF%95%E5%AE%98%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%8F%E7%A8%8B%E5%8D%8F%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB/</link>
      <pubDate>Sun, 25 Apr 2021 11:17:04 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/25/go-%E9%9D%A2%E8%AF%95%E5%AE%98%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%8F%E7%A8%8B%E5%8D%8F%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB/</guid>
      <description>既要理解线程，还要讲解协程，并且诠释两者间的区别，但是由于提到线程，就必然涉及进程，因此本文将会同时梳理介绍 “进程、协程、协程” 三者的随笔知</description>
    </item>
    
    <item>
      <title>从底层到应用，想深入Map这篇文章千万不要错过！</title>
      <link>http://shanks.link/blog/2021/04/20/%E4%BB%8E%E5%BA%95%E5%B1%82%E5%88%B0%E5%BA%94%E7%94%A8%E6%83%B3%E6%B7%B1%E5%85%A5map%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E5%8D%83%E4%B8%87%E4%B8%8D%E8%A6%81%E9%94%99%E8%BF%87/</link>
      <pubDate>Tue, 20 Apr 2021 15:25:11 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/20/%E4%BB%8E%E5%BA%95%E5%B1%82%E5%88%B0%E5%BA%94%E7%94%A8%E6%83%B3%E6%B7%B1%E5%85%A5map%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E5%8D%83%E4%B8%87%E4%B8%8D%E8%A6%81%E9%94%99%E8%BF%87/</guid>
      <description>转载自上山打老虎的blog 超超经过了一番磨难通过了面试官单例的灵魂拷问，面试官貌似想通过一道场景应用题来考验超超对Golang的容器是否足够</description>
    </item>
    
    <item>
      <title>嗯，你觉得 Go 在什么时候会抢占 P？</title>
      <link>http://shanks.link/blog/2021/04/19/%E5%97%AF%E4%BD%A0%E8%A7%89%E5%BE%97-go-%E5%9C%A8%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%8A%A2%E5%8D%A0-p/</link>
      <pubDate>Mon, 19 Apr 2021 20:13:34 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/19/%E5%97%AF%E4%BD%A0%E8%A7%89%E5%BE%97-go-%E5%9C%A8%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%8A%A2%E5%8D%A0-p/</guid>
      <description>嗯，你觉得 Go 在什么时候会抢占 P？ 前几天我们有聊到《单核 CPU，开两个 Goroutine，其中一个死循环，会怎么样？》的问题，我们在一个细节部</description>
    </item>
    
    <item>
      <title>The Go runtime scheduler&#39;s clever way of dealing with system calls</title>
      <link>http://shanks.link/blog/2021/04/19/the-go-runtime-schedulers-clever-way-of-dealing-with-system-calls/</link>
      <pubDate>Mon, 19 Apr 2021 17:53:16 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/19/the-go-runtime-schedulers-clever-way-of-dealing-with-system-calls/</guid>
      <description>The Go runtime scheduler&amp;rsquo;s clever way of dealing with system calls One of Go&amp;rsquo;s signature features is goroutines, which are lightweight threads that are managed by the Go runtime. The Go runtime implements goroutines using a M:N work stealing scheduler to multiplex goroutines on to operating system threads. The scheduler has special terminology for three important entities; a G is a goroutine, an M is an OS thread (a &amp;lsquo;machine&amp;rsquo;),</description>
    </item>
    
    <item>
      <title>用 Go struct 不能犯的一个低级错误！</title>
      <link>http://shanks.link/blog/2021/04/18/%E7%94%A8-go-struct-%E4%B8%8D%E8%83%BD%E7%8A%AF%E7%9A%84%E4%B8%80%E4%B8%AA%E4%BD%8E%E7%BA%A7%E9%94%99%E8%AF%AF/</link>
      <pubDate>Sun, 18 Apr 2021 00:42:39 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/18/%E7%94%A8-go-struct-%E4%B8%8D%E8%83%BD%E7%8A%AF%E7%9A%84%E4%B8%80%E4%B8%AA%E4%BD%8E%E7%BA%A7%E9%94%99%E8%AF%AF/</guid>
      <description>转载自煎鱼的blog 用 Go struct 不能犯的一个低级错误！ 原创 陈煎鱼 脑子进煎鱼了 3天前 收录于话题 #Go45 #面试题13 大家好，我是煎鱼。 前段时间我分享了 《手撕</description>
    </item>
    
    <item>
      <title>Goroutine 泄露的 N 种方法，真刺激！</title>
      <link>http://shanks.link/blog/2021/04/18/goroutine-%E6%B3%84%E9%9C%B2%E7%9A%84-n-%E7%A7%8D%E6%96%B9%E6%B3%95%E7%9C%9F%E5%88%BA%E6%BF%80/</link>
      <pubDate>Sun, 18 Apr 2021 00:10:42 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/18/goroutine-%E6%B3%84%E9%9C%B2%E7%9A%84-n-%E7%A7%8D%E6%96%B9%E6%B3%95%E7%9C%9F%E5%88%BA%E6%BF%80/</guid>
      <description>转载自煎鱼的blog 大家好，我是煎鱼。 前几天分享 Go 群友提问的文章时，有读者在朋友圈下提到，希望我能够针对 Goroutine 泄露这块进行讲解，他在面试的时候经</description>
    </item>
    
    <item>
      <title>你知道 Go 结构体和结构体指针调用有什么区别吗？</title>
      <link>http://shanks.link/blog/2021/04/17/%E4%BD%A0%E7%9F%A5%E9%81%93-go-%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E7%BB%93%E6%9E%84%E4%BD%93%E6%8C%87%E9%92%88%E8%B0%83%E7%94%A8%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%E5%90%97/</link>
      <pubDate>Sat, 17 Apr 2021 23:59:23 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/17/%E4%BD%A0%E7%9F%A5%E9%81%93-go-%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E7%BB%93%E6%9E%84%E4%BD%93%E6%8C%87%E9%92%88%E8%B0%83%E7%94%A8%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%E5%90%97/</guid>
      <description>转载自煎鱼的blog 本期的男主角是《Go 结构体和结构体指针调用有什么区别》，希望对大家有所帮助，带来一些思考。 请在此处默念自己心目中的答案，</description>
    </item>
    
    <item>
      <title>再见 Go 面试官：单核 CPU，开两个 Goroutine，其中一个死循环，会怎么样</title>
      <link>http://shanks.link/blog/2021/04/17/%E5%86%8D%E8%A7%81-go-%E9%9D%A2%E8%AF%95%E5%AE%98%E5%8D%95%E6%A0%B8-cpu%E5%BC%80%E4%B8%A4%E4%B8%AA-goroutine%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%AD%BB%E5%BE%AA%E7%8E%AF%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7/</link>
      <pubDate>Sat, 17 Apr 2021 23:45:39 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/17/%E5%86%8D%E8%A7%81-go-%E9%9D%A2%E8%AF%95%E5%AE%98%E5%8D%95%E6%A0%B8-cpu%E5%BC%80%E4%B8%A4%E4%B8%AA-goroutine%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%AD%BB%E5%BE%AA%E7%8E%AF%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7/</guid>
      <description>以下转载自煎鱼的blog 最近金三银四，是面试的季节。在我的 Go 读者交流群里出现了许多小伙伴在讨论自己面试过程中所遇到的一些 Go 面试题。若大家有兴</description>
    </item>
    
    <item>
      <title>Go 内存泄露之痛，这篇把 Go timer.After 问题根因讲透了！</title>
      <link>http://shanks.link/blog/2021/04/17/go-%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%B9%8B%E7%97%9B%E8%BF%99%E7%AF%87%E6%8A%8A-go-timer.after-%E9%97%AE%E9%A2%98%E6%A0%B9%E5%9B%A0%E8%AE%B2%E9%80%8F%E4%BA%86/</link>
      <pubDate>Sat, 17 Apr 2021 23:33:30 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/17/go-%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%B9%8B%E7%97%9B%E8%BF%99%E7%AF%87%E6%8A%8A-go-timer.after-%E9%97%AE%E9%A2%98%E6%A0%B9%E5%9B%A0%E8%AE%B2%E9%80%8F%E4%BA%86/</guid>
      <description>转载自煎鱼的blog 前几天在公众号分享了一篇 Go timer 源码解析的文章《难以驾驭的 Go timer，一文带你参透计时器的奥秘》。 如果大家也有兴趣共同交流</description>
    </item>
    
    <item>
      <title>手撕 Go 面试官：Go 结构体是否可以比较，为什么？</title>
      <link>http://shanks.link/blog/2021/04/16/%E6%89%8B%E6%92%95-go-%E9%9D%A2%E8%AF%95%E5%AE%98go-%E7%BB%93%E6%9E%84%E4%BD%93%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E6%AF%94%E8%BE%83%E4%B8%BA%E4%BB%80%E4%B9%88/</link>
      <pubDate>Fri, 16 Apr 2021 18:58:13 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/16/%E6%89%8B%E6%92%95-go-%E9%9D%A2%E8%AF%95%E5%AE%98go-%E7%BB%93%E6%9E%84%E4%BD%93%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E6%AF%94%E8%BE%83%E4%B8%BA%E4%BB%80%E4%B9%88/</guid>
      <description>转载自煎鱼的blog 今天的男主角，是 Go 工程师的必修技能，也是极容易踩坑的地方，就是 “Go 面试题：Go 结构体（struct）是否可以比较？” 如</description>
    </item>
    
    <item>
      <title>难以驾驭的 Go timer，一文带你参透计时器的奥秘</title>
      <link>http://shanks.link/blog/2021/04/16/%E9%9A%BE%E4%BB%A5%E9%A9%BE%E9%A9%AD%E7%9A%84-go-timer%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E5%8F%82%E9%80%8F%E8%AE%A1%E6%97%B6%E5%99%A8%E7%9A%84%E5%A5%A5%E7%A7%98/</link>
      <pubDate>Fri, 16 Apr 2021 18:40:40 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/16/%E9%9A%BE%E4%BB%A5%E9%A9%BE%E9%A9%AD%E7%9A%84-go-timer%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E5%8F%82%E9%80%8F%E8%AE%A1%E6%97%B6%E5%99%A8%E7%9A%84%E5%A5%A5%E7%A7%98/</guid>
      <description>转载自煎鱼的blog #Go进阶之旅1 大家好，我是煎鱼。久违的源码剖析系列，让我们一起努力，看看谁能坚持到最后，因为学习一定是给能够坚持重复啃</description>
    </item>
    
    <item>
      <title>再见 Go 面试官：GMP 模型，为什么要有 P？</title>
      <link>http://shanks.link/blog/2021/04/16/%E5%86%8D%E8%A7%81-go-%E9%9D%A2%E8%AF%95%E5%AE%98gmp-%E6%A8%A1%E5%9E%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89-p/</link>
      <pubDate>Fri, 16 Apr 2021 18:20:16 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/16/%E5%86%8D%E8%A7%81-go-%E9%9D%A2%E8%AF%95%E5%AE%98gmp-%E6%A8%A1%E5%9E%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89-p/</guid>
      <description>转载自煎鱼的blog 最近金三银四，是面试的季节。在我的 Go 读者交流群里出现了许多小伙伴在讨论自己面试过程中所遇到的一些 Go 面试题。 今天的主角，是</description>
    </item>
    
    <item>
      <title>Go 群友提问：进程、线程都有 ID，为什么 Goroutine 没有 ID？</title>
      <link>http://shanks.link/blog/2021/04/16/go-%E7%BE%A4%E5%8F%8B%E6%8F%90%E9%97%AE%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E9%83%BD%E6%9C%89-id%E4%B8%BA%E4%BB%80%E4%B9%88-goroutine-%E6%B2%A1%E6%9C%89-id/</link>
      <pubDate>Fri, 16 Apr 2021 17:32:55 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/16/go-%E7%BE%A4%E5%8F%8B%E6%8F%90%E9%97%AE%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E9%83%BD%E6%9C%89-id%E4%B8%BA%E4%BB%80%E4%B9%88-goroutine-%E6%B2%A1%E6%9C%89-id/</guid>
      <description>转载自煎鱼的blog 今天的主角，是大家在既有语言基础的情况下，学 Goroutine 时会容易纠结的一点。就是 “进程、线程都有 ID，为什么 Goroutine 没有 Goroutin</description>
    </item>
    
    <item>
      <title>Go 语言中的一等公民：看似普通的函数，凭什么？</title>
      <link>http://shanks.link/blog/2021/04/16/go-%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E4%B8%80%E7%AD%89%E5%85%AC%E6%B0%91%E7%9C%8B%E4%BC%BC%E6%99%AE%E9%80%9A%E7%9A%84%E5%87%BD%E6%95%B0%E5%87%AD%E4%BB%80%E4%B9%88/</link>
      <pubDate>Fri, 16 Apr 2021 17:19:05 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/16/go-%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E4%B8%80%E7%AD%89%E5%85%AC%E6%B0%91%E7%9C%8B%E4%BC%BC%E6%99%AE%E9%80%9A%E7%9A%84%E5%87%BD%E6%95%B0%E5%87%AD%E4%BB%80%E4%B9%88/</guid>
      <description>转载自煎鱼的blog 在 Go 语言中，一提函数，大家提的最多的就是 “Go 语言的函数是一等公民”。这个定义来的非常突然，我们先了解一下什么是一等公民</description>
    </item>
    
    <item>
      <title>Go 面试题：Go interface 的一个 坑 及原理分析</title>
      <link>http://shanks.link/blog/2021/04/16/go-%E9%9D%A2%E8%AF%95%E9%A2%98go-interface-%E7%9A%84%E4%B8%80%E4%B8%AA-%E5%9D%91-%E5%8F%8A%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 16 Apr 2021 17:10:27 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/16/go-%E9%9D%A2%E8%AF%95%E9%A2%98go-interface-%E7%9A%84%E4%B8%80%E4%B8%AA-%E5%9D%91-%E5%8F%8A%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</guid>
      <description>以下内容转载自煎鱼的blog Go 面试题：Go interface 的一个 “坑” 及原理分析 原创 陈煎鱼 脑子进煎鱼了 3月16日 收录于话题 #Go45 #面试题13 大家好，我是煎鱼。</description>
    </item>
    
    <item>
      <title>Go 群友提问：学习 defer 时很懵逼，这道不会做！</title>
      <link>http://shanks.link/blog/2021/04/16/go-%E7%BE%A4%E5%8F%8B%E6%8F%90%E9%97%AE%E5%AD%A6%E4%B9%A0-defer-%E6%97%B6%E5%BE%88%E6%87%B5%E9%80%BC%E8%BF%99%E9%81%93%E4%B8%8D%E4%BC%9A%E5%81%9A/</link>
      <pubDate>Fri, 16 Apr 2021 17:00:42 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/16/go-%E7%BE%A4%E5%8F%8B%E6%8F%90%E9%97%AE%E5%AD%A6%E4%B9%A0-defer-%E6%97%B6%E5%BE%88%E6%87%B5%E9%80%BC%E8%BF%99%E9%81%93%E4%B8%8D%E4%BC%9A%E5%81%9A/</guid>
      <description>Go 群友提问：学习 defer 时很懵逼，这道不会做！ 转载自煎鱼的blog 前几天在读者交流群里看到一位小伙伴，在向大家咨询 Go 相关的技术问题。疑问是：“各位</description>
    </item>
    
    <item>
      <title>Go 群友提问：Goroutine 数量控制在多少合适，会影响 GC 和调度？</title>
      <link>http://shanks.link/blog/2021/04/16/go-%E7%BE%A4%E5%8F%8B%E6%8F%90%E9%97%AEgoroutine-%E6%95%B0%E9%87%8F%E6%8E%A7%E5%88%B6%E5%9C%A8%E5%A4%9A%E5%B0%91%E5%90%88%E9%80%82%E4%BC%9A%E5%BD%B1%E5%93%8D-gc-%E5%92%8C%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Fri, 16 Apr 2021 15:53:17 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/16/go-%E7%BE%A4%E5%8F%8B%E6%8F%90%E9%97%AEgoroutine-%E6%95%B0%E9%87%8F%E6%8E%A7%E5%88%B6%E5%9C%A8%E5%A4%9A%E5%B0%91%E5%90%88%E9%80%82%E4%BC%9A%E5%BD%B1%E5%93%8D-gc-%E5%92%8C%E8%B0%83%E5%BA%A6/</guid>
      <description>以下内容转载自煎鱼的blog 前几天在读者交流群里看到一位小伙伴，发出了一个致命提问，那就是：“单机的 goroutine 数量控制在多少比较合适？”。 也许你和群</description>
    </item>
    
    <item>
      <title>Go 面试题： new 和 make 是什么，差异在哪？</title>
      <link>http://shanks.link/blog/2021/04/16/go-%E9%9D%A2%E8%AF%95%E9%A2%98-new-%E5%92%8C-make-%E6%98%AF%E4%BB%80%E4%B9%88%E5%B7%AE%E5%BC%82%E5%9C%A8%E5%93%AA/</link>
      <pubDate>Fri, 16 Apr 2021 14:49:39 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/16/go-%E9%9D%A2%E8%AF%95%E9%A2%98-new-%E5%92%8C-make-%E6%98%AF%E4%BB%80%E4%B9%88%E5%B7%AE%E5%BC%82%E5%9C%A8%E5%93%AA/</guid>
      <description>转载自煎鱼的blog Go 面试题： new 和 make 是什么，差异在哪？ 在 Go 语言中，有两个比较雷同的内置函数，分别是 new 和 make 方法，其主要用途都是用于分配相应类型</description>
    </item>
    
    <item>
      <title>灵魂拷问 Go 语言：这个变量到底分配到哪里了？</title>
      <link>http://shanks.link/blog/2021/04/16/%E7%81%B5%E9%AD%82%E6%8B%B7%E9%97%AE-go-%E8%AF%AD%E8%A8%80%E8%BF%99%E4%B8%AA%E5%8F%98%E9%87%8F%E5%88%B0%E5%BA%95%E5%88%86%E9%85%8D%E5%88%B0%E5%93%AA%E9%87%8C%E4%BA%86/</link>
      <pubDate>Fri, 16 Apr 2021 11:18:05 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/16/%E7%81%B5%E9%AD%82%E6%8B%B7%E9%97%AE-go-%E8%AF%AD%E8%A8%80%E8%BF%99%E4%B8%AA%E5%8F%98%E9%87%8F%E5%88%B0%E5%BA%95%E5%88%86%E9%85%8D%E5%88%B0%E5%93%AA%E9%87%8C%E4%BA%86/</guid>
      <description>以下内容转载自煎鱼的blog 我们在写代码的时候，有时候会想这个变量到底分配到哪里了？这时候可能会有人说，在栈上，在堆上。信我准没错&amp;hell</description>
    </item>
    
    <item>
      <title>Go1.16 新特性：Go mod 的后悔药，仅需这一招</title>
      <link>http://shanks.link/blog/2021/04/16/go1.16-%E6%96%B0%E7%89%B9%E6%80%A7go-mod-%E7%9A%84%E5%90%8E%E6%82%94%E8%8D%AF%E4%BB%85%E9%9C%80%E8%BF%99%E4%B8%80%E6%8B%9B/</link>
      <pubDate>Fri, 16 Apr 2021 11:07:00 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/16/go1.16-%E6%96%B0%E7%89%B9%E6%80%A7go-mod-%E7%9A%84%E5%90%8E%E6%82%94%E8%8D%AF%E4%BB%85%E9%9C%80%E8%BF%99%E4%B8%80%E6%8B%9B/</guid>
      <description>以下内容转载自煎鱼的blog 前几天 Go 官方正式发布了 1.16 版本。从这个版本起，环境变量 GO111MODULE 的默认值正式修改为 on。 这也意味着 Go modules 将更进一步推进其业务</description>
    </item>
    
    <item>
      <title>Go1.16 新特性：详解内存管理机制的变更</title>
      <link>http://shanks.link/blog/2021/04/16/go1.16-%E6%96%B0%E7%89%B9%E6%80%A7%E8%AF%A6%E8%A7%A3%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6%E7%9A%84%E5%8F%98%E6%9B%B4/</link>
      <pubDate>Fri, 16 Apr 2021 10:55:29 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/16/go1.16-%E6%96%B0%E7%89%B9%E6%80%A7%E8%AF%A6%E8%A7%A3%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6%E7%9A%84%E5%8F%98%E6%9B%B4/</guid>
      <description>以下内容转载自煎鱼的blog 在上一篇 Go1.16 特性介绍的文章中我们有提到，从 v1.16 起，Go 在 Linux 下的默认内存管理策略会从MADV_FREE 改回 MADV_DONTNEED 策略。 这时</description>
    </item>
    
    <item>
      <title>Go116新特性Goembed</title>
      <link>http://shanks.link/blog/2021/04/15/go116%E6%96%B0%E7%89%B9%E6%80%A7goembed/</link>
      <pubDate>Thu, 15 Apr 2021 19:32:27 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/15/go116%E6%96%B0%E7%89%B9%E6%80%A7goembed/</guid>
      <description>Go1.16 新特性：一文快速上手 Go embed 以下内容转载自煎鱼的blog 大家好，我是正在沉迷学习煎鱼的煎鱼。 在以前，很多从其他语言转过来 Go 语言的同学会问到，或</description>
    </item>
    
    <item>
      <title>上下文Context</title>
      <link>http://shanks.link/blog/2021/04/15/%E4%B8%8A%E4%B8%8B%E6%96%87context/</link>
      <pubDate>Thu, 15 Apr 2021 18:19:18 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/15/%E4%B8%8A%E4%B8%8B%E6%96%87context/</guid>
      <description>以下内容转载自面向信仰编程 6.1 上下文 Context # 上下文 context.Context Go 语言中用来设置截止日期、同步信号，传递请求相关值的结构体。上下文与 Goroutine 有比较密切的关系，是 Go 语</description>
    </item>
    
    <item>
      <title>一文吃透 Go 语言解密之上下文 context</title>
      <link>http://shanks.link/blog/2021/04/15/%E4%B8%80%E6%96%87%E5%90%83%E9%80%8F-go-%E8%AF%AD%E8%A8%80%E8%A7%A3%E5%AF%86%E4%B9%8B%E4%B8%8A%E4%B8%8B%E6%96%87-context/</link>
      <pubDate>Thu, 15 Apr 2021 16:08:31 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/15/%E4%B8%80%E6%96%87%E5%90%83%E9%80%8F-go-%E8%AF%AD%E8%A8%80%E8%A7%A3%E5%AF%86%E4%B9%8B%E4%B8%8A%E4%B8%8B%E6%96%87-context/</guid>
      <description>一文吃透 Go 语言解密之上下文 context 转载自煎鱼的blog 上下文（Context）是 Go 语言中非常有特色的一个特性， 在 Go 1.7 版本中正式引入新标准库 cont</description>
    </item>
    
    <item>
      <title>一文吃透 Go 语言解密之接口 interface</title>
      <link>http://shanks.link/blog/2021/04/15/%E4%B8%80%E6%96%87%E5%90%83%E9%80%8F-go-%E8%AF%AD%E8%A8%80%E8%A7%A3%E5%AF%86%E4%B9%8B%E6%8E%A5%E5%8F%A3-interface/</link>
      <pubDate>Thu, 15 Apr 2021 15:34:27 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/15/%E4%B8%80%E6%96%87%E5%90%83%E9%80%8F-go-%E8%AF%AD%E8%A8%80%E8%A7%A3%E5%AF%86%E4%B9%8B%E6%8E%A5%E5%8F%A3-interface/</guid>
      <description>一文吃透 Go 语言解密之接口 interface 转载自煎鱼的blog 自古流传着一个传言&amp;hellip;在 Go 语言面试的时候必有人会问接口（interface）的实现</description>
    </item>
    
    <item>
      <title>一文带你解密 Go 语言之通道 channel</title>
      <link>http://shanks.link/blog/2021/04/15/%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E8%A7%A3%E5%AF%86-go-%E8%AF%AD%E8%A8%80%E4%B9%8B%E9%80%9A%E9%81%93-channel/</link>
      <pubDate>Thu, 15 Apr 2021 11:42:26 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/15/%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E8%A7%A3%E5%AF%86-go-%E8%AF%AD%E8%A8%80%E4%B9%8B%E9%80%9A%E9%81%93-channel/</guid>
      <description>转载自煎鱼的blog 今天这篇文章主要是针对 Go channel 的重点分析，一开始写的时候以为范围不会太大，但洋洋洒洒还是写破了万字，成为了一篇覆盖面较广和有</description>
    </item>
    
    <item>
      <title>解密 Go 语言之反射 reflect</title>
      <link>http://shanks.link/blog/2021/04/15/%E8%A7%A3%E5%AF%86-go-%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%8F%8D%E5%B0%84-reflect/</link>
      <pubDate>Thu, 15 Apr 2021 11:32:37 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/15/%E8%A7%A3%E5%AF%86-go-%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%8F%8D%E5%B0%84-reflect/</guid>
      <description>解密 Go 语言之反射 reflect 转载自煎鱼的blog 大家好，我是煎鱼。今天是 2020 年的最后一天，让我们一起继续愉快的学习吧 ：）。 在所有的语言中，反射这一功能基</description>
    </item>
    
    <item>
      <title>干货满满的 Go Modules 知识分享</title>
      <link>http://shanks.link/blog/2021/04/14/%E5%B9%B2%E8%B4%A7%E6%BB%A1%E6%BB%A1%E7%9A%84-go-modules-%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/</link>
      <pubDate>Wed, 14 Apr 2021 23:57:17 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/14/%E5%B9%B2%E8%B4%A7%E6%BB%A1%E6%BB%A1%E7%9A%84-go-modules-%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/</guid>
      <description>转载自煎鱼的blog 大家好，我是煎鱼。 马上 2021 年了，Go 也即将在明年发布 Go1.16。但 Go Modules 仍然是大家关注的话题之一。早期汇总过傲飞分享的 《G</description>
    </item>
    
    <item>
      <title>Go 错误处理：用 panic 取代 err != nil 的模式</title>
      <link>http://shanks.link/blog/2021/04/14/go-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E7%94%A8-panic-%E5%8F%96%E4%BB%A3-err-nil-%E7%9A%84%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 14 Apr 2021 14:33:59 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/14/go-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E7%94%A8-panic-%E5%8F%96%E4%BB%A3-err-nil-%E7%9A%84%E6%A8%A1%E5%BC%8F/</guid>
      <description>Go 错误处理：用 panic 取代 err != nil 的模式 转载自煎鱼的blog 前段时间我分享了文章 《先睹为快，Go2 Error 的挣扎之路》后，和一位朋友进行了一次深度交流，他</description>
    </item>
    
    <item>
      <title>先睹为快，Go2 Error 的挣扎之路</title>
      <link>http://shanks.link/blog/2021/04/14/%E5%85%88%E7%9D%B9%E4%B8%BA%E5%BF%ABgo2-error-%E7%9A%84%E6%8C%A3%E6%89%8E%E4%B9%8B%E8%B7%AF/</link>
      <pubDate>Wed, 14 Apr 2021 11:42:13 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/14/%E5%85%88%E7%9D%B9%E4%B8%BA%E5%BF%ABgo2-error-%E7%9A%84%E6%8C%A3%E6%89%8E%E4%B9%8B%E8%B7%AF/</guid>
      <description>先睹为快，Go2 Error 的挣扎之路 转载自煎鱼的blog 自从 Go 语言在国内火热以来，除去泛型，其次最具槽点的就是 Go 对错误的处理方式，一句经典的 if err != nil</description>
    </item>
    
    <item>
      <title>setjmp和longjmp函数使用详解</title>
      <link>http://shanks.link/blog/2021/04/14/setjmp%E5%92%8Clongjmp%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 14 Apr 2021 00:08:43 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/14/setjmp%E5%92%8Clongjmp%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</guid>
      <description>转载自大米粒的blog 在网上看到的，觉得很有用，copy过来的。 非局部跳转语句&amp;mdash;setjmp和longjmp函数。非局部指的是，</description>
    </item>
    
    <item>
      <title>万字长文 | 从实践到原理，带你参透 gRPC</title>
      <link>http://shanks.link/blog/2021/04/13/%E4%B8%87%E5%AD%97%E9%95%BF%E6%96%87-%E4%BB%8E%E5%AE%9E%E8%B7%B5%E5%88%B0%E5%8E%9F%E7%90%86%E5%B8%A6%E4%BD%A0%E5%8F%82%E9%80%8F-grpc/</link>
      <pubDate>Tue, 13 Apr 2021 18:51:13 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/13/%E4%B8%87%E5%AD%97%E9%95%BF%E6%96%87-%E4%BB%8E%E5%AE%9E%E8%B7%B5%E5%88%B0%E5%8E%9F%E7%90%86%E5%B8%A6%E4%BD%A0%E5%8F%82%E9%80%8F-grpc/</guid>
      <description>转载自煎鱼的blog 万字长文 | 从实践到原理，带你参透 gRPC 原创 陈煎鱼 脑子进煎鱼了 2020-12-14 大家好，我是煎鱼。 gRPC 在 Go 语言中大放异彩，越来越多的小伙伴在使用</description>
    </item>
    
    <item>
      <title>必须要学的 Go 进程诊断工具 gops</title>
      <link>http://shanks.link/blog/2021/04/13/%E5%BF%85%E9%A1%BB%E8%A6%81%E5%AD%A6%E7%9A%84-go-%E8%BF%9B%E7%A8%8B%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7-gops/</link>
      <pubDate>Tue, 13 Apr 2021 18:27:04 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/13/%E5%BF%85%E9%A1%BB%E8%A6%81%E5%AD%A6%E7%9A%84-go-%E8%BF%9B%E7%A8%8B%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7-gops/</guid>
      <description>转载自煎鱼的blog 必须要学的 Go 进程诊断工具 gops 在类 Unix 系统中，我们常常会使用 ps 命令来查看系统当前所运行的进程信息，该命令为我们提供了较大的帮助</description>
    </item>
    
    <item>
      <title>为什么 Go 占用那么多的虚拟内存？</title>
      <link>http://shanks.link/blog/2021/04/13/%E4%B8%BA%E4%BB%80%E4%B9%88-go-%E5%8D%A0%E7%94%A8%E9%82%A3%E4%B9%88%E5%A4%9A%E7%9A%84%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</link>
      <pubDate>Tue, 13 Apr 2021 17:48:57 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/13/%E4%B8%BA%E4%BB%80%E4%B9%88-go-%E5%8D%A0%E7%94%A8%E9%82%A3%E4%B9%88%E5%A4%9A%E7%9A%84%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</guid>
      <description>转载自煎鱼的blog 前段时间，某同学说某服务的容器因为超出内存限制，不断地重启，问我们是不是有内存泄露，赶紧排查，然后解决掉，省的出问题。 我</description>
    </item>
    
    <item>
      <title>详解 Go 程序的启动流程，你知道 g0，m0 是什么吗？</title>
      <link>http://shanks.link/blog/2021/04/13/%E8%AF%A6%E8%A7%A3-go-%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E4%BD%A0%E7%9F%A5%E9%81%93-g0m0-%E6%98%AF%E4%BB%80%E4%B9%88%E5%90%97/</link>
      <pubDate>Tue, 13 Apr 2021 16:52:04 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/13/%E8%AF%A6%E8%A7%A3-go-%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E4%BD%A0%E7%9F%A5%E9%81%93-g0m0-%E6%98%AF%E4%BB%80%E4%B9%88%E5%90%97/</guid>
      <description>转载自煎鱼的blog 详解 Go 程序的启动流程，你知道 g0，m0 是什么吗？ 大家好，我是煎鱼。 自古应用程序均从 Hello World 开始，你我所写的 Go 语言亦然： import &amp;#34;fmt&amp;#34; func</description>
    </item>
    
    <item>
      <title>必须长期坚持的习惯</title>
      <link>http://shanks.link/blog/2021/04/12/%E5%BF%85%E9%A1%BB%E9%95%BF%E6%9C%9F%E5%9D%9A%E6%8C%81%E7%9A%84%E4%B9%A0%E6%83%AF/</link>
      <pubDate>Mon, 12 Apr 2021 19:56:51 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/12/%E5%BF%85%E9%A1%BB%E9%95%BF%E6%9C%9F%E5%9D%9A%E6%8C%81%E7%9A%84%E4%B9%A0%E6%83%AF/</guid>
      <description>长期坚持的好习惯 不在生气时做决定 定期反省和复盘 每天学习至少30分钟 保持谦虚和低调 聚会时少玩手机 不轻易说出秘密 吃饭时细嚼慢咽 不耀自己的钱财 每天</description>
    </item>
    
    <item>
      <title>哔哩哔哩（B站）语言类学习视频大汇总！</title>
      <link>http://shanks.link/blog/2021/04/12/%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9b%E7%AB%99%E8%AF%AD%E8%A8%80%E7%B1%BB%E5%AD%A6%E4%B9%A0%E8%A7%86%E9%A2%91%E5%A4%A7%E6%B1%87%E6%80%BB/</link>
      <pubDate>Mon, 12 Apr 2021 19:53:31 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/12/%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9b%E7%AB%99%E8%AF%AD%E8%A8%80%E7%B1%BB%E5%AD%A6%E4%B9%A0%E8%A7%86%E9%A2%91%E5%A4%A7%E6%B1%87%E6%80%BB/</guid>
      <description>以下内容转载自 https://www.toutiao.com/w/a1657382084896772/ 哔哩哔哩（B站）语言类学习视频大汇总！</description>
    </item>
    
    <item>
      <title>7部史诗级自然纪录片，孩子14岁前要看完！</title>
      <link>http://shanks.link/blog/2021/04/12/7%E9%83%A8%E5%8F%B2%E8%AF%97%E7%BA%A7%E8%87%AA%E7%84%B6%E7%BA%AA%E5%BD%95%E7%89%87%E5%AD%A9%E5%AD%9014%E5%B2%81%E5%89%8D%E8%A6%81%E7%9C%8B%E5%AE%8C/</link>
      <pubDate>Mon, 12 Apr 2021 19:50:38 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/12/7%E9%83%A8%E5%8F%B2%E8%AF%97%E7%BA%A7%E8%87%AA%E7%84%B6%E7%BA%AA%E5%BD%95%E7%89%87%E5%AD%A9%E5%AD%9014%E5%B2%81%E5%89%8D%E8%A6%81%E7%9C%8B%E5%AE%8C/</guid>
      <description>7部史诗级自然纪录片，孩子14岁前要看完！ 以下内容转载自 https://www.toutiao.com/i6636908732494119437/ 原创布谷学习2018-12-21 12:01:00 文、编辑 | 云雀儿 来源 | 布谷听听（iBookgoo</description>
    </item>
    
    <item>
      <title>世界最美的街景</title>
      <link>http://shanks.link/blog/2021/04/12/%E4%B8%96%E7%95%8C%E6%9C%80%E7%BE%8E%E7%9A%84%E8%A1%97%E6%99%AF/</link>
      <pubDate>Mon, 12 Apr 2021 19:48:24 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/12/%E4%B8%96%E7%95%8C%E6%9C%80%E7%BE%8E%E7%9A%84%E8%A1%97%E6%99%AF/</guid>
      <description>以下内容转载自 https://www.toutiao.com/i6719284510678073870/ 鲁稚的阳台2019-07-30 10:55:37 虽然我们没有翅膀，无法像天上的鸟儿飞得那样高去欣赏世界，但是，我们有智慧、有能力借助能飞上天</description>
    </item>
    
    <item>
      <title>著名建筑师的作品」那些年，那些令人震撼的现代建筑！</title>
      <link>http://shanks.link/blog/2021/04/12/%E8%91%97%E5%90%8D%E5%BB%BA%E7%AD%91%E5%B8%88%E7%9A%84%E4%BD%9C%E5%93%81%E9%82%A3%E4%BA%9B%E5%B9%B4%E9%82%A3%E4%BA%9B%E4%BB%A4%E4%BA%BA%E9%9C%87%E6%92%BC%E7%9A%84%E7%8E%B0%E4%BB%A3%E5%BB%BA%E7%AD%91/</link>
      <pubDate>Mon, 12 Apr 2021 19:45:24 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/12/%E8%91%97%E5%90%8D%E5%BB%BA%E7%AD%91%E5%B8%88%E7%9A%84%E4%BD%9C%E5%93%81%E9%82%A3%E4%BA%9B%E5%B9%B4%E9%82%A3%E4%BA%9B%E4%BB%A4%E4%BA%BA%E9%9C%87%E6%92%BC%E7%9A%84%E7%8E%B0%E4%BB%A3%E5%BB%BA%E7%AD%91/</guid>
      <description>以下内容转载自 https://www.toutiao.com/i6695523214673576452/ 所谓“震撼”一定是内心受到了强烈的冲击，从而引起精神或情绪的剧烈起伏。这种感受远比“惊讶”、“感动”等来的强烈。 能让人感觉“</description>
    </item>
    
    <item>
      <title>supervisor常用命令</title>
      <link>http://shanks.link/blog/2021/04/12/supervisor%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 12 Apr 2021 17:16:19 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/12/supervisor%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>转载自博客 查看任务状态 # supervisorctl status SmartCoin RUNNING pid 13203, uptime 0:04:05 coin RUNNING pid 30744, uptime 17 days, 20:45:18 deepwellserver RUNNING pid 30257, uptime 30 days, 4:13:01 jingtumassetapi RUNNING pid 14536, uptime 45 days, 19:18:08 moac RUNNING pid 20015, uptime 15 days, 5:15:11 new RUNNING pid 10041, uptime 43 days, 22:41:56 nginx RUNNING pid 18752, uptime 22:59:40 redis RUNNING pid 14542,</description>
    </item>
    
    <item>
      <title>史上最完整的《指环王》魔戒战争大事记（编年体长文）</title>
      <link>http://shanks.link/blog/2021/04/09/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%AE%8C%E6%95%B4%E7%9A%84%E6%8C%87%E7%8E%AF%E7%8E%8B%E9%AD%94%E6%88%92%E6%88%98%E4%BA%89%E5%A4%A7%E4%BA%8B%E8%AE%B0%E7%BC%96%E5%B9%B4%E4%BD%93%E9%95%BF%E6%96%87/</link>
      <pubDate>Fri, 09 Apr 2021 11:27:51 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/09/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%AE%8C%E6%95%B4%E7%9A%84%E6%8C%87%E7%8E%AF%E7%8E%8B%E9%AD%94%E6%88%92%E6%88%98%E4%BA%89%E5%A4%A7%E4%BA%8B%E8%AE%B0%E7%BC%96%E5%B9%B4%E4%BD%93%E9%95%BF%E6%96%87/</guid>
      <description>转载自 史上最完整的《指环王》魔戒战争大事记（编年体长文） 原创跃马酒馆小招待2020-09-16 13:33:12 大家好，本文承接上一篇文章对**《指环王》*</description>
    </item>
    
    <item>
      <title>史上最完整的《指环王》上古时期大事记（编年体长文）</title>
      <link>http://shanks.link/blog/2021/04/09/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%AE%8C%E6%95%B4%E7%9A%84%E6%8C%87%E7%8E%AF%E7%8E%8B%E4%B8%8A%E5%8F%A4%E6%97%B6%E6%9C%9F%E5%A4%A7%E4%BA%8B%E8%AE%B0%E7%BC%96%E5%B9%B4%E4%BD%93%E9%95%BF%E6%96%87/</link>
      <pubDate>Fri, 09 Apr 2021 11:05:09 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/09/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%AE%8C%E6%95%B4%E7%9A%84%E6%8C%87%E7%8E%AF%E7%8E%8B%E4%B8%8A%E5%8F%A4%E6%97%B6%E6%9C%9F%E5%A4%A7%E4%BA%8B%E8%AE%B0%E7%BC%96%E5%B9%B4%E4%BD%93%E9%95%BF%E6%96%87/</guid>
      <description>转载自 史上最完整的《指环王》上古时期大事记（编年体长文） 原创跃马酒馆小招待2020-09-10 11:48:07 许多朋友反应对于整个**《指环王》的历史脉络</description>
    </item>
    
    <item>
      <title>云风的Blog-Lua GC的源码解剖6</title>
      <link>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%966/</link>
      <pubDate>Fri, 09 Apr 2021 01:12:23 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%966/</guid>
      <description>原文链接 Lua GC 的源码剖析 (6) 完结 GC 中最繁杂的 mark 部分已经谈完了。剩下的东西很简单。今天一次可以写完。 sweep 分两个步骤，一个是清理字符串，另一个是清理其</description>
    </item>
    
    <item>
      <title>云风的Blog-Lua GC的源码解剖5</title>
      <link>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%965/</link>
      <pubDate>Fri, 09 Apr 2021 01:10:11 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%965/</guid>
      <description>原文链接 Lua GC 的源码剖析 (5) 今天来说说 write barrier 。 在 GC 的扫描过程中，由于分步执行，难免会出现少描了一半时，那些已经被置黑的对象又被修改，需要重新标记的</description>
    </item>
    
    <item>
      <title>云风的Blog-Lua GC的源码解剖4</title>
      <link>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%964/</link>
      <pubDate>Fri, 09 Apr 2021 01:08:59 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%964/</guid>
      <description>原文链接 Lua GC 的源码剖析 (4) 今天来看一下 mark 过程是怎样实现的。 所有的 GC 流程，都从 singlestep 函数开始。singlestep 就是一个最简单的状态机。GC 状态简</description>
    </item>
    
    <item>
      <title>云风的Blog-Lua GC的源码解剖3</title>
      <link>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%963/</link>
      <pubDate>Fri, 09 Apr 2021 01:07:31 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%963/</guid>
      <description>原文链接 Lua GC 的源码剖析 (3) 有了前几天的基础，我们可以从顶向下来读 lua gc 部分的代码了。 我们知道，lua 对外的 API 中，一切个 gc 打交道的都通过 lua_gc 。C 语言</description>
    </item>
    
    <item>
      <title>云风的Blog-Lua GC的源码解剖2</title>
      <link>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%962/</link>
      <pubDate>Fri, 09 Apr 2021 01:05:52 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%962/</guid>
      <description>原文链接 Lua GC 的源码剖析 (2) 早期的 Lua GC 采用的是 stop the world 的实现。一旦发生 gc 就需要等待整个 gc 流程走完。如果你用 lua 处理较少量数据，或是数据增删不频繁，这</description>
    </item>
    
    <item>
      <title>云风的Blog-Lua GC的源码解剖1</title>
      <link>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%961/</link>
      <pubDate>Fri, 09 Apr 2021 01:03:52 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%961/</guid>
      <description>原文链接 Lua GC 的源码剖析 (1) 最近发现在大数据量的 lua 环境中，GC 占据了很多的 CPU 。差不多是整个 CPU 时间的 20% 左右。希望着手改进。这样，必须先对 lua 的 gc 算法</description>
    </item>
    
    <item>
      <title>构建Lua解释器Part11：Upvalue</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part11upvalue/</link>
      <pubDate>Thu, 08 Apr 2021 23:31:51 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part11upvalue/</guid>
      <description>本文转载自Manistein&amp;rsquo;s Blog 构建Lua解释器Part11：Upvalue 前言 ​ 本章，我将深入探讨lua的upvalue机制</description>
    </item>
    
    <item>
      <title>构建Lua解释器Part10：userdata</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part10userdata/</link>
      <pubDate>Thu, 08 Apr 2021 23:30:06 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part10userdata/</guid>
      <description>本文转载自Manistein&amp;rsquo;s Blog 构建Lua解释器Part10：userdata 前言 ​ 本章节，我开始对dummylua的user</description>
    </item>
    
    <item>
      <title>构建Lua解释器Part9：metatable</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part9metatable/</link>
      <pubDate>Thu, 08 Apr 2021 23:27:50 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part9metatable/</guid>
      <description>本文转载自Manistein&amp;rsquo;s Blog 构建Lua解释器Part9：metatable Posted on December 8, 2020 前言 ​ 本章，我们将进入到metatab</description>
    </item>
    
    <item>
      <title>构建Lua解释器Part8：构建完整的语法分析器(下)</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part8%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4%E7%9A%84%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E4%B8%8B/</link>
      <pubDate>Thu, 08 Apr 2021 23:20:30 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part8%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4%E7%9A%84%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E4%B8%8B/</guid>
      <description>构建Lua解释器Part8：构建完整的语法分析器(下) 前言 ​ 前面，我已经用3篇blog的巨大篇幅，详细论述了Lua编译模块的一些基本知识。其</description>
    </item>
    
    <item>
      <title>构建Lua解释器Part7：构建完整的语法分析器(上)</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part7%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4%E7%9A%84%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E4%B8%8A/</link>
      <pubDate>Thu, 08 Apr 2021 22:58:42 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part7%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4%E7%9A%84%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E4%B8%8A/</guid>
      <description>本文转载自Manistein&amp;rsquo;s Blog 构建Lua解释器Part7：构建完整的语法分析器(上) 前言 ​ 在上一章里，我完成了词法分析器的设</description>
    </item>
    
    <item>
      <title>构建Lua解释器Part6：脚本运行基础架构的设计与实现</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part6%E8%84%9A%E6%9C%AC%E8%BF%90%E8%A1%8C%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 08 Apr 2021 14:43:42 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part6%E8%84%9A%E6%9C%AC%E8%BF%90%E8%A1%8C%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>本文转载自Manistein&amp;rsquo;s Blog 前言 ​ 构建Lua解释器Part5，对Lua解释器进行了整体介绍，并且以一个hello world</description>
    </item>
    
    <item>
      <title>构建Lua解释器Part5：脚本运行基础架构的设计与实现</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part5%E8%84%9A%E6%9C%AC%E8%BF%90%E8%A1%8C%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 08 Apr 2021 13:02:42 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part5%E8%84%9A%E6%9C%AC%E8%BF%90%E8%A1%8C%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>本文转载自Manistein&amp;rsquo;s Blog 前言 在经过漫长的准备，我终于完成了《构建Lua解释器》系列的第五部分的代码编写，并且通过了预定</description>
    </item>
    
    <item>
      <title>构建Lua解释器Part4：Table设计与实现</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part4table%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 08 Apr 2021 12:42:31 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part4table%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>本文转载自Manistein&amp;rsquo;s Blog 前言 本篇我将对dummylua中Table的设计和实现进行介绍和说明。本文的目的旨在梳理清du</description>
    </item>
    
    <item>
      <title>构建Lua解释器Part3：String设计与实现</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part3string%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 08 Apr 2021 12:28:49 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part3string%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>本文转载自Manistein&amp;rsquo;s Blog 前言 上一章节我介绍了dummylua项目的gc的设计原理和实现方式，该部分我基本是仿造了官方l</description>
    </item>
    
    <item>
      <title>构建Lua解释器Part2：Garbage Collection基础架构</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part2garbage-collection%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Thu, 08 Apr 2021 11:18:57 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part2garbage-collection%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/</guid>
      <description>本文转载自Manistein&amp;rsquo;s Blog 前言 上一篇我已经设计和实现了Lua解释器最基础的基本数据结构，实现了纯C函数在栈中的调用流程，</description>
    </item>
    
    <item>
      <title>构建Lua解释器Part1：虚拟机的基础--Lua基本数据结构、栈和基于栈的C函数调用的设计与实现</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part1%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%9F%BA%E7%A1%80-lua%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A0%88%E5%92%8C%E5%9F%BA%E4%BA%8E%E6%A0%88%E7%9A%84c%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 08 Apr 2021 10:44:15 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part1%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%9F%BA%E7%A1%80-lua%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A0%88%E5%92%8C%E5%9F%BA%E4%BA%8E%E6%A0%88%E7%9A%84c%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>本文转载自Manistein&amp;rsquo;s Blog 前言 从本篇开始，我们正式进入到Lua解释器的开发阶段（这是一个遵循Lua5.3标准的项目）。本</description>
    </item>
    
    <item>
      <title>C4：4个函数，528行代码实现可自举的 C语言编译器</title>
      <link>http://shanks.link/blog/2021/04/06/c44%E4%B8%AA%E5%87%BD%E6%95%B0528%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8F%AF%E8%87%AA%E4%B8%BE%E7%9A%84-c%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E5%99%A8/</link>
      <pubDate>Tue, 06 Apr 2021 23:10:47 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/06/c44%E4%B8%AA%E5%87%BD%E6%95%B0528%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8F%AF%E8%87%AA%E4%B8%BE%E7%9A%84-c%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>lua源码阅读顺序-建议</title>
      <link>http://shanks.link/blog/2021/04/06/lua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E9%A1%BA%E5%BA%8F-%E5%BB%BA%E8%AE%AE/</link>
      <pubDate>Tue, 06 Apr 2021 22:51:18 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/06/lua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E9%A1%BA%E5%BA%8F-%E5%BB%BA%E8%AE%AE/</guid>
      <description>原文链接 Recommended reading order: lmathlib.c, lstrlib.c: get familiar with the external C API. Don&amp;rsquo;t bother with the pattern matcher though. Just the easy functions. lapi.c: Check how the API is implemented internally. Only skim this to get a feeling for the code. Cross-reference to lua.h and luaconf.h as needed. lobject.h: tagged values and object representation. skim through this first. you&amp;rsquo;ll want to keep a window with this</description>
    </item>
    
    <item>
      <title>Lua虚拟机指令介绍</title>
      <link>http://shanks.link/blog/2021/04/06/lua%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A4%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Tue, 06 Apr 2021 22:51:17 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/06/lua%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A4%E4%BB%8B%E7%BB%8D/</guid>
      <description>作者：nicochen，腾讯 IEG 游戏开发工程师 本文从一个简单示例入手，详细讲解 Lua 字节码文件的存储结构及各字段含义，进而引出 Lua 虚拟机指令集和运行</description>
    </item>
    
    <item>
      <title>探索Lua52内部实现:GC3</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0gc3/</link>
      <pubDate>Tue, 06 Apr 2021 12:57:07 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0gc3/</guid>
      <description>GC步骤 global_State中的gcstate记录了当前incremental gc的执行状态。根据执行状态，整个gc过程被分为很多步执行</description>
    </item>
    
    <item>
      <title>探索Lua52内部实现:GC2</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0gc2/</link>
      <pubDate>Tue, 06 Apr 2021 12:51:11 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0gc2/</guid>
      <description>原文链接 GCObject Lua使用union GCObject来表示所有的垃圾回收对象： 182 /* 183 ** Union of all collectable objects 184 */ 185 union GCObject { 186 GCheader gch; /* common header */ 187 union TString ts; 188 union Udata u; 189 union Closure cl;</description>
    </item>
    
    <item>
      <title>探索Lua5.2内部实现:Garbage Collection(1) 原理</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0garbage-collection1-%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 06 Apr 2021 12:45:04 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0garbage-collection1-%E5%8E%9F%E7%90%86/</guid>
      <description>原文链接 Lua5.2采用垃圾回收机制对所有的lua对象(GCObject)进行管理。Lua虚拟机会定期运行GC，释放掉已经不再被被引用到的l</description>
    </item>
    
    <item>
      <title>探索Lua52内部实现-Function</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-function/</link>
      <pubDate>Tue, 06 Apr 2021 12:42:56 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-function/</guid>
      <description>原文链接 基本概念 Lua函数引入了很多functional programming的概念，这些概念使得Lua函数在使用上可谓“功能强大，简洁统一</description>
    </item>
    
    <item>
      <title>探索Lua52内部实现:TString</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0tstring/</link>
      <pubDate>Tue, 06 Apr 2021 12:41:56 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0tstring/</guid>
      <description>原文链接 Lua使用TString结构体代表一个字符串对象。 /* ** Header for string value; string bytes follow the end of this structure */ typedef union TString { L_Umaxalign dummy; /* ensures maximum alignment for strings */ struct { CommonHeader; lu_byte extra; /* reserved words for short strings; &amp;#34;has hash&amp;#34;</description>
    </item>
    
    <item>
      <title>探索Lua52内部实现-编译系统4-表达式分类</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F4-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%86%E7%B1%BB/</link>
      <pubDate>Tue, 06 Apr 2021 11:59:59 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F4-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%86%E7%B1%BB/</guid>
      <description>原文链接 常量表达式 常量表达式在Lua用来表示&amp;quot;nil&amp;quot;，“true”，“false”，字符串和数字的值。在BNF中常量表</description>
    </item>
    
    <item>
      <title>探索Lua52内部实现-编译系统3-表达式</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F3-%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Tue, 06 Apr 2021 11:51:50 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F3-%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>​ 表达式(expression)在编程语言中代表一个可以返回值的语法单位，比如常量表达式，变量表达式，函数调用表达式，算术、关系和逻辑表达式</description>
    </item>
    
    <item>
      <title>探索Lua52内部实现-编译系统2-跳转的处理</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F2-%E8%B7%B3%E8%BD%AC%E7%9A%84%E5%A4%84%E7%90%86/</link>
      <pubDate>Tue, 06 Apr 2021 11:45:14 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F2-%E8%B7%B3%E8%BD%AC%E7%9A%84%E5%A4%84%E7%90%86/</guid>
      <description>​ 跳转用来控制程序的指令流程。Lua使用OP_JMP指令来执行一个跳转，有关OP_JMP的详细介绍，可以参见《虚拟机指令》。跳转可以分为条件</description>
    </item>
    
    <item>
      <title>探索Lua52内部实现-编译系统1-概述</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F1-%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Tue, 06 Apr 2021 11:35:26 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F1-%E6%A6%82%E8%BF%B0/</guid>
      <description>原文链接 Lua是一个轻量级高效率的语言。这种轻量级和高效率不仅体现在它本身虚拟机的运行效率上，而且也体现在他整个的编译系统的实现上。因为绝大</description>
    </item>
    
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(8) LOOP</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A48-loop/</link>
      <pubDate>Tue, 06 Apr 2021 00:04:49 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A48-loop/</guid>
      <description>原文链接 Lua5.2种除了for循环之外，其他的各种循环都使用关系和逻辑指令，配合JMP指令来完成。 local a = 0; while(a &amp;lt; 10) do a = a + 1; end 1 [1] LOADK 0 -1 ;</description>
    </item>
    
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(7) 关系和逻辑指令</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A47-%E5%85%B3%E7%B3%BB%E5%92%8C%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Mon, 05 Apr 2021 23:57:32 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A47-%E5%85%B3%E7%B3%BB%E5%92%8C%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4/</guid>
      <description>原文链接 name args desc OP_JMP A sBx pc+=sBx; if (A) close all upvalues &amp;gt;= R(A) + 1 JMP执行一个跳转，sBx表示跳转的偏移位置，被加到当前指向下一指令的指令指针上。如果sBx为0，表</description>
    </item>
    
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(6）FUNCTION</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A46function/</link>
      <pubDate>Mon, 05 Apr 2021 23:49:45 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A46function/</guid>
      <description>原文链接 name args desc OP_CALL A B C A B C R(A), &amp;hellip; ,R(A+C-2) := R(A)(R(A+1), &amp;hellip; ,R(A+B-1)) CALL执行一个函数调用。寄存器A中存放函数对象，所有参数按顺序放置在A后面的寄存器中。B－1表示</description>
    </item>
    
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(5）Arithmetic</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A45arithmetic/</link>
      <pubDate>Mon, 05 Apr 2021 23:16:09 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A45arithmetic/</guid>
      <description>原文链接 name args desc OP_ADD A B C R(A) := RK(B) + RK(C) OP_SUB A B C R(A) := RK(B) - RK(C) OP_MUL A B C R(A) := RK(B) * RK(C) OP_DIV A B C R(A) := RK(B) / RK(C) OP_MOD A B C R(A) := RK(B) % RK(C) OP_POW A B C R(A) := RK(B) ^ RK(C) 上表中的指令都是与</description>
    </item>
    
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(4) Table</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A44-table/</link>
      <pubDate>Mon, 05 Apr 2021 22:22:31 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A44-table/</guid>
      <description>原文链接 name args desc OP_NEWTABLE A B C R(A) := {} (size = B,C) NEWTABLE在寄存器A处创建一个table对象。B和C分别用来存储这个table数组部分和hash部分</description>
    </item>
    
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(3) Upvalues &amp; Globals</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A43-upvalues-globals/</link>
      <pubDate>Mon, 05 Apr 2021 22:20:15 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A43-upvalues-globals/</guid>
      <description>原文链接 在编译期，如果要访问变量a时，会依照以下的顺序决定变量a的类型： a是当前函数的local变量 a是外层函数的local变量，那么a是当</description>
    </item>
    
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(2) MOVE &amp; LOAD</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A42-move-load/</link>
      <pubDate>Mon, 05 Apr 2021 22:07:13 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A42-move-load/</guid>
      <description>原文链接 | name | args | desc | | OP_MOVE | A B | R(A) := R(B) | OP_MOVE用来将寄存器B中的值拷贝到寄存器A中。由于Lua是register based vm，大部分的指</description>
    </item>
    
    <item>
      <title>探索Lua52内部实现-虚拟机指令1概述</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A41%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Mon, 05 Apr 2021 21:38:47 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A41%E6%A6%82%E8%BF%B0/</guid>
      <description>原文链接 Lua一直把虚拟机执行代码的效率作为一个非常重要的设计目标。而采用什么样的指令系统的对于虚拟机的执行效率来说至关重要。 Stack based vs Register based VM 根</description>
    </item>
    
    <item>
      <title>lua的历史与演进</title>
      <link>http://shanks.link/blog/2021/04/05/lua%E7%9A%84%E5%8E%86%E5%8F%B2%E4%B8%8E%E6%BC%94%E8%BF%9B/</link>
      <pubDate>Mon, 05 Apr 2021 20:08:32 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/05/lua%E7%9A%84%E5%8E%86%E5%8F%B2%E4%B8%8E%E6%BC%94%E8%BF%9B/</guid>
      <description>lua的优点： 可移植性 容易嵌入 体积小 高效率 这些优点都来自于lua的设计目标：简洁。从Scheme获得了很多灵感，包括匿名函数，合理的语义域概</description>
    </item>
    
    <item>
      <title>go单例模式</title>
      <link>http://shanks.link/blog/2021/04/05/go%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 05 Apr 2021 12:09:42 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/05/go%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>原文链接 Go语言中的单例模式 在过去的几年中，Go语言的发展是惊人的，并且吸引了很多由其他语言（Python、PHP、Ruby）转向Go语言的</description>
    </item>
    
    <item>
      <title>Golang 切片与函数参数陷阱</title>
      <link>http://shanks.link/blog/2021/04/05/golang-%E5%88%87%E7%89%87%E4%B8%8E%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E9%99%B7%E9%98%B1/</link>
      <pubDate>Mon, 05 Apr 2021 12:03:39 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/05/golang-%E5%88%87%E7%89%87%E4%B8%8E%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E9%99%B7%E9%98%B1/</guid>
      <description>原文链接 线性结构是计算机最常用的数据结构之一。无论是数组（arrary）还是链表（list），在编程中不可或缺。golang也有数组，不同于</description>
    </item>
    
    <item>
      <title>go 汇编入门 如何学习Golang？万字详文教你Go语言入门</title>
      <link>http://shanks.link/blog/2021/04/04/go-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8-%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0golang%E4%B8%87%E5%AD%97%E8%AF%A6%E6%96%87%E6%95%99%E4%BD%A0go%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/</link>
      <pubDate>Sun, 04 Apr 2021 21:15:18 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/04/go-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8-%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0golang%E4%B8%87%E5%AD%97%E8%AF%A6%E6%96%87%E6%95%99%E4%BD%A0go%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/</guid>
      <description>作者：ivansli，腾讯开发工程师 在深入学习 Golang 的 runtime 和标准库实现的时候发现，如果对 Golang 汇编没有一定了解的话，很难深入了解其底层实现机制。在这里</description>
    </item>
    
    <item>
      <title>深入浅出Go Runtime</title>
      <link>http://shanks.link/blog/2021/04/04/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAgo-runtime/</link>
      <pubDate>Sun, 04 Apr 2021 20:53:10 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/04/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAgo-runtime/</guid>
      <description>以下内容转载自 yifhao 介绍 基于2019.02发布的go 1.12 linux amd64版本, 主要介绍了Runtime一些原理和实现的一些细节, 对大家容易不容易理解或</description>
    </item>
    
    <item>
      <title>Goroutine 的切换过程涉及了什么</title>
      <link>http://shanks.link/blog/2021/04/04/goroutine-%E7%9A%84%E5%88%87%E6%8D%A2%E8%BF%87%E7%A8%8B%E6%B6%89%E5%8F%8A%E4%BA%86%E4%BB%80%E4%B9%88/</link>
      <pubDate>Sun, 04 Apr 2021 17:56:52 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/04/goroutine-%E7%9A%84%E5%88%87%E6%8D%A2%E8%BF%87%E7%A8%8B%E6%B6%89%E5%8F%8A%E4%BA%86%E4%BB%80%E4%B9%88/</guid>
      <description>GCTT:anxk Go语言中文网 点击上方蓝色“Go语言中文网”关注，每天一起学 Go Illustration created for “A Journey With Go”, made from the original Go Gopher, created by Renee French. 本文基于 Go 1.13 版本。 Goroutine 很轻，它只需要</description>
    </item>
    
    <item>
      <title>Go：Goroutine, OS线程 以及 CPU管理</title>
      <link>http://shanks.link/blog/2021/04/04/gogoroutine-os%E7%BA%BF%E7%A8%8B-%E4%BB%A5%E5%8F%8A-cpu%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sun, 04 Apr 2021 17:22:55 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/04/gogoroutine-os%E7%BA%BF%E7%A8%8B-%E4%BB%A5%E5%8F%8A-cpu%E7%AE%A1%E7%90%86/</guid>
      <description>中文翻译 英文原文 操作系统的线程创建以及切换是需要开销的，会影响程序的性能。Go致力于尽可能地从内核中获取优势，所以从最开始的时候设计就考虑到</description>
    </item>
    
    <item>
      <title>go g0,特殊的Goroutinue</title>
      <link>http://shanks.link/blog/2021/04/04/go-g0%E7%89%B9%E6%AE%8A%E7%9A%84goroutinue/</link>
      <pubDate>Sun, 04 Apr 2021 17:14:06 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/04/go-g0%E7%89%B9%E6%AE%8A%E7%9A%84goroutinue/</guid>
      <description>原文链接 ℹ️ 这篇文章基于 Go 1.13。 在 Go 中创建的所有 Goroutine 都会被一个内部的调度器所管理。Go 调度器尝试为所有的 Goroutine 分配运行时间，并且在当前的 Goroutine 阻塞</description>
    </item>
    
    <item>
      <title>Goroutine 数量控制在多少合适，会影响 GC 和调度？</title>
      <link>http://shanks.link/blog/2021/04/04/goroutine-%E6%95%B0%E9%87%8F%E6%8E%A7%E5%88%B6%E5%9C%A8%E5%A4%9A%E5%B0%91%E5%90%88%E9%80%82%E4%BC%9A%E5%BD%B1%E5%93%8D-gc-%E5%92%8C%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Sun, 04 Apr 2021 17:02:42 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/04/goroutine-%E6%95%B0%E9%87%8F%E6%8E%A7%E5%88%B6%E5%9C%A8%E5%A4%9A%E5%B0%91%E5%90%88%E9%80%82%E4%BC%9A%E5%BD%B1%E5%93%8D-gc-%E5%92%8C%E8%B0%83%E5%BA%A6/</guid>
      <description>大家好，我是煎鱼。 前几天在读者交流群里看到一位小伙伴，发出了一个致命提问，那就是：“单机的 goroutine 数量控制在多少比较合适？”。 也许你和群内小伙伴第</description>
    </item>
    
    <item>
      <title>go高效内存分配</title>
      <link>http://shanks.link/blog/2021/04/04/go%E9%AB%98%E6%95%88%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</link>
      <pubDate>Sun, 04 Apr 2021 16:38:51 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/04/go%E9%AB%98%E6%95%88%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</guid>
      <description>原文链接 手动内存管理真的很坑爹(如C C++)，好在我们有强大的自动化系统能够管理内存分配和生命周期，从而解放我们的双手。 但是呢，如果你想通过</description>
    </item>
    
    <item>
      <title>垃圾回收GC浅谈</title>
      <link>http://shanks.link/blog/2021/04/04/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6gc%E6%B5%85%E8%B0%88/</link>
      <pubDate>Sun, 04 Apr 2021 16:30:16 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/04/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6gc%E6%B5%85%E8%B0%88/</guid>
      <description>原文链接 关于内存 计算机通过两个机制，去实现内存的高效使用。 第一种机制是虚拟内存。硬盘的容量其实是远远大于内存的(RAM)，虚拟内存会在内存不</description>
    </item>
    
    <item>
      <title>详解Go逃逸分析</title>
      <link>http://shanks.link/blog/2021/04/04/%E8%AF%A6%E8%A7%A3go%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 04 Apr 2021 16:15:00 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/04/%E8%AF%A6%E8%A7%A3go%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</guid>
      <description>原文链接机器铃砍菜刀 Go是一门带有垃圾回收的现代语言，它抛弃了传统C/C++的开发者需要手动管理内存的方式，实现了内存的主动申请和释放的管理</description>
    </item>
    
    <item>
      <title>理解golang调度之三：并发</title>
      <link>http://shanks.link/blog/2021/04/04/%E7%90%86%E8%A7%A3golang%E8%B0%83%E5%BA%A6%E4%B9%8B%E4%B8%89%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Sun, 04 Apr 2021 00:42:03 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/04/%E7%90%86%E8%A7%A3golang%E8%B0%83%E5%BA%A6%E4%B9%8B%E4%B8%89%E5%B9%B6%E5%8F%91/</guid>
      <description>简介 当我在解决一个问题尤其是新问题的时候，我开始不会去考虑并发(concurrency)是否合适。我首先会去找一系列的解决方式然后确保它有效</description>
    </item>
    
    <item>
      <title>理解golang调度之二 ：Go调度器</title>
      <link>http://shanks.link/blog/2021/04/04/%E7%90%86%E8%A7%A3golang%E8%B0%83%E5%BA%A6%E4%B9%8B%E4%BA%8C-go%E8%B0%83%E5%BA%A6%E5%99%A8/</link>
      <pubDate>Sun, 04 Apr 2021 00:32:10 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/04/%E7%90%86%E8%A7%A3golang%E8%B0%83%E5%BA%A6%E4%B9%8B%E4%BA%8C-go%E8%B0%83%E5%BA%A6%E5%99%A8/</guid>
      <description>原文链接 简介 第一篇文章解释了关于操作系统层级的调度，这对于理解Go的调度是很重要的。这一部分我会在语义层级解释Go调度器是如何工作的，并且着</description>
    </item>
    
    <item>
      <title>理解golang调度之一 ：操作系统调度</title>
      <link>http://shanks.link/blog/2021/04/04/%E7%90%86%E8%A7%A3golang%E8%B0%83%E5%BA%A6%E4%B9%8B%E4%B8%80-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Sun, 04 Apr 2021 00:23:24 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/04/%E7%90%86%E8%A7%A3golang%E8%B0%83%E5%BA%A6%E4%B9%8B%E4%B8%80-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%B0%83%E5%BA%A6/</guid>
      <description>原文链接 简介 golang调度器的设计行为能够使你的多线程go程序更有效率、性能更好，这要归功于golang调度器对于操作系统调度器的支持。对</description>
    </item>
    
    <item>
      <title>Golang 中的垃圾回收（三)</title>
      <link>http://shanks.link/blog/2021/04/04/golang-%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%89/</link>
      <pubDate>Sun, 04 Apr 2021 00:07:15 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/04/golang-%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%89/</guid>
      <description>原文链接 通过前两节的说明，我们得出这样一个结论：如果降低堆内存的分配压力就会相应的减少延迟，从而提升程序性能。这一节来讲一下，给一种类型的工</description>
    </item>
    
    <item>
      <title>Golang 中的垃圾回收（二)</title>
      <link>http://shanks.link/blog/2021/04/03/golang-%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%BA%8C/</link>
      <pubDate>Sat, 03 Apr 2021 23:57:23 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/golang-%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%BA%8C/</guid>
      <description>原文链接 第一部分，我花了时间去描述了golang 垃圾收集器的行为，并说明了程序运行时候收集器所产生的延迟。我分享了怎么样去产生以及去解释GC</description>
    </item>
    
    <item>
      <title>Golang 中的垃圾回收（一）</title>
      <link>http://shanks.link/blog/2021/04/03/golang-%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%80/</link>
      <pubDate>Sat, 03 Apr 2021 23:41:35 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/golang-%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%80/</guid>
      <description>原文链接 垃圾回收器负责追踪堆内存的分配，释放掉不需要的空间，追踪那些还在使用的分配空间。不同编程语言对这个机制的实现都很复杂，但是开发人员开</description>
    </item>
    
    <item>
      <title>go 垃圾回收：三色算法</title>
      <link>http://shanks.link/blog/2021/04/03/go-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%89%E8%89%B2%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 03 Apr 2021 23:36:19 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%89%E8%89%B2%E7%AE%97%E6%B3%95/</guid>
      <description>原文链接 三色算法 go垃圾回收器的操作都是基于三色算法，这篇文章主要来说明此算法。 注意：三色算法并不是go独有的，它也会在其它编程语言中使用到</description>
    </item>
    
    <item>
      <title>深入 Go Golang 内存分配超级棒的文章：Go 内存分配器可视化指南</title>
      <link>http://shanks.link/blog/2021/04/03/%E6%B7%B1%E5%85%A5-go-golang-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E8%B6%85%E7%BA%A7%E6%A3%92%E7%9A%84%E6%96%87%E7%AB%A0go-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8%E5%8F%AF%E8%A7%86%E5%8C%96%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sat, 03 Apr 2021 23:18:12 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/%E6%B7%B1%E5%85%A5-go-golang-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E8%B6%85%E7%BA%A7%E6%A3%92%E7%9A%84%E6%96%87%E7%AB%A0go-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8%E5%8F%AF%E8%A7%86%E5%8C%96%E6%8C%87%E5%8D%97/</guid>
      <description>翻译地址 原文链接 当我第一次开始尝试理解 Go 语言的内存分配器时，整个过程让我抓狂。一切看起来都像一个神秘的黑盒子。因为几乎所有技术魔法（tech</description>
    </item>
    
    <item>
      <title>go 定时器 ticker和timer</title>
      <link>http://shanks.link/blog/2021/04/03/go-%E5%AE%9A%E6%97%B6%E5%99%A8-ticker%E5%92%8Ctimer/</link>
      <pubDate>Sat, 03 Apr 2021 23:13:19 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go-%E5%AE%9A%E6%97%B6%E5%99%A8-ticker%E5%92%8Ctimer/</guid>
      <description>原文链接 两种类型的定时器：ticker和timer。两者有什么区别呢？请看如下代码： ticker package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main() { d := time.Duration(time.Second*2) t := time.NewTicker(d) defer t.Stop() for { &amp;lt;- t.C fmt.Println(&amp;#34;timeout...&amp;#34;) } } ti</description>
    </item>
    
    <item>
      <title>go 使用protobuf</title>
      <link>http://shanks.link/blog/2021/04/03/go-%E4%BD%BF%E7%94%A8protobuf/</link>
      <pubDate>Sat, 03 Apr 2021 23:03:31 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go-%E4%BD%BF%E7%94%A8protobuf/</guid>
      <description>原文链接发布于 2017-05-03 为什么要使用protobuf 最近的项目中，一直使用Json做数据传输。Json用起来的确很方便。但相对于protobuf数据</description>
    </item>
    
    <item>
      <title>How to Use Websockets in go</title>
      <link>http://shanks.link/blog/2021/04/03/how-to-use-websockets-in-go/</link>
      <pubDate>Sat, 03 Apr 2021 22:54:19 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/how-to-use-websockets-in-go/</guid>
      <description>原文链接 Sending a message and getting an instant response without refreshing the page is something we take for granted. But in the past, enabling real-time functionality was a real challenge for developers. The developer community has come a long way from HTTP long polling and AJAX and has finally found a solution for building truly real-time apps. This solution comes in the form of WebSockets, which make</description>
    </item>
    
    <item>
      <title>go系统学习推荐书籍</title>
      <link>http://shanks.link/blog/2021/04/03/go%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E6%8E%A8%E8%8D%90%E4%B9%A6%E7%B1%8D/</link>
      <pubDate>Sat, 03 Apr 2021 22:36:26 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E6%8E%A8%E8%8D%90%E4%B9%A6%E7%B1%8D/</guid>
      <description>Tony Bai 一个程序员的心路历程 Go语言的发展现状 如果从2007年9月20日那个下午三个“程序员大佬”在谷歌总部的一间办公室里进行的一次有关设计一门</description>
    </item>
    
    <item>
      <title>go post请求常用的几种方式</title>
      <link>http://shanks.link/blog/2021/04/03/go-post%E8%AF%B7%E6%B1%82%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Sat, 03 Apr 2021 22:31:41 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go-post%E8%AF%B7%E6%B1%82%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid>
      <description>原文链接 post请求常用的几种方式，记录一下 func httpPost() { resp, err := http.Post(&amp;#34;https://www.abcd123.top/api/v1/login&amp;#34;, &amp;#34;application/x-www-form-urlencoded&amp;#34;, strings.NewReader(&amp;#34;username=test&amp;amp;password=ab123123&amp;#34;)) if err != nil { fmt.Println(err) } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) if err != nil { // handle error } fmt.Println(string(body)) } func httpPostForm() { resp, err := http.PostForm(&amp;#34;https://www.denlery.top/api/v1/login&amp;#34;, url.Values{&amp;#34;username&amp;#34;: {&amp;#34;auto&amp;#34;}, &amp;#34;password&amp;#34;: {&amp;#34;auto123123&amp;#34;}}) if err != nil</description>
    </item>
    
    <item>
      <title>go中的init函数以及main函数</title>
      <link>http://shanks.link/blog/2021/04/03/go%E4%B8%AD%E7%9A%84init%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8Amain%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 03 Apr 2021 22:27:14 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go%E4%B8%AD%E7%9A%84init%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8Amain%E5%87%BD%E6%95%B0/</guid>
      <description>原文链接 首先我们看一个例子：init函数： init 函数可在package main中，可在其他package中，可在同一个package中出现多次。</description>
    </item>
    
    <item>
      <title>go 语言中关于包导入必学的8个知识点</title>
      <link>http://shanks.link/blog/2021/04/03/go-%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%85%B3%E4%BA%8E%E5%8C%85%E5%AF%BC%E5%85%A5%E5%BF%85%E5%AD%A6%E7%9A%848%E4%B8%AA%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
      <pubDate>Sat, 03 Apr 2021 22:21:55 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go-%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%85%B3%E4%BA%8E%E5%8C%85%E5%AF%BC%E5%85%A5%E5%BF%85%E5%AD%A6%E7%9A%848%E4%B8%AA%E7%9F%A5%E8%AF%86%E7%82%B9/</guid>
      <description>Hi，大家好，我是明哥。 在自己学习 Golang 的这段时间里，我写了详细的学习笔记放在我的个人微信公众号 《Go编程时光》，对于 Go 语言，我也算是个初学者，</description>
    </item>
    
    <item>
      <title>go struct详解</title>
      <link>http://shanks.link/blog/2021/04/03/go-struct%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 03 Apr 2021 22:15:06 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go-struct%E8%AF%A6%E8%A7%A3/</guid>
      <description>Go Struct超详细讲解 原创作者，程序员读书 Go语言中提供了对struct的支持,struct,中文翻译称为结构体，与数组一样，属于复合类型</description>
    </item>
    
    <item>
      <title>go语言panic,recover的实现</title>
      <link>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80panicrecover%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sat, 03 Apr 2021 14:26:05 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80panicrecover%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-07-02 本文主要分析Go语言的panic/recover在AMD64 Linux平台下的实现，包括： 主动调用 panic() 函数所引发</description>
    </item>
    
    <item>
      <title>go深入理解defer（下）defer实现机制</title>
      <link>http://shanks.link/blog/2021/04/03/go%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3defer%E4%B8%8Bdefer%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sat, 03 Apr 2021 11:33:30 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3defer%E4%B8%8Bdefer%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-06-17 上一篇文章我们主要从使用的角度介绍了 defer 的基础知识，本文我们来分析一下 defer 的实现机制。 还是从一个例子程序开始。 package main</description>
    </item>
    
    <item>
      <title>go深入理解defer（上）defer基础</title>
      <link>http://shanks.link/blog/2021/04/03/go%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3defer%E4%B8%8Adefer%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 03 Apr 2021 11:04:11 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3defer%E4%B8%8Adefer%E5%9F%BA%E7%A1%80/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-06-11 深入理解 defer 分上下两篇文章，本文为上篇，主要介绍如下内容： 为什么需要 defer； defer 语法及语义； defer 使用要点； defer 语句</description>
    </item>
    
    <item>
      <title>抢占系统调用执行时间过长的goroutine（22）</title>
      <link>http://shanks.link/blog/2021/04/03/%E6%8A%A2%E5%8D%A0%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E7%9A%84goroutine22/</link>
      <pubDate>Sat, 03 Apr 2021 10:37:43 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/%E6%8A%A2%E5%8D%A0%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E7%9A%84goroutine22/</guid>
      <description>​​​​​​​​​原创 爱写程序的阿波张 源码游记 2019-06-01 本文是《Go语言调度器源代码情景分析》系列的第22篇，也是第六章《抢占调度》的第2小节。 上一</description>
    </item>
    
    <item>
      <title>因goroutine运行时间过长而发生的抢占调度（21）</title>
      <link>http://shanks.link/blog/2021/04/03/%E5%9B%A0goroutine%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E8%80%8C%E5%8F%91%E7%94%9F%E7%9A%84%E6%8A%A2%E5%8D%A0%E8%B0%83%E5%BA%A621/</link>
      <pubDate>Sat, 03 Apr 2021 10:34:06 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/%E5%9B%A0goroutine%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E8%80%8C%E5%8F%91%E7%94%9F%E7%9A%84%E6%8A%A2%E5%8D%A0%E8%B0%83%E5%BA%A621/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-05-28 本文是《Go语言调度器源代码情景分析》系列的第21篇，也是第六章《抢占调度》的第1小节。 前面几节我们分析了Go</description>
    </item>
    
    <item>
      <title>go语言调度器之主动调度(20)</title>
      <link>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B9%8B%E4%B8%BB%E5%8A%A8%E8%B0%83%E5%BA%A620/</link>
      <pubDate>Sat, 03 Apr 2021 10:29:25 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B9%8B%E4%B8%BB%E5%8A%A8%E8%B0%83%E5%BA%A620/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-05-24 本文是《Go语言调度器源代码情景分析》系列的第20篇，也是第五章《主动调度》的第1小节。 Goroutine的主</description>
    </item>
    
    <item>
      <title>工作线程的唤醒及创建(19)</title>
      <link>http://shanks.link/blog/2021/04/03/%E5%B7%A5%E4%BD%9C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%94%A4%E9%86%92%E5%8F%8A%E5%88%9B%E5%BB%BA19/</link>
      <pubDate>Sat, 03 Apr 2021 10:24:35 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/%E5%B7%A5%E4%BD%9C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%94%A4%E9%86%92%E5%8F%8A%E5%88%9B%E5%BB%BA19/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-05-23 本文是《Go语言调度器源代码情景分析》系列的第19篇，也是第四章《Goroutine被动调度》的第2小节。 本文</description>
    </item>
    
    <item>
      <title>goroutine被动调度之一（18）</title>
      <link>http://shanks.link/blog/2021/04/03/goroutine%E8%A2%AB%E5%8A%A8%E8%B0%83%E5%BA%A6%E4%B9%8B%E4%B8%8018/</link>
      <pubDate>Sat, 03 Apr 2021 10:21:58 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/goroutine%E8%A2%AB%E5%8A%A8%E8%B0%83%E5%BA%A6%E4%B9%8B%E4%B8%8018/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-05-22 本文是《Go语言调度器源代码情景分析》系列的第18篇，也是第四章《Goroutine被动调度》的第1小节。 前一</description>
    </item>
    
    <item>
      <title>go语言调度器之盗取goroutine(17)</title>
      <link>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B9%8B%E7%9B%97%E5%8F%96goroutine17/</link>
      <pubDate>Sat, 03 Apr 2021 10:14:00 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B9%8B%E7%9B%97%E5%8F%96goroutine17/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-05-17 本文是《Go语言调度器源代码情景分析》系列的第17篇，也是第三章《Goroutine调度策略》的第2小节。 上一</description>
    </item>
    
    <item>
      <title>第三章 goroutine调度策略（16）</title>
      <link>http://shanks.link/blog/2021/04/03/%E7%AC%AC%E4%B8%89%E7%AB%A0-goroutine%E8%B0%83%E5%BA%A6%E7%AD%96%E7%95%A516/</link>
      <pubDate>Sat, 03 Apr 2021 10:12:03 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/%E7%AC%AC%E4%B8%89%E7%AB%A0-goroutine%E8%B0%83%E5%BA%A6%E7%AD%96%E7%95%A516/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-05-14 本文是《Go语言调度器源代码情景分析》系列的第16篇，也是第三章《Goroutine调度策略》的第1小节。 在调</description>
    </item>
    
    <item>
      <title>非main goroutine的退出及调度循环（15）</title>
      <link>http://shanks.link/blog/2021/04/03/%E9%9D%9Emain-goroutine%E7%9A%84%E9%80%80%E5%87%BA%E5%8F%8A%E8%B0%83%E5%BA%A6%E5%BE%AA%E7%8E%AF15/</link>
      <pubDate>Sat, 03 Apr 2021 10:07:03 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/%E9%9D%9Emain-goroutine%E7%9A%84%E9%80%80%E5%87%BA%E5%8F%8A%E8%B0%83%E5%BA%A6%E5%BE%AA%E7%8E%AF15/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-05-12 本文是《Go语言调度器源代码情景分析》系列的第15篇，也是第二章的第5小节。 上一节我们说过main gorout</description>
    </item>
    
    <item>
      <title>go语言调度器之调度main goroutine（14)</title>
      <link>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B9%8B%E8%B0%83%E5%BA%A6main-goroutine14/</link>
      <pubDate>Sat, 03 Apr 2021 10:01:28 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B9%8B%E8%B0%83%E5%BA%A6main-goroutine14/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-05-09 本文是《Go语言调度器源代码情景分析》系列的第14篇，也是第二章的第4小节 上一节我们通过分析main gorou</description>
    </item>
    
    <item>
      <title>go语言调度器之创建main goroutine(13)</title>
      <link>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B9%8B%E5%88%9B%E5%BB%BAmain-goroutine13/</link>
      <pubDate>Sat, 03 Apr 2021 09:53:43 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B9%8B%E5%88%9B%E5%BB%BAmain-goroutine13/</guid>
      <description>原创 爱写程序的阿波张 源码游记 本文是《Go语言调度器源代码情景分析》系列的第13篇，也是第二章的第3小节。 上一节我们分析了调度器的初始化，这一</description>
    </item>
    
    <item>
      <title>go语言goroutine调度器初始化 十二</title>
      <link>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80goroutine%E8%B0%83%E5%BA%A6%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96-%E5%8D%81%E4%BA%8C/</link>
      <pubDate>Sat, 03 Apr 2021 00:23:53 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80goroutine%E8%B0%83%E5%BA%A6%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96-%E5%8D%81%E4%BA%8C/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-05-05 本文是《Go语言调度器源代码情景分析》系列的第12篇，也是第二章的第2小节。 本章将以下面这个简单的Hello W</description>
    </item>
    
    <item>
      <title>goroutine调度器概述(11)</title>
      <link>http://shanks.link/blog/2021/04/03/goroutine%E8%B0%83%E5%BA%A6%E5%99%A8%E6%A6%82%E8%BF%B011/</link>
      <pubDate>Sat, 03 Apr 2021 00:13:50 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/goroutine%E8%B0%83%E5%BA%A6%E5%99%A8%E6%A6%82%E8%BF%B011/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-05-01 本文是《go调度器源代码情景分析》系列的第11篇，也是第二章的第1小节。 goroutine简介 goroutin</description>
    </item>
    
    <item>
      <title>go语言调度器源代码情景分析之十：线程本地存储</title>
      <link>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E5%8D%81%E7%BA%BF%E7%A8%8B%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/</link>
      <pubDate>Sat, 03 Apr 2021 00:09:46 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E5%8D%81%E7%BA%BF%E7%A8%8B%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-04-27 本文是《go调度器源代码情景分析》系列 第一章 预备知识的第十小节，也是预备知识的最后一小节。 线程本地存储又叫线程</description>
    </item>
    
    <item>
      <title>go语言调度器源代码情景分析之八：系统调用</title>
      <link>http://shanks.link/blog/2021/04/02/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E5%85%AB%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</link>
      <pubDate>Fri, 02 Apr 2021 13:13:55 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/02/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E5%85%AB%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-04-24 我们将在最后一章讨论有关系统调用方面的抢占调度，所以这里有必要对系统调用有个基本的了解。 系统调用是指使用类似函</description>
    </item>
    
    <item>
      <title>go语言调度器源代码情景分析之七：函数调用过程</title>
      <link>http://shanks.link/blog/2021/04/02/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%B8%83%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Fri, 02 Apr 2021 13:00:41 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/02/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%B8%83%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-04-22 前面几节我们介绍了CPU寄存器、内存、汇编指令以及栈等基础知识，为了达到融会贯通加深理解的目的，这一节我们来综</description>
    </item>
    
    <item>
      <title>go语言调度器源代码情景分析之六：go汇编语言</title>
      <link>http://shanks.link/blog/2021/04/02/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E5%85%ADgo%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/</link>
      <pubDate>Fri, 02 Apr 2021 12:54:48 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/02/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E5%85%ADgo%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-04-21 go语言runtime（包括调度器）源代码中有部分代码是用汇编语言编写的，不过这些汇编代码并非针对特定体系结构</description>
    </item>
    
    <item>
      <title>go语言调度器源代码情景分析之五：汇编指令</title>
      <link>http://shanks.link/blog/2021/04/02/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%BA%94%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Fri, 02 Apr 2021 12:47:46 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/02/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%BA%94%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-04-20 汇编语言是每位后端程序员都应该掌握的一门语言，因为学会了汇编语言，不管是对我们调试程序还是研究与理解计算机底层</description>
    </item>
    
    <item>
      <title>go语言调度器源代码情景分析之四：函数调用栈</title>
      <link>http://shanks.link/blog/2021/04/01/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E5%9B%9B%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A0%88/</link>
      <pubDate>Thu, 01 Apr 2021 23:52:57 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/01/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E5%9B%9B%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A0%88/</guid>
      <description>原创 阿波张 源码游记 2019-04-19 什么是栈 栈是一种“后进先出”的数据结构，它相当于一个容器，当需要往容器里面添加元素时只能放在最上面的一个元素之上，需要取</description>
    </item>
    
    <item>
      <title>go语言调度器源代码情景分析之三：内存</title>
      <link>http://shanks.link/blog/2021/04/01/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%B8%89%E5%86%85%E5%AD%98/</link>
      <pubDate>Thu, 01 Apr 2021 23:32:28 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/01/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%B8%89%E5%86%85%E5%AD%98/</guid>
      <description>原创 张方波 源码游记 2019-04-18 内存是计算机系统的存储设备，其主要作用是协助CPU在执行程序时存储数据和指令。 内存由大量内存单元组成，内存单元大小为1个</description>
    </item>
    
    <item>
      <title>go语言调度器源代码情景分析之二：CPU寄存器</title>
      <link>http://shanks.link/blog/2021/04/01/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%BA%8Ccpu%E5%AF%84%E5%AD%98%E5%99%A8/</link>
      <pubDate>Thu, 01 Apr 2021 23:26:01 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/01/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%BA%8Ccpu%E5%AF%84%E5%AD%98%E5%99%A8/</guid>
      <description>原创 张方波 源码游记 2019-04-17 寄存器是CPU内部的存储单元，用于存放从内存读取而来的数据（包括指令）和CPU运算的中间结果，之所以要使用寄存器来临时存</description>
    </item>
    
    <item>
      <title>go语言调度器源代码情景分析1</title>
      <link>http://shanks.link/blog/2021/03/31/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%901/</link>
      <pubDate>Wed, 31 Mar 2021 14:18:56 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/03/31/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%901/</guid>
      <description>原创 张方波 源码游记 2019-04-16 专栏简介 本专栏以精心设计的情景为线索，结合go语言最新1.12版源代码深入细致的分析了goroutine调度器实现原理。</description>
    </item>
    
    <item>
      <title>os精讲</title>
      <link>http://shanks.link/blog/2020/08/20/os%E7%B2%BE%E8%AE%B2/</link>
      <pubDate>Thu, 20 Aug 2020 09:02:11 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2020/08/20/os%E7%B2%BE%E8%AE%B2/</guid>
      <description>本文目标 收录OS方面主要知识点，方便面试前复习 功能 处理机管理 存储器管理 文件系统 网络系统 驱动系统 特征 并发 宏观上多个进程同时运行（微观上交替运行</description>
    </item>
    
  </channel>
</rss>
