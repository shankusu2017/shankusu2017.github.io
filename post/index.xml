<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Golang入门指南</title>
    <link>http://shanks.link/post/</link>
    <description>Recent content in Posts on Golang入门指南</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 07 May 2025 11:19:53 +0800</lastBuildDate>
    <atom:link href="http://shanks.link/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>熵增定律：为什么熵增理论让好多人一下子顿悟了</title>
      <link>http://shanks.link/blog/2022/04/10/%E7%86%B5%E5%A2%9E%E5%AE%9A%E5%BE%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E7%86%B5%E5%A2%9E%E7%90%86%E8%AE%BA%E8%AE%A9%E5%A5%BD%E5%A4%9A%E4%BA%BA%E4%B8%80%E4%B8%8B%E5%AD%90%E9%A1%BF%E6%82%9F%E4%BA%86/</link>
      <pubDate>Sun, 10 Apr 2022 02:14:17 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/10/%E7%86%B5%E5%A2%9E%E5%AE%9A%E5%BE%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E7%86%B5%E5%A2%9E%E7%90%86%E8%AE%BA%E8%AE%A9%E5%A5%BD%E5%A4%9A%E4%BA%BA%E4%B8%80%E4%B8%8B%E5%AD%90%E9%A1%BF%E6%82%9F%E4%BA%86/</guid>
      <description>&lt;p&gt;&lt;strong&gt;人活着就是在对抗熵增定律，生命以负熵为生。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;——薛定谔《生命是什么》&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://p3.toutiaoimg.com/origin/pgc-image/e1162330275f4045bb7f343dcc90ffb9?from=pc&#34; alt=&#34;熵增定律：为什么熵增理论让好多人一下子顿悟了&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;如果物理学只能留一条定律，&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;我会留熵增定律。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;说这句话的人叫吴国盛，清华大学的科学史系主任。&lt;/p&gt;</description>
    </item>
    <item>
      <title>穷人的特征</title>
      <link>http://shanks.link/blog/2025/05/07/%E7%A9%B7%E4%BA%BA%E7%9A%84%E7%89%B9%E5%BE%81/</link>
      <pubDate>Wed, 07 May 2025 11:19:53 +0800</pubDate>
      <guid>http://shanks.link/blog/2025/05/07/%E7%A9%B7%E4%BA%BA%E7%9A%84%E7%89%B9%E5%BE%81/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;没有拿得出手的才能。忙着内耗、攀比、奶头乐、瞎晃悠、出卖劳力、低水平竞争，没时间锤炼技能，无法在任何领域做到无可替代。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;缺乏可行的方法论。见识窄，不知道一件事最好和最坏是怎样的；没人指导，只能自己瞎探索，在可以直接继承的基础领域，浪费大量时间去开荒。&lt;/p&gt;</description>
    </item>
    <item>
      <title>西昌泸沽湖丽江游</title>
      <link>http://shanks.link/blog/2025/04/29/%E8%A5%BF%E6%98%8C%E6%B3%B8%E6%B2%BD%E6%B9%96%E4%B8%BD%E6%B1%9F%E6%B8%B8/</link>
      <pubDate>Tue, 29 Apr 2025 09:22:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2025/04/29/%E8%A5%BF%E6%98%8C%E6%B3%B8%E6%B2%BD%E6%B9%96%E4%B8%BD%E6%B1%9F%E6%B8%B8/</guid>
      <description>&lt;h2 id=&#34;基本情况&#34;&gt;基本情况&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;西昌的重点是美食（烧烤和others）&lt;/li&gt;&#xA;&lt;li&gt;泸沽湖的景色非常看天气，建议夏天，天晴到访&lt;/li&gt;&#xA;&lt;li&gt;西昌到泸沽湖有国道和高速（绕道攀枝花）+国道可选，根据驾驶经验来选，建议新手和动力差的车选择绕道高速&lt;/li&gt;&#xA;&lt;li&gt;丽江的重点是古城和玉龙雪山，其它景点没必要去&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;参考事项&#34;&gt;参考事项&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;泸沽湖一定要看季节和时间到访，时间足够的话，建议先到访丽江，看泸沽湖的天气，选择大晴天去,然后返回到丽江游玩，格姆女神山游玩的话，买个索道的票就行，滑道的票没必要，太贵了&lt;/li&gt;&#xA;&lt;li&gt;丽江古城推荐晚上去耍，白天就是一个更有特色的的古城，晚上别具一番风味，推荐在忠义市场（吃夜宵）往古城逛，重点是古城中心的酒吧一条街和周围的其它街道，古城周围不好停车，且费用高，建议从酒店打车前往，住古城的话，需要考虑从外面搬行李到古城内的问题（全是石板路不好走，可以提前问老板能否叫车搬运）&lt;/li&gt;&#xA;&lt;li&gt;其它避坑的项目，建议网上先查询，尽量能避免就避免&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;浏览图片&#34;&gt;浏览图片&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/%E6%97%85%E6%B8%B8/20250429183316.jpg&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;http://shanks.link/img/%E6%97%85%E6%B8%B8/20250430095205.jpg&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;http://shanks.link/img/%E6%97%85%E6%B8%B8/20250430173252.jpg&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;http://shanks.link/img/%E6%97%85%E6%B8%B8/20250430173253.jpg&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;http://shanks.link/img/%E6%97%85%E6%B8%B8/20250501144133.jpg&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;http://shanks.link/img/%E6%97%85%E6%B8%B8/20250501145006.jpg&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;http://shanks.link/img/%E6%97%85%E6%B8%B8/20250501200636.jpg&#34; alt=&#34;&#34;&gt;&#xA;元元小吃&#xA;&lt;img src=&#34;http://shanks.link/img/%E6%97%85%E6%B8%B8/20250502093714.jpg&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;http://shanks.link/img/%E6%97%85%E6%B8%B8/20250502190227.jpg&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;http://shanks.link/img/%E6%97%85%E6%B8%B8/20250502190228.jpg&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;http://shanks.link/img/%E6%97%85%E6%B8%B8/20250503201400.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>开车规则</title>
      <link>http://shanks.link/blog/2025/04/10/%E5%BC%80%E8%BD%A6%E8%A7%84%E5%88%99/</link>
      <pubDate>Thu, 10 Apr 2025 17:27:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2025/04/10/%E5%BC%80%E8%BD%A6%E8%A7%84%E5%88%99/</guid>
      <description>&lt;h1 id=&#34;必须遵守的规则&#34;&gt;必须遵守的规则&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;不能疲劳驾驶&lt;/li&gt;&#xA;&lt;li&gt;不能带情绪开车&lt;/li&gt;&#xA;&lt;li&gt;雨天、弯道、交叉路口等条件不好时必须控制速度&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>失业纪录</title>
      <link>http://shanks.link/blog/2025/03/28/%E5%A4%B1%E4%B8%9A%E7%BA%AA%E5%BD%95/</link>
      <pubDate>Fri, 28 Mar 2025 16:43:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2025/03/28/%E5%A4%B1%E4%B8%9A%E7%BA%AA%E5%BD%95/</guid>
      <description>&lt;h3 id=&#34;失业第一个月&#34;&gt;失业第一个月&lt;/h3&gt;&#xA;&lt;p&gt;没面试，当然也没 offer。&lt;/p&gt;&#xA;&lt;p&gt;change city 后也没啥人脉，头大。&lt;/p&gt;&#xA;&lt;p&gt;长远来看往后20年都难，怎么办？&lt;/p&gt;&#xA;&lt;p&gt;找远程或者看看有啥私活。&lt;/p&gt;&#xA;&lt;p&gt;换行的话，换到哪一行呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>自贡灯会</title>
      <link>http://shanks.link/blog/2025/02/11/%E8%87%AA%E8%B4%A1%E7%81%AF%E4%BC%9A/</link>
      <pubDate>Tue, 11 Feb 2025 22:13:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2025/02/11/%E8%87%AA%E8%B4%A1%E7%81%AF%E4%BC%9A/</guid>
      <description>&lt;h2 id=&#34;基本情况&#34;&gt;基本情况&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;非常nice,值得观赏，游玩一圈预计2个小时&lt;/li&gt;&#xA;&lt;li&gt;周围有5个官方停车场，其中1,2号可以步行到达，其它有摆渡车，2号立体停车场最近，春节其它客流量较大，建议错峰出行&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;参考事项&#34;&gt;参考事项&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;由于灯会在晚上，当晚开车回家需要注意安全（建议休息会后再启程），或者建议安排2日游&lt;/li&gt;&#xA;&lt;li&gt;美食推荐，本地特色美食（兔），一日游的话推荐在自贡市人民政府那一片找喜欢的美食，吃完后再去灯会现场&lt;/li&gt;&#xA;&lt;li&gt;推荐美食店-兔行天下鸿鹤鲜锅兔&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;浏览图片&#34;&gt;浏览图片&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20250211190947.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>春节</title>
      <link>http://shanks.link/blog/2025/02/10/%E6%98%A5%E8%8A%82/</link>
      <pubDate>Mon, 10 Feb 2025 22:13:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2025/02/10/%E6%98%A5%E8%8A%82/</guid>
      <description>&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;老了，不再年轻&lt;/li&gt;&#xA;&lt;li&gt;见一面少一面&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;浏览图片&#34;&gt;浏览图片&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20250118151116_0f49202b.jpg&#34; alt=&#34;&#34; title=&#34;杀年猪&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20250118151116.jpg&#34; alt=&#34;亲戚-孙子满月&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20250118151116_70a6f4ee.jpg&#34; alt=&#34;亲戚-孙子满月2&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20250118151116_7a1120ab.jpg&#34; alt=&#34;藕田&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20250118151116_7d2730f8.jpg&#34; alt=&#34;老房子&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20250118151116_47b4c77c.jpg&#34; alt=&#34;日出&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20250118151116_15026469.jpg&#34; alt=&#34;日出2&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20250120133804.jpg&#34; alt=&#34;外婆家附近的古藤老树&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20250126140207.jpg&#34; alt=&#34;可爱的小棉袄在睡觉&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20250128122638.jpg&#34; alt=&#34;一线江景&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20250128122642.jpg&#34; alt=&#34;一线江景2&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20250131141149.jpg&#34; alt=&#34;茅岩河大桥&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20250131151116.jpg&#34; alt=&#34;湘西的高速&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20250204135813.jpg&#34; alt=&#34;忠县滨江公园&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20250204135821.jpg&#34; alt=&#34;忠县滨江公园2&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20250204135838.jpg&#34; alt=&#34;忠县滨江公园3&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>sqlite 设计与实现</title>
      <link>http://shanks.link/blog/2024/12/16/sqlite-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 16 Dec 2024 16:42:27 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/12/16/sqlite-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;&lt;strong&gt;COPY RIGHT&lt;/strong&gt;&#xA;以下相关内容的版权为 Sibsankar Haldar 所有，仅供学习研究只用，未获得原始作者的授权时不可有任何侵权行为；&lt;/p&gt;&#xA;&lt;h1 id=&#34;第一章-计算机系统概论&#34;&gt;第一章 计算机系统概论&lt;/h1&gt;&#xA;&lt;h1 id=&#34;第二章-sqlite概述&#34;&gt;第二章 SQLite概述&lt;/h1&gt;&#xA;&lt;h3 id=&#34;学术目标&#34;&gt;学术目标&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;SQLite数据库系统及其功能&lt;/li&gt;&#xA;&lt;li&gt;SQLite支持哪些显著特性&lt;/li&gt;&#xA;&lt;li&gt;SQLite如何将表存储在数据库文件中&lt;/li&gt;&#xA;&lt;li&gt;如何编写、编译和执行SQLite应用程序&lt;/li&gt;&#xA;&lt;li&gt;一些最常用的SQLite API&lt;/li&gt;&#xA;&lt;li&gt;模块化的SQLite体系结构&lt;/li&gt;&#xA;&lt;li&gt;SQLite的限制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;章节概要&#34;&gt;章节概要&lt;/h3&gt;&#xA;&lt;p&gt;        SQLite是一个小型的、零配置的、定制的、可嵌入的、线程安全的、易于维护的、面向事务的、基于SQL的关系数据库管理系统。它将整个数据库存储在包含所有表和索引的单个文件中。它将所有表组织成单独的B+树，并将索引组织成B树。它支持核心事务属性，即原子性、一致性、隔离性和持久性。它使用基于锁的并发控制方案和基于日志的恢复方案。&lt;/p&gt;</description>
    </item>
    <item>
      <title>linux 下监控进程CPU使用率</title>
      <link>http://shanks.link/blog/2024/12/03/linux-%E4%B8%8B%E7%9B%91%E6%8E%A7%E8%BF%9B%E7%A8%8Bcpu%E4%BD%BF%E7%94%A8%E7%8E%87/</link>
      <pubDate>Tue, 03 Dec 2024 09:48:54 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/12/03/linux-%E4%B8%8B%E7%9B%91%E6%8E%A7%E8%BF%9B%E7%A8%8Bcpu%E4%BD%BF%E7%94%A8%E7%8E%87/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PROCESS_NAME=&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;appName&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# 初始化CPU使用率为0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cpu_usage=0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# 循环获取CPU使用率&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; : ; &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# 暂停一段时间，重新获取CPU使用率&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sleep 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    date=&lt;span style=&#34;color:#00f&#34;&gt;$(&lt;/span&gt;date +%Y%m%d&lt;span style=&#34;color:#00f&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# 拼接文件名&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    filename=&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;cpu_load_&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;${&lt;/span&gt;date&lt;span style=&#34;color:#009c00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;.txt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# 获取进程的PID&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#PID=$(pgrep $PROCESS_NAME)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# 如果进程不存在，等待进程启动&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#if [ -z &amp;#34;$PID&amp;#34; ]; then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#    echo &amp;#34;进程不存在&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#    continue&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# 获取进程的CPU使用率&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cpu_usage=&lt;span style=&#34;color:#00f&#34;&gt;$(&lt;/span&gt;top -bn1 | grep &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;appName&amp;#39;&lt;/span&gt; | awk &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;{print $9}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# 字符串转为浮点数&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cpu_usage=&lt;span style=&#34;color:#00f&#34;&gt;$(&lt;/span&gt;echo &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;$cpu_usage&lt;span style=&#34;color:#009c00&#34;&gt; * 1.0&amp;#34;&lt;/span&gt; | bc -l&lt;span style=&#34;color:#00f&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# 浮点数转为整数&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cpu_usage=&lt;span style=&#34;color:#00f&#34;&gt;$(&lt;/span&gt;echo &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;$cpu_usage&lt;span style=&#34;color:#009c00&#34;&gt;/1&amp;#34;&lt;/span&gt; | bc&lt;span style=&#34;color:#00f&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; [ $cpu_usage -gt 7 ]; &lt;span style=&#34;color:#00f&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# 打印CPU使用率&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#date &amp;gt;&amp;gt; ./$filename&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;date_str=&lt;span style=&#34;color:#00f&#34;&gt;$(&lt;/span&gt;date +%Y%m%d-%H:%M:%S&lt;span style=&#34;color:#00f&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;usage_str=&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;    CPU usage(%):  &lt;/span&gt;$cpu_usage&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;usage=&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;${&lt;/span&gt;date_str&lt;span style=&#34;color:#009c00&#34;&gt;}${&lt;/span&gt;usage_str&lt;span style=&#34;color:#009c00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#echo &amp;#34;CPU Usage: $cpu_usage%&amp;#34; &amp;gt;&amp;gt; ./$filename&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;echo $usage &amp;gt;&amp;gt; ./$filename&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;done&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>周，月，年总结</title>
      <link>http://shanks.link/blog/2024/08/14/%E5%91%A8%E6%9C%88%E5%B9%B4%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 14 Aug 2024 16:16:03 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/08/14/%E5%91%A8%E6%9C%88%E5%B9%B4%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;h3 id=&#34;68-811&#34;&gt;6.8-8.11&lt;/h3&gt;&#xA;&lt;h4 id=&#34;达成目标&#34;&gt;达成目标&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;积极沟通（工作和生活）&lt;/li&gt;&#xA;&lt;li&gt;尝试新鲜的事物（周末出门锻炼+游泳)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;未达成目标&#34;&gt;未达成目标&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;规律睡眠、饮食&lt;/li&gt;&#xA;&lt;li&gt;学习专业、非专业知识&lt;/li&gt;&#xA;&lt;li&gt;复盘和规划&lt;/li&gt;&#xA;&lt;li&gt;情绪控制（多思考，少说话）&lt;/li&gt;&#xA;&lt;li&gt;培养专注力（上班摸鱼的时间过多）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;感悟&#34;&gt;感悟&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;时间过的真快，一年过了一半，夏天也快结束了&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;61-67&#34;&gt;6.1-6.7&lt;/h2&gt;&#xA;&lt;h4 id=&#34;达成目标-1&#34;&gt;达成目标&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;陪伴家人，带娃，带小孩出去耍&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;未达成目标-1&#34;&gt;未达成目标&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;早睡、早起、控制饮食&lt;/li&gt;&#xA;&lt;li&gt;尝试新鲜事物&lt;/li&gt;&#xA;&lt;li&gt;学习非专业知识、专业知识&lt;/li&gt;&#xA;&lt;li&gt;复盘和规划&lt;/li&gt;&#xA;&lt;li&gt;情绪控制（少说话、多思考）&lt;/li&gt;&#xA;&lt;li&gt;培养专注力（上班摸鱼的时间过多）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;420-426&#34;&gt;4.20-4.26&lt;/h3&gt;&#xA;&lt;h3 id=&#34;达成目标-2&#34;&gt;达成目标&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;早睡，早起&lt;/li&gt;&#xA;&lt;li&gt;陪伴家人，带娃，带小孩出去耍，给小孩买玩具&lt;/li&gt;&#xA;&lt;li&gt;尝试新鲜事物（新的辣椒炒肉方法）&lt;/li&gt;&#xA;&lt;li&gt;控制饮食&lt;/li&gt;&#xA;&lt;li&gt;学习非专业知识：地铁上看《遥远的救世主》&lt;/li&gt;&#xA;&lt;li&gt;复盘与规划：股票投资进行了复盘，对未来一个月的投资做了规划&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;未达成目标-2&#34;&gt;未达成目标&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;情绪控制（少说话，多思考）: 少在微信群里说话&lt;/li&gt;&#xA;&lt;li&gt;培养专注力（上班摸鱼的时间过多）: 严格按照时间作息&lt;/li&gt;&#xA;&lt;li&gt;学习：专业书籍&lt;/li&gt;&#xA;&lt;li&gt;锻炼：本周未锻炼&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;325-331&#34;&gt;3.25-3.31&lt;/h2&gt;&#xA;&lt;h3 id=&#34;达成目标-3&#34;&gt;达成目标&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;陪伴家人，带娃，带小孩出去耍&lt;/li&gt;&#xA;&lt;li&gt;尝试新鲜事物（剁椒鱼头、带帐篷玩耍）&lt;/li&gt;&#xA;&lt;li&gt;反思与总结（对减肥效率进行了总结）&lt;/li&gt;&#xA;&lt;li&gt;早睡，早起&lt;/li&gt;&#xA;&lt;li&gt;控制饮食&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;未达成目标-3&#34;&gt;未达成目标&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;培养专注力（上班摸鱼的时间过多）: 严格按照时间作息&lt;/li&gt;&#xA;&lt;li&gt;情绪控制（少说话，多思考）: 少在微信群里说话&lt;/li&gt;&#xA;&lt;li&gt;阅读专业知识和非专业知识：地铁上看书&lt;/li&gt;&#xA;&lt;li&gt;学习：看专业的和非专业的书籍&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2024年39-317&#34;&gt;2024年3.9-3.17&lt;/h2&gt;&#xA;&lt;h3 id=&#34;达成目标-4&#34;&gt;达成目标&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;陪伴家人&lt;/li&gt;&#xA;&lt;li&gt;尝试新鲜事物（做了辣椒炒肉和烤鱼）&lt;/li&gt;&#xA;&lt;li&gt;反思与总结（周报和购买了新股）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;未达成目标-4&#34;&gt;未达成目标&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;控制饮食（中午吃3两面，太多了）：改为吃二两面食，早晚吃苹果，晚上不回家吃饭&lt;/li&gt;&#xA;&lt;li&gt;早睡早起（周末和平常睡的太晚）：早睡和早起（早起到公司后，看新闻）&lt;/li&gt;&#xA;&lt;li&gt;培养专注力（上班摸鱼的时间过多）: 严格按照时间作息&lt;/li&gt;&#xA;&lt;li&gt;工作纪律：不要在工作时间做工作以为的事情（不要在办公室吃东西，改到楼梯间）&lt;/li&gt;&#xA;&lt;li&gt;情绪控制（少说话，多思考）: 少在微信群里说话&lt;/li&gt;&#xA;&lt;li&gt;阅读专业知识和非专业知识：地铁上看书&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2024年32-38&#34;&gt;2024年3.2-3.8&lt;/h2&gt;&#xA;&lt;h3 id=&#34;达成的目标&#34;&gt;达成的目标&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;控制饮食&lt;/li&gt;&#xA;&lt;li&gt;锻炼&lt;/li&gt;&#xA;&lt;li&gt;陪伴家人&lt;/li&gt;&#xA;&lt;li&gt;尝试新鲜的事物（做了烤鱼）&lt;/li&gt;&#xA;&lt;li&gt;反思与总结&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;未达成目标-5&#34;&gt;未达成目标&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;早睡早起&lt;/li&gt;&#xA;&lt;li&gt;培养专注力&lt;/li&gt;&#xA;&lt;li&gt;情绪控制（少说话，多思考，决绝一切短视频等消息）&lt;/li&gt;&#xA;&lt;li&gt;阅读专业知识和非专业知识&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2024年117-22&#34;&gt;2024年1.17-2.2&lt;/h2&gt;&#xA;&lt;h3 id=&#34;达成的目标-1&#34;&gt;达成的目标&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;控制饮食&lt;/li&gt;&#xA;&lt;li&gt;按时作息&lt;/li&gt;&#xA;&lt;li&gt;锻炼&lt;/li&gt;&#xA;&lt;li&gt;陪伴家人&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;未达成目标-6&#34;&gt;未达成目标&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;控制情绪（说话，做事之前先思考）&lt;/li&gt;&#xA;&lt;li&gt;阅读专业知识和非专业知识&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>眉山-三苏祠</title>
      <link>http://shanks.link/blog/2024/08/14/%E7%9C%89%E5%B1%B1-%E4%B8%89%E8%8B%8F%E7%A5%A0/</link>
      <pubDate>Wed, 14 Aug 2024 14:36:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/08/14/%E7%9C%89%E5%B1%B1-%E4%B8%89%E8%8B%8F%E7%A5%A0/</guid>
      <description>&lt;h3 id=&#34;基础信息&#34;&gt;基础信息&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;以苏轼3父子为主题的园林，环境幽静，票价优惠，值得耍一次；&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;参考事项&#34;&gt;参考事项&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;自驾或公交（看自己情况），附近有停车场。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;游玩时间大约2个半小时&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;可以和眉山水街安排一起；&lt;/p&gt;</description>
    </item>
    <item>
      <title>都江堰</title>
      <link>http://shanks.link/blog/2024/06/09/%E9%83%BD%E6%B1%9F%E5%A0%B0/</link>
      <pubDate>Sun, 09 Jun 2024 14:36:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/06/09/%E9%83%BD%E6%B1%9F%E5%A0%B0/</guid>
      <description>&lt;h3 id=&#34;基础信息&#34;&gt;基础信息&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;2000多年历史的水利工程，景区门口还有南桥，和小吃一条街&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;游玩建议&#34;&gt;游玩建议&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;景区有非常多的入口，有从山上浏览到山下的，有山下浏览到山上的，根据自己的实际情况选择；&lt;/p&gt;</description>
    </item>
    <item>
      <title>都江堰-熊猫谷</title>
      <link>http://shanks.link/blog/2024/06/09/%E9%83%BD%E6%B1%9F%E5%A0%B0-%E7%86%8A%E7%8C%AB%E8%B0%B7/</link>
      <pubDate>Sun, 09 Jun 2024 10:36:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/06/09/%E9%83%BD%E6%B1%9F%E5%A0%B0-%E7%86%8A%E7%8C%AB%E8%B0%B7/</guid>
      <description>&lt;h3 id=&#34;基础信息&#34;&gt;基础信息&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在都江堰市，地处山边，饲养大熊貓、小熊猫的山谷，环境幽静，凉爽，游客相对较少（市区的熊猫基地而言）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;游玩建议&#34;&gt;游玩建议&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;离市区较远，需考虑交通，景区停车位充足&lt;/li&gt;&#xA;&lt;li&gt;相比一般的动物园和熊猫基地，这里能非常近的观赏到大、小熊貓&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;小熊猫&#34;&gt;小熊猫&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;起点也是终点（路线是一个大的回形针（单向）），小熊猫在山谷的最里边&lt;/li&gt;&#xA;&lt;li&gt;小熊猫活跃时间在9点，若参观小熊猫为主则需要起早床（晚了，小熊猫就没那么活跃了，一般动物园的样子了）&lt;/li&gt;&#xA;&lt;li&gt;网上先参观小熊猫，返程再参观大熊貓的攻略在节假日可能无法实现（有安保人员站岗，无法逆行），这种情况下，需要返程回到起点，再走一遍路，参观大熊貓&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;游览相片&#34;&gt;游览相片&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240609110207.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>仁寿县 五龙山 定向越野</title>
      <link>http://shanks.link/blog/2024/05/25/%E4%BB%81%E5%AF%BF%E5%8E%BF-%E4%BA%94%E9%BE%99%E5%B1%B1-%E5%AE%9A%E5%90%91%E8%B6%8A%E9%87%8E/</link>
      <pubDate>Sat, 25 May 2024 10:36:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/05/25/%E4%BB%81%E5%AF%BF%E5%8E%BF-%E4%BA%94%E9%BE%99%E5%B1%B1-%E5%AE%9A%E5%90%91%E8%B6%8A%E9%87%8E/</guid>
      <description>&lt;h3 id=&#34;基础信息&#34;&gt;基础信息&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一个小山为中心，进行定向越野&lt;/li&gt;&#xA;&lt;li&gt;入口有停车位，山里面商店极少需自备干粮&lt;/li&gt;&#xA;&lt;li&gt;山下是农户，和庄家，可以带娃亲近自然&lt;/li&gt;&#xA;&lt;li&gt;整体难度不大&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;游玩建议&#34;&gt;游玩建议&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;注意天气，不要下雨，大太阳前往&lt;/li&gt;&#xA;&lt;li&gt;成都往来100KM，注意时间安排（不要疲劳驾驶）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;游览相片&#34;&gt;游览相片&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240531164955.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>双流区中心公园</title>
      <link>http://shanks.link/blog/2024/05/17/%E5%8F%8C%E6%B5%81%E5%8C%BA%E4%B8%AD%E5%BF%83%E5%85%AC%E5%9B%AD/</link>
      <pubDate>Fri, 17 May 2024 10:36:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/05/17/%E5%8F%8C%E6%B5%81%E5%8C%BA%E4%B8%AD%E5%BF%83%E5%85%AC%E5%9B%AD/</guid>
      <description>&lt;h3 id=&#34;基本信息&#34;&gt;基本信息&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;绿化率高，有湖有小溪流，面积大，浏览时间可安排3个小时&lt;/li&gt;&#xA;&lt;li&gt;适合一家老小、情侣、好友玩耍&lt;/li&gt;&#xA;&lt;li&gt;公园商业化低，要自备水，附件有餐馆&lt;/li&gt;&#xA;&lt;li&gt;附件有便宜的停车场&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;附近推荐的新疆烧烤店&#34;&gt;附近推荐的新疆烧烤店&lt;/h3&gt;&#xA;&lt;p&gt;店名：新疆艾力达达美味&lt;/p&gt;</description>
    </item>
    <item>
      <title>遥远的救世主里的强势文化和弱势文化是什么</title>
      <link>http://shanks.link/blog/2024/05/15/%E9%81%A5%E8%BF%9C%E7%9A%84%E6%95%91%E4%B8%96%E4%B8%BB%E9%87%8C%E7%9A%84%E5%BC%BA%E5%8A%BF%E6%96%87%E5%8C%96%E5%92%8C%E5%BC%B1%E5%8A%BF%E6%96%87%E5%8C%96%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Wed, 15 May 2024 11:54:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/05/15/%E9%81%A5%E8%BF%9C%E7%9A%84%E6%95%91%E4%B8%96%E4%B8%BB%E9%87%8C%E7%9A%84%E5%BC%BA%E5%8A%BF%E6%96%87%E5%8C%96%E5%92%8C%E5%BC%B1%E5%8A%BF%E6%96%87%E5%8C%96%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>&lt;p&gt;&lt;strong&gt;强势文化&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;注意，我这里说的的强势文化，和有没有钱，是不是高管，有没有社会地位，没关系。我说的是，掌握并且遵行事物的客观规律&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;简单来说，&lt;strong&gt;强势文化就是遵循事物规律的文化，不以人的意志为转移&lt;/strong&gt;存在决定意识，从客观角度来看待这个世界，掌握并应用客观规律。具体反应出来，说的简单粗暴点，就是以结果为导向，成王败寇，看起来没有那么道德，甚至感觉一个人很无情冷血。&lt;/p&gt;</description>
    </item>
    <item>
      <title>网络测速软件 iperf3</title>
      <link>http://shanks.link/blog/2024/05/15/%E7%BD%91%E7%BB%9C%E6%B5%8B%E9%80%9F%E8%BD%AF%E4%BB%B6-iperf3/</link>
      <pubDate>Wed, 15 May 2024 10:24:54 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/05/15/%E7%BD%91%E7%BB%9C%E6%B5%8B%E9%80%9F%E8%BD%AF%E4%BB%B6-iperf3/</guid>
      <description>&lt;h6 id=&#34;一-iperf3简介&#34;&gt;一、 iperf3简介&lt;/h6&gt;&#xA;&lt;p&gt;&lt;code&gt;iperf3&lt;/code&gt;是一个网络性能测试工具(&lt;a href=&#34;https://iperf.fr/iperf-download.php&#34;&gt;iperf3下载地址&lt;/a&gt;)。&lt;/p&gt;&#xA;&lt;p&gt;iperf3 是一个用于测量网络带宽的开源工具，它是 iperf 工具的第三个版本。它主要用于评估网络的性能，包括带宽、延迟和数据包丢失率等。&lt;/p&gt;</description>
    </item>
    <item>
      <title>中岩寺景区</title>
      <link>http://shanks.link/blog/2024/05/03/%E4%B8%AD%E5%B2%A9%E5%AF%BA%E6%99%AF%E5%8C%BA/</link>
      <pubDate>Fri, 03 May 2024 10:36:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/05/03/%E4%B8%AD%E5%B2%A9%E5%AF%BA%E6%99%AF%E5%8C%BA/</guid>
      <description>&lt;h3 id=&#34;基本信息&#34;&gt;基本信息&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;靠着岷江，岩石雕像小山，苏东坡到此游览过，爬山锻炼为主为特色的景区&lt;/li&gt;&#xA;&lt;li&gt;开发度低，整个山的绿植覆盖率超级高，适合夏季避暑&lt;/li&gt;&#xA;&lt;li&gt;4月份左右可观览萤火虫&lt;/li&gt;&#xA;&lt;li&gt;停车场在景区门口（10RMB），冷门景区，停车场不大，景区内无购物，需自备饮水&lt;/li&gt;&#xA;&lt;li&gt;山不高，上山的路均已硬化，下山的路没硬化但也好走&lt;/li&gt;&#xA;&lt;li&gt;浏览时间大约2个小时&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;实景图&#34;&gt;实景图&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240503114654.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>玉林路-夜市</title>
      <link>http://shanks.link/blog/2024/05/02/%E7%8E%89%E6%9E%97%E8%B7%AF-%E5%A4%9C%E5%B8%82/</link>
      <pubDate>Thu, 02 May 2024 17:36:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/05/02/%E7%8E%89%E6%9E%97%E8%B7%AF-%E5%A4%9C%E5%B8%82/</guid>
      <description>&lt;h3 id=&#34;基础信息&#34;&gt;基础信息&lt;/h3&gt;&#xA;&lt;p&gt;美食为主，酒吧为辅的商圈，适合外地年轻人晚上逛&lt;/p&gt;&#xA;&lt;h3 id=&#34;实景图&#34;&gt;实景图&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240506092954.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240502193238.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240502193428.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240502193848.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240502194315.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240502194333.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240502194346.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240502194911.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240502195048.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240502200257.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240502200417.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240502200905.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240502201219.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240502201302.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240502201424.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240502201446.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240502201450.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240502202138.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux进程间通信7：数据报套接字 socket()、bind()、sendto()、recvfrom()、close()</title>
      <link>http://shanks.link/blog/2024/04/16/linux%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A17%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%A5%97%E6%8E%A5%E5%AD%97-socketbindsendtorecvfromclose/</link>
      <pubDate>Tue, 16 Apr 2024 14:28:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/04/16/linux%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A17%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%A5%97%E6%8E%A5%E5%AD%97-socketbindsendtorecvfromclose/</guid>
      <description>&lt;p&gt;前一篇文章，&lt;a href=&#34;http://shanks.link/blog/2024/04/16/linux%e8%bf%9b%e7%a8%8b%e9%97%b4%e9%80%9a%e4%bf%a16-%e6%b5%81%e5%a5%97%e6%8e%a5%e5%ad%97-socketbindlistenacceptconnectreadwriteclose/&#34;&gt;Linux进程间通信——使用流套接字&lt;/a&gt;介绍了一些有关socket（套接字）的一些基本内容，并讲解了流套接字的使用，这篇文章将会给大家讲讲，数据报套接字的使用。&lt;/p&gt;&#xA;&lt;h3 id=&#34;一简单回顾什么是数据报套接字&#34;&gt;一、简单回顾——什么是数据报套接字&lt;/h3&gt;&#xA;&lt;p&gt;socket，即套接字是一种通信机制，凭借这种机制，客户/服务器（即要进行通信的进程）系统的开发工作既可以在本地单机上进行，也可以跨网络进行。也就是说它可以让不在同一台计算机但通过网络连接计算机上的进程进行通信。也因为这样，套接字明确地将客户端和服务器区分开来。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux进程间通信6 流套接字 socket bind listen accept connect read write close</title>
      <link>http://shanks.link/blog/2024/04/16/linux%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A16-%E6%B5%81%E5%A5%97%E6%8E%A5%E5%AD%97-socket-bind-listen-accept-connect-read-write-close/</link>
      <pubDate>Tue, 16 Apr 2024 11:53:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/04/16/linux%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A16-%E6%B5%81%E5%A5%97%E6%8E%A5%E5%AD%97-socket-bind-listen-accept-connect-read-write-close/</guid>
      <description>&lt;p&gt;前面说到的进程间的通信，所通信的进程都是在同一台计算机上的，而使用socket进行通信的进程可以是同一台计算机的进程，也是可以是通过网络连接起来的不同计算机上的进程。通常我们使用socket进行网络编程，这里将会简单地讲述如何使用socket进行简单的网络编程。&lt;/p&gt;</description>
    </item>
    <item>
      <title>进程间通信5 消息队列 msgget、msgsend、msgrcv、msgctl</title>
      <link>http://shanks.link/blog/2024/04/16/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A15-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-msggetmsgsendmsgrcvmsgctl/</link>
      <pubDate>Tue, 16 Apr 2024 11:41:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/04/16/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A15-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-msggetmsgsendmsgrcvmsgctl/</guid>
      <description>&lt;p&gt;下面来说说如何用不用消息队列来进行进程间的通信，消息队列与命名管道有很多相似之处。有关命名管道的更多内容可以参阅我的另一篇文章：&lt;a href=&#34;http://shanks.link/blog/2024/04/16/%e8%bf%9b%e7%a8%8b%e9%97%b4%e9%80%9a%e4%bf%a12-%e6%9c%89%e5%90%8d%e7%ae%a1%e9%81%93/&#34;&gt;Linux进程间通信 &amp;ndash; 使用命名管道&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>进程间通信4 共享内存 shmget shmat shmdt shmctl</title>
      <link>http://shanks.link/blog/2024/04/16/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A14-%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98-shmget-shmat-shmdt-shmctl/</link>
      <pubDate>Tue, 16 Apr 2024 11:19:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/04/16/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A14-%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98-shmget-shmat-shmdt-shmctl/</guid>
      <description>&lt;p&gt;下面将讲解进程间通信的另一种方式，使用共享内存。&lt;/p&gt;&#xA;&lt;h3 id=&#34;一什么是共享内存&#34;&gt;一、什么是共享内存&lt;/h3&gt;&#xA;&lt;p&gt;顾名思义，共享内存就是允许两个不相关的进程访问同一个逻辑内存。共享内存是在两个正在运行的进程之间共享和传递数据的一种非常有效的方式。不同进程之间共享的内存通常安排为同一段物理内存。进程可以将同一段共享内存连接到它们自己的地址空间中，所有进程都可以访问共享内存中的地址，就好像它们是由用C语言函数malloc()分配的内存一样。而如果某个进程向共享内存写入数据，所做的改动将立即影响到可以访问同一段共享内存的任何其他进程。&lt;/p&gt;</description>
    </item>
    <item>
      <title>进程间通信3 信号量 semget、semop、semctl</title>
      <link>http://shanks.link/blog/2024/04/16/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A13-%E4%BF%A1%E5%8F%B7%E9%87%8F-semgetsemopsemctl/</link>
      <pubDate>Tue, 16 Apr 2024 10:49:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/04/16/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A13-%E4%BF%A1%E5%8F%B7%E9%87%8F-semgetsemopsemctl/</guid>
      <description>&lt;p&gt;这篇文章将讲述别一种进程间通信的机制——信号量。注意请不要把它与之前所说的信号混淆起来，信号与信号量是不同的两种事物。有关信号的更多内容，可以阅读我的另一篇文章：&lt;a href=&#34;http://www.cnblogs.com/52php/p/5813867.html&#34;&gt;Linux进程间通信 &amp;ndash; 信号&lt;/a&gt;。下面就进入信号量的讲解。&lt;/p&gt;</description>
    </item>
    <item>
      <title>进程间通信2 有名管道 mkfifo、open、read、close</title>
      <link>http://shanks.link/blog/2024/04/16/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A12-%E6%9C%89%E5%90%8D%E7%AE%A1%E9%81%93-mkfifoopenreadclose/</link>
      <pubDate>Tue, 16 Apr 2024 09:56:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/04/16/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A12-%E6%9C%89%E5%90%8D%E7%AE%A1%E9%81%93-mkfifoopenreadclose/</guid>
      <description>&lt;p&gt;在前一篇文章—— &lt;a href=&#34;http://shanks.link/blog/2024/04/15/%e8%bf%9b%e7%a8%8b%e9%97%b4%e9%80%9a%e4%bf%a12-%e5%8c%bf%e5%90%8d%e7%ae%a1%e9%81%93/&#34;&gt;Linux进程间通信 &amp;ndash; 使用匿名管道&lt;/a&gt; 中，我们看到了如何使用匿名管道来在进程之间传递数据，同时也看到了这个方式的一个缺陷，就是这些进程都由一个共同的祖先进程启动，这给我们在不相关的的进程之间交换数据带来了不方便。这里将会介绍进程的另一种通信方式——命名管道，来解决不相关进程间的通信问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>进程间通信2 匿名管道 popen、pclose、pipe、close、dup、dup2</title>
      <link>http://shanks.link/blog/2024/04/15/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A12-%E5%8C%BF%E5%90%8D%E7%AE%A1%E9%81%93-popenpclosepipeclosedupdup2/</link>
      <pubDate>Mon, 15 Apr 2024 17:17:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/04/15/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A12-%E5%8C%BF%E5%90%8D%E7%AE%A1%E9%81%93-popenpclosepipeclosedupdup2/</guid>
      <description>&lt;p&gt;在前面，介绍了一种进程间的通信方式：使用信号，我们创建通知事件，并通过它引起响应，但传递的信息只是一个信号值。这里将介绍另一种进程间通信的方式——匿名管道，通过它进程间可以交换更多有用的数据。&lt;/p&gt;</description>
    </item>
    <item>
      <title>进程间通信1 信号  signal、sigaction</title>
      <link>http://shanks.link/blog/2024/04/15/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A11-%E4%BF%A1%E5%8F%B7-signalsigaction/</link>
      <pubDate>Mon, 15 Apr 2024 16:51:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/04/15/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A11-%E4%BF%A1%E5%8F%B7-signalsigaction/</guid>
      <description>&lt;h3 id=&#34;一什么是信号&#34;&gt;一、什么是信号&lt;/h3&gt;&#xA;&lt;p&gt;用过Windows的我们都知道，当我们无法正常结束一个程序时，可以用任务管理器强制结束这个进程，但这其实是怎么实现的呢？同样的功能在Linux上是通过生成信号和捕获信号来实现的，运行中的进程捕获到这个信号然后作出一定的操作并最终被终止。&lt;/p&gt;</description>
    </item>
    <item>
      <title>进程间通信1 信号之信号集函数 sigemptyset()、sigprocmask()、sigpending()、sigsuspend()</title>
      <link>http://shanks.link/blog/2024/04/15/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A11-%E4%BF%A1%E5%8F%B7%E4%B9%8B%E4%BF%A1%E5%8F%B7%E9%9B%86%E5%87%BD%E6%95%B0-sigemptysetsigprocmasksigpendingsigsuspend/</link>
      <pubDate>Mon, 15 Apr 2024 16:51:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/04/15/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A11-%E4%BF%A1%E5%8F%B7%E4%B9%8B%E4%BF%A1%E5%8F%B7%E9%9B%86%E5%87%BD%E6%95%B0-sigemptysetsigprocmasksigpendingsigsuspend/</guid>
      <description>&lt;p&gt;我们已经知道，我们可以通过信号来终止进程，也可以通过信号来在进程间进行通信，程序也可以通过指定信号的关联处理函数来改变信号的默认处理方式，也可以屏蔽某些信号，使其不能传递给进程。那么我们应该如何设定我们需要处理的信号，我们不需要处理哪些信号等问题呢？信号集函数就是帮助我们解决这些问题的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>天府公园</title>
      <link>http://shanks.link/blog/2024/04/14/%E5%A4%A9%E5%BA%9C%E5%85%AC%E5%9B%AD/</link>
      <pubDate>Sun, 14 Apr 2024 11:36:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/04/14/%E5%A4%A9%E5%BA%9C%E5%85%AC%E5%9B%AD/</guid>
      <description>&lt;h3 id=&#34;基础信息&#34;&gt;基础信息&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;适合支个天幕和朋友聊聊天&lt;/li&gt;&#xA;&lt;li&gt;公园内环境，树木，小河都不错&lt;/li&gt;&#xA;&lt;li&gt;公交不便利，推荐自驾&lt;/li&gt;&#xA;&lt;li&gt;儿童乐园比较小，如果要带小孩玩耍不如红石公园&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;现场相片&#34;&gt;现场相片&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240414102911.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240414102919.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240414103046.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240414110120.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240414103910.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240414103912.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>新津抓螃蟹</title>
      <link>http://shanks.link/blog/2024/04/14/%E6%96%B0%E6%B4%A5%E6%8A%93%E8%9E%83%E8%9F%B9/</link>
      <pubDate>Sun, 14 Apr 2024 11:36:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/04/14/%E6%96%B0%E6%B4%A5%E6%8A%93%E8%9E%83%E8%9F%B9/</guid>
      <description>&lt;h3 id=&#34;基础信息&#34;&gt;基础信息&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;周围的环境为：小河+农田&lt;/li&gt;&#xA;&lt;li&gt;适合带娃下河体验 summer&lt;/li&gt;&#xA;&lt;li&gt;公交不便，需要自驾&lt;/li&gt;&#xA;&lt;li&gt;下河最好穿下河的鞋&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240415174923.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240415174900.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240414143435.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240414143327.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240414135600.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>规划24</title>
      <link>http://shanks.link/blog/2024/04/12/%E8%A7%84%E5%88%9224/</link>
      <pubDate>Fri, 12 Apr 2024 17:50:53 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/04/12/%E8%A7%84%E5%88%9224/</guid>
      <description>&lt;h1 id=&#34;总目标&#34;&gt;总目标&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;锻炼身体&lt;/li&gt;&#xA;&lt;li&gt;培养优秀的行为习惯&lt;/li&gt;&#xA;&lt;li&gt;培养优秀的饮食习惯&lt;/li&gt;&#xA;&lt;li&gt;培养优秀的睡眠习惯&lt;/li&gt;&#xA;&lt;li&gt;培养持续学习的习惯&lt;/li&gt;&#xA;&lt;li&gt;其它&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;行为习惯&#34;&gt;行为习惯&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;培养冷静、复盘的性格&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;事前确定&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;动机、投入、核心目标&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;事后&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;复盘&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;饮食习惯&#34;&gt;饮食习惯&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;按时、按量就餐&lt;/p&gt;</description>
    </item>
    <item>
      <title>工作注意事项</title>
      <link>http://shanks.link/blog/2024/04/02/%E5%B7%A5%E4%BD%9C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Tue, 02 Apr 2024 17:55:03 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/04/02/%E5%B7%A5%E4%BD%9C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;把工作当事业对待，不能有打工混日子的心态&lt;/li&gt;&#xA;&lt;li&gt;做事要有工程思维，不要蛮干&lt;/li&gt;&#xA;&lt;li&gt;专心致志是一切的前提，工作时间专心工作，休息时间休息休息&lt;/li&gt;&#xA;&lt;li&gt;少说话，多思考，做个靠谱的人&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>红石公园-带娃耍</title>
      <link>http://shanks.link/blog/2024/03/31/%E7%BA%A2%E7%9F%B3%E5%85%AC%E5%9B%AD-%E5%B8%A6%E5%A8%83%E8%80%8D/</link>
      <pubDate>Sun, 31 Mar 2024 11:36:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/03/31/%E7%BA%A2%E7%9F%B3%E5%85%AC%E5%9B%AD-%E5%B8%A6%E5%A8%83%E8%80%8D/</guid>
      <description>&lt;h3 id=&#34;基础信息&#34;&gt;基础信息&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;适合带娃在游乐场玩或者小溪抓鱼，适合好友支个帐聊聊天&lt;/li&gt;&#xA;&lt;li&gt;公园内环境蛮不错，树木，小河，游乐场都不错&lt;/li&gt;&#xA;&lt;li&gt;场内有售卖冷饮和简易食品的地方&lt;/li&gt;&#xA;&lt;li&gt;公交不便利，推荐自驾&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;浏览相片&#34;&gt;浏览相片&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240331150616.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>九龙广场-壹购潮流广场 购买衣服</title>
      <link>http://shanks.link/blog/2024/03/30/%E4%B9%9D%E9%BE%99%E5%B9%BF%E5%9C%BA-%E5%A3%B9%E8%B4%AD%E6%BD%AE%E6%B5%81%E5%B9%BF%E5%9C%BA-%E8%B4%AD%E4%B9%B0%E8%A1%A3%E6%9C%8D/</link>
      <pubDate>Sat, 30 Mar 2024 10:00:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/03/30/%E4%B9%9D%E9%BE%99%E5%B9%BF%E5%9C%BA-%E5%A3%B9%E8%B4%AD%E6%BD%AE%E6%B5%81%E5%B9%BF%E5%9C%BA-%E8%B4%AD%E4%B9%B0%E8%A1%A3%E6%9C%8D/</guid>
      <description>&lt;h3 id=&#34;交通&#34;&gt;交通&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;自驾建议停到 阳光金融大厦地下停车场&lt;/li&gt;&#xA;&lt;li&gt;公交或者地铁，看自己的实际情况而定，附近有公交站和地铁站&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;饮食&#34;&gt;饮食&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;附近分布着许多小吃，大餐的店，看自己需求&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;九龙大厦&#34;&gt;九龙大厦&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一共12层，每层的档次和款式不同，建议根据需求来逛，男女，衣服，鞋子都有，楼上主要衣服，楼下是鞋子和包包&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;壹购潮流广场&#34;&gt;壹购潮流广场&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;相比九龙广场，这里的店面更紧凑，衣服，鞋子，饰品，帽子，娃娃的衣服等品种啥的都多些&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;其它&#34;&gt;其它&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;距离春熙路和太古里很近，可以顺便逛逛&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;现场图&#34;&gt;现场图&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240330161532.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>减肥、锻炼、饮食、作息</title>
      <link>http://shanks.link/blog/2024/03/29/%E5%87%8F%E8%82%A5%E9%94%BB%E7%82%BC%E9%A5%AE%E9%A3%9F%E4%BD%9C%E6%81%AF/</link>
      <pubDate>Fri, 29 Mar 2024 16:22:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/03/29/%E5%87%8F%E8%82%A5%E9%94%BB%E7%82%BC%E9%A5%AE%E9%A3%9F%E4%BD%9C%E6%81%AF/</guid>
      <description>&lt;h2 id=&#34;减肥-原则&#34;&gt;减肥-原则&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;不能有损身体健康（不饮食和太重的运动）&lt;/li&gt;&#xA;&lt;li&gt;循环渐进，有目标，有计划(一周大约瘦 0.7KG)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;饮食&#34;&gt;饮食&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;控制热量摄入，尤其是高热量饮食（夜宵，油炸，饮料，糖，奶茶，烧烤等）的摄入，能杜绝则杜绝，多吃含蛋白质的食品（煮鸡蛋，鸡肉，鱼肉，豆浆，牛奶，蔬菜，富含纤维的食品）&lt;/li&gt;&#xA;&lt;li&gt;规律饮食，正常吃三餐（早上吃好，中午吃饱，晚上吃少）,采用 8+16 饮食法&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;运动&#34;&gt;运动&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;有规律的锻炼（慢跑，快走，爬山，游泳，跳绳，骑单车等），一周的运动消耗量达到600Kcal*6（最好空腹进行），达到目标&lt;/li&gt;&#xA;&lt;li&gt;当身体疲劳时，需进行休息(一般的参考建议是动5休2)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;注意事项&#34;&gt;注意事项&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;不要不吃，饿肚子受不住后，狂吃一顿，即对身体不好，也容易胖回去&lt;/li&gt;&#xA;&lt;li&gt;要保持锻炼，条件不允许则慢走或跳个绳，若身体不适，可降低运动量或者延后&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;计划&#34;&gt;计划&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;4.14  72.3 KG&lt;/li&gt;&#xA;&lt;li&gt;4.21  71.5 KG&lt;/li&gt;&#xA;&lt;li&gt;4.28  70.5 KG&lt;/li&gt;&#xA;&lt;li&gt;4.30  69.9 KG&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;锻炼-总则&#34;&gt;锻炼-总则&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;时间规律，运动适量&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;时间&#34;&gt;时间&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;安排在早晨（1：空腹运动有利减肥，2：培养早睡早起的习惯，3：早上空气好）&lt;/li&gt;&#xA;&lt;li&gt;每天都进行（平常跑步，下雨则改为跳绳）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;运动量&#34;&gt;运动量&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;早上 7 KM （自己中速跑）&lt;/li&gt;&#xA;&lt;li&gt;旁晚 4.5 KM（陪家人慢跑）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;饮食-1&#34;&gt;饮食&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;量：规律饮食，早上吃好，中午吃饱，晚上吃少，不能饱一顿，饿一顿&lt;/li&gt;&#xA;&lt;li&gt;成份：荤素搭配、多吃蛋白质、少吃糖、脂肪、多吃粗粮，少吃精细加工食品&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;作息&#34;&gt;作息&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;早睡早起(晚上10点左右入睡，早上6.30左右起床)&lt;/li&gt;&#xA;&lt;li&gt;重要的事安排在精力好的时候（早上和下午）&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>投资备忘录</title>
      <link>http://shanks.link/blog/2024/03/27/%E6%8A%95%E8%B5%84%E5%A4%87%E5%BF%98%E5%BD%95/</link>
      <pubDate>Wed, 27 Mar 2024 16:14:52 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/03/27/%E6%8A%95%E8%B5%84%E5%A4%87%E5%BF%98%E5%BD%95/</guid>
      <description>&lt;h1 id=&#34;投资基本原则&#34;&gt;投资基本原则&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;低位不要慌，高位不要贪，顺势而为，独立思考，总结与反思&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;买入与卖出的一般思路&#34;&gt;买入与卖出的一般思路&lt;/h2&gt;&#xA;&lt;h3 id=&#34;买入前需要做的准备工作&#34;&gt;买入前需要做的准备工作&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分析买入票的类型（政策突发型-低空经济的宗申动力，周期性-夏电冬煤，炒作型-川发龙蟒，大环境突变后的利好型-中美贸易战下的内需票-国芳集团，技术突破型-deepseek的杭钢股份，突发现象级利好对应的票-哪吒2票房爆发后背后的发行方-光线传媒&lt;/li&gt;&#xA;&lt;li&gt;根据突发利好或者政策利好对公司的短期影响程度来判断股票能涨的幅度（一般的利好时2-3个板块，炸裂的利好会带来100%到200%的上涨空间-比如光线传媒，杭钢股份，国芳集团，如果中途对应利好有改变则需要实时调整上涨预期，如果交易量活跃也会提升上涨空间，有其它题材抢资金则下调上涨空间，其它环境变量类似），周期型股票则参考过往周期的上涨幅度，则可以推测出大致的上涨空间，请注意，周期性的票一般不会出现某个周期内的上涨幅度远远高于前面周期的情况&lt;/li&gt;&#xA;&lt;li&gt;票能上涨的周期，与题材容量有关（越大则走的越远），与中途暂停交易的时间有关（暂停的时间越长，消息已经传播的越远，那么后期加速度也越大，越容易到达顶点（24年国企大利好，经过国企一周的传播后，10.8号直接到达max点））&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;买入点&#34;&gt;买入点&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;突发型票的买入点，在思考能走的高度后，买入点在全程的1/2之前（能提前买入则提前买入），1/2到2/3也可以看大环境买入，2/3之后则不再推荐买入，经量买热点票&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;卖出点&#34;&gt;卖出点&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;尽量安排在3/4处卖出&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;基础知识点&#34;&gt;基础知识点&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;行业普涨，不知买哪只股时，考虑相关主题的ETF&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;突发事件的一般处理思路&#34;&gt;突发事件的一般处理思路&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;突发某件大事时（考虑利损对方），要立刻考虑可能的止损（22年俄乌战争，24年雪球敲入，25年美中关税大战）不要让手中的票跌而不采取行动，并买入相关的获利票，避险票(600900)，（24年疯牛的情况下，应该立刻买入），&lt;/p&gt;</description>
    </item>
    <item>
      <title>双流机场看飞机_宏盟二手车市场</title>
      <link>http://shanks.link/blog/2024/03/23/%E5%8F%8C%E6%B5%81%E6%9C%BA%E5%9C%BA%E7%9C%8B%E9%A3%9E%E6%9C%BA_%E5%AE%8F%E7%9B%9F%E4%BA%8C%E6%89%8B%E8%BD%A6%E5%B8%82%E5%9C%BA/</link>
      <pubDate>Sat, 23 Mar 2024 14:05:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/03/23/%E5%8F%8C%E6%B5%81%E6%9C%BA%E5%9C%BA%E7%9C%8B%E9%A3%9E%E6%9C%BA_%E5%AE%8F%E7%9B%9F%E4%BA%8C%E6%89%8B%E8%BD%A6%E5%B8%82%E5%9C%BA/</guid>
      <description>&lt;h3 id=&#34;宏盟二手车市场&#34;&gt;宏盟二手车市场&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;市场很大，家用车为主，各种型号和价位的车都有；&lt;/li&gt;&#xA;&lt;li&gt;客流量很差；&lt;/li&gt;&#xA;&lt;li&gt;各种老板都有，不建议小白前往（没有经验容易被宰，现在新车都在降价，小白买新车也香）;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;双流机场看飞机&#34;&gt;双流机场看飞机&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;导航地点： 东升苑喜宴中心&lt;/li&gt;&#xA;&lt;li&gt;可以在附近再找一个更巴适的地方看飞机&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;浏览视频和图片&#34;&gt;浏览视频和图片&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240324163218.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>永安湖城市森林公园-春游</title>
      <link>http://shanks.link/blog/2024/03/23/%E6%B0%B8%E5%AE%89%E6%B9%96%E5%9F%8E%E5%B8%82%E6%A3%AE%E6%9E%97%E5%85%AC%E5%9B%AD-%E6%98%A5%E6%B8%B8/</link>
      <pubDate>Sat, 23 Mar 2024 14:05:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/03/23/%E6%B0%B8%E5%AE%89%E6%B9%96%E5%9F%8E%E5%B8%82%E6%A3%AE%E6%9E%97%E5%85%AC%E5%9B%AD-%E6%98%A5%E6%B8%B8/</guid>
      <description>&lt;h3 id=&#34;基本信息&#34;&gt;基本信息&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;湖+小山+草坪地+步行道组成的休闲型公园，适合一家老小，情侣，好友游玩；&lt;/li&gt;&#xA;&lt;li&gt;公园入口有停车场，周末车多需等位，可按指示牌停到附近的地下停车场（free）,路边随意停车有比较高的罚款风险；&lt;/li&gt;&#xA;&lt;li&gt;公园里面有湖，有草坪，可以带娃抓蝌蚪，放放风筝，再支一个帐篷，巴适得板；&lt;/li&gt;&#xA;&lt;li&gt;园区内有自动售卖机；&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;浏览图&#34;&gt;浏览图&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240323140225.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>PIPE 管道</title>
      <link>http://shanks.link/blog/2024/03/20/pipe-%E7%AE%A1%E9%81%93/</link>
      <pubDate>Wed, 20 Mar 2024 14:58:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/03/20/pipe-%E7%AE%A1%E9%81%93/</guid>
      <description>&lt;h3 id=&#34;官方参考手册&#34;&gt;官方参考手册&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://manpages.courier-mta.org/htmlman7/pipe.7.html&#34;&gt;https://manpages.courier-mta.org/htmlman7/pipe.7.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;示例代码&#34;&gt;示例代码&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;// O_NOATIME 宏定义的扩展要求&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define _GNU_SOURCE 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#undef _GNU_SOURCE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;pthread.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;sys/time.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;linux/unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;assert.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;limits.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; pip[2];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c34e00&#34;&gt;sleep_select&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; sec)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; timeval timeout;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    timeout.tv_usec = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    timeout.tv_sec = sec;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;select&lt;/span&gt;(0, NULL, NULL, NULL, &amp;amp;timeout);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;*&lt;span style=&#34;color:#c34e00&#34;&gt;thread_read&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *userdata)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; data[5] = {0};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; ret;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;p0: %d&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, pip[0]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;p1: %d&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, pip[1]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fd_set fds;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;FD_ZERO&lt;/span&gt;(&amp;amp;fds);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;FD_SET&lt;/span&gt;(pip[0], &amp;amp;fds);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; timeval timeout = {10, 0};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ret = &lt;span style=&#34;color:#c34e00&#34;&gt;select&lt;/span&gt;(pip[0] + 1, &amp;amp;fds, NULL, NULL, &amp;amp;timeout);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ret &amp;lt; 0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;select error&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ret == 0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;// printf(&amp;#34;no fd ready\n&amp;#34;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;FD_ISSET&lt;/span&gt;(pip[0], &amp;amp;fds) &amp;gt; 0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#c34e00&#34;&gt;read&lt;/span&gt;(pip[0], data, 5);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;data: %s&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, data);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c34e00&#34;&gt;thread_write&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;thread_write&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; data[] = &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;pipe-data&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;sleep_select&lt;/span&gt;(1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;write&lt;/span&gt;(pip[1], data, &lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(data));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 单次写入的数据长度超过 PIPE_BUF 时， 内核不保证写入的原子性*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(data) &amp;gt; PIPE_BUF)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;warn data is too long&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *argv[])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; data[] = &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;pthread_t&lt;/span&gt; id;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;pipe&lt;/span&gt;(pip))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;pipe error&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;exit&lt;/span&gt;(-1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;p0: %d&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, pip[0]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;p1: %d&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, pip[1]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;fcntl&lt;/span&gt;(pip[0], F_SETFL, O_NOATIME); &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 提高性能 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;fcntl&lt;/span&gt;(pip[1], F_SETFL, O_NOATIME);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;pthread_create&lt;/span&gt;(&amp;amp;id, NULL, thread_read, NULL))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;create thread error&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;exit&lt;/span&gt;(-1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;pthread id = %x&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, id);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;pthread_create&lt;/span&gt;(&amp;amp;id, NULL, thread_write, NULL);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;// signal(SIGUSR1, mysignal);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;sleep_select&lt;/span&gt;(2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;pthread_join&lt;/span&gt;(id, NULL);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;基本介绍&#34;&gt;基本介绍&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;无名管道(4)：通过管道同步进程&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;通过管道同步进程&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;管道其实就是一个文件&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PIPE通信应用&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;通过管道同步进程&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;管道自带同步互斥机制：&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;管道的内核实现：fs/pipe.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;通过内核的锁、等待队列等机制实现&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Write操作可能会阻塞进程&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;当内存缓冲区已满被读进程锁定&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;直到所有数据被写入到管道为止&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Read操作进程可能会阻塞进程&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;读进程可以休眠在等待队列&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;直到所有子进程都关闭了管道的写入端描述符为止&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;父进程的写入端描述符也要关闭，否则父进程读管道时也会被阻塞&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;只有当所有的写端描述符都已关闭，且管道中的数据都被读出，对读端描述符调用read函数才会返回0(即读到EOF标志)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;当所有的读取端和写入端都关闭，管道才能被销毁&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;管道缓冲区设置&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;管道缓冲区&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;管道对应的内存缓冲区大小&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PIPE_BUF的容量是有限的：默认是65536字节&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;在不同OS下PIPE_BUF大小设置不同：在limits.h头文件中定义&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;写入管道的数据超过PIPE_BUF大小，内核会分割几块传输&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;最大值/proc/sys/fs/pipe-maxsize&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;查看打开的管道文件：cat /proc/PID/fd&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;设置缓冲区大小&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;特权用户：可以修改上限值&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;设置缓冲区大小：fcntl(fd, F_SETPIPE, size)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/Scroll_C/article/details/123414270&#34;&gt;参考资料连接&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>三星观景平台-双流-爬山</title>
      <link>http://shanks.link/blog/2024/03/17/%E4%B8%89%E6%98%9F%E8%A7%82%E6%99%AF%E5%B9%B3%E5%8F%B0-%E5%8F%8C%E6%B5%81-%E7%88%AC%E5%B1%B1/</link>
      <pubDate>Sun, 17 Mar 2024 10:34:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/03/17/%E4%B8%89%E6%98%9F%E8%A7%82%E6%99%AF%E5%B9%B3%E5%8F%B0-%E5%8F%8C%E6%B5%81-%E7%88%AC%E5%B1%B1/</guid>
      <description>&lt;h3 id=&#34;基础信息&#34;&gt;基础信息&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;以看油菜花和爬山锻炼为主&lt;/li&gt;&#xA;&lt;li&gt;导航点： 河山村村委会，不要导航到观景平台（直接开上去了，还爬个锤子山）&lt;/li&gt;&#xA;&lt;li&gt;找一个路边 free 或者10RMB 的停车点&lt;/li&gt;&#xA;&lt;li&gt;路边有饮料、豆花等售卖&lt;/li&gt;&#xA;&lt;li&gt;基本上是爬台阶，所以带娃要心里准备，适合锻炼身体，约会&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;浏览相片&#34;&gt;浏览相片&lt;/h3&gt;&#xA;&lt;p&gt;从这里开始爬&lt;/p&gt;</description>
    </item>
    <item>
      <title>辣椒炒肉</title>
      <link>http://shanks.link/blog/2024/03/16/%E8%BE%A3%E6%A4%92%E7%82%92%E8%82%89/</link>
      <pubDate>Sat, 16 Mar 2024 17:00:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/03/16/%E8%BE%A3%E6%A4%92%E7%82%92%E8%82%89/</guid>
      <description>&lt;h3 id=&#34;料&#34;&gt;料&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将梅花肉（枚头肉）切薄片后，加酱油、少量盐腌制&lt;/li&gt;&#xA;&lt;li&gt;将购买的薄辣椒切片（大小切匀，不然炒的时候有些还没熟，有些炒过了）&lt;/li&gt;&#xA;&lt;li&gt;准备好豆豉和大蒜（切片）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;烹饪&#34;&gt;烹饪&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;将辣椒倒入锅中中小火翻炒，炒软、爆香，不可炒过、没熟，乘出前加少量盐&lt;/li&gt;&#xA;&lt;li&gt;将植物油（没有也可用猪油）烧热后加入大蒜、豆豉爆出香味&lt;/li&gt;&#xA;&lt;li&gt;将炒香的辣椒和腌制好的猪肉倒入锅中翻炒（大火），视情况加入酱油调色、盐调味&lt;/li&gt;&#xA;&lt;li&gt;辣椒和猪肉倒入锅后，判断下油量，如果多了则倒掉（油多了不好吃），少了则加点油），不好判断时，开始多点油，后面倒掉即可&lt;/li&gt;&#xA;&lt;li&gt;烧好后出锅即可&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>新津-农博园-油菜花</title>
      <link>http://shanks.link/blog/2024/03/16/%E6%96%B0%E6%B4%A5-%E5%86%9C%E5%8D%9A%E5%9B%AD-%E6%B2%B9%E8%8F%9C%E8%8A%B1/</link>
      <pubDate>Sat, 16 Mar 2024 11:07:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/03/16/%E6%96%B0%E6%B4%A5-%E5%86%9C%E5%8D%9A%E5%9B%AD-%E6%B2%B9%E8%8F%9C%E8%8A%B1/</guid>
      <description>&lt;h3 id=&#34;基础信息&#34;&gt;基础信息&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;非常大一片油菜花地，有好几种颜色的油菜花，没啥其它的景色，不值得专门跑一趟；&lt;/li&gt;&#xA;&lt;li&gt;最好自驾，顺带浏览其它景点;&lt;/li&gt;&#xA;&lt;li&gt;农博园内有售卖小吃和零食的，有可租的电动车，也可以坐观光车;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;浏览相片&#34;&gt;浏览相片&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/20240316164337.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>东安湖游玩</title>
      <link>http://shanks.link/blog/2024/03/10/%E4%B8%9C%E5%AE%89%E6%B9%96%E6%B8%B8%E7%8E%A9/</link>
      <pubDate>Sun, 10 Mar 2024 10:34:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/03/10/%E4%B8%9C%E5%AE%89%E6%B9%96%E6%B8%B8%E7%8E%A9/</guid>
      <description>&lt;h3 id=&#34;基础信息&#34;&gt;基础信息&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;非常大的一个湖+湿地+步行道的公园，新建的园，干净，整洁；&lt;/li&gt;&#xA;&lt;li&gt;适合谈恋爱的情侣(租一个多人骑的车子）;&lt;/li&gt;&#xA;&lt;li&gt;园内购物不方便（没见小吃摊），建议自带水果（有卖水的）;&lt;/li&gt;&#xA;&lt;li&gt;地铁可直达；&lt;/li&gt;&#xA;&lt;li&gt;没看到什么小孩耍的地方（没逛完全园区，可能遗漏了）;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;浏览相片&#34;&gt;浏览相片&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/life/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240311102638.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>成都美食推荐</title>
      <link>http://shanks.link/blog/2024/03/08/%E6%88%90%E9%83%BD%E7%BE%8E%E9%A3%9F%E6%8E%A8%E8%8D%90/</link>
      <pubDate>Fri, 08 Mar 2024 16:44:49 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/03/08/%E6%88%90%E9%83%BD%E7%BE%8E%E9%A3%9F%E6%8E%A8%E8%8D%90/</guid>
      <description>&lt;h3 id=&#34;说在最前面&#34;&gt;说在最前面&lt;/h3&gt;&#xA;&lt;p&gt;个人认为还不错的美食，价格亲民，口味因人而异，推荐不分先后&lt;/p&gt;&#xA;&lt;p&gt;大众点评上的评价更为丰富&lt;/p&gt;&#xA;&lt;h3 id=&#34;点心&#34;&gt;点心&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;鲍师傅糕点&lt;/li&gt;&#xA;&lt;li&gt;点都德&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;西北菜&#34;&gt;西北菜&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;新疆艾力达达美味-双流机场&lt;/li&gt;&#xA;&lt;li&gt;拾张新疆凉皮&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;川湘菜&#34;&gt;川湘菜&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;华阳人家麻辣鱼总店&lt;/li&gt;&#xA;&lt;li&gt;黑石乡村柴火鸡（柴火烧的，物美价廉）&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>万州烤鱼</title>
      <link>http://shanks.link/blog/2024/03/03/%E4%B8%87%E5%B7%9E%E7%83%A4%E9%B1%BC/</link>
      <pubDate>Sun, 03 Mar 2024 17:55:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/03/03/%E4%B8%87%E5%B7%9E%E7%83%A4%E9%B1%BC/</guid>
      <description>&lt;h3 id=&#34;主要步骤&#34;&gt;主要步骤&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;购买草鱼（体型修长，黑背，白肚，在商户那要求背部开刀）,不喜欢吃鱼头和鱼尾的可以去掉，烤箱比较小的，去掉鱼头和鱼尾，这样可以放得下比较大的鱼（烤箱和烤鱼炉大的忽略）。&lt;/li&gt;&#xA;&lt;li&gt;鱼改刀：鱼脊打断防止烤制时形变，切1 字形花刀，2/3 处。&lt;/li&gt;&#xA;&lt;li&gt;腌制鱼： 切一个洋葱，一大把葱（切成6CM的条），10CM的姜切成丝，混合后放到鱼背上，倒上适量料酒（涂抹一遍鱼的量即可），将上述混合物在鱼背，鱼腹反复抹匀，腌制30分钟（用保鲜膜密封）。&lt;/li&gt;&#xA;&lt;li&gt;炒制底料：将植物油加热到五成熟，将干辣椒（剪断），过油后捞出，将油完全加热，倒入花椒，豆豉，生姜片，蒜，烤鱼配料（见下面链接），豆瓣酱，鸡精，前面的干辣椒，炒香后捞出&lt;/li&gt;&#xA;&lt;li&gt;预处理配菜：将配菜预处理（放入热水煮熟），将上述底料和预制菜最后一起煮，使配菜入味。&lt;/li&gt;&#xA;&lt;li&gt;烤鱼：将烤箱预热，把腌好的鱼去掉水份后(厨房用纸），放到烤箱烤干再用毛刷刷植物油（预防烤糊），放到烤箱内烤30分钟（上下管230°），中途不断刷油烤到鱼外焦内嫩(外表金黄)。&lt;/li&gt;&#xA;&lt;li&gt;最后煮鱼：鱼放到盘子中间，将混合料均匀的撒到鱼上，再根据个人口味放入泡椒（若底料偏辣可不放）或者其它配料（感觉自己口味添加即可）&lt;/li&gt;&#xA;&lt;li&gt;享受美食：煮熟后即可享受啦;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;相关物料购买链接&#34;&gt;相关物料购买链接&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;烤鱼底料 &lt;img src=&#34;http://shanks.link/img/%E7%94%9F%E6%B4%BB/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240307140607.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;烤鱼炉：&lt;img src=&#34;http://shanks.link/img/%E7%94%9F%E6%B4%BB/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240307140716.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;酒精：&lt;img src=&#34;http://shanks.link/img/life/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240307140757.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;配料参考 &lt;img src=&#34;http://shanks.link/img/life/20240304154715.jpg&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;img src=&#34;http://shanks.link/img/life/20240304154727.jpg&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;img src=&#34;http://shanks.link/img/life/20240304154719.jpg&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;img src=&#34;http://shanks.link/img/life/20240304154731.jpg&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;img src=&#34;http://shanks.link/img/life/20240304154734.jpg&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>崇州罨画池-自驾游</title>
      <link>http://shanks.link/blog/2024/02/26/%E5%B4%87%E5%B7%9E%E7%BD%A8%E7%94%BB%E6%B1%A0-%E8%87%AA%E9%A9%BE%E6%B8%B8/</link>
      <pubDate>Mon, 26 Feb 2024 17:14:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/02/26/%E5%B4%87%E5%B7%9E%E7%BD%A8%E7%94%BB%E6%B1%A0-%E8%87%AA%E9%A9%BE%E6%B8%B8/</guid>
      <description>&lt;h3 id=&#34;基础信息&#34;&gt;基础信息&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;普通园林，内有陆游纪念堂（算是一个特色）,有几颗大银杏树，若秋天叶黄则最美，门票8块，浏览时间为60分钟；&lt;/li&gt;&#xA;&lt;li&gt;旁边小东街和文庙街有美食，可上美团自己挑选；&lt;/li&gt;&#xA;&lt;li&gt;路程比较遥远，最好自驾（导航：神珠大酒店停车场 对外付费开放，6元一次））， 可以顺带游览安恒古镇(17KM)；&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;浏览相片&#34;&gt;浏览相片&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/%E6%97%85%E6%B8%B8/20240225135510.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>成都-望平街</title>
      <link>http://shanks.link/blog/2024/02/24/%E6%88%90%E9%83%BD-%E6%9C%9B%E5%B9%B3%E8%A1%97/</link>
      <pubDate>Sat, 24 Feb 2024 17:56:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/02/24/%E6%88%90%E9%83%BD-%E6%9C%9B%E5%B9%B3%E8%A1%97/</guid>
      <description>&lt;h3 id=&#34;基础信息&#34;&gt;基础信息&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;以小吃、美食和文艺风范的剧场为主，旁边的府河可以坐船欣赏夜景，最好晚上前往&lt;/li&gt;&#xA;&lt;li&gt;周围挨着九眼桥（颜色，河景，酒吧）、春熙路（时尚购物、美食）、熊猫塔（夜色，酒吧），可以白天逛春熙路，晚上逛熊猫塔，九眼桥和望平街&lt;/li&gt;&#xA;&lt;li&gt;不好停车，需要停到商业停车场(自驾需要合理安排停车地点)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;游玩建议&#34;&gt;游玩建议&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;白天逛春熙路+望平街，晚上逛九眼桥+熊猫塔&lt;/li&gt;&#xA;&lt;li&gt;美食的话，有时间有钱的话，可以去美团上火爆的店铺&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;游览相片&#34;&gt;游览相片&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/%E6%97%85%E6%B8%B8/20240226170019%E5%91%A8%E5%9B%B4%E5%9C%B0%E5%9B%BE.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>望江楼公园 春节赏腊梅</title>
      <link>http://shanks.link/blog/2024/02/16/%E6%9C%9B%E6%B1%9F%E6%A5%BC%E5%85%AC%E5%9B%AD-%E6%98%A5%E8%8A%82%E8%B5%8F%E8%85%8A%E6%A2%85/</link>
      <pubDate>Fri, 16 Feb 2024 15:56:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/02/16/%E6%9C%9B%E6%B1%9F%E6%A5%BC%E5%85%AC%E5%9B%AD-%E6%98%A5%E8%8A%82%E8%B5%8F%E8%85%8A%E6%A2%85/</guid>
      <description>&lt;h3 id=&#34;准备&#34;&gt;准备&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;公园以及周边停车位非常少，自驾前往需要考虑停车（可以考虑停到锦江东湖花园那边），坐地铁出来后，可以考虑骑共享单车&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;游玩建议&#34;&gt;游玩建议&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;公园内部主要是竹子+腊梅为主，适合悠闲类的游玩，公园里面靠近河边，有一个浅滩，小朋友可以玩&lt;/li&gt;&#xA;&lt;li&gt;时间安排在2个小时以内（有茶位，看自己的需求）&lt;/li&gt;&#xA;&lt;li&gt;公园左边是四川大学望江校区，感兴趣可以顺道游玩&lt;/li&gt;&#xA;&lt;li&gt;公园上面是九眼桥，适合晚上浏览&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;实际游玩留影&#34;&gt;实际游玩留影&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/%E6%97%85%E6%B8%B8/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240218104238.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>2024春节探亲</title>
      <link>http://shanks.link/blog/2024/02/05/2024%E6%98%A5%E8%8A%82%E6%8E%A2%E4%BA%B2/</link>
      <pubDate>Mon, 05 Feb 2024 07:30:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/02/05/2024%E6%98%A5%E8%8A%82%E6%8E%A2%E4%BA%B2/</guid>
      <description>&lt;h3 id=&#34;出发前准备&#34;&gt;出发前准备&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;汽车的长途安检&lt;/li&gt;&#xA;&lt;li&gt;个人和家人需要携带的物品清单&lt;/li&gt;&#xA;&lt;li&gt;开车的时刻表、沿途路况和天气查看&lt;/li&gt;&#xA;&lt;li&gt;去、返的时间&lt;/li&gt;&#xA;&lt;li&gt;提前将零食和食品快递到忠县&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;心得&#34;&gt;心得&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;原本计划除夕和年初一在忠县，实际在黄金镇（后面要考虑这一点）&lt;/p&gt;</description>
    </item>
    <item>
      <title>IPSec 参考资料</title>
      <link>http://shanks.link/blog/2024/01/25/ipsec-%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</link>
      <pubDate>Thu, 25 Jan 2024 14:32:50 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/25/ipsec-%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://libreswan.org/wiki/VPN_server_for_remote_clients_using_IKEv1_XAUTH_with_PSK&#34;&gt;https://libreswan.org/wiki/VPN_server_for_remote_clients_using_IKEv1_XAUTH_with_PSK&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/s2603898260&#34;&gt;https://blog.csdn.net/s2603898260&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/s2603898260/article/details/112975141&#34;&gt;https://blog.csdn.net/s2603898260/article/details/112975141&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/s2603898260/category_9943778.html&#34;&gt;https://blog.csdn.net/s2603898260/category_9943778.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/s2603898260/article/details/110018251&#34;&gt;https://blog.csdn.net/s2603898260/article/details/110018251&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/s2603898260/article/details/105831370&#34;&gt;https://blog.csdn.net/s2603898260/article/details/105831370&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Top-Fish/IPSecVPN/blob/master/IKE%E6%8F%A1%E6%89%8B%E6%B5%81%E7%A8%8B%E5%9B%BE%E8%AF%A6%E8%A7%A3.md&#34;&gt;https://github.com/Top-Fish/IPSecVPN/blob/master/IKE%E6%8F%A1%E6%89%8B%E6%B5%81%E7%A8%8B%E5%9B%BE%E8%AF%A6%E8%A7%A3.md&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/rtmdk/article/details/77716863&#34;&gt;https://blog.csdn.net/rtmdk/article/details/77716863&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/u013920085/article/details/50550983&#34;&gt;https://blog.csdn.net/u013920085/article/details/50550983&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/7105407021825933349&#34;&gt;https://juejin.cn/post/7105407021825933349&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/7105407021825933349&#34;&gt;https://juejin.cn/post/7105407021825933349&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/100410283&#34;&gt;https://zhuanlan.zhihu.com/p/100410283&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/sgslwms/article/details/126800478&#34;&gt;IPSec之IKEv2详解&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_38265137/article/details/89423809&#34;&gt;IPSec NAT穿越(NAT-T)原理&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;[IPSec 基本原理] (&lt;a href=&#34;https://blog.csdn.net/qq_38265137/article/details/89423551&#34;&gt;https://blog.csdn.net/qq_38265137/article/details/89423551&lt;/a&gt;)&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.strongswan.org/docs/5.9/config/IKEv2CipherSuites.html#_esp_integrity_protection_and_confidentiality&#34;&gt;IKEv2 Cipher Suites&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/100535851&#34;&gt;IP 安全与 IPsec 协议，实验A ：使用Strongswan 建立两台 PC 间安全通信&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>12306抢票备忘录</title>
      <link>http://shanks.link/blog/2024/01/24/12306%E6%8A%A2%E7%A5%A8%E5%A4%87%E5%BF%98%E5%BD%95/</link>
      <pubDate>Wed, 24 Jan 2024 17:36:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/24/12306%E6%8A%A2%E7%A5%A8%E5%A4%87%E5%BF%98%E5%BD%95/</guid>
      <description>&lt;h3 id=&#34;ip-被封&#34;&gt;IP 被封&lt;/h3&gt;&#xA;&lt;p&gt;若在公司用 WIFI 抢票，可能面临 IP 异常的问题，可以用 VPN 解决&lt;/p&gt;&#xA;&lt;h3 id=&#34;速度&#34;&gt;速度&lt;/h3&gt;&#xA;&lt;p&gt;能用抢票软件，就用抢票软件&lt;/p&gt;</description>
    </item>
    <item>
      <title>分布式系统学习资料汇总</title>
      <link>http://shanks.link/blog/2024/01/24/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/</link>
      <pubDate>Wed, 24 Jan 2024 16:04:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/24/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;本文首发自公众号：“木鸟杂记”，会不定期更新。欢迎订阅我的分布式系统和数据库专栏：系统日知录，&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//xiaobot.net/p/system-thinking&#34;&gt;https://xiaobot.net/p/system-thinking&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;引子&#34;&gt;引子&lt;/h2&gt;&#xA;&lt;p&gt;时下，随着通信技术的发展、移动互联网的普及、物联网车联网人工智能的兴起，每天所产生的数据呈爆炸性的增长。这种尺度的数据不是传统单机系统可以独立处理的，而只能借助于大规模的分布式系统，因而分布式系统渐渐的变成一门“显学”。而作为一个分布式系统初学者，面对网上未加归类、浩如烟海的学习资料，很容易两眼抓瞎。&lt;/p&gt;</description>
    </item>
    <item>
      <title>理解socks5协议的工作过程和协议细节</title>
      <link>http://shanks.link/blog/2024/01/24/%E7%90%86%E8%A7%A3socks5%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B%E5%92%8C%E5%8D%8F%E8%AE%AE%E7%BB%86%E8%8A%82/</link>
      <pubDate>Wed, 24 Jan 2024 14:33:33 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/24/%E7%90%86%E8%A7%A3socks5%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B%E5%92%8C%E5%8D%8F%E8%AE%AE%E7%BB%86%E8%8A%82/</guid>
      <description>&lt;h2 id=&#34;1前言&#34;&gt;1前言&lt;/h2&gt;&#xA;&lt;p&gt;本位将由浅入深带大家详细了解socks5协议。文章首先会对socks协议进行简单介绍，接着会介绍socks5协议的使用场景，然后介绍它的工作工程，最后介绍协议的细节(握手、数据转发)。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux 路由表详解及 route 命令详解</title>
      <link>http://shanks.link/blog/2024/01/24/linux-%E8%B7%AF%E7%94%B1%E8%A1%A8%E8%AF%A6%E8%A7%A3%E5%8F%8A-route-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 24 Jan 2024 14:20:54 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/24/linux-%E8%B7%AF%E7%94%B1%E8%A1%A8%E8%AF%A6%E8%A7%A3%E5%8F%8A-route-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;h2 id=&#34;linux-内核的路由表&#34;&gt;Linux 内核的路由表&lt;/h2&gt;&#xA;&lt;p&gt;通过 &lt;code&gt;route&lt;/code&gt; 命令查看 Linux 内核的路由表：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[root@VM_139_74_centos ~]&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# route&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Kernel IP routing table&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Destination     Gateway         Genmask         Flags Metric Ref    Use Iface&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;default         gateway         0.0.0.0         UG    0      0        0 eth0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;10.0.0.10       10.139.128.1    255.255.255.255 UGH   0      0        0 eth0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;10.139.128.0    0.0.0.0         255.255.224.0   U     0      0        0 eth0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;link-local      0.0.0.0         255.255.0.0     U     1002   0        0 eth0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;172.18.0.0      0.0.0.0         255.255.0.0     U     0      0        0 br-0ab63c131848&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;172.19.0.0      0.0.0.0         255.255.0.0     U     0      0        0 br-bccbfb788da0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;172.20.0.0      0.0.0.0         255.255.0.0     U     0      0        0 br-7485db25f958&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[root@VM_139_74_centos ~]&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# route -n&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Kernel IP routing table&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Destination     Gateway         Genmask         Flags Metric Ref    Use Iface&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0.0.0.0         10.139.128.1    0.0.0.0         UG    0      0        0 eth0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;10.0.0.10       10.139.128.1    255.255.255.255 UGH   0      0        0 eth0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;10.139.128.0    0.0.0.0         255.255.224.0   U     0      0        0 eth0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;169.254.0.0     0.0.0.0         255.255.0.0     U     1002   0        0 eth0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;172.18.0.0      0.0.0.0         255.255.0.0     U     0      0        0 br-0ab63c131848&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;172.19.0.0      0.0.0.0         255.255.0.0     U     0      0        0 br-bccbfb788da0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;172.20.0.0      0.0.0.0         255.255.0.0     U     0      0        0 br-7485db25f95812345678910111213141516171819202122&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;各列字段说明：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang 内存分析和动态追踪 pprof</title>
      <link>http://shanks.link/blog/2024/01/24/golang-%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E5%92%8C%E5%8A%A8%E6%80%81%E8%BF%BD%E8%B8%AA-pprof/</link>
      <pubDate>Wed, 24 Jan 2024 14:07:06 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/24/golang-%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E5%92%8C%E5%8A%A8%E6%80%81%E8%BF%BD%E8%B8%AA-pprof/</guid>
      <description>&lt;p&gt;当你的golang程序在运行过程中消耗了超出你理解的内存时，你就需要搞明白，到底是 程序中哪些代码导致了这些内存消耗。此时golang编译好的程序对你来说是个黑盒，该 如何搞清其中的内存使用呢？幸好golang已经内置了一些机制来帮助我们进行分析和追 踪。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VSCode添加全局宏定义</title>
      <link>http://shanks.link/blog/2024/01/24/vscode%E6%B7%BB%E5%8A%A0%E5%85%A8%E5%B1%80%E5%AE%8F%E5%AE%9A%E4%B9%89/</link>
      <pubDate>Wed, 24 Jan 2024 12:01:48 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/24/vscode%E6%B7%BB%E5%8A%A0%E5%85%A8%E5%B1%80%E5%AE%8F%E5%AE%9A%E4%B9%89/</guid>
      <description>&lt;h3 id=&#34;问题&#34;&gt;问题：&lt;/h3&gt;&#xA;&lt;p&gt;利用&lt;a href=&#34;https://so.csdn.net/so/search?q=vscode&amp;amp;spm=1001.2101.3001.7020&#34;&gt;vscode&lt;/a&gt;编辑代码时，设置了禁用非活动区域着色后，在一些编译脚本中配置的宏又识别不了&lt;/p&gt;&#xA;&lt;p&gt;遇到#ifdef包住的代码就会变暗色，想查看代码不是很方便。如下图：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/it/20210126110447501.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;解决&#34;&gt;解决：&lt;/h3&gt;&#xA;&lt;p&gt;在vscode中添加全局宏定义。&lt;/p&gt;&#xA;&lt;h3 id=&#34;步骤&#34;&gt;步骤：&lt;/h3&gt;&#xA;&lt;p&gt;1.ctrl+shift+p，选择对应的编辑配置，比如c/c++的，进入文件c_cpp_properties.json&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git分支管理策略</title>
      <link>http://shanks.link/blog/2024/01/24/git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/</link>
      <pubDate>Wed, 24 Jan 2024 11:38:54 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/24/git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/</guid>
      <description>&lt;p&gt;作者： &lt;a href=&#34;http://www.ruanyifeng.com/&#34;&gt;阮一峰&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;如果你严肃对待编程，就必定会使用&amp;quot;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2008/12/a_visual_guide_to_version_control.html&#34;&gt;版本管理系统&lt;/a&gt;&amp;quot;（Version Control System）。&lt;/p&gt;&#xA;&lt;p&gt;眼下最流行的&amp;quot;版本管理系统&amp;quot;，非&lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt;莫属。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/git/bg2012070501.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;相比同类软件，Git有很多优点。其中很显著的一点，就是版本的分支（branch）和合并（merge）十分方便。有些传统的版本管理软件，分支操作实际上会生成一份现有代码的物理拷贝，而Git只生成一个指向当前版本（又称&amp;quot;快照&amp;quot;）的指针，因此非常快捷易用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>iptables防火墙只允许指定ip连接指定端口、访问指定网站</title>
      <link>http://shanks.link/blog/2024/01/24/iptables%E9%98%B2%E7%81%AB%E5%A2%99%E5%8F%AA%E5%85%81%E8%AE%B8%E6%8C%87%E5%AE%9Aip%E8%BF%9E%E6%8E%A5%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%E8%AE%BF%E9%97%AE%E6%8C%87%E5%AE%9A%E7%BD%91%E7%AB%99/</link>
      <pubDate>Wed, 24 Jan 2024 10:45:54 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/24/iptables%E9%98%B2%E7%81%AB%E5%A2%99%E5%8F%AA%E5%85%81%E8%AE%B8%E6%8C%87%E5%AE%9Aip%E8%BF%9E%E6%8E%A5%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%E8%AE%BF%E9%97%AE%E6%8C%87%E5%AE%9A%E7%BD%91%E7%AB%99/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://cloud.tencent.com/developer/column/74623&#34;&gt;本文参考链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;文章主要介绍了iptables防火墙只允许指定ip连接指定端口、访问指定网站,需要的朋友可以参考下&lt;/p&gt;&#xA;&lt;p&gt;需要开80端口，指定IP和局域网&lt;/p&gt;&#xA;&lt;p&gt;下面三行的意思：&lt;/p&gt;</description>
    </item>
    <item>
      <title>c语言打印调用栈及解析</title>
      <link>http://shanks.link/blog/2024/01/24/c%E8%AF%AD%E8%A8%80%E6%89%93%E5%8D%B0%E8%B0%83%E7%94%A8%E6%A0%88%E5%8F%8A%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 24 Jan 2024 10:33:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/24/c%E8%AF%AD%E8%A8%80%E6%89%93%E5%8D%B0%E8%B0%83%E7%94%A8%E6%A0%88%E5%8F%8A%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;h3 id=&#34;相关头文件&#34;&gt;相关头文件&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;execinfo.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;backtrace&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; **buffer, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; **&lt;span style=&#34;color:#c34e00&#34;&gt;backtrace_symbols&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; *buffer, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;backtrace_symbols_fd&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; *buffer, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; size, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; fd);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;示例代码&#34;&gt;示例代码&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;execinfo.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fun1&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fun2&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fun3&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fun4&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fun5&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fun6&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;print_callstack&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;main&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;fun6&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fun1&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;print_callstack&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fun2&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;fun1&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fun3&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;fun2&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fun4&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;fun3&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fun5&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;fun4&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fun6&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;fun5&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;print_callstack&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; size = 32;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *array[32];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; stack_num = &lt;span style=&#34;color:#c34e00&#34;&gt;backtrace&lt;/span&gt;(array, size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; **stacktrace = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;%s begin&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, __func__);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;stacktrace = (&lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt;**)&lt;span style=&#34;color:#c34e00&#34;&gt;backtrace_symbols&lt;/span&gt;(array, stack_num);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i = 0; i &amp;lt; stack_num; i++)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, stacktrace[i]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;free&lt;/span&gt;(stacktrace);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;%s end&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, __func__);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;对应输出&#34;&gt;对应输出&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[~]$ gcc test.c &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[~]$ ./a.out &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print_callstack begin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./a.out() [0x4006f8]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./a.out() [0x400680]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./a.out() [0x400690]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./a.out() [0x4006a0]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./a.out() [0x4006b0]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./a.out() [0x4006c0]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./a.out() [0x4006d0]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./a.out() [0x40066b]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/lib64/libc.so.6(__libc_start_main+0xf5) [0x7f523b25ec05]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./a.out() [0x400599]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print_callstack end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[~]$ nm -n a.out &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 U backtrace@@GLIBC_2.2.5&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 U backtrace_symbols@@GLIBC_2.2.5&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 U free@@GLIBC_2.2.5&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 w __gmon_start__&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 w _ITM_deregisterTMCloneTable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 w _ITM_registerTMCloneTable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 w _Jv_RegisterClasses&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 U __libc_start_main@@GLIBC_2.2.5&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 U printf@@GLIBC_2.2.5&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 U puts@@GLIBC_2.2.5&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000000004004d0 T _init&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400570 T _start&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000000004005a0 t deregister_tm_clones&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000000004005d0 t register_tm_clones&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400610 t __do_global_dtors_aux&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400630 t frame_dummy&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;000000000040065d T main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400672 T fun1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400682 T fun2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400692 T fun3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000000004006a2 T fun4&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000000004006b2 T fun5&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000000004006c2 T fun6&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000000004006d2 T print_callstack&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400790 T __libc_csu_init&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400800 T __libc_csu_fini&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400804 T _fini&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400810 R _IO_stdin_used&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400818 R __dso_handle&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400840 r __func__.2719&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400a90 r __FRAME_END__&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000600e10 t __frame_dummy_init_array_entry&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000600e10 t __init_array_start&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000600e18 t __do_global_dtors_aux_fini_array_entry&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000600e18 t __init_array_end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000600e20 d __JCR_END__&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000600e20 d __JCR_LIST__&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000600e28 d _DYNAMIC&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601000 d _GLOBAL_OFFSET_TABLE_&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601050 D __data_start&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601050 W data_start&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601054 B __bss_start&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601054 b completed.6344&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601054 D _edata&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601058 B _end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601058 D __TMC_END__&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[~]$ &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;说明&#34;&gt;说明&lt;/h3&gt;&#xA;&lt;p&gt;根据调用栈的地址到符号表地址中查找，&lt;/p&gt;</description>
    </item>
    <item>
      <title>vscode远程gdb调试</title>
      <link>http://shanks.link/blog/2024/01/24/vscode%E8%BF%9C%E7%A8%8Bgdb%E8%B0%83%E8%AF%95/</link>
      <pubDate>Wed, 24 Jan 2024 10:14:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/24/vscode%E8%BF%9C%E7%A8%8Bgdb%E8%B0%83%E8%AF%95/</guid>
      <description>&lt;h3 id=&#34;目标&#34;&gt;目标&lt;/h3&gt;&#xA;&lt;p&gt;话不多说，本文要实现的是：在 windows 端远程调试 linux 服务器和 &lt;a href=&#34;https://so.csdn.net/so/search?q=arm&amp;amp;spm=1001.2101.3001.7020&#34;&gt;arm&lt;/a&gt; 嵌入式设备上的 c++ 代码，对 gdb 调试的配置及使用进行一个整理。&lt;/p&gt;&#xA;&lt;h2 id=&#34;远程连接&#34;&gt;远程连接&lt;/h2&gt;&#xA;&lt;p&gt;首先需要实现&lt;a href=&#34;https://so.csdn.net/so/search?q=%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8&amp;amp;spm=1001.2101.3001.7020&#34;&gt;远程连接服务器&lt;/a&gt;，在插件库中搜索 “remote-ssh”，双击下载安装即可（下图中我已安装好），安装好之后在侧边栏出现远程资源管理器&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux 重启网卡后，网络不通</title>
      <link>http://shanks.link/blog/2024/01/24/linux-%E9%87%8D%E5%90%AF%E7%BD%91%E5%8D%A1%E5%90%8E%E7%BD%91%E7%BB%9C%E4%B8%8D%E9%80%9A/</link>
      <pubDate>Wed, 24 Jan 2024 10:09:54 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/24/linux-%E9%87%8D%E5%90%AF%E7%BD%91%E5%8D%A1%E5%90%8E%E7%BD%91%E7%BB%9C%E4%B8%8D%E9%80%9A/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;不小心重启了线上服务器的网卡，结果整个网络不通了，就算使用127.0.0.1访问都不行，第一次遇到这种问题，当时就六神无主了，两个人排查了好久也没找到原因，万分火急。排查内核日志发现网卡状态不断地从&lt;code&gt;Not Ready&lt;/code&gt;到&lt;code&gt;Ready&lt;/code&gt;切换，但是却看不出任何原因。没办法还是得从日志中找原因，由于不知道错误关键词，只能肉眼盯着滚动的系统实时日志，终于功夫不负有心人，看到了这行日志：&lt;code&gt;IPV4 forwarding is disabled. Networking will not work&lt;/code&gt;，下面就将整个排查过程简单明了的说明一下，希望能帮助到大家。&lt;/p&gt;</description>
    </item>
    <item>
      <title>__attribute__((packed))详解</title>
      <link>http://shanks.link/blog/2024/01/24/__attribute__packed%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 24 Jan 2024 09:42:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/24/__attribute__packed%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;h3 id=&#34;attributepacked详解&#34;&gt;&lt;strong&gt;attribute&lt;/strong&gt;((packed))详解&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;strong&gt;attribute&lt;/strong&gt; ((packed)) 的作用就是告诉&lt;a href=&#34;https://so.csdn.net/so/search?q=%E7%BC%96%E8%AF%91%E5%99%A8&amp;amp;spm=1001.2101.3001.7020&#34;&gt;编译器&lt;/a&gt;取消结构在编译过程中的优化对齐,按照实际占用字节数进行对齐，是GCC特有的语法。这个功能是跟操作系统没关系，跟编译器有关，gcc编译器不是紧凑模式的，我在windows下，用vc的编译器也不是紧凑的，用tc的编译器就是紧凑的。例如：&lt;/p&gt;&#xA;&lt;p&gt;在TC下：&lt;a href=&#34;https://so.csdn.net/so/search?q=struct&amp;amp;spm=1001.2101.3001.7020&#34;&gt;struct&lt;/a&gt; my{ char ch; int a;} sizeof(int)=2;sizeof(my)=3;（紧凑模式）&lt;/p&gt;&#xA;&lt;p&gt;在&lt;a href=&#34;https://so.csdn.net/so/search?q=GCC&amp;amp;spm=1001.2101.3001.7020&#34;&gt;GCC&lt;/a&gt;下：struct my{ char ch; int a;} sizeof(int)=4;sizeof(my)=8;（非紧凑模式）&lt;/p&gt;</description>
    </item>
    <item>
      <title>GDB的调试原理</title>
      <link>http://shanks.link/blog/2024/01/23/gdb%E7%9A%84%E8%B0%83%E8%AF%95%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 23 Jan 2024 11:53:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/23/gdb%E7%9A%84%E8%B0%83%E8%AF%95%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;p&gt;GDB是如何实现的，对于这个问题，在面试中也遇到过一次，我真的不懂，只能整理一下文章和资料&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/it/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240123115500.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;当我们启动gdb程序之后，会执行下面的操作：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;：通过fork（）系统调用创建一个新的进程。&lt;/li&gt;&#xA;&lt;li&gt;：在新的子进程中在执行下述操作：ptrace（PTRACE_TRACEME，0，0，0）；&lt;/li&gt;&#xA;&lt;li&gt;：在子进程中通过execv（）系统调用加载用于执行的可执行文件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       ptrace - process trace&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SYNOPSIS&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include &amp;lt;sys/ptrace.h&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       long ptrace(enum __ptrace_request request, pid_t pid,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   void *addr, void *data);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DESCRIPTION&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       The  ptrace()  system  call provides a means by which a parent process may observe and control the execution of another process,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       and examine and change its core image and registers.  It is primarily used to implement breakpoint  debugging  and  system  call&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       tracing.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       The  parent  can initiate a trace by calling fork(2) and having the resulting child &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; a PTRACE_TRACEME, followed (typically) by&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       an exec(3).  Alternatively, the parent may commence trace of an existing process using PTRACE_ATTACH.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       While being traced, the child will stop each time a signal is delivered, even &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; the signal is being ignored.  (The exception is&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       SIGKILL, which has its usual effect.)  The parent will be notified at its next wait(2) and may inspect and modify the child pro-&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       cess &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; it is stopped.  The parent &lt;span style=&#34;color:#00f&#34;&gt;then&lt;/span&gt; causes the child to &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;, optionally  ignoring  the  delivered  signal  (or  even&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       delivering a different signal instead).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       When  the parent is finished tracing, it can terminate the child with PTRACE_KILL or cause it to &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt; executing in a normal,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       untraced mode via PTRACE_DETACH.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       The value of request determines the action to be performed&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;attatch动作&#34;&gt;attatch动作&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/it/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240123115543.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>为什么pthread_cond_wait需要互斥锁mutex作为参数</title>
      <link>http://shanks.link/blog/2024/01/22/%E4%B8%BA%E4%BB%80%E4%B9%88pthread_cond_wait%E9%9C%80%E8%A6%81%E4%BA%92%E6%96%A5%E9%94%81mutex%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0/</link>
      <pubDate>Mon, 22 Jan 2024 17:35:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/22/%E4%B8%BA%E4%BB%80%E4%B9%88pthread_cond_wait%E9%9C%80%E8%A6%81%E4%BA%92%E6%96%A5%E9%94%81mutex%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0/</guid>
      <description>&lt;h1 id=&#34;为什么pthread_cond_wait需要互斥锁mutex作为参数&#34;&gt;为什么pthread_cond_wait需要互斥锁mutex作为参数&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;pthread_cond_wait需要互斥锁mutex作为参数的原因：当前线程执行pthread_cond_wait时，一定是处于某个临界区，正在访问共享资源，存在一个mutex与该临界区相关联。因此，在阻塞前，必须释放mutex；被唤醒后，需要再次获得mutex。&lt;/p&gt;</description>
    </item>
    <item>
      <title>TCP 三次握手四次挥手</title>
      <link>http://shanks.link/blog/2024/01/22/tcp-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</link>
      <pubDate>Mon, 22 Jan 2024 17:16:13 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/22/tcp-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</guid>
      <description>&lt;p&gt;TCP连接的建立（三次握手）&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/tcpip/114bd9b53c554319ae0db15b57b472b8.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;最开始的时候客户端和服务器都是处于CLOSED状态。主动打开连接的为客户端，被动打开连接的是服务器。&lt;/p&gt;&#xA;&lt;p&gt;TCP服务器进程先创建传输控制块TCB，时刻准备接受客户进程的连接请求，此时服务器就进入了LISTEN（监听）状态；&#xA;TCP客户进程也是先创建传输控制块TCB，然后向服务器发出连接请求报文，这是报文首部中的同部位SYN=1，同时选择一个初始序列号 seq=x ，此时，TCP客户端进程进入了 SYN-SENT（同步已发送状态）状态。TCP规定，SYN报文段（SYN=1的报文段）不能携带数据，但需要消耗掉一个序号。&#xA;TCP服务器收到请求报文后，如果同意连接，则发出确认报文。确认报文中应该 ACK=1，SYN=1，确认号是ack=x+1，同时也要为自己初始化一个序列号 seq=y，此时，TCP服务器进程进入了SYN-RCVD（同步收到）状态。这个报文也不能携带数据，但是同样要消耗一个序号。&#xA;TCP客户进程收到确认后，还要向服务器给出确认。确认报文的ACK=1，ack=y+1，自己的序列号seq=x+1，此时，TCP连接建立，客户端进入ESTABLISHED（已建立连接）状态。TCP规定，ACK报文段可以携带数据，但是如果不携带数据则不消耗序号。&#xA;当服务器收到客户端的确认后也进入ESTABLISHED状态，此后双方就可以开始通信了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 20.04 升级到 Ubuntu 22.04</title>
      <link>http://shanks.link/blog/2024/01/22/ubuntu-20.04-%E5%8D%87%E7%BA%A7%E5%88%B0-ubuntu-22.04/</link>
      <pubDate>Mon, 22 Jan 2024 17:03:54 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/22/ubuntu-20.04-%E5%8D%87%E7%BA%A7%E5%88%B0-ubuntu-22.04/</guid>
      <description>&lt;p&gt;&lt;strong&gt;重要提醒：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;不建议直接在生产环境进行升级&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;升级前一定要做好数据备份&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;一ubuntu-2204-升级前准备&#34;&gt;一、Ubuntu 22.04 升级前准备&lt;/h2&gt;&#xA;&lt;p&gt;除非你是物理服务器，以及没有用过奇奇怪怪定制或修改的内核的 KVM 构架的 VPS 和云主机，否则升级大版本更新内核是有一定机率导致 Grub 加载失败的，切记备份重要数据！&lt;/p&gt;</description>
    </item>
    <item>
      <title>NAT 简介</title>
      <link>http://shanks.link/blog/2024/01/22/nat-%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 22 Jan 2024 16:50:28 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/22/nat-%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h1 id=&#34;什么是nat&#34;&gt;什么是NAT？&lt;/h1&gt;&#xA;&lt;p&gt;NAT是一种地址转换技术，它可以将IP数据报文头中的IP地址转换为另一个IP地址，并通过转换端口号达到地址重用的目的。NAT作为一种缓解IPv4公网地址枯竭的过渡技术，由于实现简单，得到了广泛应用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>彭州自驾一日游</title>
      <link>http://shanks.link/blog/2024/01/22/%E5%BD%AD%E5%B7%9E%E8%87%AA%E9%A9%BE%E4%B8%80%E6%97%A5%E6%B8%B8/</link>
      <pubDate>Mon, 22 Jan 2024 15:56:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/22/%E5%BD%AD%E5%B7%9E%E8%87%AA%E9%A9%BE%E4%B8%80%E6%97%A5%E6%B8%B8/</guid>
      <description>&lt;h3 id=&#34;提前准备&#34;&gt;提前准备&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;天气&lt;/li&gt;&#xA;&lt;li&gt;路线规划-尽量走高速，为后续春节跑长途做准备&lt;/li&gt;&#xA;&lt;li&gt;大致的时间安排-中午，晚上在外吃&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;温馨提示&#34;&gt;温馨提示&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;拍照需要好的天气，最好是晴天前往&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;参考规划图&#34;&gt;参考规划图&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/%E6%97%85%E6%B8%B8/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240122160027.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;网友对景点的大致介绍&#34;&gt;网友对景点的大致介绍&lt;/h3&gt;&#xA;&lt;p&gt;三圣寺：寺中散养着鹿🦌跟孔雀🦚，春天赏樱花、玉兰；秋天赏枫叶、银杏。殿额为“义昭千古”为清光绪所题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>川北环线旅游攻略</title>
      <link>http://shanks.link/blog/2024/01/19/%E5%B7%9D%E5%8C%97%E7%8E%AF%E7%BA%BF%E6%97%85%E6%B8%B8%E6%94%BB%E7%95%A5/</link>
      <pubDate>Fri, 19 Jan 2024 16:55:33 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/19/%E5%B7%9D%E5%8C%97%E7%8E%AF%E7%BA%BF%E6%97%85%E6%B8%B8%E6%94%BB%E7%95%A5/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/%E6%97%85%E6%B8%B8/9bfd6cb97a8241e3b1f02b25dcd4752c~noop.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;川北一线地图&lt;/p&gt;&#xA;&lt;p&gt;**路线总览：**汶川+松潘+黄龙+九寨沟+黄河九曲第一湾+若尔盖+月亮湾+红原+毕棚沟+都江堰&lt;/p&gt;&#xA;&lt;p&gt;**总里程数：**1400公里&lt;/p&gt;&#xA;&lt;p&gt;**行程用时：**7天&lt;/p&gt;</description>
    </item>
    <item>
      <title>四川经典旅游环线 成都自驾九寨沟、稻城亚丁、四姑娘山攻略</title>
      <link>http://shanks.link/blog/2024/01/19/%E5%9B%9B%E5%B7%9D%E7%BB%8F%E5%85%B8%E6%97%85%E6%B8%B8%E7%8E%AF%E7%BA%BF-%E6%88%90%E9%83%BD%E8%87%AA%E9%A9%BE%E4%B9%9D%E5%AF%A8%E6%B2%9F%E7%A8%BB%E5%9F%8E%E4%BA%9A%E4%B8%81%E5%9B%9B%E5%A7%91%E5%A8%98%E5%B1%B1%E6%94%BB%E7%95%A5/</link>
      <pubDate>Fri, 19 Jan 2024 16:30:10 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/19/%E5%9B%9B%E5%B7%9D%E7%BB%8F%E5%85%B8%E6%97%85%E6%B8%B8%E7%8E%AF%E7%BA%BF-%E6%88%90%E9%83%BD%E8%87%AA%E9%A9%BE%E4%B9%9D%E5%AF%A8%E6%B2%9F%E7%A8%BB%E5%9F%8E%E4%BA%9A%E4%B8%81%E5%9B%9B%E5%A7%91%E5%A8%98%E5%B1%B1%E6%94%BB%E7%95%A5/</guid>
      <description>&lt;p&gt;&lt;strong&gt;四川的所有自驾游线路，几乎都是以成都为起止点&lt;/strong&gt;。所有的旅游线路中，最适合暑假自驾的经典线路，分别是：&lt;strong&gt;川西大环线、川西小环线、川北环线&lt;/strong&gt;。这三条线路，分别通往四川的三大知名自然风景区：&lt;strong&gt;稻城亚丁、四姑娘山、九寨沟&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ICMP简介</title>
      <link>http://shanks.link/blog/2024/01/16/icmp%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 16 Jan 2024 14:12:28 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/16/icmp%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://info.support.huawei.com/info-finder/encyclopedia/zh/ICMP.html&#34;&gt;相关内容转载自本链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;什么是icmp&#34;&gt;什么是ICMP？&lt;/h1&gt;&#xA;&lt;p&gt;因特网控制报文协议ICMP（Internet Control Message Protocol）是一个差错报告机制，是TCP/IP协议簇中的一个重要子协议，通常被IP层或更高层协议（TCP或UDP）使用，属于网络层协议，主要用于在IP主机和路由器之间传递控制消息，用于报告主机是否可达、路由是否可用等。这些控制消息虽然并不传输用户数据，但是对于收集各种网络信息、诊断和排除各种网络故障以及用户数据的传递具有至关重要的作用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>根域名服务器只有13台？</title>
      <link>http://shanks.link/blog/2024/01/16/%E6%A0%B9%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%AA%E6%9C%8913%E5%8F%B0/</link>
      <pubDate>Tue, 16 Jan 2024 11:58:28 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/16/%E6%A0%B9%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%AA%E6%9C%8913%E5%8F%B0/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/tcpip/v2-f55b8020cbde1d1d3deab6295b56c146_1440w.png&#34; alt=&#34;根域名服务器只有13台？&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;根域名服务器只有13台这个说法流传甚广，哪怕你不了解DNS协议，也有可能听说过这个说法，但事实真的如此吗？&lt;/p&gt;&#xA;&lt;p&gt;当然不可能啦！世界上有45亿的因特网用户，哪怕有递归名称服务器作为缓冲，根域名服务器只有13台是不可能应付的了如此大规模的查询的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>云朵乐园 新津紫霞山一日游</title>
      <link>http://shanks.link/blog/2024/01/14/%E4%BA%91%E6%9C%B5%E4%B9%90%E5%9B%AD-%E6%96%B0%E6%B4%A5%E7%B4%AB%E9%9C%9E%E5%B1%B1%E4%B8%80%E6%97%A5%E6%B8%B8/</link>
      <pubDate>Sun, 14 Jan 2024 10:30:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/14/%E4%BA%91%E6%9C%B5%E4%B9%90%E5%9B%AD-%E6%96%B0%E6%B4%A5%E7%B4%AB%E9%9C%9E%E5%B1%B1%E4%B8%80%E6%97%A5%E6%B8%B8/</guid>
      <description>&lt;h3 id=&#34;出发前准备&#34;&gt;出发前准备&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;目的地天气，行程规划&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;交通工具&#34;&gt;交通工具&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;距离地铁都比较远，最好自驾，两个目的地之间的车程大约45分钟&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;具体行程&#34;&gt;具体行程&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;上午开车到云朵乐园，陪伴小孩玩耍 1.5个小时左右（有自动售卖机）&lt;/li&gt;&#xA;&lt;li&gt;午餐在 冯四孃跷脚牛肉（麓湖店）附近处理（附近还有其它的店铺）&lt;/li&gt;&#xA;&lt;li&gt;车上午休后，驾车到老君山（45分钟），停车费10元&lt;/li&gt;&#xA;&lt;li&gt;开始爬山（比较轻松，单程1个小时）刚入门处有商店，山顶没怎么看到卖水的&lt;/li&gt;&#xA;&lt;li&gt;下山&lt;/li&gt;&#xA;&lt;li&gt;在新津安排晚餐或者回家就餐&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;特别提示&#34;&gt;特别提示&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;云朵乐园旁边不远（1.3KM）有个大型的，有很多游玩设施的公园（红石公园），如果时间足够，可j将云朵乐园改为红石公园。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;图示&#34;&gt;图示&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/%E6%97%85%E6%B8%B8/%E4%BA%91%E6%9C%B5%E4%B9%90%E5%9B%AD_%E6%96%B0%E6%B4%A5%E8%80%81%E5%90%9B%E5%B1%B1_34172b4f.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>紫霞山-休息游玩</title>
      <link>http://shanks.link/blog/2024/01/07/%E7%B4%AB%E9%9C%9E%E5%B1%B1-%E4%BC%91%E6%81%AF%E6%B8%B8%E7%8E%A9/</link>
      <pubDate>Sun, 07 Jan 2024 10:30:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/07/%E7%B4%AB%E9%9C%9E%E5%B1%B1-%E4%BC%91%E6%81%AF%E6%B8%B8%E7%8E%A9/</guid>
      <description>&lt;h3 id=&#34;出发前准备&#34;&gt;出发前准备&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;目的地天气。&lt;/li&gt;&#xA;&lt;li&gt;水和零食-休闲，小众景点，需要自备水和零食&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;交通工具&#34;&gt;交通工具&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;自驾游，导航点：紫霞山，将车顺序停在阳光大道即可（无特定的停车场）&lt;/li&gt;&#xA;&lt;li&gt;地铁：最近的地铁口10KM，酌情考虑。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;攻略&#34;&gt;攻略&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;整个爬山有两种选择，第一种是小环线（适合新手和有老人小孩的），预计时间1个半小时（全程）&lt;/li&gt;&#xA;&lt;li&gt;第二种是爬到山顶，预计全程2个小时？（全程）&lt;/li&gt;&#xA;&lt;li&gt;下面均是针对小环线的情况说明&lt;/li&gt;&#xA;&lt;li&gt;从右边进入（从阳光大道看着山的方向），刚开始有个 WC,后续没看到。&lt;/li&gt;&#xA;&lt;li&gt;刚进入（同上）有水售卖，后续没有。&lt;/li&gt;&#xA;&lt;li&gt;全程时不时有座椅可供休息&lt;/li&gt;&#xA;&lt;li&gt;全程道路均有硬化，攀爬难度不高。&lt;/li&gt;&#xA;&lt;li&gt;下山后，离吃饭的聚集地有一段路程3KM？最好安排吃饭时间。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;景点浏览相片&#34;&gt;景点浏览相片&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/%E6%97%85%E6%B8%B8/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240108150646.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>购房计划</title>
      <link>http://shanks.link/blog/2024/01/01/%E8%B4%AD%E6%88%BF%E8%AE%A1%E5%88%92/</link>
      <pubDate>Mon, 01 Jan 2024 16:10:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/01/%E8%B4%AD%E6%88%BF%E8%AE%A1%E5%88%92/</guid>
      <description>&lt;h3 id=&#34;整体规划时间点&#34;&gt;整体规划（时间点）&lt;/h3&gt;&#xA;&lt;p&gt;小孩入学那年前，现在了解的政策是当年4.30号之前需要小孩的户口落在房产上，迁户口大约需要2周&lt;/p&gt;&#xA;&lt;h3 id=&#34;主要目标&#34;&gt;主要目标&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;学校可以&lt;/li&gt;&#xA;&lt;li&gt;房子可以&lt;/li&gt;&#xA;&lt;li&gt;配套可以&lt;/li&gt;&#xA;&lt;li&gt;环境可以&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;预算&#34;&gt;预算&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不超过220W&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;备选小区&#34;&gt;备选小区&lt;/h3&gt;&#xA;&lt;h4 id=&#34;花样年美年广场-美岸&#34;&gt;花样年美年广场-美岸&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;学区房，高密度（周围没有环绕，给人感觉还还），&lt;/li&gt;&#xA;&lt;li&gt;远离老破小的市中心，逛街不方便，但新开发的区域，周围环境还不错&lt;/li&gt;&#xA;&lt;li&gt;房价有些超预期，可以再等等&lt;/li&gt;&#xA;&lt;li&gt;河边新修的路可能要通车了，噪声会比较大&lt;/li&gt;&#xA;&lt;li&gt;有些一面之缘的人，人际关系好&lt;/li&gt;&#xA;&lt;li&gt;有物业的工作，无需再次找工作&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;二十一世纪花园&#34;&gt;二十一世纪花园&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;离公司近&lt;/li&gt;&#xA;&lt;li&gt;3，4期不靠近高架&lt;/li&gt;&#xA;&lt;li&gt;没有电梯&lt;/li&gt;&#xA;&lt;li&gt;总价不高（210W内）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;棕南公寓&#34;&gt;棕南公寓&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;特点 学区房， 低密度 ，位置不错&lt;/li&gt;&#xA;&lt;li&gt;缺点 小区偏旧&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;万科城市花园&#34;&gt;万科城市花园&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;学区房，低密度，地段好，小洋楼，2年后再通另外一条地铁&lt;/p&gt;</description>
    </item>
    <item>
      <title>总结23</title>
      <link>http://shanks.link/blog/2024/01/01/%E6%80%BB%E7%BB%9323/</link>
      <pubDate>Mon, 01 Jan 2024 11:41:53 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/01/%E6%80%BB%E7%BB%9323/</guid>
      <description>&lt;h3 id=&#34;23年-已完成事项&#34;&gt;23年 已完成事项&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;让父亲来成都且找了工作&lt;/li&gt;&#xA;&lt;li&gt;考了驾照，买了车(二手)&lt;/li&gt;&#xA;&lt;li&gt;去川西旅了游（见 &lt;a href=&#34;http://shanks.link/categories/%E7%94%9F%E6%B4%BB/&#34;&gt;http://shanks.link/categories/%E7%94%9F%E6%B4%BB/&lt;/a&gt; 中 23年部分)&lt;/li&gt;&#xA;&lt;li&gt;选了幼儿园&lt;/li&gt;&#xA;&lt;li&gt;换了工作，切换到了数通行业&lt;/li&gt;&#xA;&lt;li&gt;扩大了交往圈（小孩的同学圈为基础）&lt;/li&gt;&#xA;&lt;li&gt;自驾回老家探了亲&lt;/li&gt;&#xA;&lt;li&gt;开始利用 git 来提高工作效率 ,和生活效率（主要是提高了做事的规划性）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;23年-未完成计划&#34;&gt;23年 未完成计划&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;锻炼身体&lt;/li&gt;&#xA;&lt;li&gt;陪孩子（培养其好的习惯）&lt;/li&gt;&#xA;&lt;li&gt;提升专业知识&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>xl2tpd和pppd 服务器的搭建和配置</title>
      <link>http://shanks.link/blog/2023/12/13/xl2tpd%E5%92%8Cpppd-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 13 Dec 2023 09:59:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/12/13/xl2tpd%E5%92%8Cpppd-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;h4 id=&#34;xl2tpd-配置&#34;&gt;xl2tpd 配置&lt;/h4&gt;&#xA;&lt;p&gt;/etc/xl2tpd/xl2tpd.conf 配置文件中需要注意 pppd 配置的位置，以下是示例&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pppoptfile = /etc/ppp/options.xl2tpd&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;pppd-配置&#34;&gt;pppd 配置&lt;/h3&gt;&#xA;&lt;p&gt;一般配置文件就是上述的 options.xl2tpd  配置文件，需要关注的是下面这一行&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name CallServe&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个 CallServe 和后续的账号文件有关系&lt;/p&gt;</description>
    </item>
    <item>
      <title>golang使用gopacket包进行数据包捕获，注入和分析</title>
      <link>http://shanks.link/blog/2023/12/13/golang%E4%BD%BF%E7%94%A8gopacket%E5%8C%85%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%8C%85%E6%8D%95%E8%8E%B7%E6%B3%A8%E5%85%A5%E5%92%8C%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 13 Dec 2023 09:18:12 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/12/13/golang%E4%BD%BF%E7%94%A8gopacket%E5%8C%85%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%8C%85%E6%8D%95%E8%8E%B7%E6%B3%A8%E5%85%A5%E5%92%8C%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;使用 golang 实现网络抓包是非常容易的，可以使用谷歌的包 github.com/google/gopacket。由于 gopacket 构建在 libp­cap 之上，我强烈建议您了解该库的工作原理。您可以在 C 中学习如何使用 libp­cap 进行更深入的了解。&#xA;1.libp­cap&lt;/p&gt;</description>
    </item>
    <item>
      <title>thrift 之 go 入门 Getting Started with Thrift Go</title>
      <link>http://shanks.link/blog/2023/12/08/thrift-%E4%B9%8B-go-%E5%85%A5%E9%97%A8-getting-started-with-thrift-go/</link>
      <pubDate>Fri, 08 Dec 2023 16:20:09 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/12/08/thrift-%E4%B9%8B-go-%E5%85%A5%E9%97%A8-getting-started-with-thrift-go/</guid>
      <description>&lt;h3 id=&#34;下载安装-thrift-编译器&#34;&gt;下载、安装 thrift 编译器&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;thrift 编译器的下载连接 &lt;a href=&#34;https://thrift.apache.org/downloa&#34;&gt;https://thrift.apache.org/downloa&lt;/a&gt; 这里注意下版本&lt;/li&gt;&#xA;&lt;li&gt;将下载的编译器放到系统的可执行目录下，并去掉版本信息， eg: thrift-0.19.0.exe 改为 thrift.exe&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;go-安装-thrift-包&#34;&gt;go 安装 thrift 包&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go get github.com/apache/thrift@0.19.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#这里的版本要和上面的对应&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;新建-tmp-目录&#34;&gt;新建 tmp 目录&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;新建一个临时目录 tmp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;在新建的 tmp 目录下新建一个存放 thrift 文件的 thrift 目录&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;将上述 thrift 包的实例文件(tutorial)拷贝到 thrift 目录下&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;我这里的 thrift 安装包的路径是 C:&lt;span style=&#34;color:#009c00&#34;&gt;\U&lt;/span&gt;sers&lt;span style=&#34;color:#009c00&#34;&gt;\s&lt;/span&gt;hanks&lt;span style=&#34;color:#009c00&#34;&gt;\g&lt;/span&gt;o&lt;span style=&#34;color:#009c00&#34;&gt;\p&lt;/span&gt;kg&lt;span style=&#34;color:#009c00&#34;&gt;\m&lt;/span&gt;od&lt;span style=&#34;color:#009c00&#34;&gt;\g&lt;/span&gt;ithub.com&lt;span style=&#34;color:#009c00&#34;&gt;\a&lt;/span&gt;pache&lt;span style=&#34;color:#009c00&#34;&gt;\t&lt;/span&gt;hrift@v0.19.0 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;将 tutorial 中的 shared.thrift 和 tutorial.thrift 文件 拷贝到 tmp/thrift中&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;生成对应语言的协议文件&#34;&gt;生成对应语言的协议文件&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;在上述新建的 tmp 目录下执行 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;thrift -r --gen go thrift/tutorial.thrift&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;生产 go 语言版本的 thrift协议代码&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;拷贝实例代码&#34;&gt;拷贝实例代码&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;将上述安装目录下的 tutorial\go\src 中的代码（包括上层的 server.crt 和 server.key ）拷贝到 tmp 目录下&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;编译-go-代码&#34;&gt;编译 go 代码&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go mod init example.com/m 有 go.mod 可不执行&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go build main.go&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;编译报错处理即可&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>go flags包简介 go flags package introduction</title>
      <link>http://shanks.link/blog/2023/12/08/go-flags%E5%8C%85%E7%AE%80%E4%BB%8B-go-flags-package-introduction/</link>
      <pubDate>Fri, 08 Dec 2023 16:05:12 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/12/08/go-flags%E5%8C%85%E7%AE%80%E4%BB%8B-go-flags-package-introduction/</guid>
      <description>&lt;h3 id=&#34;flag包是go语言标准库提供用来解析命令行参数的包使得开发命令行工具更为简单&#34;&gt;flag包是Go语言标准库提供用来解析命令行参数的包，使得开发命令行工具更为简单&lt;/h3&gt;&#xA;&lt;h3 id=&#34;常用方法&#34;&gt;常用方法&lt;/h3&gt;&#xA;&lt;p&gt;1.flag.Usage&#xA;输出使用方法，如linux下ls -h的帮助输出&lt;/p&gt;&#xA;&lt;p&gt;2.flag.Type(参数名, 默认值, 使用提示)&#xA;Type为类型 如String, Int, Uint 调用相应的flag.Sring flag.Int flag.Uint方法&lt;/p&gt;</description>
    </item>
    <item>
      <title>thrift 备忘录 thrift memorandum</title>
      <link>http://shanks.link/blog/2023/12/08/thrift-%E5%A4%87%E5%BF%98%E5%BD%95-thrift-memorandum/</link>
      <pubDate>Fri, 08 Dec 2023 14:10:09 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/12/08/thrift-%E5%A4%87%E5%BF%98%E5%BD%95-thrift-memorandum/</guid>
      <description>&lt;h3 id=&#34;下载&#34;&gt;下载&lt;/h3&gt;&#xA;&lt;p&gt;thrift 编译器的下载连接 &lt;a href=&#34;https://thrift.apache.org/download&#34;&gt;https://thrift.apache.org/download&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;版本&#34;&gt;版本&lt;/h3&gt;&#xA;&lt;p&gt;上述下载的编译器版本要和后续引用的 thrift 头文件的版本对应，比如这里下载的是 0.19.0 版本，后续引用头文件 github.com/apache/thrift 或者 git.apache.org/thrift.git 需要 git checkout 0.19.0&lt;/p&gt;&#xA;&lt;h3 id=&#34;多个仓库-replace-的问题&#34;&gt;多个仓库 replace 的问题&lt;/h3&gt;&#xA;&lt;p&gt;go.mod 中可以手动添加 replace git.apache.org/thrift.git v0.19.0 =&amp;gt; github.com/apache/thrift v0.19.0&lt;/p&gt;</description>
    </item>
    <item>
      <title>体系化认识 RPC</title>
      <link>http://shanks.link/blog/2023/12/07/%E4%BD%93%E7%B3%BB%E5%8C%96%E8%AE%A4%E8%AF%86-rpc/</link>
      <pubDate>Thu, 07 Dec 2023 16:14:09 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/12/07/%E4%BD%93%E7%B3%BB%E5%8C%96%E8%AE%A4%E8%AF%86-rpc/</guid>
      <description>&lt;p&gt;RPC（Remote Procedure Call），即远程过程调用，是一个分布式系统间通信的必备技术。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/it/0x63b8c117.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;RPC 最核心要解决的问题就是在分布式系统间，如何执行另外一个地址空间上的函数、方法，就仿佛在本地调用一样，个人总结的 RPC 最核心的概念和技术包括如下，如图所示：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 常用命令 Go Common commands</title>
      <link>http://shanks.link/blog/2023/12/07/go-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-go-common-commands/</link>
      <pubDate>Thu, 07 Dec 2023 10:34:12 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/12/07/go-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-go-common-commands/</guid>
      <description>&lt;h3 id=&#34;一键安装-go-one-key-install-go&#34;&gt;一键安装 go one key install go&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apt-get install go&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;设置代理-set-proxy&#34;&gt;设置代理 set proxy&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go env -w GOPROXY=https://goproxy.cn,direct&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;构建-gomod-create-gomod&#34;&gt;构建 go.mod create go.mod&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go mod init xxx.com/xxx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;设置模块代理-关于go-mod安装第三方包提示-module-declares-its-path-as-xxx-but-was-required-as-yyy-解决办法&#34;&gt;设置模块代理 关于go mod安装第三方包提示： module declares its path as: xxx but was required as: yyy 解决办法&lt;/h3&gt;&#xA;&lt;p&gt;在 go.mod 中手动添加&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;replace yyy v0.16.0 =&amp;gt; xxx v0.16.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;v0.16.0 是版本号，是否指定看具体情况&lt;/p&gt;</description>
    </item>
    <item>
      <title>负载均衡算法</title>
      <link>http://shanks.link/blog/2023/12/06/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 06 Dec 2023 14:21:12 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/12/06/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h2 id=&#34;1轮询法&#34;&gt;1、轮询法&lt;/h2&gt;&#xA;&lt;p&gt;将请求按顺序轮流地分配到后端服务器上，它均衡地对待后端的每一台服务器，而不关心服务器实际的连接数和当前的系统负载。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2随机法&#34;&gt;2、随机法&lt;/h2&gt;&#xA;&lt;p&gt;通过系统的随机算法，根据后端服务器的列表大小值来随机选取其中的一台服务器进行访问。由概率统计理论可以得知，随着客户端调用服务端的次数增多，其实际效果越来越接近于平均分配调用量到后端的每一台服务器，也就是轮询的结果。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PPP 原理介绍</title>
      <link>http://shanks.link/blog/2023/12/06/ppp-%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 06 Dec 2023 14:09:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/12/06/ppp-%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;h2 id=&#34;ppp的基本概念&#34;&gt;PPP的基本概念&lt;/h2&gt;&#xA;&lt;h3 id=&#34;ppp的基本架构&#34;&gt;PPP的基本架构&lt;/h3&gt;&#xA;&lt;p&gt;PPP协议处于TCP/IP的数据链路层，主要用在支持全双工的同异步链路上，进行点到点之间的数据传输。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;图8-16&lt;/strong&gt; PPP在协议栈中的位置&#xA;&lt;img src=&#34;http://shanks.link/img/l2tp/0x39cb61dd-download.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;PPP主要由以下几类协议族组成：&lt;/p&gt;</description>
    </item>
    <item>
      <title>RADIUS简介</title>
      <link>http://shanks.link/blog/2023/12/06/radius%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 06 Dec 2023 11:44:09 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/12/06/radius%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h1 id=&#34;什么是radius&#34;&gt;什么是RADIUS？&lt;/h1&gt;&#xA;&lt;p&gt;RADIUS（Remote Authentication Dial In User Service，远程用户拨号认证）协议是一种分布式的、客户端/服务器结构的信息交互协议，能保护网络不受未授权访问的干扰，常应用在既要求较高安全性、又允许远程用户访问的各种网络环境中。RADIUS协议为标准协议，基本所有主流设备均支持，在实际网络中应用最多。RADIUS使用UDP（User Datagram Protocol，用户数据报协议）作为传输协议，具有良好的实时性；同时也支持重传机制和备用服务器机制，具有较好的可靠性；实现较为简单，适用于大用户量时服务器端的多线程结构。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VLAN 简介</title>
      <link>http://shanks.link/blog/2023/12/06/vlan-%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 06 Dec 2023 11:24:28 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/12/06/vlan-%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h1 id=&#34;什么是vlan&#34;&gt;什么是VLAN&lt;/h1&gt;&#xA;&lt;p&gt;VLAN（Virtual Local Area Network）即虚拟局域网，是将一个物理的LAN在逻辑上划分成多个广播域的通信技术。&#xA;每个VLAN是一个广播域，VLAN内的主机间可以直接通信，而VLAN间则不能直接互通。这样，广播报文就被限制在一个VLAN内。&lt;/p&gt;</description>
    </item>
    <item>
      <title>L2TP基本原理</title>
      <link>http://shanks.link/blog/2023/12/05/l2tp%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 05 Dec 2023 11:19:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/12/05/l2tp%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;h1 id=&#34;l2tp-vpn简介&#34;&gt;L2TP VPN简介&lt;/h1&gt;&#xA;&lt;h2 id=&#34;l2tp基本概念&#34;&gt;L2TP基本概念：&lt;/h2&gt;&#xA;&lt;p&gt;L2TP（Layer 2 Tunneling Protocol） VPN是一种用于承载PPP报文的隧道技术，该技术主要应用在远程办公场景中为出差员工远程访问企业内网资源提供接入服务。&lt;/p&gt;</description>
    </item>
    <item>
      <title>中年人的目标</title>
      <link>http://shanks.link/blog/2023/12/01/%E4%B8%AD%E5%B9%B4%E4%BA%BA%E7%9A%84%E7%9B%AE%E6%A0%87/</link>
      <pubDate>Fri, 01 Dec 2023 16:53:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/12/01/%E4%B8%AD%E5%B9%B4%E4%BA%BA%E7%9A%84%E7%9B%AE%E6%A0%87/</guid>
      <description>&lt;h3 id=&#34;身体&#34;&gt;身体&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;作息-早睡早起，按时午休&lt;/li&gt;&#xA;&lt;li&gt;饮食-平常清淡为主，莫贪吃&lt;/li&gt;&#xA;&lt;li&gt;锻炼-按时、按量锻炼&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;视野&#34;&gt;视野&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;持续学习-有目标的学习，杜绝一切短视频和信息&lt;/li&gt;&#xA;&lt;li&gt;实地考察-尽量每年去一个城市旅游&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;家庭&#34;&gt;家庭&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;教育小的，照顾老的&lt;/li&gt;&#xA;&lt;li&gt;照顾另一半&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;事业&#34;&gt;事业&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;有长远的规划&lt;/li&gt;&#xA;&lt;li&gt;做事业的主人，杜绝打工人心态&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Linux PPP 源码分析</title>
      <link>http://shanks.link/blog/2023/11/24/linux-ppp-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 24 Nov 2023 10:37:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/11/24/linux-ppp-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;Linux PPP实现源码分析&#xA;作者：kwest &lt;a href=&#34;mailto:exboy@163.com&#34;&gt;exboy@163.com&lt;/a&gt;  版本：v0.7&lt;/p&gt;&#xA;&lt;p&gt;©所有版权保留&lt;/p&gt;&#xA;&lt;p&gt;转载请保留作者署名，严禁用于商业用途 。&lt;/p&gt;&#xA;&lt;p&gt;前言：&lt;/p&gt;&#xA;&lt;p&gt;PPP(Point to Point Protocol)协议是一种广泛使用的数据链路层协议，在国内广泛使用的宽带拨号协议PPPoE其基础就是PPP协议，此外和PPP相关的协议PPTP,L2TP也常应用于VPN虚拟专用网络。随着智能手机系统Android的兴起，PPP协议还被应用于GPRS拨号，3G/4G数据通路的建立，在嵌入式通信设备及智能手机中有着广泛的应用基础。本文主要分析Linux中PPP协议实现的关键代码和基本数据收发流程，对PPP协议的详细介绍请自行参考RFC和相关协议资料。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PPPOE简介</title>
      <link>http://shanks.link/blog/2023/11/24/pppoe%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Fri, 24 Nov 2023 09:36:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/11/24/pppoe%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h1 id=&#34;什么是pppoepppoe解决了哪些问题&#34;&gt;什么是PPPoE？PPPoE解决了哪些问题？&lt;/h1&gt;&#xA;&lt;p&gt;PPPoE（Point-to-Point Protocol over Ethernet）可以称作为以太网上的PPP协议，应用在链路层。它通过在以太网上提供点到点的连接，建立PPP会话，封装PPP报文为PPPoE报文。PPPoE技术可以将用户连接到远程接入设备上，并提供良好访问控制功能，提供了一种经济的用户接入技术，并实现了对用户的控制。&#xA;PPPoE利用以太网络，提供远程的多个用户主机接入功能，并且能够提供数据传输的计费数据，解决用户上网收费等实际应用问题，因而被广泛应用于接入运营商网络。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Challenge-Handshake Authentication Protocol, CHAP</title>
      <link>http://shanks.link/blog/2023/11/24/challenge-handshake-authentication-protocol-chap/</link>
      <pubDate>Fri, 24 Nov 2023 09:26:08 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/11/24/challenge-handshake-authentication-protocol-chap/</guid>
      <description>&lt;h3 id=&#34;质询握手身份验证协议-challenge-handshake-authentication-protocol-chap&#34;&gt;质询握手身份验证协议 (Challenge-Handshake Authentication Protocol, CHAP)&lt;/h3&gt;&#xA;&lt;p&gt;CHAP 验证使用&lt;strong&gt;质询&lt;/strong&gt;和&lt;strong&gt;响应&lt;/strong&gt;的概念，此概念表示对等点（验证者）会质询呼叫者（被验证者）以证明其身份。质询包括一个随机数和一个由验证者生成的唯一 ID。呼叫者必须使用 ID、随机数及其 CHAP 安全凭证来生成要发送到对等点的正确响应（握手）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ppp2.4 undefined reference to `crypt</title>
      <link>http://shanks.link/blog/2023/11/22/ppp2.4-undefined-reference-to-crypt/</link>
      <pubDate>Wed, 22 Nov 2023 09:37:08 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/11/22/ppp2.4-undefined-reference-to-crypt/</guid>
      <description>&lt;p&gt;从 &lt;a href=&#34;https://download.samba.org/pub/ppp/&#34;&gt;https://download.samba.org/pub/ppp/&lt;/a&gt; 下载 2.4.0 版本代码（https://download.samba.org/pub/ppp/ppp-2.4.0.tar.gz）在 Ubuntu 22.04.1 LTS 下编译时，可能会出现类似 /opt/ppp-2.4.0/pppd/auth.c:1141: undefined reference to `crypt 加密库无法找到的报错，解决思路&lt;/p&gt;</description>
    </item>
    <item>
      <title>Captive portal 强制门户</title>
      <link>http://shanks.link/blog/2023/11/16/captive-portal-%E5%BC%BA%E5%88%B6%E9%97%A8%E6%88%B7/</link>
      <pubDate>Thu, 16 Nov 2023 14:46:34 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/11/16/captive-portal-%E5%BC%BA%E5%88%B6%E9%97%A8%E6%88%B7/</guid>
      <description>&lt;p&gt;&lt;strong&gt;强制门户&lt;/strong&gt;（英文：Captive portal，又名&lt;strong&gt;强制网络门户&lt;/strong&gt;、&lt;strong&gt;强制主页&lt;/strong&gt;）是在授予新连接至&lt;a href=&#34;https://zh.wikipedia.org/wiki/Wi-Fi&#34;&gt;Wi-Fi&lt;/a&gt;的用户更广的网络（互联网）访问权限之前在其&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%BD%91%E9%A1%B5%E6%B5%8F%E8%A7%88%E5%99%A8&#34;&gt;网页浏览器&lt;/a&gt;呈现中的网页，其常用于呈现可能需要认证或接受&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%9C%80%E7%BB%88%E7%94%A8%E6%88%B7%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE&#34;&gt;最终用户许可协议&lt;/a&gt;/&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%8F%AF%E6%8E%A5%E5%8F%97%E4%BD%BF%E7%94%A8%E7%AD%96%E7%95%A5&#34;&gt;可接受使用策略&lt;/a&gt;的着陆页或登录页。强制门户应用于各方面的移动宽带服务中（如有线连接、计费Wi-Fi及家庭热点），同时也可提供对企业或家庭有线网络（公寓、酒店和商业中心的网络）的访问权限。&lt;/p&gt;&#xA;&lt;p&gt;呈现至客户端的强制门户有可能存放在&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%BD%91%E5%85%B3&#34;&gt;网关&lt;/a&gt;或&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%B6%B2%E9%A0%81%E4%BC%BA%E6%9C%8D%E5%99%A8&#34;&gt;網頁伺服器&lt;/a&gt;上。网关也可白名单特定网站或&lt;a href=&#34;https://zh.wikipedia.org/wiki/TCP/UDP%E7%AB%AF%E5%8F%A3%E5%88%97%E8%A1%A8&#34;&gt;TCP端口&lt;/a&gt;以使用户在不使用网络门户的情况下访问网络。已连接客户端的&lt;a href=&#34;https://zh.wikipedia.org/wiki/MAC%E5%9C%B0%E5%9D%80&#34;&gt;MAC地址&lt;/a&gt;可用于绕过特定设备的登录流程。&lt;/p&gt;&#xA;&lt;h2 id=&#34;用途&#34;&gt;用途&lt;/h2&gt;&#xA;&lt;p&gt;强制门户主要用于开放的无线网络中，用户将收到欢迎信息及服务条款（许可端口、使用责任等等）。管理员以此来使其用户对自己的行为负责，并避免自身可能的法律责任。但这种责任授权是否具有法律效力仍有争议。[&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%BC%BA%E5%88%B6%E9%97%A8%E6%88%B7#cite_note-1&#34;&gt;1]&lt;/a&gt;[&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%BC%BA%E5%88%B6%E9%97%A8%E6%88%B7#cite_note-2&#34;&gt;2]&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>阿坝州甘海子-赏秋徒步-自驾一日游</title>
      <link>http://shanks.link/blog/2023/11/05/%E9%98%BF%E5%9D%9D%E5%B7%9E%E7%94%98%E6%B5%B7%E5%AD%90-%E8%B5%8F%E7%A7%8B%E5%BE%92%E6%AD%A5-%E8%87%AA%E9%A9%BE%E4%B8%80%E6%97%A5%E6%B8%B8/</link>
      <pubDate>Sun, 05 Nov 2023 07:25:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/11/05/%E9%98%BF%E5%9D%9D%E5%B7%9E%E7%94%98%E6%B5%B7%E5%AD%90-%E8%B5%8F%E7%A7%8B%E5%BE%92%E6%AD%A5-%E8%87%AA%E9%A9%BE%E4%B8%80%E6%97%A5%E6%B8%B8/</guid>
      <description>&lt;h3 id=&#34;出发前准备&#34;&gt;出发前准备&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;目的地天气，开车准备，随身携带物品等准备的还可以。&lt;/li&gt;&#xA;&lt;li&gt;时间安排上，未提示返程可能出现的堵车，这点后续要注意。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;旅游过程&#34;&gt;旅游过程&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;汇合地点和时间安排的还可以&lt;/li&gt;&#xA;&lt;li&gt;目的地停车场信息没有了解清楚，导致伙伴们花时间找了停车位&lt;/li&gt;&#xA;&lt;li&gt;听取了伙伴们的意见，及时调整了游览方式（第一阶段由徒步改为坐车）&lt;/li&gt;&#xA;&lt;li&gt;第二阶段，考虑到老人和小孩，放弃了老人和小孩的爬山计划（年轻人爬山），这点值得肯定，后续旅游等，都要根据现场的环境好伙伴们的身体情况做调整&lt;/li&gt;&#xA;&lt;li&gt;爬山时，没有强制要求一起（不同体力，年级，群体的小伙伴一起爬山，体验感一般，可能还不如分开）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;开车的优缺点&#34;&gt;开车的优缺点&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不要求组队同行（你追我赶-极不安全）&lt;/li&gt;&#xA;&lt;li&gt;隧道内，单向道，虽然前车慢，但未超车，值得大大大大的表扬（安全第一）&lt;/li&gt;&#xA;&lt;li&gt;遇到堵车，不慌不躁，值得肯定&lt;/li&gt;&#xA;&lt;li&gt;高速夜间开车，稳定为主，值得肯定&lt;/li&gt;&#xA;&lt;li&gt;长时间堵车后，达到服务区时，虽然感觉不疲惫，但仍然进行了必要且充分的休息，值得肯定&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;攻略&#34;&gt;攻略&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从成都出发，基本上是高速+国道（根据自己实际情况而定，自驾游，需要开的慢一点，尤其是国道）&lt;/li&gt;&#xA;&lt;li&gt;景区接待能力有限，周末人较多，散客最好在9.05前到达购票（摆渡车）口（会优先放票给团体客），晚了会面临排队1+小时的情况&lt;/li&gt;&#xA;&lt;li&gt;景区停车场和摆渡车购票口挨着，导航可以直接导航到干海子风景区停车场，若停满则继续沿着国道往前开，找空地或者其它私人停车场停车（20一辆车），山上没什么洗手间，最好在山下解决洗手间的事情&lt;/li&gt;&#xA;&lt;li&gt;购票处有售卖零食+水果+土特产的小商贩&lt;/li&gt;&#xA;&lt;li&gt;购票后，乘坐五菱宏光等小车到半山腰（周末不允许徒步，必须坐车），车程大约15-20分钟，海拔大约2260，徒步大约1个半小时左右，半山腰好像没看到洗手间&lt;/li&gt;&#xA;&lt;li&gt;从半山腰往上开始爬山（没有车可以坐了），大约1个半小时左右达到山顶平台，海拔2600米，刚开始的沿途有烧烤，烧土豆，饮料等售卖，后面就没有了，沿途基本上是爬山，若有小孩和老人需要考虑其身体情况，调整休息，沿途没看到洗手间&lt;/li&gt;&#xA;&lt;li&gt;到达山顶平台后，可以俯视四周，休息下，不远处，还有一个小山坡（单程大约25分钟），可视情况选择去还是不去，山顶平台有洗手间&lt;/li&gt;&#xA;&lt;li&gt;山顶平台，风比较大哦&lt;/li&gt;&#xA;&lt;li&gt;上面是甘海子山顶的介绍，在山下做摆渡车时，还有一个目的地可选择（XXX牧场），因为此次没去，故没有对应攻略。&lt;/li&gt;&#xA;&lt;li&gt;下山时，感觉情况可能需要排队，请根据情况安排时间&lt;/li&gt;&#xA;&lt;li&gt;到达售票口后，上车返回成都（周末国道可能堵车，请考虑到这点）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;景点浏览相片&#34;&gt;景点浏览相片&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/%E6%97%85%E6%B8%B8/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231106112400.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>毕棚沟自驾游</title>
      <link>http://shanks.link/blog/2023/10/19/%E6%AF%95%E6%A3%9A%E6%B2%9F%E8%87%AA%E9%A9%BE%E6%B8%B8/</link>
      <pubDate>Thu, 19 Oct 2023 09:25:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/10/19/%E6%AF%95%E6%A3%9A%E6%B2%9F%E8%87%AA%E9%A9%BE%E6%B8%B8/</guid>
      <description>&lt;h3 id=&#34;出发前准备&#34;&gt;出发前准备&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于景区的信息没有打听清楚，对于时节类旅游没有了解当时当地的时节（通过抖音直播查看当地的环境信息，比如赏秋，可以看树叶是否黄了)&lt;/li&gt;&#xA;&lt;li&gt;同样，气温没有了解清楚导致携带了过量的衣服&lt;/li&gt;&#xA;&lt;li&gt;其它物品携带充足&lt;/li&gt;&#xA;&lt;li&gt;行程中开车休息规划合理&lt;/li&gt;&#xA;&lt;li&gt;对旅游的整体时间没有规划，导致家人不知道准确的出发时间&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;旅游过程&#34;&gt;旅游过程&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;全程以休闲游的方式进行浏览，这点好评，即浏览了风景，人也比较舒服&lt;/li&gt;&#xA;&lt;li&gt;晚上花钱吃了本地特色火锅，钱花了，但体验特别好&lt;/li&gt;&#xA;&lt;li&gt;晚上住宿在一起，方便相互照料-这点好评&lt;/li&gt;&#xA;&lt;li&gt;后续在规划行程时，考虑到老人小孩等因素，均已休闲游为主，这点好评&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;开车的不足&#34;&gt;开车的不足&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;弯道速度过快，后续绝对不可以&lt;/li&gt;&#xA;&lt;li&gt;车内噪音太大，影响导航，差点导致事故，后续要改掉这一点&lt;/li&gt;&#xA;&lt;li&gt;在最右侧道时，速度过快，没有注意并线的车辆-非常危险，后面绝对不准这样&lt;/li&gt;&#xA;&lt;li&gt;由于心急，导致想超车，这点后续绝对不允许&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;开车中值得表扬的地方&#34;&gt;开车中值得表扬的地方&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;返程中午休休息充足，后续精力非常充沛&lt;/li&gt;&#xA;&lt;li&gt;服务区休息时间安排合理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;景点浏览相片&#34;&gt;景点浏览相片&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/%E6%97%85%E6%B8%B8/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231016165048.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>车相关的知识</title>
      <link>http://shanks.link/blog/2023/10/18/%E8%BD%A6%E7%9B%B8%E5%85%B3%E7%9A%84%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Wed, 18 Oct 2023 17:33:40 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/10/18/%E8%BD%A6%E7%9B%B8%E5%85%B3%E7%9A%84%E7%9F%A5%E8%AF%86/</guid>
      <description>&lt;h1 id=&#34;一切的前提&#34;&gt;一切的前提&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;平安到达是唯一的目标&lt;/li&gt;&#xA;&lt;li&gt;不要图快，不要疲劳驾驶&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;安全第一&#34;&gt;安全第一&lt;/h2&gt;&#xA;&lt;h5 id=&#34;变道超车&#34;&gt;变道、超车&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;只能在直路且视野开阔的道路进行&lt;/li&gt;&#xA;&lt;li&gt;要观察后视镜和对面车道的车况，记住，是任何时候，哪怕对面车道空空如也&lt;/li&gt;&#xA;&lt;li&gt;要提前打灯，不要连续变道&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;弯道和交汇口&#34;&gt;弯道和交汇口&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;必须减速，否则开的快，死得快&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;好习惯&#34;&gt;好习惯&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不要总赶时间，容易路怒&lt;/li&gt;&#xA;&lt;li&gt;脚不在油门的时候，就放刹车上！别一直放油门踏板一上&lt;/li&gt;&#xA;&lt;li&gt;正踩刹车，斜踩油门&lt;/li&gt;&#xA;&lt;li&gt;高速上，如果旁边大车开了双闪，前面一定有原因，保持距离！&lt;/li&gt;&#xA;&lt;li&gt;动车前绕车一周。看看有没有扎胎、车旁有没有小孩、有没遮你号牌&lt;/li&gt;&#xA;&lt;li&gt;慢点开，观察有没有安全距离，观察他有没有加速，没有就果断变道&lt;/li&gt;&#xA;&lt;li&gt;前面有辆电动车，你应该想着它随时会毫无预警的转弯或停下&lt;/li&gt;&#xA;&lt;li&gt;借车给别人，是对家人的不负责&lt;/li&gt;&#xA;&lt;li&gt;鬼探头，一旦左右前方减速，你也需要减速，怕前面有啥突发情况&lt;/li&gt;&#xA;&lt;li&gt;行驶过程中脚放刹车上是常态，永远都是间歇性轻点油门，持续性脚踩刹车，不会存在紧急情况下踩错&lt;/li&gt;&#xA;&lt;li&gt;雨天高速超大车一定要开雨刮器，不然你会很懵逼的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;静态检查&#34;&gt;静态检查&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;检查后、中视镜，玻璃水&lt;/li&gt;&#xA;&lt;li&gt;跑长途前的检查：机油，防冻液，轮胎，玻璃水，刹车，车灯，警示衣+三角架&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>2023中秋国庆忠县探亲</title>
      <link>http://shanks.link/blog/2023/09/27/2023%E4%B8%AD%E7%A7%8B%E5%9B%BD%E5%BA%86%E5%BF%A0%E5%8E%BF%E6%8E%A2%E4%BA%B2/</link>
      <pubDate>Wed, 27 Sep 2023 09:00:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/27/2023%E4%B8%AD%E7%A7%8B%E5%9B%BD%E5%BA%86%E5%BF%A0%E5%8E%BF%E6%8E%A2%E4%BA%B2/</guid>
      <description>&lt;h3 id=&#34;行前准备&#34;&gt;行前准备&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;个人物品准备：充足，未考虑到进入秋天，所以厚衣服未准备&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;汽车检查：很差，雨刮更换及时，轮胎气压未检查，另外未考虑到雨天夜间行车，所以车灯未准备&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;萱宝物品准备：奶瓶清洗工具未准备，睡眠被子未准备（外婆家不够），衣服准备不够（天气太潮，不容易干）&lt;/p&gt;</description>
    </item>
    <item>
      <title>代码阅读——十个C开源项目</title>
      <link>http://shanks.link/blog/2023/09/22/%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB%E5%8D%81%E4%B8%AAc%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Fri, 22 Sep 2023 14:58:44 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/22/%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB%E5%8D%81%E4%B8%AAc%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Webbench&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Webbench是一个在linux下使用的非常简单的网站压测工具。它使用fork()模拟多个客户端同时访问我们设定的URL，测试网站在压力下工作的性能，最多可以模拟3万个并发连接去测试网站的负载能力。Webbench使用C语言编写, 代码实在太简洁，源码加起来不到600行。下载链接：&lt;a href=&#34;https://cloud.tencent.com/developer/tools/blog-entry?target=http%3A%2F%2Fhome.tiscali.cz%2F~cz210552%2Fwebbench.html&#34;&gt;Web Bench Homepage&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux线程与信号</title>
      <link>http://shanks.link/blog/2023/09/22/linux%E7%BA%BF%E7%A8%8B%E4%B8%8E%E4%BF%A1%E5%8F%B7/</link>
      <pubDate>Fri, 22 Sep 2023 10:13:44 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/22/linux%E7%BA%BF%E7%A8%8B%E4%B8%8E%E4%BF%A1%E5%8F%B7/</guid>
      <description>&lt;h3 id=&#34;信号与线程的关系&#34;&gt;&lt;strong&gt;信号与线程的关系&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;POSIX标准对&lt;a href=&#34;https://so.csdn.net/so/search?q=%E5%A4%9A%E7%BA%BF%E7%A8%8B&amp;amp;spm=1001.2101.3001.7020&#34;&gt;多线程&lt;/a&gt;情况下的信号机制提出了一些要求：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;信号处理函数必须在多线程进程的&lt;strong&gt;所有线程之间共享&lt;/strong&gt;， 但是每个线程要有自己的挂起信号集合和阻塞信号掩码。&lt;/li&gt;&#xA;&lt;li&gt;POSIX函数kill/sigqueue必须面向进程， 而不是进程下的某个特定的线程。&lt;/li&gt;&#xA;&lt;li&gt;每个发给多线程应用的信号仅递送给一个线程， 这个线程是由内核从不会阻塞该信号的线程中****随意选出来****的。&lt;/li&gt;&#xA;&lt;li&gt;如果发送一个致命信号到多线程， 那么内核将杀死该应用的所有线程， 而不仅仅是接收信号的那个线程。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这些就是POSIX标准提出的要求， Linux也要遵循这些要求， 那它是怎么做到的呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>sendmsg 和 recvmsg 函数</title>
      <link>http://shanks.link/blog/2023/09/22/sendmsg-%E5%92%8C-recvmsg-%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 22 Sep 2023 10:13:44 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/22/sendmsg-%E5%92%8C-recvmsg-%E5%87%BD%E6%95%B0/</guid>
      <description>&lt;h3 id=&#34;基础介绍&#34;&gt;基础介绍&lt;/h3&gt;&#xA;&lt;p&gt;  最通用的I/O函数，只要设置好参数，read、readv、&lt;a href=&#34;https://so.csdn.net/so/search?q=recv&amp;amp;spm=1001.2101.3001.7020&#34;&gt;recv&lt;/a&gt;、recvfrom和write、writev、send、sendto等函数都可以对应换成这两个函数来调用。同时，各种输出函数调用也可以替换成&lt;code&gt;sendmsg&lt;/code&gt;调用。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ssize_t&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;recvmsg&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; sockfd, &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; msghdr *msg, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; flags);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ssizt_t&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;sendmsg&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; sockfd, &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; msghdr *msg, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; flags);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;大部分参数都在 &lt;code&gt;msghdr&lt;/code&gt;结构中&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; iovec&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{                   &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Scatter/gather array items */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *iov_base; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Starting address */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; iov_len; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Number of bytes to transfer */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; msghdr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *msg_name;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* optional address */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;socklen_t&lt;/span&gt; msg_namelen; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* size of address */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; iovec *msg_iov; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* scatter/gather array */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; msg_iovlen;   &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* # elements in msg_iov */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *msg_control;   &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ancillary data, see below */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; msg_controllen; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ancillary data buffer len */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; msg_flags;         &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* flags on received message */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;struct msghdr&lt;/code&gt; 结构体参数说明：&lt;/p&gt;</description>
    </item>
    <item>
      <title>C语言 获取随机数</title>
      <link>http://shanks.link/blog/2023/09/21/c%E8%AF%AD%E8%A8%80-%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E6%95%B0/</link>
      <pubDate>Thu, 21 Sep 2023 17:36:44 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/21/c%E8%AF%AD%E8%A8%80-%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E6%95%B0/</guid>
      <description>&lt;h2 id=&#34;srand和rand&#34;&gt;srand()和rand()&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;声明&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;rand&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;rand_r&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; *seedp);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;//线程安全版本&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;srand&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; seed);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;实例&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;time.h&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;main&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;srand&lt;/span&gt;((&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt;)&lt;span style=&#34;color:#c34e00&#34;&gt;time&lt;/span&gt;(NULL)); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; 10;i++ ) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;%d = %u&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;,i,&lt;span style=&#34;color:#c34e00&#34;&gt;rand&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;二次随机&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c34e00&#34;&gt;srand&lt;/span&gt;((&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt;)&lt;span style=&#34;color:#c34e00&#34;&gt;time&lt;/span&gt;(NULL));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; RanMe1 = &lt;span style=&#34;color:#c34e00&#34;&gt;rand&lt;/span&gt;() % 1000000;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c34e00&#34;&gt;srand&lt;/span&gt;(RanMe1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; RanMe2 = &lt;span style=&#34;color:#c34e00&#34;&gt;rand&lt;/span&gt;() % 1000000;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;srandom和random&#34;&gt;srandom()和random()&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;声明&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;random&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;srandom&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; seed);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;random_r&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; random_data *buf, &lt;span style=&#34;color:#00f&#34;&gt;int32_t&lt;/span&gt; *result);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;srandom_r&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; seed, &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; random_data *buf);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;实例&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;time.h&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;main&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;srandom&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;time&lt;/span&gt;(0));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; 10;i++ ) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;%d = %u&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;,i,&lt;span style=&#34;color:#c34e00&#34;&gt;random&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;rand-与random的区别&#34;&gt;rand 与random的区别&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/iicyl/article/details/60603092&#34;&gt;https://blog.csdn.net/iicyl/article/details/60603092&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>天涯论坛KK关于房价评价</title>
      <link>http://shanks.link/blog/2023/09/21/%E5%A4%A9%E6%B6%AF%E8%AE%BA%E5%9D%9Bkk%E5%85%B3%E4%BA%8E%E6%88%BF%E4%BB%B7%E8%AF%84%E4%BB%B7/</link>
      <pubDate>Thu, 21 Sep 2023 10:08:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/21/%E5%A4%A9%E6%B6%AF%E8%AE%BA%E5%9D%9Bkk%E5%85%B3%E4%BA%8E%E6%88%BF%E4%BB%B7%E8%AF%84%E4%BB%B7/</guid>
      <description>&lt;h1 id=&#34;kkndme_tianya持续更新中&#34;&gt;kkndme_tianya（持续更新中&amp;hellip;）&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;天涯神贴&lt;a href=&#34;http://bbs.tianya.cn/post-house-252774-1.shtml&#34;&gt;「2010年的房地产调控，我们收获了什么？写在房价暴涨前」&lt;/a&gt;脱水版，内容时间顺序和原贴一致，原贴中的优质非楼主写的内容，添加了引用格式便于区分。&lt;/p&gt;&#xA;&lt;p&gt;除标题外，所有内容均来自原贴，标题是我简单加的，目的是为了做目录，便于查看。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;帖子里的内容还没有整理完，待全部整理完：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对 &lt;strong&gt;kkndme&lt;/strong&gt; 的观点有了完整的认识后，我会在公众号&lt;code&gt;沈正方&lt;/code&gt;上写写我对这个帖子内容的思考&lt;/li&gt;&#xA;&lt;li&gt;其次，我会把本仓库的内容做成PDF，通过公众号&lt;code&gt;沈正方&lt;/code&gt;发出去，欢迎关注一起讨论！&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;微信交流群&lt;/strong&gt;：&lt;/p&gt;</description>
    </item>
    <item>
      <title> [程序员应该阅读的非编程类书籍</title>
      <link>http://shanks.link/blog/2023/09/21/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E9%98%85%E8%AF%BB%E7%9A%84%E9%9D%9E%E7%BC%96%E7%A8%8B%E7%B1%BB%E4%B9%A6%E7%B1%8D/</link>
      <pubDate>Thu, 21 Sep 2023 09:47:40 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/21/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E9%98%85%E8%AF%BB%E7%9A%84%E9%9D%9E%E7%BC%96%E7%A8%8B%E7%B1%BB%E4%B9%A6%E7%B1%8D/</guid>
      <description>&lt;p&gt;在 stackoverflow 上有人提问 &lt;a href=&#34;http://stackoverflow.com/q/38210/343194&#34;&gt;程序员应该阅读的非编程类书籍有哪些？&lt;/a&gt; 本来只想整理编程类书籍，&#xA;不过突然眼前一亮，发现了《The Art of War - Sun Tzu》回答者的推荐说明引用 Wikipedia 上的：&lt;/p&gt;&#xA;&lt;p&gt;亚马逊提供免费的　Kindle　版读本：&lt;a href=&#34;http://www.amazon.cn/gp/product/B00AA7KMKG/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3132&amp;amp;creativeASIN=B00AA7KMKG&amp;amp;linkCode=as2&amp;amp;tag=favbook-23&#34;&gt;孙子兵法&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>免费的编程中文书籍索引</title>
      <link>http://shanks.link/blog/2023/09/21/%E5%85%8D%E8%B4%B9%E7%9A%84%E7%BC%96%E7%A8%8B%E4%B8%AD%E6%96%87%E4%B9%A6%E7%B1%8D%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Thu, 21 Sep 2023 09:45:40 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/21/%E5%85%8D%E8%B4%B9%E7%9A%84%E7%BC%96%E7%A8%8B%E4%B8%AD%E6%96%87%E4%B9%A6%E7%B1%8D%E7%B4%A2%E5%BC%95/</guid>
      <description>&lt;h1 id=&#34;免费的编程中文书籍索引&#34;&gt;免费的编程中文书籍索引&lt;/h1&gt;&#xA;&lt;p&gt;免费的编程中文书籍索引，欢迎投稿。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;国外程序员在 &lt;a href=&#34;http://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read/1713%231713&#34;&gt;stackoverflow&lt;/a&gt; 推荐的程序员必读书籍，&lt;a href=&#34;http://justjavac.com/other/2012/05/15/qualified-programmer-should-read-what-books.html&#34; title=&#34;一个合格的程序员应该读过哪些书&#34;&gt;中文版&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/38210/what-non-programming-books-should-programmers-read&#34;&gt;stackoverflow&lt;/a&gt; 上的程序员应该阅读的非编程类书籍有哪些？ &lt;a href=&#34;what-non-programming-books-should-programmers-read.md&#34;&gt;中文版&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/vhf/free-programming-books&#34;&gt;github&lt;/a&gt; 上的一个流行的编程书籍索引  &lt;a href=&#34;https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md&#34;&gt;中文版&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;欢迎订阅我的微信公众帐号，只推送原创文字。欢迎扫描二维码订阅：&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4 学习笔记（六）- 实战网络层，自定义拓扑结构</title>
      <link>http://shanks.link/blog/2023/09/15/p4-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD-%E5%AE%9E%E6%88%98%E7%BD%91%E7%BB%9C%E5%B1%82%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8B%93%E6%89%91%E7%BB%93%E6%9E%84/</link>
      <pubDate>Fri, 15 Sep 2023 17:38:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/15/p4-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD-%E5%AE%9E%E6%88%98%E7%BD%91%E7%BB%9C%E5%B1%82%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8B%93%E6%89%91%E7%BB%93%E6%9E%84/</guid>
      <description>&lt;p&gt;上一篇 &lt;a href=&#34;https://zhuanlan.zhihu.com/p/350287119&#34;&gt;P4 学习笔记（五）- 实战链路层&lt;/a&gt; 里面我们实战练习了链路层的 Learning Switch，简单体验了一下和 control plane 通过 clone 和 digest 通信的过程。这篇文章，我们会练习配置一个自定义的网络拓扑结构和网络层的路由。在之前的练习的基础上，我们会接触到的新知识点有：&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4 学习笔记（五）- 实战链路层</title>
      <link>http://shanks.link/blog/2023/09/15/p4-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94-%E5%AE%9E%E6%88%98%E9%93%BE%E8%B7%AF%E5%B1%82/</link>
      <pubDate>Fri, 15 Sep 2023 17:37:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/15/p4-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94-%E5%AE%9E%E6%88%98%E9%93%BE%E8%B7%AF%E5%B1%82/</guid>
      <description>&lt;p&gt;上一篇 &lt;a href=&#34;https://zhuanlan.zhihu.com/p/348919109&#34;&gt;P4 学习笔记（四）- 实战 Reflector &amp;amp; Repeater&lt;/a&gt; 里面我们实战练习了最基础的两个例子，实现了网络包的镜像和转发，简单理解了实际开发过程中要配置的文件和使用的工具。这篇文章我们用三个例子循序渐进的学习链路层的交换机用 P4 应该如何实现。&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4 学习笔记（四）- 实战 Reflector &amp; Repeater</title>
      <link>http://shanks.link/blog/2023/09/15/p4-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B-%E5%AE%9E%E6%88%98-reflector-repeater/</link>
      <pubDate>Fri, 15 Sep 2023 17:32:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/15/p4-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B-%E5%AE%9E%E6%88%98-reflector-repeater/</guid>
      <description>&lt;p&gt;为了能够更好的练习 P4 这门语言，这一篇文章我们一起配置一下环境，实战两个简单的练习项目。&lt;/p&gt;&#xA;&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/348919109/edit#env&#34;&gt;环境配置&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/348919109/edit#reflector&#34;&gt;Packet Reflector&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/348919109/edit#file&#34;&gt;文件描述&lt;/a&gt;&lt;/em&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/348919109/edit#step&#34;&gt;开发步骤&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/348919109/edit#reflector-solution&#34;&gt;解决方案&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/348919109/edit#repeater&#34;&gt;Packet Repeater&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;环境配置&#34;&gt;环境配置&lt;/h2&gt;&#xA;&lt;p&gt;一个完整的 P4 开发环境里，我们需要编译 P4 的代码（用 p4c 编译[&lt;a href=&#34;https://zhuanlan.zhihu.com/p/348919109#ref_1&#34;&gt;1]&lt;/a&gt;），把编译好的文件跑在软件交换机上（我们会用 bmv2[&lt;a href=&#34;https://zhuanlan.zhihu.com/p/348919109#ref_2&#34;&gt;2]&lt;/a&gt;），在创建的虚拟网络拓扑结构中验证我们实现的逻辑是否是正确的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4 学习笔记（三）- 控制逻辑与完整的工作流</title>
      <link>http://shanks.link/blog/2023/09/15/p4-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89-%E6%8E%A7%E5%88%B6%E9%80%BB%E8%BE%91%E4%B8%8E%E5%AE%8C%E6%95%B4%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81/</link>
      <pubDate>Fri, 15 Sep 2023 17:29:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/15/p4-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89-%E6%8E%A7%E5%88%B6%E9%80%BB%E8%BE%91%E4%B8%8E%E5%AE%8C%E6%95%B4%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/p4/v2-44181095885c0948cfa27e421011bef4_1440w.webp&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;P4 workflow.&lt;/p&gt;&#xA;&lt;p&gt;上一篇&lt;a href=&#34;https://zhuanlan.zhihu.com/p/346936899&#34;&gt;P4 学习笔记（二）- 基础语法和 Parser&lt;/a&gt;里面我们已经看到了 P4 workflow 中第一个部分—— Deparser。这一篇文章我们一起学习一下剩下的两个部分。其中 P4 里最主要的部分就是 Match-Action Pipeline 了，这部分是实现各种不同 protocol 花式转发逻辑的精髓。我们从三个方面学习一下，也就是：&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4 学习笔记（二）- 基础语法和 Parser</title>
      <link>http://shanks.link/blog/2023/09/15/p4-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%92%8C-parser/</link>
      <pubDate>Fri, 15 Sep 2023 17:22:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/15/p4-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%92%8C-parser/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;h2 id=&#34;oerview&#34;&gt;Oerview&lt;/h2&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;这一篇文章，我们会从学习以下几个部分。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;P4 的基本数据类型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;P4 的基本语法&lt;/li&gt;&#xA;&lt;li&gt;Parser&lt;/li&gt;&#xA;&lt;li&gt;小结&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;h2 id=&#34;p4-的基本数据类型&#34;&gt;P4 的基本数据类型&lt;/h2&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;和很多静态的语言类似，P4 最基本的数据类型放在了下面，P4 不支持的数据类型有 float（浮点）和 string（字符串）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4 学习笔记（一）- 导论</title>
      <link>http://shanks.link/blog/2023/09/15/p4-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80-%E5%AF%BC%E8%AE%BA/</link>
      <pubDate>Fri, 15 Sep 2023 17:21:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/15/p4-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80-%E5%AF%BC%E8%AE%BA/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;导言&#34;&gt;导言&lt;/h2&gt;&#xA;&lt;p&gt;这几年 Programmable Hardwares（可编程硬件）越来越重要了。大家比较熟悉的可能有 FPGA 在 Machine Learning 领域针对一些特别的算法进行计算加速，包括谷歌的 TPU、苹果 M1 芯片里面的神经网络计算单元，都是在 FPGA 上面做 prototype 测试之后才做成 ASIC 产品发布出来的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>一流企业做标准：英特尔收购Barefoot背后的逻辑 P4 系列转载之 一</title>
      <link>http://shanks.link/blog/2023/09/15/%E4%B8%80%E6%B5%81%E4%BC%81%E4%B8%9A%E5%81%9A%E6%A0%87%E5%87%86%E8%8B%B1%E7%89%B9%E5%B0%94%E6%94%B6%E8%B4%ADbarefoot%E8%83%8C%E5%90%8E%E7%9A%84%E9%80%BB%E8%BE%91-p4-%E7%B3%BB%E5%88%97%E8%BD%AC%E8%BD%BD%E4%B9%8B-%E4%B8%80/</link>
      <pubDate>Fri, 15 Sep 2023 16:58:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/15/%E4%B8%80%E6%B5%81%E4%BC%81%E4%B8%9A%E5%81%9A%E6%A0%87%E5%87%86%E8%8B%B1%E7%89%B9%E5%B0%94%E6%94%B6%E8%B4%ADbarefoot%E8%83%8C%E5%90%8E%E7%9A%84%E9%80%BB%E8%BE%91-p4-%E7%B3%BB%E5%88%97%E8%BD%AC%E8%BD%BD%E4%B9%8B-%E4%B8%80/</guid>
      <description>&lt;p&gt;今年6月，英特尔宣布收购一家名为“Barefoot”的公司，旨在帮助英特尔的数据中心部门“更好的应对云数据中心客户的不断变化的各类需求”。伴随着收购，Barefoot的CEO兼总裁，Craig Barratt博士（下图右）被任命为英特尔数据中心部门旗下“互联事业部（connectivity group）”的总经理，负责英特尔以太网控制器、网卡、交换芯片等一系列网络互联产品。&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4 Runtime和p4 info 系列转载 8</title>
      <link>http://shanks.link/blog/2023/09/12/p4-runtime%E5%92%8Cp4-info-%E7%B3%BB%E5%88%97%E8%BD%AC%E8%BD%BD-8/</link>
      <pubDate>Tue, 12 Sep 2023 11:24:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/12/p4-runtime%E5%92%8Cp4-info-%E7%B3%BB%E5%88%97%E8%BD%AC%E8%BD%BD-8/</guid>
      <description>&lt;h2 id=&#34;p4runtime&#34;&gt;p4runtime&lt;/h2&gt;&#xA;&lt;p&gt;P4 Runtime是一套基于Protobuf以及gRPC框架上的协议，通过P4runtime，SDN控制器可以控制能够支援p4的设备。&lt;/p&gt;&#xA;&lt;p&gt;p4runtime当前由p4 API workgroup指定，主要来自于barefoot公司。&lt;/p&gt;</description>
    </item>
    <item>
      <title>利用p4实现ipv6转发实验 系列转载 7</title>
      <link>http://shanks.link/blog/2023/09/12/%E5%88%A9%E7%94%A8p4%E5%AE%9E%E7%8E%B0ipv6%E8%BD%AC%E5%8F%91%E5%AE%9E%E9%AA%8C-%E7%B3%BB%E5%88%97%E8%BD%AC%E8%BD%BD-7/</link>
      <pubDate>Tue, 12 Sep 2023 11:23:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/12/%E5%88%A9%E7%94%A8p4%E5%AE%9E%E7%8E%B0ipv6%E8%BD%AC%E5%8F%91%E5%AE%9E%E9%AA%8C-%E7%B3%BB%E5%88%97%E8%BD%AC%E8%BD%BD-7/</guid>
      <description>&lt;h3 id=&#34;写在前面&#34;&gt;写在前面&lt;/h3&gt;&#xA;&lt;p&gt;只是作为一个入门p4的实验尝试，借用了一些即成的运行代码。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;p4代码&#34;&gt;p4代码&lt;/h3&gt;&#xA;&lt;p&gt;/&lt;strong&gt;p4_16,v1_model&lt;/strong&gt;/&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/p4/1329608-20190222152127575-1085498091.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/p4/1329608-20190222152330056-343296360.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&amp;lt;core.p4&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&amp;lt;v1model.p4&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; bit&amp;lt;16&amp;gt; TYPE_IPV6 = 0x08DD;//ipv6在以太网中的id&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; /*HEADERS*/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; typedef bit&amp;lt;9&amp;gt; egressSpec_t;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; typedef bit&amp;lt;48&amp;gt; macAddr_t;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; header ethernet_t{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     macAddr_t dstAddr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     macAddr_t srcAddr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     bit&amp;lt;16&amp;gt; etherType;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; header ipv6_t{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     bit&amp;lt;4&amp;gt; version;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     bit&amp;lt;8&amp;gt; trafficClass;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     bit&amp;lt;20&amp;gt; flowLabel;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     bit&amp;lt;16&amp;gt; payLoadLen;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     bit&amp;lt;8&amp;gt; nextHdr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     bit&amp;lt;8&amp;gt; hopLimit;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     bit&amp;lt;128&amp;gt; srcAddr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     bit&amp;lt;128&amp;gt; dstAddr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; struct metadata{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; struct headers{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ethernet_t ethernet;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ipv6_t ipv6;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; /*PARSER*/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; parser MyParser(packet_in packet,out headers hdr,inout metadata meta,inout standard_metadata_t standard_metadata){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     state start{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         transition parse_ethernet;//start开始先以底层eth解析&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     state parse_ethernet{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         packet.extract(hdr.ethernet);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         transition select(hdr.ethernet.etherType){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             TYPE_IPV6:parse_ipv6;//转至ipv6解析&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             default:accept;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     state parse_ipv6{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         packet.extract(hdr.ipv6);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         transition accept;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; /*CHECKSUM VERIFICATION*/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;control MyVerifyChecksum(inout headers hdr,inout metadata meta){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    apply{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; /*INGRESS PROCESSING*/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; control MyIngress(inout headers hdr,inout metadata meta,inout standard_metadata_t standard_metadata){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     action drop(){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         mark_to_drop();//将要丢弃的包标记为丢弃&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     action ipv6_forward(macAddr_t dstAddr,egressSpec_t port){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         standard_metadata.egress_spec = port;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         hdr.ethernet.srcAddr = hdr.ethernet.dstAddr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         hdr.ethernet.dstAddr = dstAddr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         hdr.ipv6.hopLimit = hdr.ipv6.hopLimit - 1;//这个类似ipv4中ttl，为0时就超时&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     table ipv6_lpm{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         key = {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             hdr.ipv6.dstAddr: lpm;//lpm是最长前缀匹配，exact完全匹配，ternary三元匹配&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         actions = {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             ipv6_forward;//转发&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             drop;//丢弃&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             NoAction;//空动作&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         size = 1024;//流表项容量&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         default_action = drop();//table miss则丢弃&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     apply{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt;(hdr.ipv6.isValid()){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             ipv6_lpm.apply();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; /*EGRESS PROCESSING*/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; control MyEgress(inout headers hdr,inout metadata meta,inout standard_metadata_t standard_metadata){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     apply{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; /*CHECKSUM COMPUTATION*/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; control MyComputeChecksum(inout headers hdr,inout metadata meta){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     apply{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; /*DEPARSER*/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; control MyDeparser(packet_out packet,in headers hdr){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     apply{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         packet.emit(hdr.ethernet);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         packet.emit(hdr.ipv6);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; /*SWITCH*/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; V1Switch(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; MyParser(),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; MyVerifyChecksum(),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; MyIngress(),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; MyEgress(),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; MyComputeChecksum(),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; MyDeparser()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; )main;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h3 id=&#34;实验拓扑&#34;&gt;实验拓扑&lt;/h3&gt;&#xA;&lt;p&gt;这里实验的拓扑用来最简单的一个交换机下挂两个主机，交换机是bmv2。其json文件书写如下： 交换机s1的流表项通过s1-commands.txt文件定义。&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4语法（5） Package 系列转载 6</title>
      <link>http://shanks.link/blog/2023/09/12/p4%E8%AF%AD%E6%B3%955-package-%E7%B3%BB%E5%88%97%E8%BD%AC%E8%BD%BD-6/</link>
      <pubDate>Tue, 12 Sep 2023 10:48:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/12/p4%E8%AF%AD%E6%B3%955-package-%E7%B3%BB%E5%88%97%E8%BD%AC%E8%BD%BD-6/</guid>
      <description>&lt;h2 id=&#34;package&#34;&gt;Package&lt;/h2&gt;&#xA;&lt;p&gt;对于package这个概念，类似于将一个框架中各组成部件以一个规律进行打包，以正常运转。&lt;/p&gt;&#xA;&lt;p&gt;基于一个架构去编写一个新的pipeline的时候，需要先了解初始化的时候需要提供那些东西，parser，ingress或一些校验的模块。&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4语法（4）Control block  转载系列 5</title>
      <link>http://shanks.link/blog/2023/09/12/p4%E8%AF%AD%E6%B3%954control-block-%E8%BD%AC%E8%BD%BD%E7%B3%BB%E5%88%97-5/</link>
      <pubDate>Tue, 12 Sep 2023 10:45:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/12/p4%E8%AF%AD%E6%B3%954control-block-%E8%BD%AC%E8%BD%BD%E7%B3%BB%E5%88%97-5/</guid>
      <description>&lt;h2 id=&#34;control-block&#34;&gt;Control block&lt;/h2&gt;&#xA;&lt;p&gt;Control block之中用于放置设计好的Table和Action。&lt;/p&gt;&#xA;&lt;p&gt;可以把control block认为是pipeline的一个模板，之前用的v1model中就是ingress和egress。 不同的架构中的control block格式不同。 其主要的功能就是知道每一个封包经过的table顺序以及采用的规则（触发条件等）。还能放置一些其他的功能部件，例如计数器counter等。&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4语法（3）Table，Action 转载系列 4</title>
      <link>http://shanks.link/blog/2023/09/12/p4%E8%AF%AD%E6%B3%953tableaction-%E8%BD%AC%E8%BD%BD%E7%B3%BB%E5%88%97-4/</link>
      <pubDate>Tue, 12 Sep 2023 10:40:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/12/p4%E8%AF%AD%E6%B3%953tableaction-%E8%BD%AC%E8%BD%BD%E7%B3%BB%E5%88%97-4/</guid>
      <description>&lt;h2 id=&#34;table&#34;&gt;Table&lt;/h2&gt;&#xA;&lt;p&gt;table是p4的匹配——动作表，定义了匹配字段（key）、动作（action）和一些其他相关属性。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/p4/1329608-20190302163135525-821980990.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;其处理数据包的流程：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Key construction.建立其匹配字段&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4 语法之 Parser 转载系列 3</title>
      <link>http://shanks.link/blog/2023/09/12/p4-%E8%AF%AD%E6%B3%95%E4%B9%8B-parser-%E8%BD%AC%E8%BD%BD%E7%B3%BB%E5%88%97-3/</link>
      <pubDate>Tue, 12 Sep 2023 10:25:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/12/p4-%E8%AF%AD%E6%B3%95%E4%B9%8B-parser-%E8%BD%AC%E8%BD%BD%E7%B3%BB%E5%88%97-3/</guid>
      <description>&lt;p&gt;这里参考学习了：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://p4.org/p4-spec/docs/P4-16-v1.1.0-spec.html&#34;&gt;P4语言规范&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;parser&#34;&gt;Parser&lt;/h2&gt;&#xA;&lt;h3 id=&#34;关于parser&#34;&gt;关于parser&lt;/h3&gt;&#xA;&lt;p&gt;在P4程序中，有着大量的首部（header）和首部实例，但每次只有部分首部实例会对数据包进行操作，而parser会用于生成描述数据包进行哪些匹配动作操作的中间表示（Intermediate Representation），这些解析后表示规定了对数据包生效的实例，可以认为是一组对数据包生效的实例的集合。&lt;/p&gt;</description>
    </item>
    <item>
      <title>基础数据类型和Header-转载系列 2</title>
      <link>http://shanks.link/blog/2023/09/12/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8Cheader-%E8%BD%AC%E8%BD%BD%E7%B3%BB%E5%88%97-2/</link>
      <pubDate>Tue, 12 Sep 2023 09:49:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/12/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8Cheader-%E8%BD%AC%E8%BD%BD%E7%B3%BB%E5%88%97-2/</guid>
      <description>&lt;p&gt;文章学习自：&lt;a href=&#34;https://www.sdnlab.com/17882.html&#34;&gt;P4语言编程详解&lt;/a&gt;&#xA;由于原文有一点的年份，所以也继续阅读了相关的最新规范。&#xA;&lt;a href=&#34;https://p4.org/p4-spec/docs/P4-16-v1.1.0-spec.html&#34;&gt;P4语言规范&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;基础数据类型&#34;&gt;基础数据类型&lt;/h2&gt;&#xA;&lt;h3 id=&#34;布尔型bool&#34;&gt;布尔型（bool）&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;运算符&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;and&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;双目运算符，结果为布尔型&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;or&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;双目运算符，结果为布尔型&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;not&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;单目运算符，结果为布尔型&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;==，!=&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;相等或不等，结果为布尔型&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;无符号整型bit&#34;&gt;无符号整型（bit）&lt;/h3&gt;&#xA;&lt;p&gt;又称之为位串（bit-string），对位串进行数学运算的时候，位串长度必须是8的整数倍。&lt;/p&gt;</description>
    </item>
    <item>
      <title>用P4对数据平面进行编程-转载系列 1</title>
      <link>http://shanks.link/blog/2023/09/12/%E7%94%A8p4%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%B9%B3%E9%9D%A2%E8%BF%9B%E8%A1%8C%E7%BC%96%E7%A8%8B-%E8%BD%AC%E8%BD%BD%E7%B3%BB%E5%88%97-1/</link>
      <pubDate>Tue, 12 Sep 2023 09:39:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/12/%E7%94%A8p4%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%B9%B3%E9%9D%A2%E8%BF%9B%E8%A1%8C%E7%BC%96%E7%A8%8B-%E8%BD%AC%E8%BD%BD%E7%B3%BB%E5%88%97-1/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;关于题目，对数据平面进行编程，在之前读过the road to SDN，软件定义网络的思想在于数控分离，其对网络行为的编程暂时只局限于网络控制平面。其转发平面在很大程度上受制于功能固定的包处理硬件。而P4语言的出现就是为了完全摆脱网络数据平面的束缚。P4被称作为完全可编程南向编程接口，其提出的目的就是为了解决Openflow编程能力不足及其设计本身所存在的可拓展性差的难题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>思绪随风飘散，偶尔在这里停留</title>
      <link>http://shanks.link/blog/2023/09/11/%E6%80%9D%E7%BB%AA%E9%9A%8F%E9%A3%8E%E9%A3%98%E6%95%A3%E5%81%B6%E5%B0%94%E5%9C%A8%E8%BF%99%E9%87%8C%E5%81%9C%E7%95%99/</link>
      <pubDate>Mon, 11 Sep 2023 14:13:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/11/%E6%80%9D%E7%BB%AA%E9%9A%8F%E9%A3%8E%E9%A3%98%E6%95%A3%E5%81%B6%E5%B0%94%E5%9C%A8%E8%BF%99%E9%87%8C%E5%81%9C%E7%95%99/</guid>
      <description>&lt;h3 id=&#34;告别时代&#34;&gt;告别时代&lt;/h3&gt;&#xA;&lt;p&gt;​&#x9;我们不是在经济下行周期，而是一个时代的落幕 2024.05.15&lt;/p&gt;&#xA;&lt;h3 id=&#34;一句话总结前半生&#34;&gt;一句话总结前半生&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;只会我行我素，从不思考与反思，结果便是今天这个一塌糊涂的样子。 2023.9.11&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;假努力&#34;&gt;假努力&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不反思与总结，只不过是假努力罢了 2024.1.16&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;关于年纪&#34;&gt;关于年纪&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;年轻的时候可以靠一腔热血走天下，老了只能靠坚持&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;关于速成&#34;&gt;关于速成&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当我想学习一门技能时，第一个想到的词便是速成，似乎离开学校后，就没有安心下来学习过一门技能，想想自己精通什么?什么都不精通，这算的上是一个悲剧。2023.9.11&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;说错话&#34;&gt;说错话&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;为什么说错话或者说错词，还不是说出口之前没有过脑子罢了。2023.9.11&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>OpenFlow协议之殇？</title>
      <link>http://shanks.link/blog/2023/09/08/openflow%E5%8D%8F%E8%AE%AE%E4%B9%8B%E6%AE%87/</link>
      <pubDate>Fri, 08 Sep 2023 17:47:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/08/openflow%E5%8D%8F%E8%AE%AE%E4%B9%8B%E6%AE%87/</guid>
      <description>&lt;h1 id=&#34;openflow协议之殇&#34;&gt;OpenFlow协议之殇？&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.douban.com/people/SDNLAB/&#34;&gt;&lt;img src=&#34;https://img1.doubanio.com/icon/u102948857-7.jpg&#34; alt=&#34;SDNLAB&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.douban.com/people/SDNLAB/&#34;&gt;SDNLAB&lt;/a&gt; 2015-07-16 13:17:28&lt;/p&gt;&#xA;&lt;p&gt;在过去，OpenFlow一度是SDN的代名词，只要是SDN出现的地方就不得不谈到OpenFlow。不过现今，SDN似乎对OpenFlow并不是很热情，在谈论SDN时，OpenFlow也不再是标配了。这个曾经的唯一选择究竟遇到了什么，难道这是OpenFlow协议之殇？&lt;/p&gt;</description>
    </item>
    <item>
      <title>从P4 WORKSHOP 2021看P4的发展趋势</title>
      <link>http://shanks.link/blog/2023/09/08/%E4%BB%8Ep4-workshop-2021%E7%9C%8Bp4%E7%9A%84%E5%8F%91%E5%B1%95%E8%B6%8B%E5%8A%BF/</link>
      <pubDate>Fri, 08 Sep 2023 17:41:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/08/%E4%BB%8Ep4-workshop-2021%E7%9C%8Bp4%E7%9A%84%E5%8F%91%E5%B1%95%E8%B6%8B%E5%8A%BF/</guid>
      <description>&lt;h1 id=&#34;p4-概述&#34;&gt;P4 概述&lt;/h1&gt;&#xA;&lt;p&gt;2013年， 当时还在德州仪器（TI）的 Pat Bosshart，联合斯坦福Nick、微软研究院的 George 等人在SIGCOMM上提出了一种RMT交换机实现，其实现了网络协议的自定义解析，自定义匹配、处理、转发，这个就是现在Intel Tofino 芯片的原型。但当时相关网络编程语言与编译器还未完善。&lt;/p&gt;</description>
    </item>
    <item>
      <title> .gitignore File – How to Ignore Files and Folders in Git .gitignore 文件——如何在 Git 中忽略文件和文件夹</title>
      <link>http://shanks.link/blog/2023/09/08/.gitignore-file-how-to-ignore-files-and-folders-in-git-.gitignore-%E6%96%87%E4%BB%B6%E5%A6%82%E4%BD%95%E5%9C%A8-git-%E4%B8%AD%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9/</link>
      <pubDate>Fri, 08 Sep 2023 17:30:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/08/.gitignore-file-how-to-ignore-files-and-folders-in-git-.gitignore-%E6%96%87%E4%BB%B6%E5%A6%82%E4%BD%95%E5%9C%A8-git-%E4%B8%AD%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9/</guid>
      <description>&lt;p&gt;&lt;strong&gt;原文：&lt;/strong&gt; &lt;a href=&#34;https://www.freecodecamp.org/news/gitignore-file-how-to-ignore-files-and-folders-in-git/&#34;&gt;.gitignore File – How to Ignore Files and Folders in Git&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Git 是一个流行的版本控制系统。开发人员通过它可以在项目上进行协作。&lt;/p&gt;&#xA;&lt;p&gt;Git 允许你跟踪你在一段时间内对项目所做的修改。除此之外，如果你想撤销某个改动，它还可以让你恢复到以前的版本。&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4的产业应用之路</title>
      <link>http://shanks.link/blog/2023/09/06/p4%E7%9A%84%E4%BA%A7%E4%B8%9A%E5%BA%94%E7%94%A8%E4%B9%8B%E8%B7%AF/</link>
      <pubDate>Wed, 06 Sep 2023 16:05:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/06/p4%E7%9A%84%E4%BA%A7%E4%B8%9A%E5%BA%94%E7%94%A8%E4%B9%8B%E8%B7%AF/</guid>
      <description>&lt;p&gt;P4（Programming Protocol-Independent Packet Processors）是一种开源的、数据面的高级编程语言，专为编程可重构网络而设计。P4自诞生以来便引起了学术界与工业界的广泛关注，不仅各大顶级会议和期刊上P4 相关的学术论文大量涌现，谷歌、AT&amp;amp;T、阿里巴巴、腾讯等在内的超过 100 家世界知名大型公司也已加入 P4 语言联盟，产业界掀起了P4应用与探索的浪潮。&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4语言详解</title>
      <link>http://shanks.link/blog/2023/09/06/p4%E8%AF%AD%E8%A8%80%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 06 Sep 2023 15:27:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/06/p4%E8%AF%AD%E8%A8%80%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;p&gt;在文章《&lt;a href=&#34;https://www.sdnlab.com/17795.html&#34;&gt;P4:开创数据平面可编程时代&lt;/a&gt;》中介绍了P4的架构特性、交换机结构以及P4程序的工作原理，本篇为大家介绍P4语言编码及规范，从编码角度去理解P4程序的工作流程。&lt;/p&gt;&#xA;&lt;h1 id=&#34;源码目录结构&#34;&gt;源码目录结构&lt;/h1&gt;&#xA;&lt;p&gt;P4项目源码可以在github上直接获取（https://github.com/p4lang）。P4项目由很多个单独的模块组成，每个模块就是一个子项目，下面分别简单介绍一下各模块的功能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4编程理论与实践——实践篇</title>
      <link>http://shanks.link/blog/2023/09/06/p4%E7%BC%96%E7%A8%8B%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E5%AE%9E%E8%B7%B5%E7%AF%87/</link>
      <pubDate>Wed, 06 Sep 2023 10:48:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/06/p4%E7%BC%96%E7%A8%8B%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E5%AE%9E%E8%B7%B5%E7%AF%87/</guid>
      <description>&lt;h2 id=&#34;本文内容简介&#34;&gt;本文内容简介&lt;/h2&gt;&#xA;&lt;p&gt;本文首先向大家简单介绍在学习P4过程中需要用到的工具。&lt;strong&gt;本文的主要特色是让对P4感兴趣的大家不费吹灰之力的在工作，学习之余，快速搭建完善的P4实验环境并开始第一个P4实验。&lt;strong&gt;本文的更新日期是&lt;/strong&gt;2018年10月8日&lt;/strong&gt;，使用相对于大多数教程来说较新的P4环境，本文提供两种搭建环境的方法，它们的特点如下：&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4编程理论与实践——理论篇</title>
      <link>http://shanks.link/blog/2023/09/06/p4%E7%BC%96%E7%A8%8B%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E7%90%86%E8%AE%BA%E7%AF%87/</link>
      <pubDate>Wed, 06 Sep 2023 10:37:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/06/p4%E7%BC%96%E7%A8%8B%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E7%90%86%E8%AE%BA%E7%AF%87/</guid>
      <description>&lt;p&gt;&lt;strong&gt;简介：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;由于对SDN充满着兴趣，在学习了一段时间OpenFlow之后，一次偶然的机会接触到了P4。P4可以实现很多新的Idea，但是无奈于国内的实践资料太少了（有些资料似乎比较陈旧了）。唯一的学习来源是官网的英文实例教程，但是摸索起来很费时间。因此本人打算把自己的探索经验，写成一个专题，和大家分享，学习，交流。着重点是实践而非理论，有不正确的地方欢迎批评指正。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN 在 Mac 上编译</title>
      <link>http://shanks.link/blog/2023/08/31/openvpn-%E5%9C%A8-mac-%E4%B8%8A%E7%BC%96%E8%AF%91/</link>
      <pubDate>Thu, 31 Aug 2023 15:17:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/31/openvpn-%E5%9C%A8-mac-%E4%B8%8A%E7%BC%96%E8%AF%91/</guid>
      <description>&lt;h3 id=&#34;下载&#34;&gt;下载&lt;/h3&gt;&#xA;&lt;p&gt;下面的 url 以实际地址为准&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://swupdate.openvpn.org/community/releases/openvpn-2.6.6.tar.gz&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;依赖库&#34;&gt;依赖库&lt;/h3&gt;&#xA;&lt;p&gt;设置依赖库的路径，避免 libssl 库 too old 的问题，路径以实际的为准x86和arm架构不一样&lt;/p&gt;&#xA;&lt;p&gt;以下是 x86架构对应的参数&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;export PATH=&amp;#34;/usr/local/opt/openssl@3/bin:$PATH&amp;#34;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.zshrc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export LDFLAGS=&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;-L/usr/local/opt/openssl@3/lib&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export CPPFLAGS=&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;-I/usr/local/opt/openssl@3/include&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下是arm架构对应的参数&lt;/p&gt;</description>
    </item>
    <item>
      <title>局域网中的其它PC访问VMware主机</title>
      <link>http://shanks.link/blog/2023/08/31/%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%AD%E7%9A%84%E5%85%B6%E5%AE%83pc%E8%AE%BF%E9%97%AEvmware%E4%B8%BB%E6%9C%BA/</link>
      <pubDate>Thu, 31 Aug 2023 11:54:32 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/31/%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%AD%E7%9A%84%E5%85%B6%E5%AE%83pc%E8%AE%BF%E9%97%AEvmware%E4%B8%BB%E6%9C%BA/</guid>
      <description>&lt;p&gt;&lt;strong&gt;设置网络适配器模式为桥接&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;img src=&#34;http://shanks.link/img/%E8%BF%90%E7%BB%B4/25072300_619ec9542ca0a77889.webp?size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=/format,webp/resize,m_fixed,w_1184&#34; alt=&#34;&#34;&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;img src=&#34;http://shanks.link/img/%E8%BF%90%E7%BB%B4/25072300_619ec9545a87324675.webp?size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=/format,webp/resize,m_fixed,w_1184&#34; alt=&#34;&#34;&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;进入虚拟网络编辑器将模式为桥接模式&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;img src=&#34;http://shanks.link/img/%E8%BF%90%E7%BB%B4/25072300_619ec95478b456324.webp?size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=/format,webp/resize,m_fixed,w_1184&#34; alt=&#34;&#34;&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;img src=&#34;http://shanks.link/img/%E8%BF%90%E7%BB%B4/25072300_619ec954c37f020653.webp?size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=/format,webp/resize,m_fixed,w_1184&#34; alt=&#34;&#34;&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Vm内查看ip地址&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;img src=&#34;http://shanks.link/img/%E8%BF%90%E7%BB%B4/25072301_619ec9550415972254.webp?size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=/format,webp/resize,m_fixed,w_1184&#34; alt=&#34;&#34;&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;如果与本地不相同，使用 vi /etc/sysconfig/network-scripts/ifcfg-eth0 对文件内IP地址进行修改：&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>DNS原理介绍</title>
      <link>http://shanks.link/blog/2023/08/28/dns%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Mon, 28 Aug 2023 10:01:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/28/dns%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;p&gt;本文主要包括DNS的简单介绍，DNS查询的原理介绍和DNS负载均衡应用的简单介绍。&lt;/p&gt;&#xA;&lt;h2 id=&#34;dns简介&#34;&gt;DNS简介&lt;/h2&gt;&#xA;&lt;h2 id=&#34;什么是dns&#34;&gt;&lt;strong&gt;什么是DNS&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;首先我们来了解DNS是什么。下面引用维基百科的解释：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;域名系统（英语：Domain Name System，缩写：DNS）是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS使用TCP和UDP端口53。当前，对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符。&lt;/p&gt;</description>
    </item>
    <item>
      <title>洛带古镇自驾游</title>
      <link>http://shanks.link/blog/2023/08/26/%E6%B4%9B%E5%B8%A6%E5%8F%A4%E9%95%87%E8%87%AA%E9%A9%BE%E6%B8%B8/</link>
      <pubDate>Sat, 26 Aug 2023 20:00:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/26/%E6%B4%9B%E5%B8%A6%E5%8F%A4%E9%95%87%E8%87%AA%E9%A9%BE%E6%B8%B8/</guid>
      <description>&lt;h3 id=&#34;适合人群&#34;&gt;适合人群&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;全家老小或者学生和情侣&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;行程安排&#34;&gt;行程安排&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;半天即可，如果对日出感兴趣，可以顺带在旁边的龙泉山看日出和摘桃子&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;景点介绍&#34;&gt;景点介绍&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;以前事客家人聚集地，一个典型的客家人居住的大House+一条几百米长的现代商业街&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;实景图&#34;&gt;实景图&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/%E6%97%85%E6%B8%B8/20230926173630.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>1小时学会P4-16编程基础</title>
      <link>http://shanks.link/blog/2023/08/25/1%E5%B0%8F%E6%97%B6%E5%AD%A6%E4%BC%9Ap4-16%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Fri, 25 Aug 2023 14:27:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/25/1%E5%B0%8F%E6%97%B6%E5%AD%A6%E4%BC%9Ap4-16%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://bbs.huaweicloud.com/community/usersnew/id_1556361681406159&#34;&gt;荷包蛋好吃&lt;/a&gt; 发表于 2021/07/29 19:23:24&lt;/p&gt;&#xA;&lt;h1 id=&#34;p4开源项目&#34;&gt;P4开源项目&lt;/h1&gt;&#xA;&lt;p&gt;P4项目源码可以在github上直接获取（https://github.com/p4lang）。&lt;/p&gt;&#xA;&lt;h2 id=&#34;项目关系&#34;&gt;项目关系&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;项目关系&lt;/strong&gt;如下：&#xA;&lt;img src=&#34;http://shanks.link/img/p4/image_641.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;高级语言层：高级抽象的P4语言编写程序&lt;/li&gt;&#xA;&lt;li&gt;前端编译器：对高级语言进行与目标无关的语义分析并生产中间表示&lt;/li&gt;&#xA;&lt;li&gt;中间表示层：高级语言中间表示，可转换成多种其他语言&lt;/li&gt;&#xA;&lt;li&gt;后端编译器：将中间表示转换为目标平台机器码&lt;/li&gt;&#xA;&lt;li&gt;目标对象层：受控制硬件/软件设备&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;项目功能&#34;&gt;项目功能&lt;/h2&gt;&#xA;&lt;p&gt;P4项目由很多个单独的模块组成，每个模块就是一个子项目，&lt;strong&gt;各子项目功能&lt;/strong&gt;介绍如下：&lt;/p&gt;</description>
    </item>
    <item>
      <title>【BPF入门系列-11】EBFP 和 GO 之初探编程</title>
      <link>http://shanks.link/blog/2023/08/25/bpf%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97-11ebfp-%E5%92%8C-go-%E4%B9%8B%E5%88%9D%E6%8E%A2%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Fri, 25 Aug 2023 14:18:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/25/bpf%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97-11ebfp-%E5%92%8C-go-%E4%B9%8B%E5%88%9D%E6%8E%A2%E7%BC%96%E7%A8%8B/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.ebpf.top/&#34;&gt;深入浅出 eBPF&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;本文地址：https://www.ebpf.top/post/head_first_bpf&lt;/p&gt;&#xA;&lt;p&gt;eBPF 从创建开始，短短数年（7年），至今就已经被认为是过去 50 年来操作系统最大的变更，那么 eBPF 技术到底给我们带来了什么样的超能力，以至于得到如此高的评价？ 本文从以下内容入手，对 eBPF 技术进行了全面的概述：&lt;/p&gt;</description>
    </item>
    <item>
      <title>BPF BTF 详解</title>
      <link>http://shanks.link/blog/2023/08/25/bpf-btf-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 25 Aug 2023 11:56:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/25/bpf-btf-%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.ebpf.top/&#34;&gt;深入浅出 eBPF&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;本文地址：https://www.ebpf.top/post/kernel_btf/&lt;/p&gt;&#xA;&lt;p&gt;英文文档：https://www.kernel.org/doc/html/latest/bpf/btf.html&lt;/p&gt;</description>
    </item>
    <item>
      <title>【BPF入门系列-11】EBFP 和 GO 之初探编程</title>
      <link>http://shanks.link/blog/2023/08/25/bpf%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97-11ebfp-%E5%92%8C-go-%E4%B9%8B%E5%88%9D%E6%8E%A2%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Fri, 25 Aug 2023 11:55:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/25/bpf%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97-11ebfp-%E5%92%8C-go-%E4%B9%8B%E5%88%9D%E6%8E%A2%E7%BC%96%E7%A8%8B/</guid>
      <description>&lt;p&gt;原文地址：https://networkop.co.uk/post/2021-03-ebpf-intro/&lt;/p&gt;&#xA;&lt;p&gt;本站相关文档：&lt;a href=&#34;https://www.ebpf.top/post/ebpf_go/&#34;&gt;使用 Go 语言管理和分发 ebpf 程序&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>基于 eBPF 的网络监测实践</title>
      <link>http://shanks.link/blog/2023/08/24/%E5%9F%BA%E4%BA%8E-ebpf-%E7%9A%84%E7%BD%91%E7%BB%9C%E7%9B%91%E6%B5%8B%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Thu, 24 Aug 2023 17:36:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/24/%E5%9F%BA%E4%BA%8E-ebpf-%E7%9A%84%E7%BD%91%E7%BB%9C%E7%9B%91%E6%B5%8B%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.ebpf.top/&#34;&gt;深入浅出 eBPF&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.ebpf.top/&#34;&gt;首页&lt;/a&gt; &lt;a href=&#34;https://www.ebpf.top/what-is-ebpf/&#34;&gt;eBPF 技术报告&lt;/a&gt; &lt;a href=&#34;https://www.ebpf.top/about/&#34;&gt;关于&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;本文地址：https://www.ebpf.top/post/ebpf_network_exporter&lt;/p&gt;&#xA;&lt;p&gt;公有云网络问题，是一个老生常谈的事情了。今天主要简单说明下，在内网环境下去分析 &amp;amp; 定位这个问题。也并不是一开始就需要 eBPF 加持的，可以从简单的基础工具到监控配合去相关比较快速的定位问题，解决问题。下面会从发现问题到一步步配合使用 Or 开发一些简单的东西去解决问题的大致思路。&lt;/p&gt;</description>
    </item>
    <item>
      <title>【BPF入门系列-11】使用 eBPF 技术跟踪 Netfilter 数据流过滤结果</title>
      <link>http://shanks.link/blog/2023/08/24/bpf%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97-11%E4%BD%BF%E7%94%A8-ebpf-%E6%8A%80%E6%9C%AF%E8%B7%9F%E8%B8%AA-netfilter-%E6%95%B0%E6%8D%AE%E6%B5%81%E8%BF%87%E6%BB%A4%E7%BB%93%E6%9E%9C/</link>
      <pubDate>Thu, 24 Aug 2023 17:26:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/24/bpf%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97-11%E4%BD%BF%E7%94%A8-ebpf-%E6%8A%80%E6%9C%AF%E8%B7%9F%E8%B8%AA-netfilter-%E6%95%B0%E6%8D%AE%E6%B5%81%E8%BF%87%E6%BB%A4%E7%BB%93%E6%9E%9C/</guid>
      <description>&lt;h2 id=&#34;网络层数据流向与-netfilter-体系&#34;&gt;网络层数据流向与 Netfilter 体系&lt;/h2&gt;&#xA;&lt;p&gt;图 1-1 为网络层内核收发核心流程图，在函数流程图中我们可以看到 &lt;code&gt;Netfliter&lt;/code&gt; 在其中的位置（图中深色底纹圆角矩形）。图中对应的 &lt;code&gt;hook&lt;/code&gt; 点有 5 个，每个&lt;code&gt;hook&lt;/code&gt; 点中保存一组按照优先级排序的函数列表：&lt;/p&gt;</description>
    </item>
    <item>
      <title>【BPF入门系列-10】使用 tracepoint 跟踪文件 open 系统调用</title>
      <link>http://shanks.link/blog/2023/08/24/bpf%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97-10%E4%BD%BF%E7%94%A8-tracepoint-%E8%B7%9F%E8%B8%AA%E6%96%87%E4%BB%B6-open-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</link>
      <pubDate>Thu, 24 Aug 2023 16:35:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/24/bpf%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97-10%E4%BD%BF%E7%94%A8-tracepoint-%E8%B7%9F%E8%B8%AA%E6%96%87%E4%BB%B6-open-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</guid>
      <description>&lt;h2 id=&#34;什么是-tracepoint&#34;&gt;什么是 tracepoint&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;tracepoint&lt;/code&gt; 的介绍可以参见 &lt;a href=&#34;https://www.kernel.org/doc/html/latest/trace/tracepoints.html&#34;&gt;Kernel 文档这里&lt;/a&gt;。从 Linux 内核 4.7 开始，eBPF 程序可以挂载到内核跟踪点 &lt;code&gt;tracepoint&lt;/code&gt;。在此之前，要完成内核中函数跟踪的工作，只能用 &lt;code&gt;kprobes/kretprobe&lt;/code&gt; 等方式挂载到导出的内核函数（参见 &lt;code&gt;/proc/kallsyms&lt;/code&gt;），正如我们前几篇文章跟踪 &lt;code&gt;open&lt;/code&gt; 系统调用方式那样。尽管 &lt;code&gt;kprobes&lt;/code&gt; 可以达到跟踪的目的，但存在很多不足：&lt;/p&gt;</description>
    </item>
    <item>
      <title>【BPF入门系列-9】文件打开记录结果跟踪篇</title>
      <link>http://shanks.link/blog/2023/08/24/bpf%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97-9%E6%96%87%E4%BB%B6%E6%89%93%E5%BC%80%E8%AE%B0%E5%BD%95%E7%BB%93%E6%9E%9C%E8%B7%9F%E8%B8%AA%E7%AF%87/</link>
      <pubDate>Thu, 24 Aug 2023 16:31:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/24/bpf%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97-9%E6%96%87%E4%BB%B6%E6%89%93%E5%BC%80%E8%AE%B0%E5%BD%95%E7%BB%93%E6%9E%9C%E8%B7%9F%E8%B8%AA%E7%AF%87/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;在&lt;a href=&#34;https://www.ebpf.top/post/ebpf_trace_file_open_perf_output/&#34;&gt;上篇文章&lt;/a&gt;中我们为文件 &lt;code&gt;open&lt;/code&gt;系统调用采用了 &lt;code&gt;perf_event&lt;/code&gt; 的方式将数据从内核上报至用户程序。但是到目前为止，我们只是实现了文件打开记录的跟踪，并没有对文件访问的结果是成功还是失败进行展示。&lt;/p&gt;</description>
    </item>
    <item>
      <title>【BPF入门系列-8】文件打开记录跟踪之 perf_event 篇</title>
      <link>http://shanks.link/blog/2023/08/24/bpf%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97-8%E6%96%87%E4%BB%B6%E6%89%93%E5%BC%80%E8%AE%B0%E5%BD%95%E8%B7%9F%E8%B8%AA%E4%B9%8B-perf_event-%E7%AF%87/</link>
      <pubDate>Thu, 24 Aug 2023 16:27:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/24/bpf%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97-8%E6%96%87%E4%BB%B6%E6%89%93%E5%BC%80%E8%AE%B0%E5%BD%95%E8%B7%9F%E8%B8%AA%E4%B9%8B-perf_event-%E7%AF%87/</guid>
      <description>&lt;h2 id=&#34;ebpf_perf_output-介绍&#34;&gt;ebpf_perf_output 介绍&lt;/h2&gt;&#xA;&lt;p&gt;在上一篇 &lt;a href=&#34;https://www.ebpf.top/post/ebpf_trace_file_open/&#34;&gt;”使用 ebpf 实时持续跟踪进程文件记录“ &lt;/a&gt;中，我们简单介绍了使用 eBPF 跟踪文件打开记录的跟踪。为了简单演示功能，我们直接使用了 &lt;code&gt;bpf_trace_printk&lt;/code&gt; 进行演示，正如上文所述，&lt;code&gt;bpf_trace_printk&lt;/code&gt; 存在一些限制：&lt;/p&gt;</description>
    </item>
    <item>
      <title>【BPF入门系列-7】使用 ebpf 实时持续跟踪进程文件记录</title>
      <link>http://shanks.link/blog/2023/08/24/bpf%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97-7%E4%BD%BF%E7%94%A8-ebpf-%E5%AE%9E%E6%97%B6%E6%8C%81%E7%BB%AD%E8%B7%9F%E8%B8%AA%E8%BF%9B%E7%A8%8B%E6%96%87%E4%BB%B6%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Thu, 24 Aug 2023 16:20:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/24/bpf%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97-7%E4%BD%BF%E7%94%A8-ebpf-%E5%AE%9E%E6%97%B6%E6%8C%81%E7%BB%AD%E8%B7%9F%E8%B8%AA%E8%BF%9B%E7%A8%8B%E6%96%87%E4%BB%B6%E8%AE%B0%E5%BD%95/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.ebpf.top/&#34;&gt;深入浅出 eBPF&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;本文主要用于演示基于 ebpf 技术来实现对于系统调用跟踪和特定条件过滤，实现基于 &lt;a href=&#34;https://github.com/iovisor/bcc/&#34;&gt;BCC&lt;/a&gt; 的 Python 前端绑定，过程中对于代码的实现进行了详细的解释，可以作为学习 ebpf 技术解决实际问题的参考样例。&lt;/p&gt;</description>
    </item>
    <item>
      <title>【BPF入门系列-6】BPF 环形缓冲区</title>
      <link>http://shanks.link/blog/2023/08/24/bpf%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97-6bpf-%E7%8E%AF%E5%BD%A2%E7%BC%93%E5%86%B2%E5%8C%BA/</link>
      <pubDate>Thu, 24 Aug 2023 16:18:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/24/bpf%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97-6bpf-%E7%8E%AF%E5%BD%A2%E7%BC%93%E5%86%B2%E5%8C%BA/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.ebpf.top/&#34;&gt;深入浅出 eBPF&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;译者：范彬 原文地址：&lt;a href=&#34;https://nakryiko.com/posts/bpf-ringbuf/&#34;&gt;BPF ring buffer&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;当前 perf 缓冲区已成为从内核向用户空间发送数据的标准。BPF 环形缓冲区是一个新的BPF数据结构，解决了 BPF perf 缓冲区内存效率和事件重新排序的问题，同时性能达到或超过了 perf 缓冲区。 它既提供了与 perfbuf 兼容的功能，可轻松进行移植，又提供了具有更好可用性的新的 reserve / commit API。 综合基准和实际基准均表明，几乎所有情况下都应考虑将 BPF 环形缓冲区作为从 BPF 程序向用户空间发送数据的默认选择。&lt;/p&gt;</description>
    </item>
    <item>
      <title>聊聊对 BPF 程序至关重要的 vmlinux.h 文件</title>
      <link>http://shanks.link/blog/2023/08/24/%E8%81%8A%E8%81%8A%E5%AF%B9-bpf-%E7%A8%8B%E5%BA%8F%E8%87%B3%E5%85%B3%E9%87%8D%E8%A6%81%E7%9A%84-vmlinux.h-%E6%96%87%E4%BB%B6/</link>
      <pubDate>Thu, 24 Aug 2023 16:15:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/24/%E8%81%8A%E8%81%8A%E5%AF%B9-bpf-%E7%A8%8B%E5%BA%8F%E8%87%B3%E5%85%B3%E9%87%8D%E8%A6%81%E7%9A%84-vmlinux.h-%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;h2 id=&#34;11-前言&#34;&gt;1.1 前言&lt;/h2&gt;&#xA;&lt;p&gt;eBPF 是一项令人兴奋的强大技术，其允许开发者在 Linux 内核的核心处添加自定义代码功能，并且我们还可以通过编写简单的 C 或 Go 程序与加载到内核中的 eBPF 程序交互，用于加载或读取数据。运行在内核中的 BPF 程序可以检查所附加进程（或内核模块）的内存数据。为此，eBPF 程序需要确切了解处理涉及的数据结构类型，这可以通过 &lt;code&gt;#include &amp;quot;vmlinux.h&amp;quot;&lt;/code&gt; 实现。在本中，我将详细介绍 &lt;code&gt;vmlinux.h&lt;/code&gt; 是什么以及为什么你在编写 eBPF 程序开始就应该使用它。&lt;/p&gt;</description>
    </item>
    <item>
      <title>揭秘 BPF map 前生今世</title>
      <link>http://shanks.link/blog/2023/08/24/%E6%8F%AD%E7%A7%98-bpf-map-%E5%89%8D%E7%94%9F%E4%BB%8A%E4%B8%96/</link>
      <pubDate>Thu, 24 Aug 2023 16:03:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/24/%E6%8F%AD%E7%A7%98-bpf-map-%E5%89%8D%E7%94%9F%E4%BB%8A%E4%B8%96/</guid>
      <description>&lt;p&gt;本文地址：https://www.ebpf.top/post/map_internal&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-前言&#34;&gt;1. 前言&lt;/h2&gt;&#xA;&lt;p&gt;众所周知，map 可用于内核 BPF 程序和用户应用程序之间实现双向的数据交换， 为 BPF 技术中的重要基础数据结构。&lt;/p&gt;</description>
    </item>
    <item>
      <title>eBPF 概述：第 5 部分：跟踪用户进程</title>
      <link>http://shanks.link/blog/2023/08/24/ebpf-%E6%A6%82%E8%BF%B0%E7%AC%AC-5-%E9%83%A8%E5%88%86%E8%B7%9F%E8%B8%AA%E7%94%A8%E6%88%B7%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Thu, 24 Aug 2023 15:53:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/24/ebpf-%E6%A6%82%E8%BF%B0%E7%AC%AC-5-%E9%83%A8%E5%88%86%E8%B7%9F%E8%B8%AA%E7%94%A8%E6%88%B7%E8%BF%9B%E7%A8%8B/</guid>
      <description>&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.ebpf.top/post/ebpf-overview-part-5/&#34;&gt;https://www.ebpf.top/post/ebpf-overview-part-5/&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;原文地址：https://www.collabora.com/news-and-blog/blog/2019/05/14/an-ebpf-overview-part-5-tracing-user-processes/&lt;/p&gt;</description>
    </item>
    <item>
      <title>eBPF 概述：第 4 部分：在嵌入式系统运行</title>
      <link>http://shanks.link/blog/2023/08/24/ebpf-%E6%A6%82%E8%BF%B0%E7%AC%AC-4-%E9%83%A8%E5%88%86%E5%9C%A8%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%BF%90%E8%A1%8C/</link>
      <pubDate>Thu, 24 Aug 2023 15:43:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/24/ebpf-%E6%A6%82%E8%BF%B0%E7%AC%AC-4-%E9%83%A8%E5%88%86%E5%9C%A8%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%BF%90%E8%A1%8C/</guid>
      <description>&lt;p&gt;原文地址：https://www.collabora.com/news-and-blog/blog/2019/05/06/an-ebpf-overview-part-4-working-with-embedded-systems/&lt;/p&gt;</description>
    </item>
    <item>
      <title>eBPF 概述：第 3 部分：软件开发生态</title>
      <link>http://shanks.link/blog/2023/08/24/ebpf-%E6%A6%82%E8%BF%B0%E7%AC%AC-3-%E9%83%A8%E5%88%86%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%94%9F%E6%80%81/</link>
      <pubDate>Thu, 24 Aug 2023 15:35:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/24/ebpf-%E6%A6%82%E8%BF%B0%E7%AC%AC-3-%E9%83%A8%E5%88%86%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%94%9F%E6%80%81/</guid>
      <description>&lt;p&gt;原文地址：https://www.collabora.com/news-and-blog/blog/2019/04/26/an-ebpf-overview-part-3-walking-up-the-software-stack/&lt;/p&gt;</description>
    </item>
    <item>
      <title>eBPF 概述：第 2 部分：机器和字节码</title>
      <link>http://shanks.link/blog/2023/08/24/ebpf-%E6%A6%82%E8%BF%B0%E7%AC%AC-2-%E9%83%A8%E5%88%86%E6%9C%BA%E5%99%A8%E5%92%8C%E5%AD%97%E8%8A%82%E7%A0%81/</link>
      <pubDate>Thu, 24 Aug 2023 15:33:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/24/ebpf-%E6%A6%82%E8%BF%B0%E7%AC%AC-2-%E9%83%A8%E5%88%86%E6%9C%BA%E5%99%A8%E5%92%8C%E5%AD%97%E8%8A%82%E7%A0%81/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;原文地址：https://www.collabora.com/news-and-blog/blog/2019/04/15/an-ebpf-overview-part-2-machine-and-bytecode/&lt;/p&gt;</description>
    </item>
    <item>
      <title>eBPF 概述：第 1 部分：介绍</title>
      <link>http://shanks.link/blog/2023/08/24/ebpf-%E6%A6%82%E8%BF%B0%E7%AC%AC-1-%E9%83%A8%E5%88%86%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Thu, 24 Aug 2023 15:31:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/24/ebpf-%E6%A6%82%E8%BF%B0%E7%AC%AC-1-%E9%83%A8%E5%88%86%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.ebpf.top/post/ebpf-overview-part-5/&#34;&gt;https://www.ebpf.top/post/ebpf-overview-part-5/&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;原文地址：https://www.collabora.com/news-and-blog/blog/2019/04/05/an-ebpf-overview-part-1-introduction/&lt;/p&gt;</description>
    </item>
    <item>
      <title>implicit declaration warning - C语言函数隐式声明</title>
      <link>http://shanks.link/blog/2023/08/22/implicit-declaration-warning-c%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E9%9A%90%E5%BC%8F%E5%A3%B0%E6%98%8E/</link>
      <pubDate>Tue, 22 Aug 2023 21:41:16 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/22/implicit-declaration-warning-c%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E9%9A%90%E5%BC%8F%E5%A3%B0%E6%98%8E/</guid>
      <description>&lt;p&gt;implicit declaration of function——函数隐式声明警告&lt;/p&gt;&#xA;&lt;p&gt;原因：&#xA;1、该函数未被声明，但却被调用了，此时gcc会报这样的警告信息。&#xA;2、（网友总结）该函数所在源文件没有被编译为.o二进制文件。&lt;/p&gt;</description>
    </item>
    <item>
      <title>电子科大-建设巷小吃一条街</title>
      <link>http://shanks.link/blog/2023/08/20/%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7-%E5%BB%BA%E8%AE%BE%E5%B7%B7%E5%B0%8F%E5%90%83%E4%B8%80%E6%9D%A1%E8%A1%97/</link>
      <pubDate>Sun, 20 Aug 2023 20:00:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/20/%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7-%E5%BB%BA%E8%AE%BE%E5%B7%B7%E5%B0%8F%E5%90%83%E4%B8%80%E6%9D%A1%E8%A1%97/</guid>
      <description>&lt;h3 id=&#34;适合人群&#34;&gt;适合人群&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;学生和情侣&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;行程安排&#34;&gt;行程安排&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;做公共交通工具前往即可，半天左右即可&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;景点介绍&#34;&gt;景点介绍&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;川菜+各地美食为主的两条步行街&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;景点实拍图&#34;&gt;景点实拍图&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/%E6%97%85%E6%B8%B8/20230926174811.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/%E6%97%85%E6%B8%B8/20230926174850.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>ebpf常用资料查询</title>
      <link>http://shanks.link/blog/2023/08/18/ebpf%E5%B8%B8%E7%94%A8%E8%B5%84%E6%96%99%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Fri, 18 Aug 2023 11:38:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/18/ebpf%E5%B8%B8%E7%94%A8%E8%B5%84%E6%96%99%E6%9F%A5%E8%AF%A2/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;内核 API 支持 &lt;a href=&#34;https://man7.org/linux/man-pages/man2/bpf.2.html&#34;&gt;https://man7.org/linux/man-pages/man2/bpf.2.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;libbpf git 仓库 &lt;a href=&#34;https://github.com/libbpf/libbpf-bootstrap&#34;&gt;https://github.com/libbpf/libbpf-bootstrap&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;bpf 开发指南 &lt;a href=&#34;https://github.com/eunomia-bpf/bpf-developer-tutorial&#34;&gt;https://github.com/eunomia-bpf/bpf-developer-tutorial&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;bpf 其它人收集的资料网址 &lt;a href=&#34;https://github.com/gojue/ebpf-slide&#34;&gt;https://github.com/gojue/ebpf-slide&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;基于 ebpf 的 nat 仓库 &lt;a href=&#34;https://github.com/Netopian/natbee&#34;&gt;https://github.com/Netopian/natbee&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>ebpf入门指南</title>
      <link>http://shanks.link/blog/2023/08/18/ebpf%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Fri, 18 Aug 2023 09:37:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/18/ebpf%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</guid>
      <description>&lt;p&gt;导言：eBPF 源于 BPF，本质上是处于内核中的一个高效与灵活的虚类虚拟机组件，以一种安全的方式在许多内核 hook 点执行字节码。BPF最初的目的是用于高效网络报文过滤，经过重新设计，eBPF 不再局限于网络协议栈，已经成为内核顶级的子系统，演进为一个通用执行引擎。&lt;/p&gt;</description>
    </item>
    <item>
      <title>深入浅出 eBPF 技术</title>
      <link>http://shanks.link/blog/2023/08/18/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA-ebpf-%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Fri, 18 Aug 2023 09:10:54 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/18/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA-ebpf-%E6%8A%80%E6%9C%AF/</guid>
      <description>&lt;p&gt;&lt;strong&gt;简介：&lt;/strong&gt; 1 eBPF 介绍eBPF 是革命性技术, 起源于 linux 内核, 能够在操作系统内核中执行沙盒程序。旨在不改变内核源码或加载内核模块的前提下安全便捷的扩展内核能力。1.1 demo 展示demo程序如下：#include &amp;lt;linux/bpf.h&amp;gt; #define SEC(NAME) &lt;strong&gt;attribute&lt;/strong&gt;((section(NAME), used)) SEC(&amp;amp;quot&lt;/p&gt;</description>
    </item>
    <item>
      <title>ethtool 设置网卡速度</title>
      <link>http://shanks.link/blog/2023/08/17/ethtool-%E8%AE%BE%E7%BD%AE%E7%BD%91%E5%8D%A1%E9%80%9F%E5%BA%A6/</link>
      <pubDate>Thu, 17 Aug 2023 17:35:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/17/ethtool-%E8%AE%BE%E7%BD%AE%E7%BD%91%E5%8D%A1%E9%80%9F%E5%BA%A6/</guid>
      <description>&lt;h3 id=&#34;检查网卡网线是否联通&#34;&gt;检查网卡网线是否联通&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#服务器网卡比较多，经常会找不到要设置的网卡，再也不用趴着观察揣摩&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#网卡的编号可通过：ip a，查看&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ethtool ethx       //查询ethx网口基本设置，其中ethx 是对应网卡的编号，如eth0、eth1等等&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;网卡连接多了后确定物理端口对应eth0或其他设备号&#34;&gt;网卡连接多了后，确定物理端口对应eth0或其他设备号:&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#效果：设备号eth0对应的物理端口的两个指示灯会闪烁&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ethtool -p eth0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;修改网卡速率&#34;&gt;修改网卡速率:&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 这个命令多用于手工设置网络速率，一般千兆网卡支持10|100|1000三个速率，单位是Mbps。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#具体参数请自行查询&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;用法：ethtool -s eth0 speed 1000 duplex full autoneg off&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;效果：将设备号eth0对应的物理端口设置为速率为1000Mbps，全双工工作模式，同时关闭自动协商。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;注：若需要永久更改有两种方法：&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1. 将上述命令写入/etc/rc.local文件中，开机自动执行；&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2. 2. 在/etc/sysconfig/network-scripts/ifcfg-eth0中添加一行ETHTOOL_OPTS=&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;speed 1000 duplex full autoneg off&amp;#34;&lt;/span&gt;。这里仅仅以eth0为例，其他设备号同理。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;网卡执行自我检测&#34;&gt;网卡执行自我检测:&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ethtool -t em1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;p&gt;网卡启动操作系统等操作：还需要&lt;a href=&#34;https://so.csdn.net/so/search?q=bios&amp;amp;spm=1001.2101.3001.7020&#34;&gt;bios&lt;/a&gt;参数配置协同才可以支持。【未验证】&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux解压缩文件命令7z、zip，tar</title>
      <link>http://shanks.link/blog/2023/08/17/linux%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6%E5%91%BD%E4%BB%A47zziptar/</link>
      <pubDate>Thu, 17 Aug 2023 17:31:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/17/linux%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6%E5%91%BD%E4%BB%A47zziptar/</guid>
      <description>&lt;h2 id=&#34;zip-压缩和解压&#34;&gt;ZIP 压缩和解压：&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://so.csdn.net/so/search?q=%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6&amp;amp;spm=1001.2101.3001.7020&#34;&gt;压缩文件&lt;/a&gt;：&lt;code&gt;zip compressed.zip file1.txt file2.txt folder/&lt;/code&gt;&#xA;解压文件：&lt;code&gt;unzip compressed.zip -d destination_folder/&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;7z-压缩和解压&#34;&gt;&lt;a href=&#34;https://so.csdn.net/so/search?q=7z&amp;amp;spm=1001.2101.3001.7020&#34;&gt;7z&lt;/a&gt; 压缩和解压：&lt;/h2&gt;&#xA;&lt;p&gt;压缩文件：&lt;code&gt;7z a compressed.7z file1.txt file2.txt folder/&lt;/code&gt;&#xA;解压文件：&lt;code&gt;7z x compressed.7z -odestination_folder/&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;gzip&#34;&gt;GZIP&lt;/h2&gt;&#xA;&lt;p&gt;常用于对单个文件进行压缩，生成 .gz 后缀的压缩文件。可以使用以下命令进行压缩和解压缩：&lt;/p&gt;</description>
    </item>
    <item>
      <title>ip 地址介绍</title>
      <link>http://shanks.link/blog/2023/08/17/ip-%E5%9C%B0%E5%9D%80%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Thu, 17 Aug 2023 17:26:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/17/ip-%E5%9C%B0%E5%9D%80%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;h3 id=&#34;概念&#34;&gt;概念&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;IP地址是指互联网协议地址，又译为网际协议地址&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;IP地址是互联网为&lt;strong&gt;连入互联网内的&lt;/strong&gt;每台计算机（终端设备）分配的一个独一无二的编号  软件层面，可以修改。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Openvpn 客户端路由配置</title>
      <link>http://shanks.link/blog/2023/08/16/openvpn-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 16 Aug 2023 10:53:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/16/openvpn-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;h1 id=&#34;openvpn-客户端路由配置&#34;&gt;Openvpn 客户端路由配置&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;Openvpn&lt;/code&gt; 是个非常强大的工具，默认的参数已经足够对付大多数场景了。由于工作需要，我们只想要某些 ip 走 openvpn的线路，这就需要自定义路由了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>L2TP技术介绍-H3C</title>
      <link>http://shanks.link/blog/2023/08/09/l2tp%E6%8A%80%E6%9C%AF%E4%BB%8B%E7%BB%8D-h3c/</link>
      <pubDate>Wed, 09 Aug 2023 15:24:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/09/l2tp%E6%8A%80%E6%9C%AF%E4%BB%8B%E7%BB%8D-h3c/</guid>
      <description>&lt;h1 id=&#34;l2tp&#34;&gt;L2TP&lt;/h1&gt;&#xA;&lt;h2 id=&#34;l2tp概述&#34;&gt;L2TP概述&lt;/h2&gt;&#xA;&lt;p&gt;L2TP（Layer 2 Tunneling Protocol，二层隧道协议）是VPDN（Virtual Private Dial-up Network，虚拟私有拨号网）隧道协议的一种。&lt;/p&gt;&#xA;&lt;p&gt;VPDN是指利用公共网络（如ISDN或PSTN）的拨号功能接入公共网络，实现虚拟专用网，从而为企业、小型ISP、移动办公人员等提供接入服务。即，VPDN为远端用户与私有企业网之间提供了一种经济而有效的点到点连接方式。&lt;/p&gt;</description>
    </item>
    <item>
      <title>L2TP详解（六）——L2TP排错、使用限制和注意事项</title>
      <link>http://shanks.link/blog/2023/08/09/l2tp%E8%AF%A6%E8%A7%A3%E5%85%ADl2tp%E6%8E%92%E9%94%99%E4%BD%BF%E7%94%A8%E9%99%90%E5%88%B6%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Wed, 09 Aug 2023 15:14:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/09/l2tp%E8%AF%A6%E8%A7%A3%E5%85%ADl2tp%E6%8E%92%E9%94%99%E4%BD%BF%E7%94%A8%E9%99%90%E5%88%B6%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>&lt;p&gt;今天继续给大家介绍L2TP，本文主要介绍L2TP的排错、使用限制和注意事项。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一l2tp排错&#34;&gt;一、L2TP排错&lt;/h2&gt;&#xA;&lt;p&gt;在配置L2TP时，如果出现未能建立L2TP隧道的情景，可以根据下列4点进行排错。&#xA;&lt;strong&gt;1、L2TP用户名和密码是否一致。&lt;/strong&gt;&#xA;&lt;strong&gt;2、L2TP隧道名称和密码是否一致。&lt;/strong&gt;&#xA;&lt;strong&gt;3、L2TP客户端是否超过IP POOL的数量限制。&lt;/strong&gt;&#xA;&lt;strong&gt;4、安全区域和安全策略配置问题。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>CLient-Initiated L2TP主机上网问题详解</title>
      <link>http://shanks.link/blog/2023/08/09/client-initiated-l2tp%E4%B8%BB%E6%9C%BA%E4%B8%8A%E7%BD%91%E9%97%AE%E9%A2%98%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 09 Aug 2023 15:08:08 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/09/client-initiated-l2tp%E4%B8%BB%E6%9C%BA%E4%B8%8A%E7%BD%91%E9%97%AE%E9%A2%98%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;p&gt;今天继续给大家介绍HCIE安全。本文主要介绍一下Client-Initiated L2TP配置中上互联网问题的解决。&#xA;阅读本文，您需要对L2TP 有一定的了解，如果您对此还存在困惑，欢迎您查阅我博客内的其他文章，相信您一定会有所收获。&#xA;相关文章链接：&#xA;&lt;a href=&#34;https://blog.csdn.net/weixin_40228200/article/details/119360350&#34;&gt;L2TP详解（一）&lt;/a&gt;&#xA;&lt;a href=&#34;https://blog.csdn.net/weixin_40228200/article/details/119361305&#34;&gt;L2TP详解（二）&lt;/a&gt;&#xA;本文是&lt;a href=&#34;https://blog.csdn.net/weixin_40228200/article/details/119618546&#34;&gt;L2TP 配置实例——Client-Initiated&lt;/a&gt;的补充说明，拓扑和配置与上文完全一致，本文对该篇文章的相关内容不会过多赘述，因此在阅读本文之前，强烈建议您阅读这篇文章。&lt;/p&gt;</description>
    </item>
    <item>
      <title>L2TP详解（五）——Client Initiated隧道和会话建立过程</title>
      <link>http://shanks.link/blog/2023/08/09/l2tp%E8%AF%A6%E8%A7%A3%E4%BA%94client-initiated%E9%9A%A7%E9%81%93%E5%92%8C%E4%BC%9A%E8%AF%9D%E5%BB%BA%E7%AB%8B%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Wed, 09 Aug 2023 15:04:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/09/l2tp%E8%AF%A6%E8%A7%A3%E4%BA%94client-initiated%E9%9A%A7%E9%81%93%E5%92%8C%E4%BC%9A%E8%AF%9D%E5%BB%BA%E7%AB%8B%E8%BF%87%E7%A8%8B/</guid>
      <description>&lt;p&gt;今天继续给大家介绍HCIE安全，本文主要给大家介绍Client Initiated隧道和会话建立过程。&#xA;在Client Initiated场景下，隧道建立过程与&lt;a href=&#34;https://so.csdn.net/so/search?q=NAS&amp;amp;spm=1001.2101.3001.7020&#34;&gt;NAS&lt;/a&gt;-Initiated 过程相似，Client Initiated 场景相当于将Client 和 LAC分为了一个整体。&#xA;Client Initiated 场景下隧道和会话建立过程如下图所示：&#xA;&lt;img src=&#34;http://shanks.link/img/l2tp/325fe8c12f864feb9d6bbf010723c89b.png?type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBAd2VpeGluXzQwMjI4MjAw,size_44,color_FFFFFF,t_70,g_se,x_16#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&#xA;在互联网中，数据包封装格式如下：&#xA;&lt;img src=&#34;http://shanks.link/img/l2tp/2834925e02d04f4988e3f95805fe8d7e.png?type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBAd2VpeGluXzQwMjI4MjAw,size_30,color_FFFFFF,t_70,g_se,x_16#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&#xA;原创不易，转载请说明出处：https://blog.csdn.net/weixin_40228200/article/details/119903724&lt;/p&gt;</description>
    </item>
    <item>
      <title>L2TP详解（四）——LAC自动拨号隧道和会话建立过程</title>
      <link>http://shanks.link/blog/2023/08/09/l2tp%E8%AF%A6%E8%A7%A3%E5%9B%9Blac%E8%87%AA%E5%8A%A8%E6%8B%A8%E5%8F%B7%E9%9A%A7%E9%81%93%E5%92%8C%E4%BC%9A%E8%AF%9D%E5%BB%BA%E7%AB%8B%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Wed, 09 Aug 2023 15:00:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/09/l2tp%E8%AF%A6%E8%A7%A3%E5%9B%9Blac%E8%87%AA%E5%8A%A8%E6%8B%A8%E5%8F%B7%E9%9A%A7%E9%81%93%E5%92%8C%E4%BC%9A%E8%AF%9D%E5%BB%BA%E7%AB%8B%E8%BF%87%E7%A8%8B/</guid>
      <description>&lt;p&gt;今天继续给大家介绍HCIE安全，本文主要给大家介绍LAC自动拨号隧道和会话建立过程。&#xA;与&lt;a href=&#34;https://so.csdn.net/so/search?q=NAS&amp;amp;spm=1001.2101.3001.7020&#34;&gt;NAS&lt;/a&gt;-Initiated建立隧道方式不同，LAC自动拨号是无需触发的永久隧道，一旦配置完毕，即可建立永久隧道，LAC为LNS的唯一客户端。&#xA;LAC自动拨号场景下隧道和会话建立过程如下图所示：&#xA;&lt;img src=&#34;http://shanks.link/img/l2tp/69ff244b05754c31a87e8636b14114b6.png?type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDIyODIwMA==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&#xA;在互联网中，数据包封装格式如下：&#xA;&lt;img src=&#34;http://shanks.link/img/l2tp/a8582571e94e45f4afc7d10f100f814d.png?type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDIyODIwMA==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&#xA;原创不易，转载请说明出处：https://blog.csdn.net/weixin_40228200/article/details/119848843&lt;/p&gt;</description>
    </item>
    <item>
      <title>L2TP详解（三）——NAS-Initiated 场景下隧道和会话建立过程</title>
      <link>http://shanks.link/blog/2023/08/09/l2tp%E8%AF%A6%E8%A7%A3%E4%B8%89nas-initiated-%E5%9C%BA%E6%99%AF%E4%B8%8B%E9%9A%A7%E9%81%93%E5%92%8C%E4%BC%9A%E8%AF%9D%E5%BB%BA%E7%AB%8B%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Wed, 09 Aug 2023 14:51:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/09/l2tp%E8%AF%A6%E8%A7%A3%E4%B8%89nas-initiated-%E5%9C%BA%E6%99%AF%E4%B8%8B%E9%9A%A7%E9%81%93%E5%92%8C%E4%BC%9A%E8%AF%9D%E5%BB%BA%E7%AB%8B%E8%BF%87%E7%A8%8B/</guid>
      <description>&lt;p&gt;今天继续给大家介绍HCIE安全，本文主要给大家介绍NAS-Initiated 的隧道和会话建立过程。&#xA;在NAS-Initiated L2TP 中，隧道由PPP链接触发建立的。LAC同时作为PPPoE的server为接入用户提供L2TP服务。当Client和LAC建立了PPP链接之后，LAC链接相应的LNS触发L2TP隧道。&#xA;NAS-Initiated 场景下隧道和会话建立过程如下图所示：&lt;/p&gt;</description>
    </item>
    <item>
      <title>L2TP 配置实例——Client-Initiated</title>
      <link>http://shanks.link/blog/2023/08/09/l2tp-%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8Bclient-initiated/</link>
      <pubDate>Wed, 09 Aug 2023 14:27:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/09/l2tp-%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8Bclient-initiated/</guid>
      <description>&lt;p&gt;今天继续给大家介绍HCIE安全。本文以华为&lt;a href=&#34;https://so.csdn.net/so/search?q=eNSP&amp;amp;spm=1001.2101.3001.7020&#34;&gt;eNSP&lt;/a&gt;模拟器，实现了Client-Initiated类型的L2TP 配置。Client-Initiated 主要应用在公司外部职员在外地出差时访问公司内部网络的场景下。&#xA;阅读本文，您需要对L2TP 有一定的了解，如果您对此还存在困惑，欢迎您查阅我博客内的其他文章，相信您一定会有所收获。&#xA;相关文章链接：&#xA;&lt;a href=&#34;http://shanks.link/blog/2023/08/08/l2tp%e8%af%a6%e8%a7%a3%e4%b8%80/&#34;&gt;L2TP详解（一）&lt;/a&gt;&#xA;&lt;a href=&#34;http://shanks.link/blog/2023/08/08/l2tp%e8%af%a6%e8%a7%a3%e4%ba%8c/&#34;&gt;L2TP详解（二）&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>L2TP详解（二）</title>
      <link>http://shanks.link/blog/2023/08/08/l2tp%E8%AF%A6%E8%A7%A3%E4%BA%8C/</link>
      <pubDate>Tue, 08 Aug 2023 18:04:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/08/l2tp%E8%AF%A6%E8%A7%A3%E4%BA%8C/</guid>
      <description>&lt;p&gt;本文给大家介绍的是L2TP相关内容，包括L2TP的特点和应用场景。&#xA;强烈推荐阅读本文前置文章：&#xA;&lt;a href=&#34;http://shanks.link/blog/2023/08/08/l2tp%E8%AF%A6%E8%A7%A3%E4%B8%80/&#34;&gt;L2TP详解（一）&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;一l2tp隧道和会话建立过程&#34;&gt;一、L2TP隧道和会话建立过程&lt;/h2&gt;&#xA;&lt;p&gt;在LAC和LNS之间存在着两种类型的链接：&lt;strong&gt;隧道链接&lt;/strong&gt;和&lt;strong&gt;会话链接&lt;/strong&gt;。&#xA;&lt;strong&gt;隧道链接&lt;/strong&gt;定义了互相通信的两个实体——LAC和LNS。并且在一对LAC和LNS之间可以建立多个L2TP隧道，隧道由一个控制链接和至少以下会话组成。&lt;strong&gt;L2TP首先需要建立L2TP隧道，然后再L2TP隧道上建立会话链接，最后建立PPP链接。所有的L2TP需要承载的数据信息都是在PPP链接中进行传递的。&lt;/strong&gt;&#xA;&lt;strong&gt;会话链接&lt;/strong&gt;复用在隧道链接之上，用于表示承载在隧道链接中的每个PPP链接过程，会话是有方向的，从LAC向LNS发起的会话叫做Incoming会话，从LNS向LAC发起的会话叫做Outgoing会话。&#xA;&lt;strong&gt;总得来看，在L2TP中，总是先有隧道，后有会话。LAC和LNS之间可以建立多条隧道，每一条隧道又可以承载多条会话。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>L2TP详解（一）</title>
      <link>http://shanks.link/blog/2023/08/08/l2tp%E8%AF%A6%E8%A7%A3%E4%B8%80/</link>
      <pubDate>Tue, 08 Aug 2023 17:56:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/08/l2tp%E8%AF%A6%E8%A7%A3%E4%B8%80/</guid>
      <description>&lt;p&gt;本文给大家介绍的是L2TP相关内容，包括L2TP的特点和应用场景。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一l2tp简介&#34;&gt;一、L2TP简介&lt;/h2&gt;&#xA;&lt;p&gt;L2TP是一种二层的VPN技术，它提供了对PPP链路层数据帧的隧道传输支持，允许二层链路端点和PPP会话驻留在不同设备上，扩展了PPP模型。&#xA;在L2TP中，用户通过PPP拨号到LAC（L2TP Access Concentrator，L2TP访问集中器）上，LAC通过L2TP隧道将PPP报文透明传输到LNS（L2TP Network Server，L2TP网络服务器），LNS随即与用户建立PPP链接。&#xA;在L2TP中，存在三种角色：用户（Client）、LAC和LNS，LAC和LNS分别对用户进行验证，从而大大提高了用户接入安全性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>黄龙溪古镇一日游自驾</title>
      <link>http://shanks.link/blog/2023/08/06/%E9%BB%84%E9%BE%99%E6%BA%AA%E5%8F%A4%E9%95%87%E4%B8%80%E6%97%A5%E6%B8%B8%E8%87%AA%E9%A9%BE/</link>
      <pubDate>Sun, 06 Aug 2023 20:00:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/06/%E9%BB%84%E9%BE%99%E6%BA%AA%E5%8F%A4%E9%95%87%E4%B8%80%E6%97%A5%E6%B8%B8%E8%87%AA%E9%A9%BE/</guid>
      <description>&lt;h3 id=&#34;适合人群和游玩项目&#34;&gt;适合人群和游玩项目&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一家老小（自驾）,时间为一天，暑假，周末避开高峰，以便堵车&lt;/li&gt;&#xA;&lt;li&gt;景区自带停车场，周围也有民营停车场都是20一天&lt;/li&gt;&#xA;&lt;li&gt;在溪水中和其他游客打水仗（夏天）以及浏览古镇和逛古镇上的美食&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;景点介绍&#34;&gt;景点介绍&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;漫长的一条小河，游客在里面玩水，打水仗&lt;/li&gt;&#xA;&lt;li&gt;小河的两边是售卖美食和其它商铺的上家&lt;/li&gt;&#xA;&lt;li&gt;小河坐落在黄龙溪古镇中，所以可以顺带浏览古镇&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;相关视频&#34;&gt;相关视频&lt;/h3&gt;&#xA;&lt;iframe&#xD;&#xA;    src=&#34;//player.bilibili.com/player.html?bvid=BV1g8411o7p7&amp;page=1&#34;&#xD;&#xA;    scrolling=&#34;no&#34;&#xD;&#xA;    frameborder=&#34;no&#34;&#xD;&#xA;    framespacing=&#34;0&#34;&#xD;&#xA;    allowfullscreen=&#34;true&#34;&#xD;&#xA;&gt;&#xD;&#xA;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>乐山大佛自驾一日游</title>
      <link>http://shanks.link/blog/2023/07/29/%E4%B9%90%E5%B1%B1%E5%A4%A7%E4%BD%9B%E8%87%AA%E9%A9%BE%E4%B8%80%E6%97%A5%E6%B8%B8/</link>
      <pubDate>Sat, 29 Jul 2023 21:00:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/07/29/%E4%B9%90%E5%B1%B1%E5%A4%A7%E4%BD%9B%E8%87%AA%E9%A9%BE%E4%B8%80%E6%97%A5%E6%B8%B8/</guid>
      <description>&lt;h3 id=&#34;行程安排&#34;&gt;行程安排&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;成都&amp;mdash;&amp;gt;乐山大佛(-花湖湾2号地上停车场,10:00到)&lt;/li&gt;&#xA;&lt;li&gt;游览乐山大佛（约2个小时）&lt;/li&gt;&#xA;&lt;li&gt;乐山大佛&amp;mdash;&amp;gt;嘉兴路美食街(中饭，休息)&lt;/li&gt;&#xA;&lt;li&gt;嘉兴路美食街&amp;mdash;&amp;gt;苏稽古镇&lt;/li&gt;&#xA;&lt;li&gt;苏稽古镇&amp;mdash;&amp;gt;成都(下午5点出发）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;注意事项&#34;&gt;注意事项&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;驾车安全（中途要休息）&lt;/li&gt;&#xA;&lt;li&gt;注意油量，避免没有油的尴尬&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;实际行程&#34;&gt;实际行程&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;成都(7:50)&amp;mdash;&amp;gt;乐山大佛(10:30)&amp;mdash;&amp;gt;嘉兴路美食街(4:00)&amp;mdash;&amp;gt;成都(7:30)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;失误点&#34;&gt;失误点&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;由于到达乐山大佛的时间是周末+暑假+早高峰，所以选择走匝道从佛头到佛脚下耗费了2个多小时(排队1个半小时)，超过了原来的预期（半小时），所以后面苏稽古镇浏览被取消（因为要避免晚上走高速-危险），嘉兴路美食街的浏览也没有太多时间&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;整体感受&#34;&gt;整体感受&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;最值得浏览的是山脚下看大佛的脚以及全身和在山上看大佛的头&lt;/li&gt;&#xA;&lt;li&gt;大佛所在的山可以作为附属品浏览下&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;值得肯定和待提高的点&#34;&gt;值得肯定和待提高的点&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;攻略整体上没有大问题（路线，时间安排）&lt;/li&gt;&#xA;&lt;li&gt;浏览时间安排上，因为没考虑到太多人的原因而造成浏览大佛时间超时，下次需要避免&lt;/li&gt;&#xA;&lt;li&gt;因为某个项目操作而灵活的调整了后续的安排，这点值得肯定&lt;/li&gt;&#xA;&lt;li&gt;跑高速，中途强制休息，这点值得肯定，安全永远第一&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;美食推荐&#34;&gt;美食推荐&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;嘉兴路美食街和周围有相当多美食的，美团和大众点评选评分高的即可&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;景点图片&#34;&gt;景点图片&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/%E7%94%9F%E6%B4%BB/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230731104900.jpg&#34; alt=&#34;江中游船&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>三岔湖自驾游</title>
      <link>http://shanks.link/blog/2023/07/28/%E4%B8%89%E5%B2%94%E6%B9%96%E8%87%AA%E9%A9%BE%E6%B8%B8/</link>
      <pubDate>Fri, 28 Jul 2023 20:00:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/07/28/%E4%B8%89%E5%B2%94%E6%B9%96%E8%87%AA%E9%A9%BE%E6%B8%B8/</guid>
      <description>&lt;h3 id=&#34;适合人群&#34;&gt;适合人群&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;农家乐、钓鱼和露营&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;注意事项&#34;&gt;注意事项&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;夏天需要注意防嗮&lt;/li&gt;&#xA;&lt;li&gt;夏天湖泊的水没有网上的那么深(我去的时候，其它时候不知道)，所以景色没有预期的好&lt;/li&gt;&#xA;&lt;li&gt;需要防蚊子&lt;/li&gt;&#xA;&lt;li&gt;湖很大，建议自驾&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;景点相片&#34;&gt;景点相片&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/%E7%94%9F%E6%B4%BB/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230731111130.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>龙泉驿山自驾游</title>
      <link>http://shanks.link/blog/2023/07/24/%E9%BE%99%E6%B3%89%E9%A9%BF%E5%B1%B1%E8%87%AA%E9%A9%BE%E6%B8%B8/</link>
      <pubDate>Mon, 24 Jul 2023 20:00:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/07/24/%E9%BE%99%E6%B3%89%E9%A9%BF%E5%B1%B1%E8%87%AA%E9%A9%BE%E6%B8%B8/</guid>
      <description>&lt;h3 id=&#34;适合人群&#34;&gt;适合人群&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;看日出，摘水蜜桃&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;注意事项&#34;&gt;注意事项&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;夏天需要注意防嗮和防蚊子&lt;/li&gt;&#xA;&lt;li&gt;摘水蜜桃，建议自驾，因为提水蜜桃下山，路途太遥远&lt;/li&gt;&#xA;&lt;li&gt;鞋子需要运动型&lt;/li&gt;&#xA;&lt;li&gt;摘桃子的话，需要商家给剪刀，这样避免从树上摘下桃子时，弄坏桃子&lt;/li&gt;&#xA;&lt;li&gt;桃子有水蜜桃和其它品种，价格和对应的桃树要弄清楚&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;个人浏览经历&#34;&gt;个人浏览经历&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;从家里开车导航到龙泉驿山月亮碑&lt;/li&gt;&#xA;&lt;li&gt;上山途中看到有沿路卖桃子的商家很多农家乐随机选一个，体验自己摘桃子即可，也可以问问商家有没有已经摘好的水蜜桃（商家摘桃有经验，摘的桃子比较好看）&lt;/li&gt;&#xA;&lt;li&gt;途中也直接在商家的家里购买了包装好的水蜜桃（品相要比自己摘的好看）&lt;/li&gt;&#xA;&lt;li&gt;摘完桃子后，继续开车到月亮碑（因为没有看日出的计划，所以看了下山下的景色后就走了）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;景点相片&#34;&gt;景点相片&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/%E7%94%9F%E6%B4%BB/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230731113749.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>川西跟团三日游</title>
      <link>http://shanks.link/blog/2023/07/10/%E5%B7%9D%E8%A5%BF%E8%B7%9F%E5%9B%A2%E4%B8%89%E6%97%A5%E6%B8%B8/</link>
      <pubDate>Mon, 10 Jul 2023 23:59:30 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/07/10/%E5%B7%9D%E8%A5%BF%E8%B7%9F%E5%9B%A2%E4%B8%89%E6%97%A5%E6%B8%B8/</guid>
      <description>&lt;h3 id=&#34;行程安排&#34;&gt;行程安排&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;第一天：成都-&amp;gt;鱼子西（看日落），住新都桥的酒店。&lt;/li&gt;&#xA;&lt;li&gt;第二天：鱼子西-&amp;gt;八郎生都-&amp;gt;塔公草原，住康定城的酒店。&lt;/li&gt;&#xA;&lt;li&gt;第三天：浏览木格措-&amp;gt;回成都&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;景点点评&#34;&gt;景点点评&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;高原的天气变化很快，鱼子西看日落需要在日落时才决定是否能看到，避免提前一个小时走了，结果天气又变好了的尴尬。&lt;/li&gt;&#xA;&lt;li&gt;八郎生都的风景蛮不错，但需要一个好天气。&lt;/li&gt;&#xA;&lt;li&gt;塔公草原属于凑数的景点，可去可不去。&lt;/li&gt;&#xA;&lt;li&gt;康定城内的木格措应该是指一座山，进入景区坐旅游大巴沿着盘山公路而上，最后到达接近山顶的地方，哪里有一个湖，湖的周围是山，冬天有雪的话可以看看雪景，没有的话，就一般般。整体而言木格措景点也算是凑数了。&lt;/li&gt;&#xA;&lt;li&gt;有时间可以浏览下康定城，感受下川西小县城的别样风景，毕竟康定溜溜小调的发源地。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;行程回顾和总结&#34;&gt;行程回顾和总结&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;整个行程从开始进入康定后，就算进入了高原，可以看到蓝天白云，这算是整个行程的一大特色，不过对于沿海地区来说，这也是常态了。&lt;/li&gt;&#xA;&lt;li&gt;四个景点，三个凑数，所以跟团的旅游质量不高，自驾的话，可以自己走走停停。&lt;/li&gt;&#xA;&lt;li&gt;其它的也没啥特别的地方，因为时间受限，所以也没有到其它的景点，所以不做评价，以上评价仅针对上述行程和景点而言。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;注意事项&#34;&gt;注意事项&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;最好带一个望远镜，可能会看到土拨鼠&lt;/li&gt;&#xA;&lt;li&gt;在天全服务区的装备店里面，有老板开的近期入藏的微信群，入群，能得到不少沿途信息&lt;/li&gt;&#xA;&lt;li&gt;有条件的话，单反带上，比手机效果还是好上不少&lt;/li&gt;&#xA;&lt;li&gt;无人机看自己的喜好了&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;感想&#34;&gt;感想&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果有车，对高反还好，时间充裕的话，建议沿着318往拉萨走，这样更自由，也能浏览到更多的风景。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;沿途相片&#34;&gt;沿途相片&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/202307chuanxi/IMG_20230707_112251.jpg&#34; alt=&#34;318景点介绍&#34;&gt;&#xA;&lt;img src=&#34;http://shanks.link/img/202307chuanxi/IMG_20230707_093632.jpg&#34; alt=&#34;入藏起点 天全服务站&#34;&gt;&#xA;&lt;img src=&#34;http://shanks.link/img/202307chuanxi/IMG_20230707_172606.jpg&#34; alt=&#34;鱼子西&#34;&gt;&#xA;&lt;img src=&#34;http://shanks.link/img/202307chuanxi/IMG_20230707_175248.jpg&#34; alt=&#34;鱼子西&#34;&gt;&#xA;&lt;img src=&#34;http://shanks.link/img/202307chuanxi/IMG_20230708_112151.jpg&#34; alt=&#34;八郎观景台&#34;&gt;&#xA;&lt;img src=&#34;http://shanks.link/img/202307chuanxi/IMG_20230708_112342.jpg&#34; alt=&#34;八郎观景台&#34;&gt;&#xA;&lt;img src=&#34;http://shanks.link/img/202307chuanxi/IMG_20230708_113549.jpg&#34; alt=&#34;八郎观景台&#34;&gt;&#xA;&lt;img src=&#34;http://shanks.link/img/202307chuanxi/IMG_20230709_114721.jpg&#34; alt=&#34;木格措&#34;&gt;&#xA;&lt;img src=&#34;http://shanks.link/img/202307chuanxi/IMG_20230709_120907.jpg&#34; alt=&#34;木格措&#34;&gt;&#xA;&lt;img src=&#34;http://shanks.link/img/202307chuanxi/IMG_20230708_192913.jpg&#34; alt=&#34;沿途的风景&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>密钥交换协议之IKEv2</title>
      <link>http://shanks.link/blog/2023/05/31/%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2%E5%8D%8F%E8%AE%AE%E4%B9%8Bikev2/</link>
      <pubDate>Wed, 31 May 2023 13:37:50 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/05/31/%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2%E5%8D%8F%E8%AE%AE%E4%B9%8Bikev2/</guid>
      <description>&lt;h2 id=&#34;ikev2&#34;&gt;IKEv2&lt;/h2&gt;&#xA;&lt;h3 id=&#34;ikev2简介&#34;&gt;IKEv2简介&lt;/h3&gt;&#xA;&lt;p&gt;IKEv2（Internet Key Exchange Version 2，互联网密钥交换协议第 2 版）是第 1 版本的 IKE 协议（本文简称 IKEv1）的增强版本。 IKEv2 与 IKEv1 相同，具有一套自保护机制，可以在不安全的网络上安全地进行身份认证、密钥分发、建立 IPsec SA。相对于 IKEv1， IKEv2 具有抗攻击能力和密钥交换能力更强以及报文交互数量较少等特点。&lt;/p&gt;</description>
    </item>
    <item>
      <title>关于 root 和 wheel：在 Linux 中创建管理员账号（root 权限）的正确方式</title>
      <link>http://shanks.link/blog/2023/05/30/%E5%85%B3%E4%BA%8E-root-%E5%92%8C-wheel%E5%9C%A8-linux-%E4%B8%AD%E5%88%9B%E5%BB%BA%E7%AE%A1%E7%90%86%E5%91%98%E8%B4%A6%E5%8F%B7root-%E6%9D%83%E9%99%90%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Tue, 30 May 2023 13:44:01 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/05/30/%E5%85%B3%E4%BA%8E-root-%E5%92%8C-wheel%E5%9C%A8-linux-%E4%B8%AD%E5%88%9B%E5%BB%BA%E7%AE%A1%E7%90%86%E5%91%98%E8%B4%A6%E5%8F%B7root-%E6%9D%83%E9%99%90%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;为什么-root-用户所在的群组叫-wheel&#34;&gt;为什么 root 用户所在的群组叫 wheel?&lt;/h2&gt;&#xA;&lt;h3 id=&#34;在-unix-中-root-用户所属组就是-wheel&#34;&gt;在 Unix 中 root 用户所属组就是 wheel&lt;/h3&gt;&#xA;&lt;p&gt;在 Unix 系统（例如：常见的 macOS 和 FreeBSD），&lt;code&gt;root&lt;/code&gt; 用户所在的组称之为 &lt;code&gt;wheel&lt;/code&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;id root&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uid=0(root) gid=0(wheel) groups=0(wheel)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wheel 来源于 “big wheel” 这个俚语，指有强大 “威力” 或 “影响力” 的人。随之而来的就是 TENEX 操作系统发明了 wheel bit，一个允许处理器做一些限制性的操作的“特权 bit”。Unix 操作系统则在上世纪八十年代引入 wheel，这就是为什么 root 用户所在的组称之为 wheel 的来历。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux 简单查看网卡实时网速</title>
      <link>http://shanks.link/blog/2023/05/29/linux-%E7%AE%80%E5%8D%95%E6%9F%A5%E7%9C%8B%E7%BD%91%E5%8D%A1%E5%AE%9E%E6%97%B6%E7%BD%91%E9%80%9F/</link>
      <pubDate>Mon, 29 May 2023 14:36:36 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/05/29/linux-%E7%AE%80%E5%8D%95%E6%9F%A5%E7%9C%8B%E7%BD%91%E5%8D%A1%E5%AE%9E%E6%97%B6%E7%BD%91%E9%80%9F/</guid>
      <description>&lt;p&gt;nload 查看&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# 查看所有网卡实时网速&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo nload -m &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# 查看指定网卡实时网速&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo nload eth0 -m&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;查看所有网卡时，切换网卡&lt;/strong&gt;：左右方向键（按左右键显示 截图最上方 1/3、2/3、3/3 查看不同网卡速度）&#xA;&lt;strong&gt;-m&lt;/strong&gt;： 只显示统计数据(推荐)，不显示流量图&#xA;&lt;strong&gt;退出查看： 按 q 键&lt;/strong&gt;&#xA;&lt;img src=&#34;https://img-blog.csdnimg.cn/c7d5d4ffb63f47f1a0f1398cc7ef6386.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hvbi5XYW5n,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>IPSec之IKEv1协议详解</title>
      <link>http://shanks.link/blog/2023/05/12/ipsec%E4%B9%8Bikev1%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 12 May 2023 11:53:35 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/05/12/ipsec%E4%B9%8Bikev1%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;h1 id=&#34;ike简介&#34;&gt;IKE简介&lt;/h1&gt;&#xA;&lt;h2 id=&#34;安全联盟sa&#34;&gt;安全联盟SA：&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;定义：&lt;/strong&gt; 安全联盟是要建立IPSec 隧道的通信双方对隧道参数的约定，包括隧道两端的IP地址、隧道采用的验证方式、验证算法、验证密钥、加密算法、共享密钥以及生命周期等一系列参数。&lt;/p&gt;</description>
    </item>
    <item>
      <title>IPsec基本原理</title>
      <link>http://shanks.link/blog/2023/05/12/ipsec%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</link>
      <pubDate>Fri, 12 May 2023 11:25:35 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/05/12/ipsec%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;h2 id=&#34;为什么要实施&#34;&gt;为什么要实施?&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;实施的最大动机是省钱。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;虚拟专用网络的分类&#34;&gt;虚拟专用网络的分类：&lt;/h2&gt;&#xA;&lt;p&gt;虚拟专用网分类方法很多。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;站点到站点的虚拟专用网&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;ATM，Rrame Relay， GRE， MPLS 虚拟专用网 ， &lt;strong&gt;IPSec 虚拟专用网&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;常用的是IPSec 虚拟专用网 。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CPU 是如何读写内存的</title>
      <link>http://shanks.link/blog/2023/05/12/cpu-%E6%98%AF%E5%A6%82%E4%BD%95%E8%AF%BB%E5%86%99%E5%86%85%E5%AD%98%E7%9A%84/</link>
      <pubDate>Fri, 12 May 2023 11:13:52 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/05/12/cpu-%E6%98%AF%E5%A6%82%E4%BD%95%E8%AF%BB%E5%86%99%E5%86%85%E5%AD%98%E7%9A%84/</guid>
      <description>&lt;h2 id=&#34;谁来告诉cpu读写内存&#34;&gt;&lt;strong&gt;谁来告诉CPU读写内存&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;我们第一个要搞清楚的问题是：谁来告诉CPU去读写内存？答案很明显，是程序员，更具体的是编译器。CPU只是按照指令按部就班的执行，机器指令从哪里来的呢？是编译器生成的，程序员通过高级语言编写程序，编译器将其翻译为机器指令，机器指令来告诉CPU去读写内存。在精简指令集架构下会有特定的机器指令，Load/Store指令来读写内存，以x86为代表的复杂指令集架构下没有特定的访存指令。精简指令集下，一条机器指令操作的数据必须来存放在寄存器中，不能直接操作内存数据，因此RISC下，数据必须先从内存搬运到寄存器，这就是为什么RISC下会有特定的Load/Store访存指令，明白了吧。&lt;/p&gt;</description>
    </item>
    <item>
      <title>openswan性能初步分析</title>
      <link>http://shanks.link/blog/2023/05/12/openswan%E6%80%A7%E8%83%BD%E5%88%9D%E6%AD%A5%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 12 May 2023 10:10:49 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/05/12/openswan%E6%80%A7%E8%83%BD%E5%88%9D%E6%AD%A5%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;这里相对openswan的性能做个简单的说明。为什么要介绍这个话题呢？&lt;/p&gt;&#xA;&lt;p&gt;其实最主要的原因还是想openswan的性能到底如何、极限是多少隧道、会有哪些瓶颈等等？ 比如某个项目，客户需要设备支持1000条隧道，那么首先要考虑自己的产品能否支持到这么多？也就是说需要知道自己的实力。如果不考虑这些实际的问题，只一味的接项目，那么最可能的结果就是白白投入这么多的人力物力时间，最终对于公司来说收效甚微。&#xA;&lt;img src=&#34;http://shanks.link/img/ipsec/f04732acf8c04d0fbbfc92f79e1dfa89.jpeg&#34; alt=&#34;请添加图片描述&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>IPsec在NAT下的端口浮动</title>
      <link>http://shanks.link/blog/2023/05/12/ipsec%E5%9C%A8nat%E4%B8%8B%E7%9A%84%E7%AB%AF%E5%8F%A3%E6%B5%AE%E5%8A%A8/</link>
      <pubDate>Fri, 12 May 2023 10:10:35 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/05/12/ipsec%E5%9C%A8nat%E4%B8%8B%E7%9A%84%E7%AB%AF%E5%8F%A3%E6%B5%AE%E5%8A%A8/</guid>
      <description>&lt;h2 id=&#34;ike端口浮动&#34;&gt;IKE端口浮动&lt;/h2&gt;&#xA;&lt;p&gt;IPsec在隧道建立第一第二阶段主要进行&lt;a href=&#34;https://so.csdn.net/so/search?q=%E5%8A%A0%E5%AF%86&amp;amp;spm=1001.2101.3001.7020&#34;&gt;加密&lt;/a&gt;方式、加密策略等信息的协商，这部分功能是通过IKE协议来实现的。&#xA;IKE协议默认端口为500，但是如果IPsec隧道传输路径上存在NAT设备，那么IKE的端口会从500浮动到4500端口，这样做最主要的目的是：&lt;/p&gt;</description>
    </item>
    <item>
      <title>DH算法图解&#43;数学证明</title>
      <link>http://shanks.link/blog/2023/05/12/dh%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3-%E6%95%B0%E5%AD%A6%E8%AF%81%E6%98%8E/</link>
      <pubDate>Fri, 12 May 2023 09:33:12 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/05/12/dh%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3-%E6%95%B0%E5%AD%A6%E8%AF%81%E6%98%8E/</guid>
      <description>&lt;p&gt;前几天和同事讨论IKE密钥交换流程时，提到了Diffie-Hellman交换。DH算法最主要的作用便是在不安全的网络上成功公共密钥(并未传输真实密钥)。但由于对于DH算法的数学原理则不清楚，因此私下对DH算法进行一个简单学习。&lt;/p&gt;</description>
    </item>
    <item>
      <title>IPSEC的感兴趣流引流实现方式</title>
      <link>http://shanks.link/blog/2023/05/12/ipsec%E7%9A%84%E6%84%9F%E5%85%B4%E8%B6%A3%E6%B5%81%E5%BC%95%E6%B5%81%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Fri, 12 May 2023 09:26:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/05/12/ipsec%E7%9A%84%E6%84%9F%E5%85%B4%E8%B6%A3%E6%B5%81%E5%BC%95%E6%B5%81%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;p&gt;在IPSEC通信中涉及到一个重要方面，那就是如何定义要保护的数据流（又称为感兴趣流）。这不仅涉及到IPSEC最终要保护哪部分数据，还关系到IPSEC的实现方式，因此有必要把感兴趣流的定义方式进行详细说明。&lt;/p&gt;</description>
    </item>
    <item>
      <title>为什么ESP能够穿越NAT，而AH则不能</title>
      <link>http://shanks.link/blog/2023/05/11/%E4%B8%BA%E4%BB%80%E4%B9%88esp%E8%83%BD%E5%A4%9F%E7%A9%BF%E8%B6%8Anat%E8%80%8Cah%E5%88%99%E4%B8%8D%E8%83%BD/</link>
      <pubDate>Thu, 11 May 2023 18:26:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/05/11/%E4%B8%BA%E4%BB%80%E4%B9%88esp%E8%83%BD%E5%A4%9F%E7%A9%BF%E8%B6%8Anat%E8%80%8Cah%E5%88%99%E4%B8%8D%E8%83%BD/</guid>
      <description>&lt;h3 id=&#34;严格地说只能是隧道模式下的esp才能穿越nat&#34;&gt;严格地说，只能是隧道模式下的ESP才能穿越NAT。&lt;/h3&gt;&#xA;&lt;p&gt;首先需要了解的是IPSEC的作用，即数据的机密性、完整性、认证性。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;机密性就是保证数据包的原始内容不被看到；&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;完整性即保证数据包的内容不会被修改；&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;认证性保证数据来自被信任的客户端。&lt;/p&gt;</description>
    </item>
    <item>
      <title>IP 协议号列表 List of IP protocol numbers</title>
      <link>http://shanks.link/blog/2023/05/11/ip-%E5%8D%8F%E8%AE%AE%E5%8F%B7%E5%88%97%E8%A1%A8-list-of-ip-protocol-numbers/</link>
      <pubDate>Thu, 11 May 2023 16:50:28 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/05/11/ip-%E5%8D%8F%E8%AE%AE%E5%8F%B7%E5%88%97%E8%A1%A8-list-of-ip-protocol-numbers/</guid>
      <description>&lt;h1 id=&#34;ip协议号列表-list-of-ip-protocol-numbers&#34;&gt;IP协议号列表 List of IP protocol numbers&lt;/h1&gt;&#xA;&lt;p&gt;这是用在&lt;a href=&#34;https://zh.wikipedia.org/wiki/IPv4&#34;&gt;IPv4&lt;/a&gt;头部和&lt;a href=&#34;https://zh.wikipedia.org/wiki/IPv6&#34;&gt;IPv6&lt;/a&gt;头部的&lt;em&gt;下一首部&lt;/em&gt;域的&lt;strong&gt;IP协议号列表&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;十进制&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;十六进制&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;关键字&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;协议&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;引用&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x00&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;HOPOPT&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IPv6逐跳选项&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2460&#34;&gt;RFC 2460&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x01&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;ICMP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E6%8E%A7%E5%88%B6%E6%B6%88%E6%81%AF%E5%8D%8F%E8%AE%AE&#34;&gt;互联网控制消息协议（ICMP）&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc792&#34;&gt;RFC 792&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x02&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IGMP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%9B%A0%E7%89%B9%E7%BD%91%E7%BB%84%E7%AE%A1%E7%90%86%E5%8D%8F%E8%AE%AE&#34;&gt;因特网组管理协议（IGMP）&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc1112&#34;&gt;RFC 1112&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;3&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x03&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;GGP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=%E7%BD%91%E5%85%B3%E5%AF%B9%E7%BD%91%E5%85%B3%E5%8D%8F%E8%AE%AE&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;网关对网关协议&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc823&#34;&gt;RFC 823&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x04&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IPv4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/IPv4&#34;&gt;IPv4&lt;/a&gt; (封装) / &lt;a href=&#34;https://zh.wikipedia.org/wiki/IP_in_IP&#34;&gt;IP-within-IP 封装协议&lt;/a&gt;（IPIP）&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2003&#34;&gt;RFC 2003&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;5&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x05&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;ST&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%9B%A0%E7%89%B9%E7%BD%91%E6%B5%81%E5%8D%8F%E8%AE%AE&#34;&gt;因特网流协议&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc1190&#34;&gt;RFC 1190&lt;/a&gt;, &lt;a href=&#34;https://tools.ietf.org/html/rfc1819&#34;&gt;RFC 1819&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;6&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x06&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;TCP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE&#34;&gt;传输控制协议（TCP）&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc793&#34;&gt;RFC 793&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;7&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x07&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;CBT&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=%E6%9C%89%E6%A0%B8%E6%A0%91%E7%BB%84%E6%92%AD%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;有核树组播路由协议&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2189&#34;&gt;RFC 2189&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x08&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;EGP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%A4%96%E9%83%A8%E7%BD%91%E5%85%B3%E5%8D%8F%E8%AE%AE&#34;&gt;外部网关协议&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc888&#34;&gt;RFC 888&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;9&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x09&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IGP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%86%85%E9%83%A8%E7%BD%91%E5%85%B3%E5%8D%8F%E8%AE%AE&#34;&gt;内部网关协议&lt;/a&gt;（任意私有内部网关（用于思科的IGRP））&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;10&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x0A&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;BBN-RCC-MON&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;BBN RCC 监视&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;11&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x0B&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;NVP-II&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E8%AF%AD%E9%9F%B3%E5%8D%8F%E8%AE%AE&#34;&gt;网络语音协议&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc741&#34;&gt;RFC 741&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;12&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x0C&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;PUP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Xerox &lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=PARC_Universal_Packet&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;PUP&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;13&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x0D&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;ARGUS&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;ARGUS&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;14&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x0E&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;EMCON&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;EMCON&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;15&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x0F&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;XNET&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Cross Net Debugger&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IEN 158&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;16&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x10&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;CHAOS&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Chaos&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;17&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x11&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;UDP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%8D%8F%E8%AE%AE&#34;&gt;用户数据报协议（UDP）&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc768&#34;&gt;RFC 768&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;18&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x12&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;MUX&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8&#34;&gt;多路复用&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IEN 90&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;19&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x13&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;DCN-MEAS&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;DCN Measurement Subsystems&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;20&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x14&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;HMP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Host_Monitoring_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Host Monitoring Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc869&#34;&gt;RFC 869&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;21&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x15&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;PRM&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Packet Radio Measurement&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;22&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x16&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;XNS-IDP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;XEROX NS IDP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;23&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x17&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;TRUNK-1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Trunk-1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;24&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x18&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;TRUNK-2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Trunk-2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;25&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x19&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;LEAF-1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Leaf-1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;26&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x1A&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;LEAF-2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Leaf-2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;27&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x1B&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;RDP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=%E5%8F%AF%E9%9D%A0%E6%95%B0%E6%8D%AE%E5%8D%8F%E8%AE%AE&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;可靠数据协议&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc908&#34;&gt;RFC 908&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;28&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x1C&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IRTP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Internet_Reliable_Transaction_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Internet Reliable Transaction Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc938&#34;&gt;RFC 938&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;29&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x1D&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;ISO-TP4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;ISO Transport Protocol Class 4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc905&#34;&gt;RFC 905&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;30&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x1E&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;NETBLT&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Bulk_Data_Transfer_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Bulk Data Transfer Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc998&#34;&gt;RFC 998&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;31&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x1F&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;MFE-NSP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=MFE_Network_Services_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;MFE Network Services Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;32&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x20&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;MERIT-INP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=MERIT_Internodal_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;MERIT Internodal Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;33&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x21&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;DCCP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/Datagram_Congestion_Control_Protocol&#34;&gt;Datagram Congestion Control Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4340&#34;&gt;RFC 4340&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;34&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x22&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;3PC&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Third_Party_Connect_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Third Party Connect Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;35&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x23&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IDPR&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Inter-Domain_Policy_Routing_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Inter-Domain Policy Routing Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc1479&#34;&gt;RFC 1479&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;36&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x24&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;XTP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Xpress_Transport_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Xpress Transport Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;37&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x25&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;DDP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Datagram_Delivery_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Datagram Delivery Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;38&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x26&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IDPR-CMTP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=IDPR_Control_Message_Transport_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;IDPR Control Message Transport Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;39&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x27&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;TP++&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=TP%2B%2B_Transport_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;TP++ Transport Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;40&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x28&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IL&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=IL_(network_protocol)&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;IL Transport Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;41&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x29&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IPv6&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/6in4&#34;&gt;IPv6 封装&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2473&#34;&gt;RFC 2473&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;42&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x2A&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;SDRP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Source_Demand_Routing_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Source Demand Routing Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc1940&#34;&gt;RFC 1940&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;43&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x2B&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IPv6-Route&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/IPv6&#34;&gt;IPv6&lt;/a&gt;路由拓展头&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2460&#34;&gt;RFC 2460&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;44&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x2C&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IPv6-Frag&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/IPv6&#34;&gt;IPv6&lt;/a&gt;分片扩展头&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2460&#34;&gt;RFC 2460&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;45&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x2D&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IDRP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Inter-Domain_Routing_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Inter-Domain Routing Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;46&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x2E&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;RSVP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%B5%84%E6%BA%90%E9%A2%84%E7%95%99%E5%8D%8F%E8%AE%AE&#34;&gt;资源预留协议&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2205&#34;&gt;RFC 2205&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;47&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x2F&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;GRE&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E8%B7%AF%E7%94%B1%E5%B0%81%E8%A3%85&#34;&gt;通用路由封装（GRE）&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2784&#34;&gt;RFC 2784&lt;/a&gt;, &lt;a href=&#34;https://tools.ietf.org/html/rfc2890&#34;&gt;RFC 2890&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;48&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x30&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;DSR&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=%E5%8A%A8%E6%80%81%E6%BA%90%E8%B7%AF%E7%94%B1&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;动态源路由&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;49&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x31&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;BNA&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;BNA&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;50&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x32&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;ESP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/IPsec&#34;&gt;封装安全协议（ESP）&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4303&#34;&gt;RFC 4303&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;51&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x33&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;AH&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/IPsec&#34;&gt;认证头协议（AH）&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4302&#34;&gt;RFC 4302&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;52&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x34&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;I-NLSP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Integrated_Net_Layer_Security_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Integrated Net Layer Security Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;TUBA&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;53&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x35&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;SWIPE&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=SwIPe_(protocol)&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;SwIPe&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IP with Encryption&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;54&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x36&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;NARP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=NBMA_Address_Resolution_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;NBMA Address Resolution Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc1735&#34;&gt;RFC 1735&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;55&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x37&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;MOBILE&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/Mobile_IP&#34;&gt;IP Mobility&lt;/a&gt; (Min Encap)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2004&#34;&gt;RFC 2004&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;56&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x38&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;TLSP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E6%80%A7%E5%8D%94%E5%AE%9A&#34;&gt;传输层安全性协议&lt;/a&gt;（使用Kryptonet密钥管理）&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;57&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x39&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;SKIP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Simple_Key-Management_for_Internet_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Simple Key-Management for Internet Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2356&#34;&gt;RFC 2356&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;58&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x3A&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IPv6-ICMP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/ICMPv6&#34;&gt;互联网控制消息协议第六版（ICMPv6）&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4443&#34;&gt;RFC 4443&lt;/a&gt;, &lt;a href=&#34;https://tools.ietf.org/html/rfc4884&#34;&gt;RFC 4884&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;59&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x3B&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IPv6-NoNxt&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/IPv6&#34;&gt;IPv6&lt;/a&gt;无负载头&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2460&#34;&gt;RFC 2460&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;60&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x3C&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IPv6-Opts&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/IPv6&#34;&gt;IPv6&lt;/a&gt;目标选项扩展头&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2460&#34;&gt;RFC 2460&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;61&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x3D&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;任意的主机内部协议&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;62&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x3E&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;CFTP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;CFTP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;63&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x3F&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;任意本地网络&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;64&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x40&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;SAT-EXPAK&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;SATNET and Backroom EXPAK&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;65&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x41&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;KRYPTOLAN&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Kryptolan&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;66&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x42&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;RVD&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;MIT远程虚拟磁盘协议&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;67&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x43&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IPPC&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Internet_Pluribus_Packet_Core&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Internet Pluribus Packet Core&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;68&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x44&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Any distributed file system&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;69&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x45&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;SAT-MON&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;SATNET Monitoring&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;70&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x46&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;VISA&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;VISA协议&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;71&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x47&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IPCV&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Internet Packet Core Utility&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;72&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x48&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;CPNX&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Computer Protocol Network Executive&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;73&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x49&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;CPHB&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Computer_Protocol_Heart_Beat&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Computer Protocol Heart Beat&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;74&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x4A&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;WSN&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Wang_Span_Network&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Wang Span Network&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;75&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x4B&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;PVP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Packet_Video_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Packet Video Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;76&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x4C&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;BR-SAT-MON&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Backroom SATNET Monitoring&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;77&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x4D&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;SUN-ND&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;SUN ND PROTOCOL-Temporary&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;78&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x4E&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;WB-MON&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;WIDEBAND Monitoring&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;79&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x4F&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;WB-EXPAK&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;WIDEBAND EXPAK&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;80&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x50&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;ISO-IP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;国际标准化组织互联网协议&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;81&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x51&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;VMTP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=V_(operating_system)&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Versatile Message Transaction Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc1045&#34;&gt;RFC 1045&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;82&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x52&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;SECURE-VMTP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Secure Versatile Message Transaction Protocol&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc1045&#34;&gt;RFC 1045&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;83&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x53&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;VINES&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;VINES&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;84&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x54&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;TTP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;TTP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;84&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x54&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IPTM&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Internet_Protocol_Traffic_Manager&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Internet Protocol Traffic Manager&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;85&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x55&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;NSFNET-IGP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;NSFNET-IGP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;86&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x56&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;DGP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Dissimilar_Gateway_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Dissimilar Gateway Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;87&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x57&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;TCF&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;TCF&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;88&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x58&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;EIGRP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%8A%A0%E5%BC%B7%E5%9E%8B%E9%96%98%E9%81%93%E9%96%93%E9%81%B8%E5%BE%91%E5%8D%94%E5%AE%9A&#34;&gt;增强型内部网关路由协议（EIGRP）&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;89&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x59&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;OSPF&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%BC%80%E6%94%BE%E5%BC%8F%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E4%BC%98%E5%85%88&#34;&gt;开放式最短路径优先（OSPF）&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc1583&#34;&gt;RFC 1583&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;90&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x5A&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Sprite-RPC&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Sprite RPC Protocol&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;91&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x5B&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;LARP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Locus_Address_Resolution_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Locus Address Resolution Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;92&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x5C&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;MTP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Multicast_Transport_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Multicast Transport Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;93&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x5D&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;AX.25&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=AX.25&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;AX.25&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;94&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x5E&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IPIP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/IP_in_IP&#34;&gt;IP-within-IP 封装协议&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;与4号协议重复&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;95&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x5F&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;MICP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Mobile_Internetworking_Control_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Mobile Internetworking Control Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;96&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x60&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;SCC-SP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Semaphore Communications Sec. Pro&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;97&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x61&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;ETHERIP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Ethernet-within-IP 封装协议&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc3378&#34;&gt;RFC 3378&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;98&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x62&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;ENCAP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;封装头部&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc1241&#34;&gt;RFC 1241&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;99&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x63&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;任意的加密模式&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;100&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x64&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;GMTP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;GMTP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;101&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x65&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IFMP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Ipsilon_Flow_Management_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Ipsilon Flow Management Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;102&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x66&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;PNNI&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;PNNI over IP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;103&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x67&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;PIM&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Protocol_Independent_Multicast&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Protocol Independent Multicast&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;104&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x68&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;ARIS&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IBM&amp;rsquo;s ARIS (Aggregate Route IP Switching) Protocol&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;105&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x69&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;SCPS&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=%E7%A9%BA%E9%97%B4%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E8%A7%84%E8%8C%83&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;空间通信协议规范&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;SCPS-TP[&lt;a href=&#34;https://zh.wikipedia.org/wiki/IP%E5%8D%8F%E8%AE%AE%E5%8F%B7%E5%88%97%E8%A1%A8#cite_note-1&#34;&gt;1]&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;106&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x6A&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;QNX&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/QNX&#34;&gt;QNX&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;107&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x6B&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;A/N&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Active Networks&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;108&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x6C&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IPComp&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=IP%E8%B4%9F%E8%BD%BD%E5%8E%8B%E7%BC%A9%E5%8D%8F%E8%AE%AE&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;IP负载压缩协议&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc3173&#34;&gt;RFC 3173&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;109&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x6D&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;SNP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Sitara_Networks_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Sitara Networks Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;110&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x6E&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Compaq-Peer&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Compaq_Peer_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Compaq Peer Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;111&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x6F&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IPX-in-IP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;封装于IP的&lt;a href=&#34;https://zh.wikipedia.org/wiki/IPX/SPX&#34;&gt;IPX&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;112&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x70&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;VRRP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%99%9B%E6%93%AC%E8%B7%AF%E7%94%B1%E5%99%A8%E5%82%99%E6%8F%B4%E5%8D%94%E5%AE%9A&#34;&gt;虛擬路由器備援協定&lt;/a&gt;、&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%85%B1%E7%94%A8%E4%BD%8D%E5%9D%80%E5%86%97%E9%A4%98%E5%8D%94%E5%AE%9A&#34;&gt;共用位址冗餘協定&lt;/a&gt;（没在&lt;a href=&#34;https://zh.wikipedia.org/wiki/Internet_Assigned_Numbers_Authority&#34;&gt;IANA&lt;/a&gt;注册）&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;VRRP:&lt;a href=&#34;https://tools.ietf.org/html/rfc3768&#34;&gt;RFC 3768&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;113&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x71&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;PGM&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%AE%9E%E9%99%85%E9%80%9A%E7%94%A8%E5%A4%9A%E6%92%AD&#34;&gt;实际通用多播&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc3208&#34;&gt;RFC 3208&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;114&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x72&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Any 0-hop protocol&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;115&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x73&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;L2TP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%BA%8C%E5%B1%82%E9%9A%A7%E9%81%93%E5%8D%8F%E8%AE%AE&#34;&gt;第二层隧道协议&lt;/a&gt;第三版&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc3931&#34;&gt;RFC 3931&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;116&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x74&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;DDX&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;D-II Data Exchange (DDX)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;117&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x75&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IATP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Interactive_Agent_Transfer_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Interactive Agent Transfer Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;118&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x76&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;STP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Schedule_Transfer_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Schedule Transfer Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;119&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x77&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;SRP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=SpectraLink_Radio_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;SpectraLink Radio Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;120&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x78&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;UTI&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Universal Transport Interface Protocol&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;121&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x79&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;SMP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Simple_Message_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Simple Message Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;122&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x7A&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;SM&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Simple Multicast Protocol&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;http://tools.ietf.org/html/draft-perlman-simple-multicast-03&#34;&gt;draft-perlman-simple-multicast-03&lt;/a&gt;（&lt;a href=&#34;https://web.archive.org/web/20160304060224/http://tools.ietf.org/html/draft-perlman-simple-multicast-03&#34;&gt;页面存档备份&lt;/a&gt;，存于&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E6%A1%A3%E6%A1%88%E9%A6%86&#34;&gt;互联网档案馆&lt;/a&gt;）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;123&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x7B&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;PTP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Performance_Transparency_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Performance Transparency Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;124&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x7C&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IS-IS over IPv4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;负载于&lt;a href=&#34;https://zh.wikipedia.org/wiki/IPv4&#34;&gt;IPv4&lt;/a&gt;的&lt;a href=&#34;https://zh.wikipedia.org/wiki/IS-IS&#34;&gt;IS-IS&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc1142&#34;&gt;RFC 1142&lt;/a&gt; and &lt;a href=&#34;https://tools.ietf.org/html/rfc1195&#34;&gt;RFC 1195&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;125&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x7D&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;FIRE&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Flexible Intra-AS Routing Environment&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;126&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x7E&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;CRTP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Combat_Radio_Transport_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Combat Radio Transport Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;127&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x7F&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;CRUDP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Combat_Radio_User_Datagram&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Combat Radio User Datagram&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;128&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x80&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;SSCOPMCE&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Service-Specific Connection-Oriented Protocol in a Multilink and Connectionless Environment&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;http://www.itu.int/rec/T-REC-Q.2111-199912-I&#34;&gt;ITU-T Q.2111 (1999)&lt;/a&gt;（&lt;a href=&#34;https://web.archive.org/web/20160304060904/http://www.itu.int/rec/T-REC-Q.2111-199912-I&#34;&gt;页面存档备份&lt;/a&gt;，存于&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E6%A1%A3%E6%A1%88%E9%A6%86&#34;&gt;互联网档案馆&lt;/a&gt;）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;129&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x81&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IPLT&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;130&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x82&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;SPS&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Secure_Packet_Shield&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Secure Packet Shield&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;131&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x83&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;PIPE&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Private IP Encapsulation within IP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;http://www.watersprings.org/pub/id/draft-petri-mobileip-pipe-00.txt&#34;&gt;Expired I-D draft-petri-mobileip-pipe-00.txt&lt;/a&gt;（&lt;a href=&#34;https://web.archive.org/web/20120216121905/http://www.watersprings.org/pub/id/draft-petri-mobileip-pipe-00.txt&#34;&gt;页面存档备份&lt;/a&gt;，存于&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E6%A1%A3%E6%A1%88%E9%A6%86&#34;&gt;互联网档案馆&lt;/a&gt;）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;132&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x84&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;SCTP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/Stream_Control_Transmission_Protocol&#34;&gt;Stream Control Transmission Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;133&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x85&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;FC&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%85%89%E7%BA%A4%E9%80%9A%E9%81%93&#34;&gt;光纤通道&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;134&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x86&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;RSVP-E2E-IGNORE&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Reservation Protocol (RSVP) End-to-End Ignore&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc3175&#34;&gt;RFC 3175&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;135&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x87&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Mobility Header&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%A7%BB%E5%8A%A8IP&#34;&gt;IPv6移动IP扩展头&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc6275&#34;&gt;RFC 6275&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;136&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x88&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;UDPLite&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/UDP-Lite&#34;&gt;UDP-Lite&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc3828&#34;&gt;RFC 3828&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;137&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x89&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;MPLS-in-IP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;封装于IP协议的&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%A4%9A%E5%8D%8F%E8%AE%AE%E6%A0%87%E7%AD%BE%E4%BA%A4%E6%8D%A2&#34;&gt;多协议标签交换&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4023&#34;&gt;RFC 4023&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;138&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x8A&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;manet&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Mobile_ad_hoc_network&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;MANET&lt;/a&gt; Protocols&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5498&#34;&gt;RFC 5498&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;139&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x8B&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;HIP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Host_Identity_Protocol&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Host Identity Protocol&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5201&#34;&gt;RFC 5201&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;140&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x8C&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Shim6&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Site_Multihoming_by_IPv6_Intermediation&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Site Multihoming by IPv6 Intermediation&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5533&#34;&gt;RFC 5533&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;141&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x8D&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;WESP&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/IPsec&#34;&gt;包装过的封装安全协议（ESP）&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5840&#34;&gt;RFC 5840&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;142&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x8E&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;ROHC&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=Robust_Header_Compression&amp;amp;action=edit&amp;amp;redlink=1&#34;&gt;Robust Header Compression&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5856&#34;&gt;RFC 5856&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;143-252&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0x8F-0xFC&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;未分配&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;253-254&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0xFD-0xFE&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;用于实验和测试&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc3692&#34;&gt;RFC 3692&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;255&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0xFF&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;保留&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;参见编辑&#34;&gt;参见[&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=IP%E5%8D%8F%E8%AE%AE%E5%8F%B7%E5%88%97%E8%A1%A8&amp;amp;action=edit&amp;amp;section=1&#34;&gt;编辑&lt;/a&gt;]&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Internet Protocol&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/IPv4&#34;&gt;IPv4&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/IPv6&#34;&gt;IPv6&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BB%A5%E5%A4%AA%E7%B1%BB%E5%9E%8B&#34;&gt;以太类型&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;参考资料编辑&#34;&gt;参考资料[&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=IP%E5%8D%8F%E8%AE%AE%E5%8F%B7%E5%88%97%E8%A1%A8&amp;amp;action=edit&amp;amp;section=2&#34;&gt;编辑&lt;/a&gt;]&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/IP%E5%8D%8F%E8%AE%AE%E5%8F%B7%E5%88%97%E8%A1%A8#cite_ref-1&#34;&gt;^&lt;/a&gt;&lt;/strong&gt; &lt;a href=&#34;https://web.archive.org/web/20070927024510/http://public.ccsds.org/publications/archive/714x0b2.pdf&#34;&gt;存档副本&lt;/a&gt; (PDF). [2006-05-27]. （&lt;a href=&#34;http://public.ccsds.org/publications/archive/714x0b2.pdf&#34;&gt;原始内容&lt;/a&gt; (PDF)存档于2007-09-27）.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;外部链接编辑&#34;&gt;外部链接[&lt;a href=&#34;https://zh.wikipedia.org/w/index.php?title=IP%E5%8D%8F%E8%AE%AE%E5%8F%B7%E5%88%97%E8%A1%A8&amp;amp;action=edit&amp;amp;section=3&#34;&gt;编辑&lt;/a&gt;]&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.iana.org/assignments/protocol-numbers&#34;&gt;Official list of protocol numbers&lt;/a&gt;（&lt;a href=&#34;https://web.archive.org/web/20100420045458/http://www.iana.org/assignments/protocol-numbers&#34;&gt;页面存档备份&lt;/a&gt;，存于&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E6%A1%A3%E6%A1%88%E9%A6%86&#34;&gt;互联网档案馆&lt;/a&gt;）&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>如何查看iptables关于nat的日志</title>
      <link>http://shanks.link/blog/2023/04/26/%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8Biptables%E5%85%B3%E4%BA%8Enat%E7%9A%84%E6%97%A5%E5%BF%97/</link>
      <pubDate>Wed, 26 Apr 2023 20:56:28 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/04/26/%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8Biptables%E5%85%B3%E4%BA%8Enat%E7%9A%84%E6%97%A5%E5%BF%97/</guid>
      <description>&lt;h3 id=&#34;查看iptables关于nat的日志的方法有许多种我在这里介绍一个简单的方法&#34;&gt;查看&lt;strong&gt;iptables&lt;/strong&gt;关于&lt;strong&gt;nat&lt;/strong&gt;的&lt;strong&gt;日志&lt;/strong&gt;的方法有许多种，我在这里介绍一个简单的方法。&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;使用iptables -t mangle -A POSTROUTING -j LOG &amp;ndash;log-level debug &amp;ndash;log-prefix &amp;ldquo;OUT PACKETS:&amp;rdquo;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;然后修改/etc/syslog.conf&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;加上一行 kern.debug /var/log/iptables&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;重启syslog服务&lt;/p&gt;&#xA;&lt;p&gt;这样，所有通过iptables的包就会被记录在/var/log/iptables里面&lt;/p&gt;</description>
    </item>
    <item>
      <title>VSCode远程调试linux程序</title>
      <link>http://shanks.link/blog/2023/04/26/vscode%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95linux%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Wed, 26 Apr 2023 20:45:48 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/04/26/vscode%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95linux%E7%A8%8B%E5%BA%8F/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://cloud.tencent.com/developer/article/1726411&#34;&gt;以下内容转载自&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;最近在Linux上调程序，但是gdb使用属于入门阶段，主要是没有图形化界面直观。在网上查找了有两个方案可选，一个是通过VisualStudio2019的远程调试功能，因为最近一7直在用VScode，所以没有试，之后有时间了可以试一下。另一个方案就是通过VScode的Remote Development插件（微软官方提供的）进行远程调试。本文介绍下这个方案。 虽然网上也有其他的文章进行介绍，但是都是写的成功的情况，没有写出来过程遇到的问题，而且有些地方不太清楚。所以我觉得自己写一个。另外请大家注意的是，&lt;strong&gt;这篇文档介绍的是远程调试，并不介绍远程编译&lt;/strong&gt;，远程调试VScode也是支持的，但是我目前不需要，后续如果需要再做配置，而且我的项目需要使用cmake及make进行编译，并不是直接用g++编译，所以也没有开始配置。 VScode的远程调试是利用gdbserver的机制进行的。大体原理是通过在Windows上或者其他图形化系统上的VScode，使用Remote Development插件进行ssh连接到远程Linux上，然后通过gdbserver提供的连接进行远程调试。下面开始介绍具体配置方式。&lt;/p&gt;</description>
    </item>
    <item>
      <title>华硕AC系列固件重打包与后门植入</title>
      <link>http://shanks.link/blog/2023/04/26/%E5%8D%8E%E7%A1%95ac%E7%B3%BB%E5%88%97%E5%9B%BA%E4%BB%B6%E9%87%8D%E6%89%93%E5%8C%85%E4%B8%8E%E5%90%8E%E9%97%A8%E6%A4%8D%E5%85%A5/</link>
      <pubDate>Wed, 26 Apr 2023 16:05:48 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/04/26/%E5%8D%8E%E7%A1%95ac%E7%B3%BB%E5%88%97%E5%9B%BA%E4%BB%B6%E9%87%8D%E6%89%93%E5%8C%85%E4%B8%8E%E5%90%8E%E9%97%A8%E6%A4%8D%E5%85%A5/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.wangan.com/p/11v7268daa23ddd6&#34;&gt;以下内容转载自&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;写在前面：华硕 AC 系列固件设备数量很多，，这篇文章对华硕 AC 系列固件进行了分析，并研究了其重打包方法。本篇文章以华硕 AC3200 固件为例。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;1. 固件解包及基本结构解析&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>小米固件mkxqimage</title>
      <link>http://shanks.link/blog/2023/04/26/%E5%B0%8F%E7%B1%B3%E5%9B%BA%E4%BB%B6mkxqimage/</link>
      <pubDate>Wed, 26 Apr 2023 15:47:52 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/04/26/%E5%B0%8F%E7%B1%B3%E5%9B%BA%E4%BB%B6mkxqimage/</guid>
      <description>&lt;h1 id=&#34;小米固件工具mkxqimage&#34;&gt;小米固件工具mkxqimage&lt;/h1&gt;&#xA;&lt;p&gt;小米基于 trx 改了个打包解包固件的工具&lt;/p&gt;&#xA;&lt;h1 id=&#34;小米固件工具mkxqimage-1&#34;&gt;小米固件工具mkxqimage&lt;/h1&gt;&#xA;&lt;p&gt;小米自己改了个打包解包固件的工具，基于 trx 改的（本质上还是 trx 格式），加了 RSA 验证和解包功能，路由系统里自带：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Usage:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkxqimg [-o outfile] [-p private_key] [-f file] [-f file [-f file [-f file ]]]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        [-x file]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        [-I]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;固件打包&#34;&gt;固件打包&lt;/h2&gt;&#xA;&lt;p&gt;小米官方在打包固件时用RSA私钥计算出固件的RSA签名，小米路由器下载固件后用RSA公钥来验证RSA签名，有效地防止固件被篡改。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Netgear固件分析与后门植入</title>
      <link>http://shanks.link/blog/2023/04/26/netgear%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90%E4%B8%8E%E5%90%8E%E9%97%A8%E6%A4%8D%E5%85%A5/</link>
      <pubDate>Wed, 26 Apr 2023 15:24:52 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/04/26/netgear%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90%E4%B8%8E%E5%90%8E%E9%97%A8%E6%A4%8D%E5%85%A5/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.secpulse.com/archives/160480.html&#34;&gt;以下内容转载自&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;记录对netgear XR300路由器固件分析以及重新打包过程&lt;/p&gt;&#xA;&lt;p&gt;文章亮点就是 全方面的讲解了固件重打包的流程，从怎么分析到实际操作都进行了讲解，并且根据固件的分层结构，详细介绍了每层数据的具体处理方法&lt;/p&gt;</description>
    </item>
    <item>
      <title>华硕路由器添加固件后门</title>
      <link>http://shanks.link/blog/2023/04/26/%E5%8D%8E%E7%A1%95%E8%B7%AF%E7%94%B1%E5%99%A8%E6%B7%BB%E5%8A%A0%E5%9B%BA%E4%BB%B6%E5%90%8E%E9%97%A8/</link>
      <pubDate>Wed, 26 Apr 2023 15:15:42 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/04/26/%E5%8D%8E%E7%A1%95%E8%B7%AF%E7%94%B1%E5%99%A8%E6%B7%BB%E5%8A%A0%E5%9B%BA%E4%BB%B6%E5%90%8E%E9%97%A8/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://cn-sec.com/archives/92207.html&#34;&gt;以下内容转载自&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;概述&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;在进行IoT漏洞利用的过程中，后利用阶段为了扩展利用效果和加强红队攻防对抗的能力，固件级别的后门（BackDoor）是非常重要的。&lt;/p&gt;&#xA;&lt;p&gt;极光无限维阵专家团队基于对华硕路由器漏洞的研究，对华硕无线路由器固件进行了深入解析，&lt;strong&gt;我们得出以下结论：直接在固件中添加后门命令，路由器前台进行固件更新即可植入固件级别的后门。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN 部署</title>
      <link>http://shanks.link/blog/2023/03/23/openvpn-%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Thu, 23 Mar 2023 15:48:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/03/23/openvpn-%E9%83%A8%E7%BD%B2/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;参考 &lt;a href=&#34;https://www.ishells.cn/archives/openvpn-server-client-deploy&#34;&gt;https://www.ishells.cn/archives/openvpn-server-client-deploy&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/pied/p/5402771.html&#34;&gt;参考blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;服务器上开启 ip 包转发和 nat 转换&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables -P INPUT ACCEPT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables -P FORWARD ACCEPT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;客户端上需要主动或被动设置 route 表&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>IPSec介绍</title>
      <link>http://shanks.link/blog/2023/03/20/ipsec%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Mon, 20 Mar 2023 14:43:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/03/20/ipsec%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;h1 id=&#34;ipsec协议簇安全框架&#34;&gt;IPSEC协议簇安全框架&lt;/h1&gt;&#xA;&lt;h2 id=&#34;aipsec简介&#34;&gt;a.IPSec简介&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;IPSec（Internet Protocol Security）&lt;/strong&gt;：是一组基于网络层的，应用密码学的安全&lt;a href=&#34;https://so.csdn.net/so/search?q=%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE&amp;amp;spm=1001.2101.3001.7020&#34;&gt;通信协议&lt;/a&gt;族。IPSec不是具体指哪个协议，而是一个&lt;strong&gt;开放的协议族&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;IPSec协议的设计目标&lt;/strong&gt;：是在IPV4和IPV6环境中为网络层流量提供灵活的安全服务。&lt;/p&gt;</description>
    </item>
    <item>
      <title>什么是IPSec</title>
      <link>http://shanks.link/blog/2023/03/01/%E4%BB%80%E4%B9%88%E6%98%AFipsec/</link>
      <pubDate>Wed, 01 Mar 2023 14:48:16 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/03/01/%E4%BB%80%E4%B9%88%E6%98%AFipsec/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://info.support.huawei.com/info-finder/encyclopedia/zh/index.html&#34;&gt;IP知识百科&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;什么是ipsec&#34;&gt;什么是IPsec？&lt;/h1&gt;&#xA;&lt;p&gt;IPsec（Internet Protocol Security）是为IP网络提供安全性的协议和服务的集合，它是VPN（Virtual Private Network，虚拟专用网）中常用的一种技术。 由于IP报文本身没有集成任何安全特性，IP数据包在公用网络如Internet中传输可能会面临被伪造、窃取或篡改的风险。通信双方通过IPsec建立一条IPsec隧道，IP数据包通过IPsec隧道进行加密传输，有效保证了数据在不安全的网络环境如Internet中传输的安全性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>nftables语法及例子</title>
      <link>http://shanks.link/blog/2023/01/29/nftables%E8%AF%AD%E6%B3%95%E5%8F%8A%E4%BE%8B%E5%AD%90/</link>
      <pubDate>Sun, 29 Jan 2023 13:44:04 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/01/29/nftables%E8%AF%AD%E6%B3%95%E5%8F%8A%E4%BE%8B%E5%AD%90/</guid>
      <description>&lt;h2 id=&#34;简要用例和说明&#34;&gt;简要用例和说明&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# 0 --- 说明 ---&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;下面例子中的单引号目的是为了避免nftable参数中的星号、花括号、分号等符号被shell展开解释掉了，导致nft命令出错。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# 1 ---- 规则集合操作 ---&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nft list ruleset         &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#  列出已有规则集&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nft flush ruleset        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#  清除已有规则集, 这个命令会清理掉所的表、规则链、表。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# 2 ---- 禁止别人ping无线网卡ipv4地址的例子，input钩子 ---&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nft add table ip tb0 &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#创建表(用来容纳多条链)。新建一个family为ip(也就是作用于ipv4地址族)的表, 表名为tb0。 &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nft list tables &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#列出所有表，这里可以看见刚刚建立的表tb0，注意tables是复数。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nft add chain ip tb0 ch0_input &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;{type filter hook input priority 0; policy accept; }&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#创建链(用来容纳多条规则)。在tb0表下创建链名为ch0_input的链，这条链的类型是filter(三种基本链中的一种)，链的钩子是input，优先级是0，策略为accept；这里&amp;#34;policy accept;&amp;#34;可以省略(因为他是默认的)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nft add rule ip tb0 ch0_input meta iifname &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;wlp3s0&amp;#39;&lt;/span&gt; icmp type echo-request drop &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#创建规则（规则包含matches和statements）。在tb0表ch0_input链上创建规则。规则的matches是：在wifi网络接口wlp3s0上的icmp请求。statements是：drop 。这里网络接口可以写成&amp;#39;wlp*&amp;#39;或&amp;#39;enp*&amp;#39;，表示所有的wifi网络接口或以太网卡借口。这里statements也可以写成&amp;#34;reject with icmp type net-prohibited&amp;#34;。注意我用matches和statements都是复数，说明matches和statements是支持多个的,本例中的matches就有两个，一个是匹配网卡，一个是匹配协议。关于mathes和statement的用法具体参考后文解释&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nft list table ip tb0 -an &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#列出表tb0详情，注意table是单数。这里地址族为ip，表名tb0， -a表示显示handle号(一种便于操作表、链、规则的序号，比如这里可以通过nft delete table handle 4来删除这个表，假设handle号是4)， -n数字形式&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nft delete table ip tb0 &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#删除表, 也可以通过表的handle号删除&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# 3 ---- 禁止访问某个外部ipv4/ipv6的某端口号的例子，output钩子 -----&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nft add table inet tb1 &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#创建表。针对inet地址族(inet表示ip地址族和ip6地址族。也就是针对ipv4和ipv6地址的)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nft add chain inet tb1 ch1_output &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;{type filter hook output priority 0; policy accept; }&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#添加链。 链类型为基本链中的filter链，钩子为output，默认策略为accept。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nft add rule inet tb1 ch1_output ip daddr 192.168.43.148 tcp dport 22 reject with tcp reset &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#添加规则。 matches为两个：1-目标ipv4地址 2-tcp 目标端口22。 statements是：使用tcp重置&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nft add rule inet tb1 ch1_output ip6 daddr fe80::fe9c:cc8e:f0b6:ac7e tcp dport &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;{22,80}&amp;#39;&lt;/span&gt; drop &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#添加规则。 matches有两个：目标ipv6地址和目标端口。statements:是drop。效果是执行ssh root@fe80::fe9c:cc8e:f0b6:ac7e%wlp3s0 无法连上ssh&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nft flush ruleset &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#清理规则集。清理后的效果，ssh root@fe80::fe9c:cc8e:f0b6:ac7e%wlp3s0 和 ssh root@192.168.43.148也提示输入密码了。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;nftables-也有表规则链规则的概念&#34;&gt;nftables 也有表、规则链、规则的概念&lt;/h2&gt;&#xA;&lt;h4 id=&#34;表是规则链的容器&#34;&gt;表是规则链的容器&lt;/h4&gt;&#xA;&lt;p&gt;表有几个family: ip/ip6/inet/arp/bridge/netdev; inet=ip和ip6的混合&lt;/p&gt;</description>
    </item>
    <item>
      <title>route命令管理路由表和默认网关</title>
      <link>http://shanks.link/blog/2022/12/07/route%E5%91%BD%E4%BB%A4%E7%AE%A1%E7%90%86%E8%B7%AF%E7%94%B1%E8%A1%A8%E5%92%8C%E9%BB%98%E8%AE%A4%E7%BD%91%E5%85%B3/</link>
      <pubDate>Wed, 07 Dec 2022 15:51:37 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/12/07/route%E5%91%BD%E4%BB%A4%E7%AE%A1%E7%90%86%E8%B7%AF%E7%94%B1%E8%A1%A8%E5%92%8C%E9%BB%98%E8%AE%A4%E7%BD%91%E5%85%B3/</guid>
      <description>&lt;h1 id=&#34;查看-linux-内核路由表&#34;&gt;查看 Linux 内核路由表&lt;/h1&gt;&#xA;&lt;p&gt;使用下面的 route 命令可以查看 Linux 内核路由表。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# route&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Destination     Gateway         Genmask         Flags Metric Ref    Use Iface&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;192.168.0.0     *               255.255.255.0   U     0      0        0 eth0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;169.254.0.0     *               255.255.0.0     U     0      0        0 eth0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;default         192.168.0.1     0.0.0.0         UG    0      0        0 eth0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;route 命令的输出项说明&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;输出项&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Destination&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;目标网段或者主机&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Gateway&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;网关地址，”*” 表示目标是本主机所属的网络，不需要路由&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Genmask&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;网络掩码&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Flags&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;标记。一些可能的标记如下：&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;U — 路由是活动的&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;H — 目标是一个主机&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;G — 路由指向网关&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;R — 恢复动态路由产生的表项&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;D — 由路由的后台程序动态地安装&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;M — 由路由的后台程序修改&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;! — 拒绝路由&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Metric&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;路由距离，到达指定网络所需的中转数（linux 内核中没有使用）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Ref&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;路由项引用次数（linux 内核中没有使用）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Use&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;此路由项被路由软件查找的次数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Iface&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;该路由表项对应的输出接口&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;网关为0.0.0.0的网络通常是直连到网络设备上的，本地的直通路由。因为到自己的直连设备上是不需要网关的，所以0.0.0.0的网关地址是正常的。目的地址是0.0.0.0的路由是你的缺省网关。&lt;/p&gt;</description>
    </item>
    <item>
      <title>golang 获取本机网卡IP、网关，可以通过IP地址来进行路由选择（多网卡）</title>
      <link>http://shanks.link/blog/2022/12/07/golang-%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%BA%E7%BD%91%E5%8D%A1ip%E7%BD%91%E5%85%B3%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87ip%E5%9C%B0%E5%9D%80%E6%9D%A5%E8%BF%9B%E8%A1%8C%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9%E5%A4%9A%E7%BD%91%E5%8D%A1/</link>
      <pubDate>Wed, 07 Dec 2022 13:23:06 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/12/07/golang-%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%BA%E7%BD%91%E5%8D%A1ip%E7%BD%91%E5%85%B3%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87ip%E5%9C%B0%E5%9D%80%E6%9D%A5%E8%BF%9B%E8%A1%8C%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9%E5%A4%9A%E7%BD%91%E5%8D%A1/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;package&lt;/span&gt; main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;syscall&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;net&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;unsafe&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;sort&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;type&lt;/span&gt; rtInfo &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;Dst net.IPNet&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;Gateway, PrefSrc net.IP&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;OutputIface &lt;span style=&#34;color:#00f&#34;&gt;uint32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;Priority &lt;span style=&#34;color:#00f&#34;&gt;uint32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;type&lt;/span&gt; routeSlice []*rtInfo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;type&lt;/span&gt; router &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;ifaces []net.Interface&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;addrs []net.IP&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;v4 routeSlice&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;getRouteInfo&lt;/span&gt;() (*router, &lt;span style=&#34;color:#00f&#34;&gt;error&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;rtr := &amp;amp;router{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;tab, err := syscall.&lt;span style=&#34;color:#c34e00&#34;&gt;NetlinkRIB&lt;/span&gt;(syscall.RTM_GETROUTE, syscall.AF_INET)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#00f&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;nil&lt;/span&gt;, err&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;msgs, err := syscall.&lt;span style=&#34;color:#c34e00&#34;&gt;ParseNetlinkMessage&lt;/span&gt;(tab)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#00f&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;nil&lt;/span&gt;, err&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; _, m := &lt;span style=&#34;color:#00f&#34;&gt;range&lt;/span&gt; msgs {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; m.Header.Type {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; syscall.NLMSG_DONE:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; syscall.RTM_NEWROUTE:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;rtmsg := (*syscall.RtMsg)(unsafe.&lt;span style=&#34;color:#c34e00&#34;&gt;Pointer&lt;/span&gt;(&amp;amp;m.Data[0]))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;attrs, err := syscall.&lt;span style=&#34;color:#c34e00&#34;&gt;ParseNetlinkRouteAttr&lt;/span&gt;(&amp;amp;m)&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#00f&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;nil&lt;/span&gt;, err&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;routeInfo := rtInfo{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;rtr.v4 = append(rtr.v4, &amp;amp;routeInfo)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; _, attr:= &lt;span style=&#34;color:#00f&#34;&gt;range&lt;/span&gt; attrs {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; attr.Attr.Type {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; syscall.RTA_DST:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;routeInfo.Dst.IP = net.&lt;span style=&#34;color:#c34e00&#34;&gt;IP&lt;/span&gt;(attr.Value)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;routeInfo.Dst.Mask = net.&lt;span style=&#34;color:#c34e00&#34;&gt;CIDRMask&lt;/span&gt;(int(rtmsg.Dst_len), len(attr.Value)*8)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; syscall.RTA_GATEWAY:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;routeInfo.Gateway = net.&lt;span style=&#34;color:#c34e00&#34;&gt;IPv4&lt;/span&gt;(attr.Value[0], attr.Value[1], attr.Value[2], attr.Value[3])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; syscall.RTA_OIF:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;routeInfo.OutputIface = *(*&lt;span style=&#34;color:#00f&#34;&gt;uint32&lt;/span&gt;)(unsafe.&lt;span style=&#34;color:#c34e00&#34;&gt;Pointer&lt;/span&gt;(&amp;amp;attr.Value[0]))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; syscall.RTA_PRIORITY:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;routeInfo.Priority = *(*&lt;span style=&#34;color:#00f&#34;&gt;uint32&lt;/span&gt;)(unsafe.&lt;span style=&#34;color:#c34e00&#34;&gt;Pointer&lt;/span&gt;(&amp;amp;attr.Value[0]))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; syscall.RTA_PREFSRC:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;routeInfo.PrefSrc = net.&lt;span style=&#34;color:#c34e00&#34;&gt;IPv4&lt;/span&gt;(attr.Value[0], attr.Value[1], attr.Value[2], attr.Value[3])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#x9;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;sort.&lt;span style=&#34;color:#c34e00&#34;&gt;Slice&lt;/span&gt;(rtr.v4, &lt;span style=&#34;color:#00f&#34;&gt;func&lt;/span&gt;(i, j &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#00f&#34;&gt;bool&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; rtr.v4[i].Priority &amp;lt; rtr.v4[j].Priority&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;ifaces, err := net.&lt;span style=&#34;color:#c34e00&#34;&gt;Interfaces&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#00f&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;nil&lt;/span&gt;, err&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; i, iface := &lt;span style=&#34;color:#00f&#34;&gt;range&lt;/span&gt; ifaces {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; i != iface.Index - 1 {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; iface.Flags &amp;amp; net.FlagUp == 0{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;rtr.ifaces = append(rtr.ifaces, iface)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;ifaceAddrs, err := iface.&lt;span style=&#34;color:#c34e00&#34;&gt;Addrs&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#00f&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;nil&lt;/span&gt;, err&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;var&lt;/span&gt; addrs net.IP&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; _, addr := &lt;span style=&#34;color:#00f&#34;&gt;range&lt;/span&gt; ifaceAddrs {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; inet, ok := addr.(*net.IPNet); ok {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; v4 := inet.IP.&lt;span style=&#34;color:#c34e00&#34;&gt;To4&lt;/span&gt;(); v4 != &lt;span style=&#34;color:#00f&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; addrs == &lt;span style=&#34;color:#00f&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addrs = v4&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;rtr.addrs = append(rtr.addrs, addrs)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; rtr, &lt;span style=&#34;color:#00f&#34;&gt;nil&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;func&lt;/span&gt; (r *router)&lt;span style=&#34;color:#c34e00&#34;&gt;getRoute&lt;/span&gt;(dst net.IP) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; _, rt := &lt;span style=&#34;color:#00f&#34;&gt;range&lt;/span&gt; r.v4 { &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; rt.Dst.IP != &lt;span style=&#34;color:#00f&#34;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; !rt.Dst.&lt;span style=&#34;color:#c34e00&#34;&gt;Contains&lt;/span&gt;(dst) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;fmt.&lt;span style=&#34;color:#c34e00&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;%-15v : &amp;#34;&lt;/span&gt;, dst.&lt;span style=&#34;color:#c34e00&#34;&gt;String&lt;/span&gt;())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; rt.PrefSrc == &lt;span style=&#34;color:#00f&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;fmt.&lt;span style=&#34;color:#c34e00&#34;&gt;Println&lt;/span&gt;(r.ifaces[rt.OutputIface - 1].Name, rt.Gateway.&lt;span style=&#34;color:#c34e00&#34;&gt;String&lt;/span&gt;(), r.addrs[rt.OutputIface - 1].&lt;span style=&#34;color:#c34e00&#34;&gt;String&lt;/span&gt;())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;} &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;fmt.&lt;span style=&#34;color:#c34e00&#34;&gt;Println&lt;/span&gt;(r.ifaces[rt.OutputIface - 1].Name, rt.Gateway.&lt;span style=&#34;color:#c34e00&#34;&gt;String&lt;/span&gt;(), rt.PrefSrc.&lt;span style=&#34;color:#c34e00&#34;&gt;String&lt;/span&gt;())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;newRoute, err := &lt;span style=&#34;color:#c34e00&#34;&gt;getRouteInfo&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#00f&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;fmt.&lt;span style=&#34;color:#c34e00&#34;&gt;Println&lt;/span&gt;(err)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;fmt.&lt;span style=&#34;color:#c34e00&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;**************************************&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;fmt.&lt;span style=&#34;color:#c34e00&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;%-15v %-15v %-15v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;interfaceName&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;gateway&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;ip&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; _, rt := &lt;span style=&#34;color:#00f&#34;&gt;range&lt;/span&gt; newRoute.v4 { &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; rt.Gateway != &lt;span style=&#34;color:#00f&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;fmt.&lt;span style=&#34;color:#c34e00&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;%-15v %-15v %-15v\n&amp;#34;&lt;/span&gt;, newRoute.ifaces[rt.OutputIface - 1].Name, rt.Gateway.&lt;span style=&#34;color:#c34e00&#34;&gt;String&lt;/span&gt;(), newRoute.addrs[rt.OutputIface - 1])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;fmt.&lt;span style=&#34;color:#c34e00&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;**************************************&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;newRoute.&lt;span style=&#34;color:#c34e00&#34;&gt;getRoute&lt;/span&gt;(net.&lt;span style=&#34;color:#c34e00&#34;&gt;ParseIP&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;192.168.2.100&amp;#34;&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;newRoute.&lt;span style=&#34;color:#c34e00&#34;&gt;getRoute&lt;/span&gt;(net.&lt;span style=&#34;color:#c34e00&#34;&gt;ParseIP&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;10.10.100.100&amp;#34;&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;newRoute.&lt;span style=&#34;color:#c34e00&#34;&gt;getRoute&lt;/span&gt;(net.&lt;span style=&#34;color:#c34e00&#34;&gt;ParseIP&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;172.1.2.100&amp;#34;&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/go/b5aa2e9ef836408cb18b90ee54a3cd52.png&#34; alt=&#34;运行输出&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>彻底搞懂etcd raft选举、数据同步</title>
      <link>http://shanks.link/blog/2022/12/02/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82etcd-raft%E9%80%89%E4%B8%BE%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/</link>
      <pubDate>Fri, 02 Dec 2022 16:42:24 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/12/02/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82etcd-raft%E9%80%89%E4%B8%BE%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/</guid>
      <description>&lt;h3 id=&#34;etcd-raft选举机制&#34;&gt;etcd raft选举机制&lt;/h3&gt;&#xA;&lt;p&gt;etcd 是一个分布式的k/V存储系统。核心使用了RAFT分布式一致性协议。一致性这个概念，它是指多个&lt;a href=&#34;https://cloud.tencent.com/product/cvm?from=10680&#34;&gt;服务器&lt;/a&gt;在状态达成一致，但是在一个分布式系统中，因为各种意外可能，有的服务器可能会崩溃或变得不可靠，它就不能和其他服务器达成一致状态。这样就需要一种Consensus协议，一致性协议是为了确保容错性，也就是即使系统中有一两个服务器当机，也不会影响其处理过程。&lt;/p&gt;&#xA;&lt;p&gt;为了以容错方式达成一致，我们不可能要求所有服务器100%都达成一致状态，只要超过半数的大多数服务器达成一致就可以了，假设有N台服务器，N/2 +1 就超过半数，代表大多数了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>深度剖析各种BloomFilter的原理、改进、应用场景</title>
      <link>http://shanks.link/blog/2022/12/02/%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%90%84%E7%A7%8Dbloomfilter%E7%9A%84%E5%8E%9F%E7%90%86%E6%94%B9%E8%BF%9B%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</link>
      <pubDate>Fri, 02 Dec 2022 16:37:40 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/12/02/%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%90%84%E7%A7%8Dbloomfilter%E7%9A%84%E5%8E%9F%E7%90%86%E6%94%B9%E8%BF%9B%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</guid>
      <description>&lt;p&gt;　　Bloom Filter是由Bloom在1970年提出的一种多哈希函数映射的快速查找算法。通常应用在一些需要快速判断某个元素是否属于集合，但是并不严格要求100%正确的场合。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux共享库、静态库、动态库详解</title>
      <link>http://shanks.link/blog/2022/12/02/linux%E5%85%B1%E4%BA%AB%E5%BA%93%E9%9D%99%E6%80%81%E5%BA%93%E5%8A%A8%E6%80%81%E5%BA%93%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 02 Dec 2022 15:39:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/12/02/linux%E5%85%B1%E4%BA%AB%E5%BA%93%E9%9D%99%E6%80%81%E5%BA%93%E5%8A%A8%E6%80%81%E5%BA%93%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;p&gt;&lt;strong&gt;介绍&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;​        使用GNU的工具我们如何在Linux下创建自己的程序函数库?一个“程序函数库”简单的说就是一个文件包含了一些编译好的代码和数据，这些编译好的代码和数据可以在事后供其他的程序使用。程序函数库可以使整个程序更加模块化，更容易重新编译，而且更方便升级。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tmux 使用教程</title>
      <link>http://shanks.link/blog/2022/11/29/tmux-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</link>
      <pubDate>Tue, 29 Nov 2022 20:34:04 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/11/29/tmux-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</guid>
      <description>&lt;h1 id=&#34;tmux-使用教程&#34;&gt;Tmux 使用教程&lt;/h1&gt;&#xA;&lt;p&gt;作者： &lt;a href=&#34;https://www.ruanyifeng.com/&#34;&gt;阮一峰&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Tmux 是一个终端复用器（terminal multiplexer），非常有用，属于常用的开发工具。&lt;/p&gt;&#xA;&lt;p&gt;本文介绍如何使用 Tmux。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.wangbase.com/blogimg/asset/201910/bg2019102005.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;tmux-是什么&#34;&gt;Tmux 是什么？&lt;/h2&gt;&#xA;&lt;h3 id=&#34;会话与进程&#34;&gt;会话与进程&lt;/h3&gt;&#xA;&lt;p&gt;命令行的典型使用方式是，打开一个终端窗口（terminal window，以下简称&amp;quot;窗口&amp;quot;），在里面输入命令。&lt;strong&gt;用户与计算机的这种临时的交互，称为一次&amp;quot;会话&amp;quot;（session）&lt;/strong&gt; 。&lt;/p&gt;</description>
    </item>
    <item>
      <title>iptables 设置防火墙</title>
      <link>http://shanks.link/blog/2022/11/28/iptables-%E8%AE%BE%E7%BD%AE%E9%98%B2%E7%81%AB%E5%A2%99/</link>
      <pubDate>Mon, 28 Nov 2022 11:08:14 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/11/28/iptables-%E8%AE%BE%E7%BD%AE%E9%98%B2%E7%81%AB%E5%A2%99/</guid>
      <description>&lt;h1 id=&#34;centos配置iptables规则并使其永久生效&#34;&gt;CentOS配置iptables规则并使其永久生效&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#添加屏蔽IP&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#禁止此IP访问服务器&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables -I INPUT -s 1.2.3.4 -j DROP&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;或&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables -A INPUT -s 1.2.3.4 -j DROP&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#禁止服务器访问此IP&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables -A OUTPUT -d 1.2.3.4 -j DROP&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;如果要封某个网段：&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables -I INPUT -s 1.2.3.0/24 -j DROP&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#清空屏蔽IP&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables -t filter -D INPUT -s 1.2.3.4 -j DROP&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables -t filter -D OUTPUT -d 1.2.3.4 -j DROP&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#一键清空所有规则&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables -F&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#查看&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables -L INPUT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;或&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables -L&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables-save（此命令将保存规则，下次开机自动执行）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#处理IP碎片数量,防止攻击,允许每秒100个&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables -A FORWARD -f -m limit --limit 100/s --limit-burst 100 -j ACCEPT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#设置ICMP包过滤,允许每秒1个包,限制触发条件是10个包&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables -A FORWARD -p icmp -m limit --limit 1/s --limit-burst 10 -j ACCEPT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;复制代码&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;1. 目的&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>常见的网络设备：集线器 hub、网桥、交换机 switch、路由器 router、网关 gateway</title>
      <link>http://shanks.link/blog/2022/11/22/%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E9%9B%86%E7%BA%BF%E5%99%A8-hub%E7%BD%91%E6%A1%A5%E4%BA%A4%E6%8D%A2%E6%9C%BA-switch%E8%B7%AF%E7%94%B1%E5%99%A8-router%E7%BD%91%E5%85%B3-gateway/</link>
      <pubDate>Tue, 22 Nov 2022 11:13:28 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/11/22/%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E9%9B%86%E7%BA%BF%E5%99%A8-hub%E7%BD%91%E6%A1%A5%E4%BA%A4%E6%8D%A2%E6%9C%BA-switch%E8%B7%AF%E7%94%B1%E5%99%A8-router%E7%BD%91%E5%85%B3-gateway/</guid>
      <description>&lt;h2 id=&#34;repeater-中继器&#34;&gt;Repeater &lt;a href=&#34;https://so.csdn.net/so/search?q=%E4%B8%AD%E7%BB%A7%E5%99%A8&amp;amp;spm=1001.2101.3001.7020&#34;&gt;中继器&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;中继器在物理层运行， 2 端口设备。放大信号，从而延长信号在同一网络上传输的长度。&lt;/p&gt;&#xA;&lt;h2 id=&#34;hub-集线器&#34;&gt;Hub 集线器&lt;/h2&gt;&#xA;&lt;p&gt;集线器在物理层运行，基本上是一个多端口中继器。集线器连接来自不同分支的多条电线，例如连接星形拓扑中的不同节点。集线器不能过滤数据，因此数据包将发送到所有连接的设备（广播）。集线器都有碰撞检测功能，每次只允许一个设备发送广播信号，效率低。&#xA;&lt;img src=&#34;http://shanks.link/img/tcpip/20180527184325780.png&#34; alt=&#34;hubs&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>D-Bus系列入门</title>
      <link>http://shanks.link/blog/2022/11/16/d-bus%E7%B3%BB%E5%88%97%E5%85%A5%E9%97%A8/</link>
      <pubDate>Wed, 16 Nov 2022 11:43:52 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/11/16/d-bus%E7%B3%BB%E5%88%97%E5%85%A5%E9%97%A8/</guid>
      <description>&lt;h2 id=&#34;背景知识&#34;&gt;背景知识&lt;/h2&gt;&#xA;&lt;p&gt;有很多IPC（interprocess communication ） ，用于不同的解决方案：CORBA 是用于面向对象编程中复杂的 IPC 的一个强大的解决方案。 DCOP 是一个较轻量级的 IPC 框架，功能较少，但是可以很好地集成到 K 桌面环境中。SOAP 和 XML-RPC 设计用于 Web 服务，因而使用 HTTP 作为其传输协议。 D-BUS 设计用于桌面应用程序和 OS 通信。D-Bus(其中D原先是代表桌面“Desktop” 的意思)，即：用于桌面操作系统的通信总线。 现在逐渐被引入到嵌入式系统中，不过名字还是保留原先的叫法而已。&lt;/p&gt;</description>
    </item>
    <item>
      <title>基础学习之 第十二章 Shell Scripts</title>
      <link>http://shanks.link/blog/2022/11/12/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8B-%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0-shell-scripts/</link>
      <pubDate>Sat, 12 Nov 2022 13:32:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/11/12/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8B-%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0-shell-scripts/</guid>
      <description>&lt;p&gt;如果你真的很想要走資訊這條路，並且想要管理好屬於你的主機，那麼，別說鳥哥不告訴你， 可以自動管理系統的好工具： Shell scripts！這傢伙真的是得要好好學習學習的！ 基本上， shell script 有點像是早期的批次檔，亦即是將一些指令彙整起來一次執行，但是 Shell script 擁有更強大的功能，那就是他可以進行類似程式 (program) 的撰寫，並且不需要經過編譯 (compile) 就能夠執行， 真的很方便。加上我們可透過 shell script 來簡化我們日常的工作管理， 而且，整個 Linux 環境中，一些服務 (services) 的啟動都是透過 shell script 的， 如果你對於 script 不瞭解，嘿嘿！發生問題時，可真是會求助無門喔！所以，好好的學一學他吧！&lt;/p&gt;</description>
    </item>
    <item>
      <title>Installing Go from source and cross compile</title>
      <link>http://shanks.link/blog/2022/11/08/installing-go-from-source-and-cross-compile/</link>
      <pubDate>Tue, 08 Nov 2022 13:53:12 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/11/08/installing-go-from-source-and-cross-compile/</guid>
      <description>&lt;p&gt;This topic describes how to build and run Go from source code. To install with an installer, see &lt;a href=&#34;https://go.dev/doc/install&#34;&gt;Download and install&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Go is an open source project, distributed under a &lt;a href=&#34;https://go.dev/LICENSE&#34;&gt;BSD-style license&lt;/a&gt;. This document explains how to check out the sources, build them on your own machine, and run them.&lt;/p&gt;&#xA;&lt;p&gt;Most users don&amp;rsquo;t need to do this, and will instead install from precompiled binary packages as described in &lt;a href=&#34;https://go.dev/doc/install&#34;&gt;Download and install&lt;/a&gt;, a much simpler process. If you want to help develop what goes into those precompiled packages, though, read on.&lt;/p&gt;</description>
    </item>
    <item>
      <title>服务器架设之 第八章 路由器概念与路由器的设定</title>
      <link>http://shanks.link/blog/2022/11/08/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E8%AE%BE%E4%B9%8B-%E7%AC%AC%E5%85%AB%E7%AB%A0-%E8%B7%AF%E7%94%B1%E5%99%A8%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8%E7%9A%84%E8%AE%BE%E5%AE%9A/</link>
      <pubDate>Tue, 08 Nov 2022 13:19:04 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/11/08/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E8%AE%BE%E4%B9%8B-%E7%AC%AC%E5%85%AB%E7%AB%A0-%E8%B7%AF%E7%94%B1%E5%99%A8%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8%E7%9A%84%E8%AE%BE%E5%AE%9A/</guid>
      <description>&lt;p&gt;如果說 IP 是門牌，那麼郵差如何走到你家就是『路由』的功能啦！區域網路如果想成是條巷子，那麼路由器就是那間巷子內的郵局！ 其實本章應該是第二章網路基礎的延伸，將網路的設定延伸到整個區網的路由器上而已。那何時會用到路由器？ 如果你的環境中需要將整批 IP 再區隔出不同的廣播區段時，那麼就得要透過路由器的封包轉遞能力了。 本章是下一章防火牆與 NAT 的基礎，得先看完才比較容易理解下一章想要討論的事情喔！&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenWrt 安装Git</title>
      <link>http://shanks.link/blog/2022/11/02/openwrt-%E5%AE%89%E8%A3%85git/</link>
      <pubDate>Wed, 02 Nov 2022 15:30:38 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/11/02/openwrt-%E5%AE%89%E8%A3%85git/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;安装git软件,ssh相关的组件&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;opkg update&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;opkg install git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;opkg install openssh-keygen&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;opkg install openssh-client&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>dd生成指定文件</title>
      <link>http://shanks.link/blog/2022/10/26/dd%E7%94%9F%E6%88%90%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6/</link>
      <pubDate>Wed, 26 Oct 2022 17:17:07 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/26/dd%E7%94%9F%E6%88%90%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;p&gt;Linux dd 命令用于读取、转换并输出数据。&lt;/p&gt;&#xA;&lt;p&gt;dd 可从标准输入或文件中读取数据，根据指定的格式来转换数据，再输出到文件、设备或标准输出。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;参数说明:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;if=文件名：输入文件名，默认为标准输入。即指定源文件。&lt;/li&gt;&#xA;&lt;li&gt;of=文件名：输出文件名，默认为标准输出。即指定目的文件。&lt;/li&gt;&#xA;&lt;li&gt;ibs=bytes：一次读入bytes个字节，即指定一个块大小为bytes个字节。&#xA;obs=bytes：一次输出bytes个字节，即指定一个块大小为bytes个字节。&#xA;bs=bytes：同时设置读入/输出的块大小为bytes个字节。&lt;/li&gt;&#xA;&lt;li&gt;cbs=bytes：一次转换bytes个字节，即指定转换缓冲区大小。&lt;/li&gt;&#xA;&lt;li&gt;skip=blocks：从输入文件开头跳过blocks个块后再开始复制。&lt;/li&gt;&#xA;&lt;li&gt;seek=blocks：从输出文件开头跳过blocks个块后再开始复制。&lt;/li&gt;&#xA;&lt;li&gt;count=blocks：仅拷贝blocks个块，块大小等于ibs指定的字节数。&lt;/li&gt;&#xA;&lt;li&gt;conv=&amp;lt;关键字&amp;gt;，关键字可以有以下11种：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;conversion：用指定的参数转换文件。&lt;/li&gt;&#xA;&lt;li&gt;ascii：转换ebcdic为ascii&lt;/li&gt;&#xA;&lt;li&gt;ebcdic：转换ascii为ebcdic&lt;/li&gt;&#xA;&lt;li&gt;ibm：转换ascii为alternate ebcdic&lt;/li&gt;&#xA;&lt;li&gt;block：把每一行转换为长度为cbs，不足部分用空格填充&lt;/li&gt;&#xA;&lt;li&gt;unblock：使每一行的长度都为cbs，不足部分用空格填充&lt;/li&gt;&#xA;&lt;li&gt;lcase：把大写字符转换为小写字符&lt;/li&gt;&#xA;&lt;li&gt;ucase：把小写字符转换为大写字符&lt;/li&gt;&#xA;&lt;li&gt;swap：交换输入的每对字节&lt;/li&gt;&#xA;&lt;li&gt;noerror：出错时不停止&lt;/li&gt;&#xA;&lt;li&gt;notrunc：不截短输出文件&lt;/li&gt;&#xA;&lt;li&gt;sync：将每个输入块填充到ibs个字节，不足部分用空（NUL）字符补齐。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&amp;ndash;help：显示帮助信息&lt;/li&gt;&#xA;&lt;li&gt;&amp;ndash;version：显示版本信息&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;实例&#34;&gt;实例&lt;/h3&gt;&#xA;&lt;p&gt;在Linux 下制作启动盘，可使用如下命令：&lt;/p&gt;</description>
    </item>
    <item>
      <title>curl 上传文件，显示速率</title>
      <link>http://shanks.link/blog/2022/10/26/curl-%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E6%98%BE%E7%A4%BA%E9%80%9F%E7%8E%87/</link>
      <pubDate>Wed, 26 Oct 2022 17:10:37 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/26/curl-%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E6%98%BE%E7%A4%BA%E9%80%9F%E7%8E%87/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -u name:psw -T fileName ftp://10.15.50.35&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>wget 命令的使用：HTTP文件下载、FTP文件下载</title>
      <link>http://shanks.link/blog/2022/10/26/wget-%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8http%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BDftp%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</link>
      <pubDate>Wed, 26 Oct 2022 17:07:05 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/26/wget-%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8http%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BDftp%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</guid>
      <description>&lt;h1 id=&#34;wget命令简介与安装&#34;&gt;wget命令简介与安装&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;wget&lt;/code&gt;是用于在&lt;a href=&#34;https://so.csdn.net/so/search?q=%E5%91%BD%E4%BB%A4%E8%A1%8C&amp;amp;spm=1001.2101.3001.7020&#34;&gt;命令行&lt;/a&gt;终端下载网络文件的开源免费的命令工具，支持 HTTP/HTTPS、FTP/FTPS 协议的下载。wget 与 curl 相似，curl 可以理解为是一个浏览器，wget 则可以理解是迅雷。wget 意为 World Wide Web 与 get 的结合。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux 下 ftp 服务器的搭建</title>
      <link>http://shanks.link/blog/2022/10/26/linux-%E4%B8%8B-ftp-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Wed, 26 Oct 2022 16:59:54 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/26/linux-%E4%B8%8B-ftp-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA/</guid>
      <description>&lt;h1 id=&#34;下载vsftpd&#34;&gt;下载vsftpd&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install vsftpd&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;配置vsftpd&#34;&gt;配置vsftpd&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo vim /etc/vsftpd.conf&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;listen=YES || NO  &amp;ndash;设置vsftpd服务器是否以standalone模式运行。以standalone模式运行是一种较好 的方式，此时listen必须设置为YES，此为默认值。建议不要更改，有很多与服务器运行相关的配置命令，需要在此模式下才有效。若设置为NO，则 vsftpd不是以独立的服务运行，要受到xinetd服务的管控，功能上会受到限制。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu20 安装 Samba</title>
      <link>http://shanks.link/blog/2022/10/25/ubuntu20-%E5%AE%89%E8%A3%85-samba/</link>
      <pubDate>Tue, 25 Oct 2022 15:42:37 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/25/ubuntu20-%E5%AE%89%E8%A3%85-samba/</guid>
      <description>&lt;h3 id=&#34;更新当前软件&#34;&gt;更新当前软件&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get upgrade&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get dist-upgrade&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;安装samba服务器&#34;&gt;安装samba服务器&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install samba samba-common&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;添加用户&#34;&gt;添加用户&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(下面的zhongshan是我的用户名，之后会需要设置samba的密码)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo smbpasswd -a zhongshan&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;配置samba的配置文件&#34;&gt;配置samba的配置文件&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo vim /etc/samba/smb.conf&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;在配置文件smb.conf的最后添加下面的内容：&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[zhongshan]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;comment = zhongshan&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;browseable = yes&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;path = /home/zhongshan&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;create mask = 0700&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;directory mask = 0700&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;valid users = zhongshan&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;force user = zhongshan&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;force group = zhongshan&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;public = yes&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;available = yes&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;writable = yes&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;重启samba服务器&#34;&gt;重启samba服务器&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;（注：每次配置完，必须重启samba服务）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo service smbd restart&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/midhillzhou/p/14893889.html&#34;&gt;以上内容转载自本链接并标明出去，若有侵权请联系站长删除&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>luci的框架和认识</title>
      <link>http://shanks.link/blog/2022/10/24/luci%E7%9A%84%E6%A1%86%E6%9E%B6%E5%92%8C%E8%AE%A4%E8%AF%86/</link>
      <pubDate>Mon, 24 Oct 2022 16:22:06 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/24/luci%E7%9A%84%E6%A1%86%E6%9E%B6%E5%92%8C%E8%AE%A4%E8%AF%86/</guid>
      <description>&lt;p&gt;官网：&lt;/p&gt;&#xA;&lt;p&gt;有关luci的各个方面，你几乎都可以从这里获得，当然，只是浅显的获得，luci的文档写的还算比较全，但是写的稍显简略，开始看的时候会有一点不知所措。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Luci实现框架</title>
      <link>http://shanks.link/blog/2022/10/24/luci%E5%AE%9E%E7%8E%B0%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Mon, 24 Oct 2022 15:24:05 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/24/luci%E5%AE%9E%E7%8E%B0%E6%A1%86%E6%9E%B6/</guid>
      <description>&lt;h2 id=&#34;1总述&#34;&gt;1.总述&lt;/h2&gt;&#xA;&lt;p&gt;上一篇总结了uhttpd的工作方式，openwrt中利用它作为web服务器，实现客户端web页面配置功能。对于request处理方式，采用的是cgi，而所用的cgi程序就是luci，工作框架如下图所示：&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenWrt Luci页面如何配置底部按钮（返回、保存、复位）</title>
      <link>http://shanks.link/blog/2022/10/24/openwrt-luci%E9%A1%B5%E9%9D%A2%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%BA%95%E9%83%A8%E6%8C%89%E9%92%AE%E8%BF%94%E5%9B%9E%E4%BF%9D%E5%AD%98%E5%A4%8D%E4%BD%8D/</link>
      <pubDate>Mon, 24 Oct 2022 13:52:34 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/24/openwrt-luci%E9%A1%B5%E9%9D%A2%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%BA%95%E9%83%A8%E6%8C%89%E9%92%AE%E8%BF%94%E5%9B%9E%E4%BF%9D%E5%AD%98%E5%A4%8D%E4%BD%8D/</guid>
      <description>&lt;p&gt;在&lt;a href=&#34;https://so.csdn.net/so/search?q=OpenWrt&amp;amp;spm=1001.2101.3001.7020&#34;&gt;OpenWrt&lt;/a&gt;开发过程中，会用到不同风格的页面，比如有的是配置页面，有的是状态页面&#xA;而状态页面是不需要保存按钮的&lt;/p&gt;&#xA;&lt;p&gt;如何屏蔽保存按钮，增加返回按钮呢？&lt;/p&gt;&#xA;&lt;p&gt;OpenWrt Luci&lt;a href=&#34;https://so.csdn.net/so/search?q=%E6%A1%86%E6%9E%B6&amp;amp;spm=1001.2101.3001.7020&#34;&gt;框架&lt;/a&gt;已经做了很好的封装，只需要配置相关变量即可。&lt;/p&gt;&#xA;&lt;p&gt;而luci的footer页面采用了模板，我们可以在controller中增加字段定义即可屏蔽底部按钮&#xA;底部按钮有以下几种&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenWrt 系统UCI详解(Lua、C语言调用uci接口实例)</title>
      <link>http://shanks.link/blog/2022/10/24/openwrt-%E7%B3%BB%E7%BB%9Fuci%E8%AF%A6%E8%A7%A3luac%E8%AF%AD%E8%A8%80%E8%B0%83%E7%94%A8uci%E6%8E%A5%E5%8F%A3%E5%AE%9E%E4%BE%8B/</link>
      <pubDate>Mon, 24 Oct 2022 13:37:08 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/24/openwrt-%E7%B3%BB%E7%BB%9Fuci%E8%AF%A6%E8%A7%A3luac%E8%AF%AD%E8%A8%80%E8%B0%83%E7%94%A8uci%E6%8E%A5%E5%8F%A3%E5%AE%9E%E4%BE%8B/</guid>
      <description>&lt;h2 id=&#34;uci简介&#34;&gt;UCI简介&lt;/h2&gt;&#xA;&lt;p&gt;&amp;ldquo;uci&amp;quot;是&amp;quot;Unified &lt;a href=&#34;https://so.csdn.net/so/search?q=Configuration&amp;amp;spm=1001.2101.3001.7020&#34;&gt;Configuration&lt;/a&gt; Interface&amp;rdquo;(统一配置界面)的缩写,用于OpenWrt整个系统的配置集中化。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git 清除历史记录</title>
      <link>http://shanks.link/blog/2022/10/24/git-%E6%B8%85%E9%99%A4%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 24 Oct 2022 10:37:52 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/24/git-%E6%B8%85%E9%99%A4%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/</guid>
      <description>&lt;h1 id=&#34;git-清除所有历史记录&#34;&gt;Git 清除所有历史记录&lt;/h1&gt;&#xA;&lt;h5 id=&#34;1-进入仓库拉一个分支比如名为-latest_branch&#34;&gt;1. 进入仓库，拉一个分支比如名为 latest_branch&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git checkout --orphan latest_branch&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;–orphan 创建一个无任何历史记录的孤儿分支&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;2-添加所有文件到上述分支并提交一次&#34;&gt;2. 添加所有文件到上述分支并提交一次&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add -A&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -am &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;initial commit&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;3-删除-master-分支&#34;&gt;3. 删除 master 分支&lt;/h5&gt;&#xA;&lt;p&gt;登录后复制&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to fix ‘fatal: refusing to merge unrelated histories’ Git error</title>
      <link>http://shanks.link/blog/2022/10/24/how-to-fix-fatal-refusing-to-merge-unrelated-histories-git-error/</link>
      <pubDate>Mon, 24 Oct 2022 10:02:49 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/24/how-to-fix-fatal-refusing-to-merge-unrelated-histories-git-error/</guid>
      <description>&lt;h2 id=&#34;what-is-the-fatal-refusing-to-merge-unrelated-histories-error&#34;&gt;What is the ‘fatal: refusing to merge unrelated histories’ error?&lt;/h2&gt;&#xA;&lt;p&gt;The &lt;code&gt;fatal: refusing to merge histories&lt;/code&gt; error is a fairly common Git error. It appears when a developer tries to merge two unrelated projects into a single branch.&lt;/p&gt;&#xA;&lt;p&gt;This error appears when the branch has its commit histories and tags incompatible with the pull request or clone.&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenWrt Luci流程分析</title>
      <link>http://shanks.link/blog/2022/10/21/openwrt-luci%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 21 Oct 2022 18:33:49 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/21/openwrt-luci%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h1 id=&#34;页面请求&#34;&gt;页面请求：&lt;/h1&gt;&#xA;&lt;h4 id=&#34;代码结构&#34;&gt;代码结构&lt;/h4&gt;&#xA;&lt;p&gt;在openwrt文件系统中，lua语言的代码不要编译，类似一种脚本语言被执行，还有一些uhttpd服务器的主目录，它们是：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/www/index.html&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cgi-bin/luci&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;luci-static/xxx/xx.css、js、gif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/lib/lua/nixio.so、uci.so&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;luci/http.lua、dispatcher.lua、core…&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;controller/xxx.lua&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model/xxx.lua&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;view/xxx.lua&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;界面显示&#34;&gt;界面显示&lt;/h2&gt;&#xA;&lt;p&gt;网页请求格式基本都如下所示：，说明处理都在服务器的默认网站下的/cgi-bin/luci文件进行处理。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Openwrt 编译x86镜像</title>
      <link>http://shanks.link/blog/2022/10/21/openwrt-%E7%BC%96%E8%AF%91x86%E9%95%9C%E5%83%8F/</link>
      <pubDate>Fri, 21 Oct 2022 17:24:58 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/21/openwrt-%E7%BC%96%E8%AF%91x86%E9%95%9C%E5%83%8F/</guid>
      <description>&lt;p&gt;有些同学可能想学习&lt;a href=&#34;https://so.csdn.net/so/search?q=openwrt&amp;amp;spm=1001.2101.3001.7020&#34;&gt;openwrt&lt;/a&gt;系统，但手头又没有嵌入式板子，是编译和运行系统，然后再增加自己的功能。下面介绍如何编译openwrt系统后再虚拟机下运行。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;下载openwrt最新代码&#xA;在&lt;a href=&#34;https://so.csdn.net/so/search?q=github&amp;amp;spm=1001.2101.3001.7020&#34;&gt;github&lt;/a&gt;上搜索openwrt，找到下载地址https://github.com/openwrt/openwrt.git&lt;/li&gt;&#xA;&lt;li&gt;在&lt;a href=&#34;https://so.csdn.net/so/search?q=ubuntu&amp;amp;spm=1001.2101.3001.7020&#34;&gt;ubuntu&lt;/a&gt;下执行命令克隆openwrt源码&#xA;git clone &lt;a href=&#34;https://github.com/openwrt/openwrt.git&#34;&gt;https://github.com/openwrt/openwrt.git&lt;/a&gt;&#xA;3.&#xA;执行以下命令更新包&#xA;./scripts/feeds update -a&#xA;./scripts/feeds install -a&#xA;更新package，否则luci等package通过make menuconfig 不能显示&#xA;4.配置目标系统&#xA;make menuconfig&#xA;选择平台为X86&#xA;&lt;img src=&#34;https://img-blog.csdn.net/20180115144643330?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZHh0MTEwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&#34; alt=&#34;这里写图片描述&#34;&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;选择vmdk目标文件格式&lt;/p&gt;</description>
    </item>
    <item>
      <title>Openwrt LuCI UCI（三）</title>
      <link>http://shanks.link/blog/2022/10/21/openwrt-luci-uci%E4%B8%89/</link>
      <pubDate>Fri, 21 Oct 2022 16:53:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/21/openwrt-luci-uci%E4%B8%89/</guid>
      <description>&lt;h3 id=&#34;uci简介&#34;&gt;UCI简介&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;UCI是Unified Configuration Interface的缩写，翻译成中文就是统一配置接口，用途就是为OpenWrt提供一个集中控制的接口。&lt;/li&gt;&#xA;&lt;li&gt;配置接口启动流程：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;① 启动脚本 /etc/init.d/xxx；&lt;/li&gt;&#xA;&lt;li&gt;② 启动脚本通过UCI分析库从 /etc/config/xxx 获得启动参数；&lt;/li&gt;&#xA;&lt;li&gt;③ 启动脚本完成正常启动。&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/openwrt/20200111121815937.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Openwrt LuCI CBI（二）</title>
      <link>http://shanks.link/blog/2022/10/21/openwrt-luci-cbi%E4%BA%8C/</link>
      <pubDate>Fri, 21 Oct 2022 15:38:14 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/21/openwrt-luci-cbi%E4%BA%8C/</guid>
      <description>&lt;h3 id=&#34;一cbi控件类型汇总&#34;&gt;一、CBI控件类型汇总&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CBI模型是描述UCI配置文件结构的Lua文件，并且CBI解析器将lua文件转为HTML呈现给用户 。&lt;/li&gt;&#xA;&lt;li&gt;所有 CBI 模型文件必须返回类型为 luci.cbi.Map 的对象。&lt;/li&gt;&#xA;&lt;li&gt;CBI 模型文件的范围由 luci.cbi 模块的内容和 luci.i18n 的转换函数自动扩展。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;名称&lt;/th&gt;&#xA;          &lt;th&gt;描述&lt;/th&gt;&#xA;          &lt;th&gt;继承自&lt;/th&gt;&#xA;          &lt;th&gt;模板&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;NamedSection&lt;/td&gt;&#xA;          &lt;td&gt;A fixed configuration section defined by its name&lt;/td&gt;&#xA;          &lt;td&gt;NamedSection = class(AbstractSection)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/nsection&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;TypedSection&lt;/td&gt;&#xA;          &lt;td&gt;A (set of) configuration section(s) defined by the type&lt;/td&gt;&#xA;          &lt;td&gt;TypedSection = class(AbstractSection)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/tsection&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Node&lt;/td&gt;&#xA;          &lt;td&gt;Node pseudo abstract class&lt;/td&gt;&#xA;          &lt;td&gt;Node = class()&lt;/td&gt;&#xA;          &lt;td&gt;cbi/node&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Template&lt;/td&gt;&#xA;          &lt;td&gt;A simple template element&lt;/td&gt;&#xA;          &lt;td&gt;Template = class(Node)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Map&lt;/td&gt;&#xA;          &lt;td&gt;A map describing a configuration file&lt;/td&gt;&#xA;          &lt;td&gt;Map = class(Node)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/map&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Compound&lt;/td&gt;&#xA;          &lt;td&gt;Container&lt;/td&gt;&#xA;          &lt;td&gt;Compound = class(Node)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/compound&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Delegator&lt;/td&gt;&#xA;          &lt;td&gt;Node controller&lt;/td&gt;&#xA;          &lt;td&gt;Delegator = class(Node)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/delegator&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;SimpleForm&lt;/td&gt;&#xA;          &lt;td&gt;A Simple non-UCI form&lt;/td&gt;&#xA;          &lt;td&gt;SimpleForm = class(Node)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/simpleform&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Form&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Form = class(SimpleForm)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;AbstractSection&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;AbstractSection = class(Node)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;SimpleSection&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;SimpleSection = class(AbstractSection)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/nullsection&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Table&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Table = class(AbstractSection)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/tblsection&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;AbstractValue&lt;/td&gt;&#xA;          &lt;td&gt;An abstract Value Type&lt;/td&gt;&#xA;          &lt;td&gt;AbstractValue = class(Node)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Value&lt;/td&gt;&#xA;          &lt;td&gt;A one-line value&lt;/td&gt;&#xA;          &lt;td&gt;Value = class(AbstractValue)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/value&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;DummyValue&lt;/td&gt;&#xA;          &lt;td&gt;This does nothing except being there&lt;/td&gt;&#xA;          &lt;td&gt;DummyValue = class(AbstractValue)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/dvalue&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Flag&lt;/td&gt;&#xA;          &lt;td&gt;A flag being enabled or disabled&lt;/td&gt;&#xA;          &lt;td&gt;Flag = class(AbstractValue)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/fvalue&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;ListValue&lt;/td&gt;&#xA;          &lt;td&gt;A one-line value predefined in a list&lt;/td&gt;&#xA;          &lt;td&gt;ListValue = class(AbstractValue)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/lvalue&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;MultiValue&lt;/td&gt;&#xA;          &lt;td&gt;Multiple delimited values&lt;/td&gt;&#xA;          &lt;td&gt;MultiValue = class(AbstractValue)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/mvalue&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;StaticList&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;StaticList = class(MultiValue)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;DynamicList&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;DynamicList = class(AbstractValue)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/dynlist&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;TextValue&lt;/td&gt;&#xA;          &lt;td&gt;A multi-line value&lt;/td&gt;&#xA;          &lt;td&gt;TextValue = class(AbstractValue)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/tvalue&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Button&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Button = class(AbstractValue)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/button&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;FileUpload&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;FileUpload = class(AbstractValue)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/upload&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;FileBrowser&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;FileBrowser = class(AbstractValue)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/browser&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Page&lt;/td&gt;&#xA;          &lt;td&gt;A simple node&lt;/td&gt;&#xA;          &lt;td&gt;Page = class(Node)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;二cbi常用控件用法详解&#34;&gt;二、CBI常用控件用法详解&lt;/h3&gt;&#xA;&lt;h4 id=&#34;21-class-map-config-title-description&#34;&gt;2.1 class Map (config, title, description)&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;This is the root object of the model.。&lt;/li&gt;&#xA;&lt;li&gt;模型的根对象&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;参数说明:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pushing a branch to Bitbucket fails with the error, &#34;refspec matches more than one&#34;.</title>
      <link>http://shanks.link/blog/2022/10/21/pushing-a-branch-to-bitbucket-fails-with-the-error-refspec-matches-more-than-one./</link>
      <pubDate>Fri, 21 Oct 2022 14:51:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/21/pushing-a-branch-to-bitbucket-fails-with-the-error-refspec-matches-more-than-one./</guid>
      <description>&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;&#xA;&lt;p&gt;The error &amp;ldquo;refspec matches more than one&amp;rdquo; is shown while pushing a branch to Bitbucket.&lt;/p&gt;&#xA;&lt;p&gt;This occurs because there is more than one &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Internals-Git-References&#34;&gt;Git ref&lt;/a&gt; that matches the ref name specified in the push command.&lt;/p&gt;&#xA;&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;&#xA;&lt;p&gt;Suppose a repo has a &lt;a href=&#34;https://git-scm.com/docs/git-branch&#34;&gt;branch&lt;/a&gt; and a &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Basics-Tagging&#34;&gt;tag&lt;/a&gt; with the same name, &amp;ldquo;&lt;code&gt;dev&lt;/code&gt;&amp;rdquo;.&lt;/p&gt;&#xA;&lt;p&gt;When an attempt is made to push the &amp;ldquo;dev&amp;rdquo; branch to the remote, the error &amp;ldquo;&lt;code&gt;refspec matches more than one&lt;/code&gt;&amp;rdquo; will be shown and the push fails.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Openwrt LuCI 入门（一）</title>
      <link>http://shanks.link/blog/2022/10/20/openwrt-luci-%E5%85%A5%E9%97%A8%E4%B8%80/</link>
      <pubDate>Thu, 20 Oct 2022 20:15:14 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/20/openwrt-luci-%E5%85%A5%E9%97%A8%E4%B8%80/</guid>
      <description>&lt;h3 id=&#34;luci基本概念&#34;&gt;LuCI基本概念&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;UCI 是 &lt;a href=&#34;https://so.csdn.net/so/search?q=Openwrt&amp;amp;spm=1001.2101.3001.7020&#34;&gt;Openwrt&lt;/a&gt; 中为实现所有系统配置的一个统一接口，英文名 &lt;code&gt;Unified Configuration Interface&lt;/code&gt;，即统一配置接口。轻量级 LUA 语言的官方版本只包括一个精简的核心和最基本的库。这使得 LUA 体积小、启动速度快，从而适合嵌入在别的程序里。 LuCI 即是这两个项目的合体，可以实现路由的网页配置界面。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenWrt netifd学习笔记</title>
      <link>http://shanks.link/blog/2022/10/20/openwrt-netifd%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 20 Oct 2022 18:15:36 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/20/openwrt-netifd%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;h1 id=&#34;netifd简介&#34;&gt;Netifd简介&lt;/h1&gt;&#xA;&lt;p&gt;Netifd是&lt;a href=&#34;https://so.csdn.net/so/search?q=OpenWrt&amp;amp;spm=1001.2101.3001.7020&#34;&gt;OpenWrt&lt;/a&gt;中用于进行网络配置的守护进程，基本上所有网络接口设置以及内核的netlink事件都可以由netifd来处理完成。&#xA;在启动netifd之前用户需要将所需的配置写入uci配置文件/etc/config/network中，以告知netifd如何设置这些网络接口，如IP地址、上网类型等。如果在netifd运行过程中需要修改配置，则只需更新并保存/etc/config/network，执行/etc/init.d/network reload，netifd便可根据配置文件差异快速地完成网络接口的更新。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Openwrt ubus实现进程间通信举例</title>
      <link>http://shanks.link/blog/2022/10/20/openwrt-ubus%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B8%BE%E4%BE%8B/</link>
      <pubDate>Thu, 20 Oct 2022 18:00:22 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/20/openwrt-ubus%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B8%BE%E4%BE%8B/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://shanks.link/blog/2022/10/20/openwrt-%E4%BD%BF%E7%94%A8-ubus%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1/&#34;&gt;上一篇文章&lt;/a&gt;介绍了ubus的组件和实现原理，本文通过代码实例介绍使用ubus进行进程间通信的三种方式。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;invoke的方式实现端对端通信&#xA;最简单的情景就是一个提供服务的server端，一个请求服务的client端，client请求server的服务。&#xA;下面的例子中，server注册了一个名为“scan_prog”的对象，该对象中提供一个“scan”方法：&#xA;ubus_invoke.h：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#ifndef __UBUS_INVOKE_H__&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define __UBUS_INVOKE_H__&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;json/json.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;libubox/blobmsg_json.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; prog_attr {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; name[64];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; chn_id;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define PROG_MAX&#x9;8&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif  &lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* __UBUS_INVOKE_H__ */&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;invoke_server.c：&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenWrt 使用 ubus实现进程通信</title>
      <link>http://shanks.link/blog/2022/10/20/openwrt-%E4%BD%BF%E7%94%A8-ubus%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Thu, 20 Oct 2022 17:49:36 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/20/openwrt-%E4%BD%BF%E7%94%A8-ubus%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1/</guid>
      <description>&lt;p&gt;ubus为openwrt平台开发中的进程间通信提供了一个通用的框架。它让进程间通信的实现变得非常简单，并且ubus具有很强的可移植性，可以很方便的移植到其他linux平台上使用。本文描述了ubus的实现原理和整体框架。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JSON-RPC</title>
      <link>http://shanks.link/blog/2022/10/20/json-rpc/</link>
      <pubDate>Thu, 20 Oct 2022 13:40:27 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/20/json-rpc/</guid>
      <description>&lt;h1 id=&#34;json-rpc&#34;&gt;JSON-RPC&lt;/h1&gt;&#xA;&lt;p&gt;From Wikipedia, the free encyclopedia&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/JSON-RPC#mw-head&#34;&gt;Jump to navigation&lt;/a&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/JSON-RPC#searchInput&#34;&gt;Jump to search&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;JSON-RPC&lt;/strong&gt; is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Remote_procedure_call&#34;&gt;remote procedure call&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Protocol_(computing)&#34;&gt;protocol&lt;/a&gt; encoded in &lt;a href=&#34;https://en.wikipedia.org/wiki/JSON&#34;&gt;JSON&lt;/a&gt;. It is similar to the &lt;a href=&#34;https://en.wikipedia.org/wiki/XML-RPC&#34;&gt;XML-RPC&lt;/a&gt; protocol, defining only a few data types and commands. JSON-RPC allows for notifications (data sent to the server that does not require a response) and for multiple calls to be sent to the server which may be answered asynchronously.&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Version&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Description&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Dated&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1.0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.jsonrpc.org/specification_v1&#34;&gt;Original version&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;2005&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1.1 WD&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://jsonrpc.org/historical/json-rpc-1-1-wd.html&#34;&gt;Working draft&lt;/a&gt;. Adds named parameters, adds specific error codes, and adds introspection functions.&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;2006-08-07&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1.1 Alt&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;http://jsonrpc.org/historical/json-rpc-1-1-alt.txt&#34;&gt;Suggestion for a simple JSON-RPC 1.1&lt;/a&gt;. Alternative proposal to 1.1 WD.&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;2007-05-06&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1.1 Object Specification&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;http://jsonrpc.org/historical/json-rpc-object-specification.html&#34;&gt;Object Specification&lt;/a&gt;. Alternative proposal to 1.1 WD/1.1ALT.&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;2007-07-30&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1.2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;http://jsonrpc.org/historical/jsonrpc12_proposal.html&#34;&gt;Proposal&lt;/a&gt;. A later revision of this document was renamed to 2.0.&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;2007-12-27&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;2.0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;http://jsonrpc.org/historical/json-rpc-1-2-proposal.txt&#34;&gt;Specification proposal&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;2009-05-24&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;2.0 (Revised-)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;http://jsonrpc.org/spec&#34;&gt;Specification&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;2010-03-26&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;&#xA;&lt;p&gt;JSON-RPC works by sending a request to a server implementing this protocol. The client in that case is typically software intending to call a single method of a remote system. Multiple input parameters can be passed to the remote method as an array or object, whereas the method itself can return multiple output data as well. (This depends on the implemented version.)&lt;/p&gt;</description>
    </item>
    <item>
      <title>lua常用函数-打印表</title>
      <link>http://shanks.link/blog/2022/10/19/lua%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0-%E6%89%93%E5%8D%B0%E8%A1%A8/</link>
      <pubDate>Wed, 19 Oct 2022 13:21:51 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/19/lua%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0-%E6%89%93%E5%8D%B0%E8%A1%A8/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;打印表&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;PrintTable&lt;/span&gt;(table, key, level)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  level = level or 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;local&lt;/span&gt; indent = &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; i = 1, level &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    indent = indent..&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;  &amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; key ~= &lt;span style=&#34;color:#00f&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(indent..key..&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;..&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;..&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;..&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;{&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(indent .. &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;{&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; k,v &lt;span style=&#34;color:#00f&#34;&gt;in&lt;/span&gt; pairs(table) &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; type(v) == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;table&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        PrintTable(v, key, level + 1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;local&lt;/span&gt; content = string.format(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;%s%s = %s&amp;#34;&lt;/span&gt;, indent .. &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;  &amp;#34;&lt;/span&gt;,tostring(k), tostring(v))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      print(content)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  print(indent .. &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;}&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>CMakeLists.txt注释</title>
      <link>http://shanks.link/blog/2022/10/19/cmakelists.txt%E6%B3%A8%E9%87%8A/</link>
      <pubDate>Wed, 19 Oct 2022 10:00:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/19/cmakelists.txt%E6%B3%A8%E9%87%8A/</guid>
      <description>&lt;p&gt;单行注释：使用“#”&#xA;多行注释：使用“#[[ ]]”&#xA;以下图为例&#xA;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200211213228606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lNV01f,size_16,color_FFFFFF,t_70&#34; alt=&#34;注释前&#34;&gt;&#xA;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200211213255746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lNV01f,size_16,color_FFFFFF,t_70&#34; alt=&#34;注释后&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/YMWM_/article/details/104270409&#34;&gt;以上内容转载自互联网，若有侵权请联系站长删除&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>C语言获取系统时间并转换成字符串</title>
      <link>http://shanks.link/blog/2022/10/19/c%E8%AF%AD%E8%A8%80%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E5%B9%B6%E8%BD%AC%E6%8D%A2%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Wed, 19 Oct 2022 09:10:37 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/19/c%E8%AF%AD%E8%A8%80%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E5%B9%B6%E8%BD%AC%E6%8D%A2%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *argv[]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#00f&#34;&gt;time_t&lt;/span&gt; tt = &lt;span style=&#34;color:#c34e00&#34;&gt;time&lt;/span&gt;(0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; buf[32] = {0};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#c34e00&#34;&gt;strftime&lt;/span&gt;(buf, &lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(buf), &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;%Y-%m-%d %H:%M:%S&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c34e00&#34;&gt;localtime&lt;/span&gt;(&amp;amp;tt));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>printf函数输出指定长度</title>
      <link>http://shanks.link/blog/2022/10/18/printf%E5%87%BD%E6%95%B0%E8%BE%93%E5%87%BA%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6/</link>
      <pubDate>Tue, 18 Oct 2022 17:36:08 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/18/printf%E5%87%BD%E6%95%B0%E8%BE%93%E5%87%BA%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6/</guid>
      <description>&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;原样输出字符串:&#xA;printf(&amp;quot;%s&amp;quot;, str);&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;输出指定长度的字符串, 超长时不截断, 不足时右对齐:&#xA;printf(&amp;quot;%Ns&amp;quot;, str);       &amp;ndash;N 为指定长度的10进制数值&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;输出指定长度的字符串, 超长时不截断, 不足时左对齐:&#xA;printf(&amp;quot;%-Ns&amp;quot;, str);      &amp;ndash;N 为指定长度的10进制数值&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenWRT 编译百科全书</title>
      <link>http://shanks.link/blog/2022/10/17/openwrt-%E7%BC%96%E8%AF%91%E7%99%BE%E7%A7%91%E5%85%A8%E4%B9%A6/</link>
      <pubDate>Mon, 17 Oct 2022 17:15:52 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/17/openwrt-%E7%BC%96%E8%AF%91%E7%99%BE%E7%A7%91%E5%85%A8%E4%B9%A6/</guid>
      <description>&lt;h2 id=&#34;配置編譯環境&#34;&gt;配置編譯環境&lt;/h2&gt;&#xA;&lt;p&gt;必須使用&lt;strong&gt;非root用戶&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;安裝依賴包&#34;&gt;安裝依賴包&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// Ubuntu 14.04 必選&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# apt-get install asciidoc bash bc binutils bzip2 fastjar flex git-core g++ build-essential util-linux gawk libgtk2.0-dev intltool jikespg zlib1g-dev genisoimage libncurses5-dev libssl-dev patch perl-modules python2.7-dev rsync ruby sdcc unzip wget gettext xsltproc libboost1.55-dev libboost1.55-tools-dev libxml-parser-perl libusb-dev bin86 bcc bzr ecj sharutils openjdk-7-jdk zip gcc-multilib quilt&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// Ubuntu 14.04 可選&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# apt-get install subversion mercurial cvs&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// ArchLinux 必選&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# pacman -S base-devel&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# pacman -S [--needed] asciidoc b43-fwcutter bash bc bin86 boost binutils bzip2 cdrkit fastjar flex gawk gettext git gtk2 intltool jdk7-openjdk libusb libxslt ncurses openssl patch perl python2 rsync ruby sdcc sharutils unzip util-linux wget zlib gcc make perl-extutils-makemaker findutils libstdc++5 lib32-libstdc++5&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// libstdc++  可能需要版本6,待測&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// 根據wiki，ArchLinux部分必選包在AUR裡面&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ yaourt -S bcc jikes&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// ArchLinux 可選&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# pacman -S subversion&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;首次配置需要檢出源代碼這裡用subversion檢出開發trunk分支&#34;&gt;首次配置需要檢出源代碼，這裡用subversion檢出開發trunk分支&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ svn co svn://svn.openwrt.org/openwrt/trunk/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這時，就會出現名為&lt;code&gt;trunk&lt;/code&gt;的文件夾，這就是將來我們的工作目錄。 如果已經有了以前的版本庫，需要按照下面的命令更新&lt;/p&gt;</description>
    </item>
    <item>
      <title>自定义print、log函数 以及自动加入__FILE__ __FUNCTION__ __LINE__ 等信息</title>
      <link>http://shanks.link/blog/2022/10/17/%E8%87%AA%E5%AE%9A%E4%B9%89printlog%E5%87%BD%E6%95%B0-%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%8A%A8%E5%8A%A0%E5%85%A5__file__-__function__-__line__-%E7%AD%89%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Mon, 17 Oct 2022 16:12:44 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/17/%E8%87%AA%E5%AE%9A%E4%B9%89printlog%E5%87%BD%E6%95%B0-%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%8A%A8%E5%8A%A0%E5%85%A5__file__-__function__-__line__-%E7%AD%89%E4%BF%A1%E6%81%AF/</guid>
      <description>&lt;h3 id=&#34;自定义参数的实现&#34;&gt;自定义参数的实现&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;dlog&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *format, ...)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; buf[2048];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; out[2048]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;va_list args;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;va_start&lt;/span&gt;(args, format);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;vsprintf&lt;/span&gt;(buf, format, args);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;va_end&lt;/span&gt;(args);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;sprintf&lt;/span&gt;(out, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;0x4741e2a7 %s&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, buf);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 加上标识符和换行符 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;write&lt;/span&gt;(fd, out);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 输出到指定 fd */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;自动加入调用位置信息的宏定义&#34;&gt;自动加入调用位置信息的宏定义&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define log(format, ...) dlog(&amp;#34;%-7s %-10s %-3d &amp;#34;format, __FILE__, __FUNCTION__, __LINE__, ##__VA_ARGS__)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>OpenWRT Packet 相关的问题</title>
      <link>http://shanks.link/blog/2022/10/17/openwrt-packet-%E7%9B%B8%E5%85%B3%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 17 Oct 2022 10:32:11 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/17/openwrt-packet-%E7%9B%B8%E5%85%B3%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;h4 id=&#34;dns-无法主动解析&#34;&gt;DNS 无法主动解析&lt;/h4&gt;&#xA;&lt;p&gt;​&#x9;&#x9;若执行 opkg update 失败，则尝试执行 ping  downloads.openwrt.org，若也失败，则手动在 PC上 ping downloads.openwrt.org 得到 IP 后，修改路由器的host文件。&lt;/p&gt;</description>
    </item>
    <item>
      <title>安装文件服务器</title>
      <link>http://shanks.link/blog/2022/10/17/%E5%AE%89%E8%A3%85%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Mon, 17 Oct 2022 10:16:39 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/17/%E5%AE%89%E8%A3%85%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>&lt;h1 id=&#34;安装-apache2-服务&#34;&gt;安装 apache2 服务&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-&lt;span style=&#34;color:#00f&#34;&gt;get&lt;/span&gt; install apache2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;修改端口&#34;&gt;修改端口&lt;/h1&gt;&#xA;&lt;p&gt;默认监听的端口是80，可以自定义修改,也可不修改&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;修改&lt;code&gt;/etc/apache2/ports.conf&lt;/code&gt;&#xA;&lt;img src=&#34;http://shanks.link/img/%E8%BF%90%E7%BB%B4/1430290-20220218114216171-1456719546.png&#34; alt=&#34;img&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;修改&lt;code&gt;/etc/apache2/sites-available/000-default.conf&lt;/code&gt;&#xA;&lt;img src=&#34;http://shanks.link/img/%E8%BF%90%E7%BB%B4/1430290-20220218114308716-148330103.png&#34; alt=&#34;img&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;重启服务&#34;&gt;重启服务&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/etc/init.d/apache2 restart&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;apache服务器的默认目录在&lt;code&gt;/var/www/html&lt;/code&gt;，如果想利用http服务器下载文件，需要删除其&lt;code&gt;index.html&lt;/code&gt;文件，然后把文件放在该目录即可&lt;/p&gt;</description>
    </item>
    <item>
      <title>Macos 中设置ternimal终端保存的命令数量和格式</title>
      <link>http://shanks.link/blog/2022/10/14/macos-%E4%B8%AD%E8%AE%BE%E7%BD%AEternimal%E7%BB%88%E7%AB%AF%E4%BF%9D%E5%AD%98%E7%9A%84%E5%91%BD%E4%BB%A4%E6%95%B0%E9%87%8F%E5%92%8C%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Fri, 14 Oct 2022 10:07:58 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/14/macos-%E4%B8%AD%E8%AE%BE%E7%BD%AEternimal%E7%BB%88%E7%AB%AF%E4%BF%9D%E5%AD%98%E7%9A%84%E5%91%BD%E4%BB%A4%E6%95%B0%E9%87%8F%E5%92%8C%E6%A0%BC%E5%BC%8F/</guid>
      <description>&lt;h4 id=&#34;配置文件&#34;&gt;配置文件&lt;/h4&gt;&#xA;&lt;p&gt;linux 下对应的配置文件是~/.bash.rc 但是macOS下是/etc/zshrc,不同版本或许不同，具体情况具体分析&lt;/p&gt;&#xA;&lt;h4 id=&#34;修改配置&#34;&gt;修改配置&lt;/h4&gt;&#xA;&lt;p&gt;在上述配置文件中添加或者修改成如下格式&lt;/p&gt;</description>
    </item>
    <item>
      <title>同步master代码到分支</title>
      <link>http://shanks.link/blog/2022/10/14/%E5%90%8C%E6%AD%A5master%E4%BB%A3%E7%A0%81%E5%88%B0%E5%88%86%E6%94%AF/</link>
      <pubDate>Fri, 14 Oct 2022 09:37:59 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/14/%E5%90%8C%E6%AD%A5master%E4%BB%A3%E7%A0%81%E5%88%B0%E5%88%86%E6%94%AF/</guid>
      <description>&lt;h2 id=&#34;第一步&#34;&gt;第一步：&lt;/h2&gt;&#xA;&lt;p&gt;如果分支(将此分支暂命名为dev)有修改，则先提交修改的内容，如果没有，直接跳到第二步&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;git &lt;a href=&#34;https://so.csdn.net/so/search?q=commit&amp;amp;spm=1001.2101.3001.7020&#34;&gt;commit&lt;/a&gt; -m “fix bug”&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;第二步&#34;&gt;第二步：&lt;/h2&gt;&#xA;&lt;p&gt;切换到master分支下&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;git checkout master&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;第三步&#34;&gt;第三步：&lt;/h2&gt;&#xA;&lt;p&gt;将远程的master代码pull到本地&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenWrt Web GUI 开发之 Luci 框架粗解</title>
      <link>http://shanks.link/blog/2022/10/13/openwrt-web-gui-%E5%BC%80%E5%8F%91%E4%B9%8B-luci-%E6%A1%86%E6%9E%B6%E7%B2%97%E8%A7%A3/</link>
      <pubDate>Thu, 13 Oct 2022 20:41:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/13/openwrt-web-gui-%E5%BC%80%E5%8F%91%E4%B9%8B-luci-%E6%A1%86%E6%9E%B6%E7%B2%97%E8%A7%A3/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;本博文全部内容在 &lt;a href=&#34;https://so.csdn.net/so/search?q=GitHub&amp;amp;spm=1001.2101.3001.7020&#34;&gt;GitHub&lt;/a&gt; 仓库上同步，可以在 👉 &lt;a href=&#34;https://github.com/RDpWTeHM/Embedded-GUI-Develop/tree/master/Luci-of-OpenWrt&#34;&gt;GitHub 🔗&lt;/a&gt; 上找到。&#xA;本博文是 GitHub 上的 README 内容，故本文内部分链接是以 GitHub 上&lt;a href=&#34;https://so.csdn.net/so/search?q=%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84&amp;amp;spm=1001.2101.3001.7020&#34;&gt;相对路径&lt;/a&gt;放置的，有需要请在 GitHub 中下载/查看。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;因为个人的水平和精力是有限的，如果本目录下的内容存在错误，疏忽之处，欢迎指出：可创建 Issue 或者 fork 修改后向本仓库做 pull request&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenWrt编译开启Luci</title>
      <link>http://shanks.link/blog/2022/10/13/openwrt%E7%BC%96%E8%AF%91%E5%BC%80%E5%90%AFluci/</link>
      <pubDate>Thu, 13 Oct 2022 13:50:25 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/13/openwrt%E7%BC%96%E8%AF%91%E5%BC%80%E5%90%AFluci/</guid>
      <description>&lt;h2 id=&#34;一openwrt的web界面&#34;&gt;一、&lt;a href=&#34;https://so.csdn.net/so/search?q=OpenWRT&amp;amp;spm=1001.2101.3001.7020&#34;&gt;OpenWRT&lt;/a&gt;的web界面&lt;/h2&gt;&#xA;&lt;p&gt;我们买来的&lt;a href=&#34;https://so.csdn.net/so/search?q=%E8%B7%AF%E7%94%B1%E5%99%A8&amp;amp;spm=1001.2101.3001.7020&#34;&gt;路由器&lt;/a&gt;在浏览器输入192.168.1.1（有些是其他地址）就能进入一个web的配置界面。OpenWRT也能添加默认的web界面。OpenWRT的web界面是使用LuCI来构造的。（LuCI自行百度）&lt;/p&gt;&#xA;&lt;h2 id=&#34;二配置web界面&#34;&gt;二、配置web界面&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;make menuconfig进入配置界面&#xA;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/80fa594691bbb5eb5377ff06b4e2af73.png&#34; alt=&#34;这里写图片描述&#34;&gt;&#xA;&lt;strong&gt;进入LuCI&lt;/strong&gt;&#xA;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/5f413a58646e7b77f761ea7809f57c2e.png&#34; alt=&#34;这里写图片描述&#34;&gt;&#xA;&lt;strong&gt;进入Collections&lt;/strong&gt;&#xA;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/932b6c158a099e64d9a76af5ca3d6e6b.png&#34; alt=&#34;这里写图片描述&#34;&gt;&#xA;&lt;strong&gt;选中luci。保存退出&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://yangyongda.blog.csdn.net/article/details/54023329&#34;&gt;以上内容转载自网友的blog，若有侵权请联系站长&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>5种常见的开源路由器固件优缺点</title>
      <link>http://shanks.link/blog/2022/10/13/5%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E5%BC%80%E6%BA%90%E8%B7%AF%E7%94%B1%E5%99%A8%E5%9B%BA%E4%BB%B6%E4%BC%98%E7%BC%BA%E7%82%B9/</link>
      <pubDate>Thu, 13 Oct 2022 10:08:16 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/13/5%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E5%BC%80%E6%BA%90%E8%B7%AF%E7%94%B1%E5%99%A8%E5%9B%BA%E4%BB%B6%E4%BC%98%E7%BC%BA%E7%82%B9/</guid>
      <description>&lt;p&gt;  除了智能手机外，路由器和无线接入点无疑是最常被破解和修改的消费级设备。一方面破解这些设备较为简单，另一方面破解、修改设备参数后能带来一系列好处，比如拥有更多的特性，改善路由功能，加强安全性，而且破解后还能配置原厂固件通常不允许修改的参数(例如天线输出功率)。&lt;/p&gt;</description>
    </item>
    <item>
      <title>openwrt，ddwrt，tomato这些路由器固件是怎么开发出来的？</title>
      <link>http://shanks.link/blog/2022/10/13/openwrtddwrttomato%E8%BF%99%E4%BA%9B%E8%B7%AF%E7%94%B1%E5%99%A8%E5%9B%BA%E4%BB%B6%E6%98%AF%E6%80%8E%E4%B9%88%E5%BC%80%E5%8F%91%E5%87%BA%E6%9D%A5%E7%9A%84/</link>
      <pubDate>Thu, 13 Oct 2022 09:54:04 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/13/openwrtddwrttomato%E8%BF%99%E4%BA%9B%E8%B7%AF%E7%94%B1%E5%99%A8%E5%9B%BA%E4%BB%B6%E6%98%AF%E6%80%8E%E4%B9%88%E5%BC%80%E5%8F%91%E5%87%BA%E6%9D%A5%E7%9A%84/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;2002年10月，&lt;strong&gt;Linksys&lt;/strong&gt;公司（由一对移民美国的台湾夫妇&lt;a href=&#34;https://www.zhihu.com/search?q=%E6%9B%B9%E8%8B%B1%E4%BC%9F&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1001410286%7D&#34;&gt;曹英伟&lt;/a&gt;和吴健创建）发布了名为&lt;strong&gt;WRT54G&lt;/strong&gt;的无线路由器的第1个版本，该机型基于32-bit &lt;strong&gt;MIPS&lt;/strong&gt;芯片，搭载了基于&lt;strong&gt;Linux&lt;/strong&gt;内核的固件，并且可以刷机；&#xA;WRT的含义，Linksys原意可能是指 &lt;strong&gt;W&lt;/strong&gt;irless &lt;strong&gt;R&lt;/strong&gt;eceiver/&lt;strong&gt;T&lt;/strong&gt;ransmitter，现在大家都解读为&lt;strong&gt;W&lt;/strong&gt;irless &lt;strong&gt;R&lt;/strong&gt;ou&lt;strong&gt;T&lt;/strong&gt;er；&lt;/li&gt;&#xA;&lt;li&gt;2003年3月，&lt;strong&gt;Cisco&lt;/strong&gt;公司以5亿美元的价格收购了Linksys，成为其子公司，此后Linksys推出的产品都标记上 &lt;strong&gt;Linksys by Cisco&lt;/strong&gt;；&lt;/li&gt;&#xA;&lt;li&gt;2003年6月，Linux Kernel 开发组听闻&lt;strong&gt;WRT54G&lt;/strong&gt;搭载了包含GPL开源协议的Linux代码，要求Linksys开源相关部分的代码，为此FSF(&lt;a href=&#34;https://www.zhihu.com/search?q=%E8%87%AA%E7%94%B1%E8%BD%AF%E4%BB%B6%E5%9F%BA%E9%87%91%E4%BC%9A&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1001410286%7D&#34;&gt;自由软件基金会&lt;/a&gt;)还起诉Cisco；&lt;/li&gt;&#xA;&lt;li&gt;2003年7月，尽管各方对&lt;strong&gt;WRT54G固件&lt;/strong&gt;是否应该开源有所争议，不过Cisco和Linksys迫于外界压力还是开源了&lt;strong&gt;WRT54G固件，至此，各种定制固件和路由器刷机开始流行了起来（&lt;strong&gt;Lintel在其2012年的一份文档中说是2003年3月思科被迫开源，其实有误，3月份思科和领势还在忙收购的事吧&lt;/strong&gt;）；&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;2004年1月**，**OpenWrt 项目启动（据其官网自我介绍，未找到源码或论坛讨论等其他佐证），基于WRT54G固件开发，后来（不知道是多久以后，根据2004和2005年的论坛信息显示，&lt;strong&gt;Alchemy&lt;/strong&gt;如日中天的时候OpenWrt还是个弟弟）发布名为“stable release”的版本；&lt;/li&gt;&#xA;&lt;li&gt;2004年6月，Sevasoft公司基于Linksys固件放出了&lt;strong&gt;Alchemy v1.0&lt;/strong&gt;，他们做的固件在当时是最流行的，在v1.0之前的pre版本就很流行了，开发也很活跃，Sevasoft也是WRT54G系列最早的开源开发者之一；&lt;/li&gt;&#xA;&lt;li&gt;2004年11月， Timothy Jans(又叫 Avenger 2.0)，基于Linksys开源的WRT54G系列的固件发布了**HyperWRT，**主要是开放一些官版受限的功能，但又尽可能保持原汁原味；&lt;/li&gt;&#xA;&lt;li&gt;2005年1-2月，Linksys为了支持这些第三方固件把&lt;strong&gt;WRT54G v4&lt;/strong&gt;机型拿来重新上市**，&lt;strong&gt;并重命名为&lt;/strong&gt;WRT54GL**其中L是指Linux，据Linksys相关负责人在2018年称，&lt;strong&gt;WRT54GL&lt;/strong&gt;是迄今为止最畅销的路由器；&lt;/li&gt;&#xA;&lt;li&gt;Sveasoft公司鉴于自己在&lt;strong&gt;Alchemy&lt;/strong&gt;固件上取得的巨大成功，有了转商业运营赚钱的想法，但限于GPL协议，又不得不开源，想出的变通做法就是，让用户每年交20美元的订阅费，付费用户可以进入论坛享用商用版固件，而免费用户只有使用更新较慢的版本，Alchemy社区内也有人看不惯这种收费行为，于是自行修改Alchemy然后对外发布；&lt;/li&gt;&#xA;&lt;li&gt;2005年1月22日，Sebastian Gottschall(又叫BrainSlayer)基于&lt;strong&gt;Alchemy&lt;/strong&gt; &lt;strong&gt;v16&lt;/strong&gt;固件开发了第一版&lt;strong&gt;DD-WRT v16&lt;/strong&gt;固件，版本号沿用Alchemy的，DD是德国东部 Dresden城市的汽车牌照的缩写，该城市是DD-WRT开发组生活的地方；&lt;/li&gt;&#xA;&lt;li&gt;2005年2月，&lt;strong&gt;HyperWRT&lt;/strong&gt;原版停更， &lt;a href=&#34;https://www.zhihu.com/search?q=tofu&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1001410286%7D&#34;&gt;tofu&lt;/a&gt; 和  Thibor 两名开发者基于它继续开发，项目名为 &lt;strong&gt;HyperWRT +tofu&lt;/strong&gt; 和  &lt;strong&gt;HyperWRT Thibor&lt;/strong&gt;；&lt;/li&gt;&#xA;&lt;li&gt;2005年中，&lt;strong&gt;OpenWrt&lt;/strong&gt; 发布了名为 “experimental”的版本；&lt;/li&gt;&#xA;&lt;li&gt;2005年12月，&lt;strong&gt;&lt;a href=&#34;https://www.zhihu.com/search?q=DD-WRT+v23&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1001410286%7D&#34;&gt;DD-WRT v23&lt;/a&gt;&lt;strong&gt;发布，鉴于&lt;/strong&gt;Alchemy&lt;/strong&gt;社区的内斗和商业付费的风险，DD-WRT自v23开始将固件核心替换为了OpenWrt；&lt;/li&gt;&#xA;&lt;li&gt;2006年2月，HyperWRT+tofu停止开发，合并入&lt;strong&gt;HyperWRT Thibor&lt;/strong&gt;，后者开发至2008年2月停更；&lt;/li&gt;&#xA;&lt;li&gt;2006年12月， Jonathan Zarate发布了 &lt;strong&gt;Tomato(番茄，也简称TT)&lt;/strong&gt; 的第一个版本，基于&lt;strong&gt;HyperWRT&lt;/strong&gt;为Linksys WRT54G系列和Buffalo WHR-G54S系列机型定制更易用功能更强的固件，主要支持博通Broadcom的系列芯片；&lt;/li&gt;&#xA;&lt;li&gt;2007年1月，&lt;strong&gt;OpenWrt&lt;/strong&gt;发布了代号为White Russian的固件，这个版本之后的OpenWrt才变得越发流行；&lt;/li&gt;&#xA;&lt;li&gt;2008年7月14日，Eric Bishop基于OpenWrt Kamikaze(v7.x和v8.x)发布了**Gargoyle(&lt;a href=&#34;https://www.zhihu.com/search?q=%E7%9F%B3%E5%83%8F%E9%AC%BC&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1001410286%7D&#34;&gt;石像鬼&lt;/a&gt;)**固件的第一个稳定版v1.0，加入了自己的包管理器，格式为 &lt;a href=&#34;https://www.zhihu.com/search?q=gpkg&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1001410286%7D&#34;&gt;gpkg&lt;/a&gt;；&lt;/li&gt;&#xA;&lt;li&gt;2008年7月26日，&lt;strong&gt;DD-WRT v24 SP1&lt;/strong&gt; 发布，然后至今停更，从2010年起DD-WRT社区诸多开发者在不断发布各种变体版本的固件；&lt;/li&gt;&#xA;&lt;li&gt;2010年，华硕ASUS发布了&lt;strong&gt;RT-N56U&lt;/strong&gt;路由器（具体发布日期没找到，华硕官网说RT-N56U获得了2010年的iF设计奖），该机型搭载的是&lt;strong&gt;联发科MTK&lt;/strong&gt;的芯片；&lt;/li&gt;&#xA;&lt;li&gt;2010年6月28日，&lt;strong&gt;Tomato(番茄)&lt;/strong&gt; 官方更新了v1.28稳定版，然后至今还未更新；&lt;/li&gt;&#xA;&lt;li&gt;2011年1月，华硕在CES上发布了&lt;strong&gt;RT-N66U&lt;/strong&gt;路由器，该机型最早使用&lt;strong&gt;Asuswrt&lt;/strong&gt;固件的（华硕更早机器搭载的固件还没统一成型），&lt;strong&gt;Asuswrt&lt;/strong&gt;是基于Tomato-RT/Tomato-USB开发，主要支持博通Broadcom芯片和部分高通Atheros芯片；同月，高通Qualcomm收购创锐讯&lt;strong&gt;Atheros&lt;/strong&gt;为全资子公司，后者主要研发无线通讯芯片；&lt;/li&gt;&#xA;&lt;li&gt;2012年5月3日，俄罗斯人Andy &lt;strong&gt;Padavan(老毛子)&lt;strong&gt;创建了&lt;/strong&gt;rt-n56u&lt;/strong&gt;项目并提交初始化代码，基于 &lt;a href=&#34;https://www.zhihu.com/search?q=Asuswrt-Merlin&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1001410286%7D&#34;&gt;Asuswrt-Merlin&lt;/a&gt; 固件开发，由于RT-N56U搭载的是&lt;a href=&#34;https://www.zhihu.com/search?q=%E8%81%94%E5%8F%91%E7%A7%91%E8%8A%AF%E7%89%87&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1001410286%7D&#34;&gt;联发科芯片&lt;/a&gt;，后来Padavan被移植到多款基于联发科芯片的路由；&lt;/li&gt;&#xA;&lt;li&gt;2012年6月19日，加拿大人Eric Sauvageau创建了&lt;strong&gt;Asuswrt-Merlin(梅林)&lt;/strong&gt; 项目并提交了初始化代码，基于 Asuswrt  3.0.0.3.144；&lt;/li&gt;&#xA;&lt;li&gt;2013年10月，Cisco公司将Linksys卖给了Belkin公司，Linksys至此与思科无关，新东家Belkin保留了Linksys原品牌；&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;2013年-2016年，国内各大神开始在论坛活跃最频繁的时间段，发布相关教程和他们基于OpenWrt/LEDE、Tomato、DD等定制的固件，Lean、Lintel、&lt;a href=&#34;https://www.zhihu.com/search?q=%E4%BD%90%E9%A1%BB%E4%B9%8B%E7%94%B7&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1001410286%7D&#34;&gt;佐须之男&lt;/a&gt;都出名在这个时段；&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;2016年3月1日，佐须之男在Tomato基础上(应该是基于Tomato v1.28)，发布了**Tomato Phoenix(不死鸟)**的第一个公开测试版，主要增加了Tomato对联发科芯片的支持；&lt;/li&gt;&#xA;&lt;li&gt;2016年5月，OpenWrt 的部分核心成员基于OpenWrt另起炉灶开了&lt;strong&gt;LEDE&lt;/strong&gt;项目，主要因看不惯既有社区的乌烟瘴气和旧源码的质量；&lt;/li&gt;&#xA;&lt;li&gt;2017年1月24日，Lintel宣布因团队接手Newifi系列路由的固件维护，而**PandoraBox(潘多拉)**停止更新，该固件是为了照顾部分英文水平较菜和动手能力较差的玩家，对OpenWRT/LEDE做了本地化，并预编译或安装了大陆用户常用的某些功能，最早发布在 &lt;a href=&#34;https://link.zhihu.com/?target=http%3A//openwrt.org.cn/&#34;&gt;openwrt.org.cn&lt;/a&gt;上；&lt;/li&gt;&#xA;&lt;li&gt;2017年2月，LEDE的第一个稳定版发布，版本号为v17.01.0，LEDE的主要改进是重构了OpenWrt代码，替换了文件系统改为JFFS2，更友好的Web界面LuCI，更多的opkg包支持等；&lt;/li&gt;&#xA;&lt;li&gt;2018年1月，OpenWrt 老项目和离家出走的LEDE决定复合，名为&lt;strong&gt;OpenWrt/LEDE&lt;/strong&gt;，在原LEDE团队的规矩和主导下运作，但名字仍叫&lt;strong&gt;OpenWrt&lt;/strong&gt;；&lt;/li&gt;&#xA;&lt;li&gt;2018-2019年，OpenWrt和LEDE主要在版本号为v18.x的代码上完成合并工作，DD-WRT、Asuswrt-Merlin、Padavan等活跃项目也在持续更新。&lt;/li&gt;&#xA;&lt;li&gt;现在，随着&lt;a href=&#34;https://www.zhihu.com/search?q=%E8%B7%AF%E7%94%B1%E5%9B%BA%E4%BB%B6&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1001410286%7D&#34;&gt;路由固件&lt;/a&gt;定制、开发技术的普及，各路论坛里基于OpenWrt/LEDE、DD-WRT、Merlin、Padavan、Tomato等知名固件的各种私人订制层出不穷……&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;参考资料&lt;/strong&gt;：&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenWRT Luci 初探</title>
      <link>http://shanks.link/blog/2022/10/10/openwrt-luci-%E5%88%9D%E6%8E%A2/</link>
      <pubDate>Mon, 10 Oct 2022 09:17:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/10/openwrt-luci-%E5%88%9D%E6%8E%A2/</guid>
      <description>&lt;p&gt;什么是Luci呢？先直观的感受一下，打开web浏览器，输入R2的网关地址，然后出现了一个web登录界面，这个就是Openwrt Luci的应用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenWRT 相关资料汇总</title>
      <link>http://shanks.link/blog/2022/10/09/openwrt-%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/</link>
      <pubDate>Sun, 09 Oct 2022 14:42:05 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/09/openwrt-%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.openwrt.org&#34;&gt;官网&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-user/start&#34;&gt;开发者参考手册目录&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://git.openwrt.org/&#34;&gt;软件包的源码仓库&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://lxr.openwrt.org/source/&#34;&gt;另一些官方软件&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://downloads.openwrt.org/&#34;&gt;固件以及相关配置下载&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>CGI-万法归宗</title>
      <link>http://shanks.link/blog/2022/10/09/cgi-%E4%B8%87%E6%B3%95%E5%BD%92%E5%AE%97/</link>
      <pubDate>Sun, 09 Oct 2022 13:51:34 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/09/cgi-%E4%B8%87%E6%B3%95%E5%BD%92%E5%AE%97/</guid>
      <description>&lt;p&gt;CGI 即 &lt;strong&gt;Common Gateway Interface&lt;/strong&gt;，译作“&lt;strong&gt;通用网关接口&lt;/strong&gt;”。初次听闻，略感疑惑，实则每个字眼都值得玩味。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-common&#34;&gt;1. Common&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;通用&lt;/strong&gt;，是一个显著特征。虽然我们听说过Java的Servlet，Python的WSGI。但其实Java、Python都是支持CGI的，不仅如此，其他我们所熟知的语言大都也都支持。理论上来说，所有支持标准输出，支持获取环境变量的编程语言都能用来编写CGI程序。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LRU原理和Redis的实现</title>
      <link>http://shanks.link/blog/2022/10/09/lru%E5%8E%9F%E7%90%86%E5%92%8Credis%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 09 Oct 2022 10:02:18 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/09/lru%E5%8E%9F%E7%90%86%E5%92%8Credis%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;很久前参加过今日头条的面试，遇到一个题，目前半部分是如何实现 LRU，后半部分是 Redis 中如何实现 LRU。&lt;/p&gt;&#xA;&lt;p&gt;我的第一反应是操作系统课程里学过，应该是内存不够的场景下，淘汰旧内容的策略。LRU &amp;hellip; Least Recent Used，淘汰掉最不经常使用的。可以稍微多补充两句，因为计算机体系结构中，最大的最可靠的存储是硬盘，它容量很大，并且内容可以固化，但是访问速度很慢，所以需要把使用的内容载入内存中；内存速度很快，但是容量有限，并且断电后内容会丢失，并且为了进一步提升性能，还有CPU内部的 L1 Cache，L2 Cache等概念。因为速度越快的地方，它的单位成本越高，容量越小，新的内容不断被载入，旧的内容肯定要被淘汰，所以就有这样的使用背景。&lt;/p&gt;</description>
    </item>
    <item>
      <title>将Git存储库从一个平台fork到另外一个平台</title>
      <link>http://shanks.link/blog/2022/10/08/%E5%B0%86git%E5%AD%98%E5%82%A8%E5%BA%93%E4%BB%8E%E4%B8%80%E4%B8%AA%E5%B9%B3%E5%8F%B0fork%E5%88%B0%E5%8F%A6%E5%A4%96%E4%B8%80%E4%B8%AA%E5%B9%B3%E5%8F%B0/</link>
      <pubDate>Sat, 08 Oct 2022 18:04:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/08/%E5%B0%86git%E5%AD%98%E5%82%A8%E5%BA%93%E4%BB%8E%E4%B8%80%E4%B8%AA%E5%B9%B3%E5%8F%B0fork%E5%88%B0%E5%8F%A6%E5%A4%96%E4%B8%80%E4%B8%AA%E5%B9%B3%E5%8F%B0/</guid>
      <description>&lt;h4 id=&#34;从github到github&#34;&gt;从github到github&lt;/h4&gt;&#xA;&lt;p&gt;打开你想fork的项目界面，点击fork按钮即可将此项目fork到你的github账户上;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/%E8%BF%90%E7%BB%B4/github2github.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;在不同的平台之间fork&#34;&gt;在不同的平台之间fork&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在平台B上新建一个空的仓库 eg：git@github.com:shankusu2017/uhttpd-openwrt.git，并 clone 到本机上；&lt;/li&gt;&#xA;&lt;li&gt;在本机上将新创建的仓库的&amp;quot;上游&amp;quot;设置为你原本想 fork 的地址 eg：git remote add upstream &lt;a href=&#34;https://git.openwrt.org/project/uhttpd.git&#34;&gt;https://git.openwrt.org/project/uhttpd.git&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;将平台A的上游代码同步到本机上 git pull upstream master&lt;/li&gt;&#xA;&lt;li&gt;将本机上最新的代码提交到自己的平台B仓库中 git push origin master&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;同步上游的tags&#34;&gt;同步上游的tags&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;拉取上游平台A上的的tags:  git fetch upstream&lt;/li&gt;&#xA;&lt;li&gt;提交到自己的平台B上 git push &amp;ndash;tags&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/ternence_hsu/article/details/113531510&#34;&gt;以上内容转载自网友的blog，如有侵权请联系站长&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>find grep linux中查找文件和字符串 </title>
      <link>http://shanks.link/blog/2022/09/29/find-grep-linux%E4%B8%AD%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Thu, 29 Sep 2022 23:43:07 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/29/find-grep-linux%E4%B8%AD%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>&lt;p&gt;在使用linux时，经常需要进行文件查找。其中查找的命令主要有find和grep。两个命令是有区的。&lt;/p&gt;&#xA;&lt;p&gt;区别：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;find 命令是根据文件的属性进行查找，如文件名，文件大小，所有者，所属组，是否为空，访问时间，修改时间等。&lt;/li&gt;&#xA;&lt;li&gt;grep 是根据文件的内容进行查找，会对文件的每一行按照给定的模式(patter)进行匹配查找。&lt;/li&gt;&#xA;&lt;li&gt;which 查看可执行文件的位置 ，只有设置了环境变量的程序才可以用&lt;/li&gt;&#xA;&lt;li&gt;whereis 寻找特定文件，只能用于查找二进制文件、源代码文件和man手册页&lt;/li&gt;&#xA;&lt;li&gt;locate 配合数据库查看文件位置 ,详情：locate -h查看帮助信息&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;​&lt;/p&gt;</description>
    </item>
    <item>
      <title> 写给工程师的十条精进原则</title>
      <link>http://shanks.link/blog/2022/09/29/%E5%86%99%E7%BB%99%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E5%8D%81%E6%9D%A1%E7%B2%BE%E8%BF%9B%E5%8E%9F%E5%88%99/</link>
      <pubDate>Thu, 29 Sep 2022 20:15:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/29/%E5%86%99%E7%BB%99%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E5%8D%81%E6%9D%A1%E7%B2%BE%E8%BF%9B%E5%8E%9F%E5%88%99/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;时间回到8年前，我人生中第一份实习的工作，是在某互联网公司的无线搜索部做一个C++工程师。当时的我可谓意气风发，想要大干一场，结果第一次上线就写了人生中第一个Casestudy。由于对部署环境的不了解，把SVN库里的配置文件错误地发到线上，并且上完线就去吃晚饭了，等吃饭回来发现师傅在焦头烂额地回滚配置。那次故障造成了一个核心服务20分钟不可用，影响了几百万的用户。这仅仅是一个开始，在后来半年的时间里，我几乎把所有职场新人可能犯的错误都犯了个遍。架构师让我调研一个抓取性能提升方案，我闷头搞了两周，也没有得出任何结论；本来安排好的开发计划，由于我临时要回去写论文，搞得经理措手不及；参加项目座谈会，全程“打酱油”……那段时间，自己也很苦恼，几乎每天晚上11点多才走，很累很辛苦，但依然拿不到想要的结果。&lt;/p&gt;</description>
    </item>
    <item>
      <title>工作中如何做好技术积累</title>
      <link>http://shanks.link/blog/2022/09/29/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/</link>
      <pubDate>Thu, 29 Sep 2022 19:48:32 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/29/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;古人云：“活到老，学到老。”互联网算是最辛苦的行业之一，“加班”对工程师来说已是“家常便饭”，同时互联网技术又日新月异，很多工程师都疲于应付，叫苦不堪。以至于长期以来流传一个很广的误解：35岁是程序员工作的终点。&lt;/p&gt;</description>
    </item>
    <item>
      <title>工程师的基本功是什么？该如何练习？</title>
      <link>http://shanks.link/blog/2022/09/29/%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8A%9F%E6%98%AF%E4%BB%80%E4%B9%88%E8%AF%A5%E5%A6%82%E4%BD%95%E7%BB%83%E4%B9%A0/</link>
      <pubDate>Thu, 29 Sep 2022 19:43:45 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/29/%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8A%9F%E6%98%AF%E4%BB%80%E4%B9%88%E8%AF%A5%E5%A6%82%E4%BD%95%E7%BB%83%E4%B9%A0/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在美团有一句老话，叫做“苦练基本功”。美团创始人王兴解读的基本功是业务和管理的基本动作。只要能把基本功扎实练好，就能产生巨大价值。然而滴水石穿非一日之功，练好基本功是一个长期的事情。&lt;/p&gt;</description>
    </item>
    <item>
      <title>字符串匹配的KMP算法</title>
      <link>http://shanks.link/blog/2022/09/29/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%9A%84kmp%E7%AE%97%E6%B3%95/</link>
      <pubDate>Thu, 29 Sep 2022 19:23:12 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/29/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%9A%84kmp%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/2013/05/&#34;&gt;https://www.ruanyifeng.com/blog/2013/05/&lt;/a&gt;)&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/String_searching_algorithm&#34;&gt;字符串匹配&lt;/a&gt;是计算机的基本任务之一。&lt;/p&gt;&#xA;&lt;p&gt;举例来说，有一个字符串&amp;quot;BBC ABCDAB ABCDABCDABDE&amp;quot;，我想知道，里面是否包含另一个字符串&amp;quot;ABCDABD&amp;quot;？&lt;/p&gt;</description>
    </item>
    <item>
      <title>Compare And Swap（CAS）原理分析</title>
      <link>http://shanks.link/blog/2022/09/29/compare-and-swapcas%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 29 Sep 2022 18:26:01 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/29/compare-and-swapcas%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h1 id=&#34;1-什么是cas&#34;&gt;1 什么是&lt;a href=&#34;https://so.csdn.net/so/search?q=CAS&amp;amp;spm=1001.2101.3001.7020&#34;&gt;CAS&lt;/a&gt;？&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;11-加锁和cas解决原子性问题的不同原理&#34;&gt;1.1 加锁和CAS解决&lt;a href=&#34;https://so.csdn.net/so/search?q=%E5%8E%9F%E5%AD%90%E6%80%A7&amp;amp;spm=1001.2101.3001.7020&#34;&gt;原子性&lt;/a&gt;问题的不同原理&lt;/h2&gt;&#xA;&lt;p&gt;首先看如下代码：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;package&lt;/span&gt; com.nrsc.ch2.cas;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;import&lt;/span&gt; java.util.ArrayList;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;import&lt;/span&gt; java.util.List;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#007575&#34;&gt;CasDemo&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;//共享资源&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;increase&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        i++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;main&lt;/span&gt;(String[] args) &lt;span style=&#34;color:#00f&#34;&gt;throws&lt;/span&gt; InterruptedException {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Runnable r = () -&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; j = 0; j &amp;lt; 1000; j++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                increase();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&amp;lt;Thread&amp;gt; threads = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; j = 0; j &amp;lt; 10; j++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Thread thread = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; Thread(r);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            threads.add(thread);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            thread.start();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;//确保前面10个线程都走完&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (Thread thread : threads) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            thread.join();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.out.println(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;123456789101112131415161718192021222324252627282930313233343536&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;相信每个人都知道这段代码由于&lt;code&gt;i++不是原子操作&lt;/code&gt;,因此会导致这10个线程执行后的最终结果不是10*1,000 = 10,000。&#xA;当然也相信几乎所有人都知道通过&lt;code&gt;加锁可以解决这个问题&lt;/code&gt;，加锁方式解决该问题的原理基本可以用下图进行概况：&#xA;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200322200432294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25yc2MyNzI0MjAxOTk=,size_16,color_FFFFFF,t_70&#34; alt=&#34;在这里插入图片描述&#34;&gt;&#xA;而其实除了加锁之外利用CAS机制也能解决这个问题。既然说它是除了加锁之外的另一种解决方式，&lt;code&gt;那它肯定是无锁的&lt;/code&gt;，因此利用CAS机制解决该问题的方式大致可以用下图进行概况：&#xA;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200322201324892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25yc2MyNzI0MjAxOTk=,size_16,color_FFFFFF,t_70&#34; alt=&#34;在这里插入图片描述&#34;&gt;&#xA;那到底啥是CAS呢？它又是是如何解决这个问题的呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>golang 中 channel 的详细使用、使用注意事项及死锁分析</title>
      <link>http://shanks.link/blog/2022/09/29/golang-%E4%B8%AD-channel-%E7%9A%84%E8%AF%A6%E7%BB%86%E4%BD%BF%E7%94%A8%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E5%8F%8A%E6%AD%BB%E9%94%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 29 Sep 2022 18:16:16 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/29/golang-%E4%B8%AD-channel-%E7%9A%84%E8%AF%A6%E7%BB%86%E4%BD%BF%E7%94%A8%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E5%8F%8A%E6%AD%BB%E9%94%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h1 id=&#34;golang-中-channel-的详细使用使用注意事项及死锁分析&#34;&gt;&lt;a href=&#34;https://www.cnblogs.com/jiujuan/p/16014608.html&#34;&gt;golang 中 channel 的详细使用、使用注意事项及死锁分析&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;什么是-channel-管道&#34;&gt;什么是 channel 管道&lt;a href=&#34;https://www.cnblogs.com/jiujuan/p/16014608.html#3042963189&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;它是一个数据管道，可以往里面写数据，从里面读数据。&lt;/p&gt;&#xA;&lt;p&gt;channel 是 goroutine 之间数据通信桥梁，而且是线程安全的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Copy a slice in Go</title>
      <link>http://shanks.link/blog/2022/09/29/copy-a-slice-in-go/</link>
      <pubDate>Thu, 29 Sep 2022 18:12:12 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/29/copy-a-slice-in-go/</guid>
      <description>&lt;p&gt;To duplicate a slice in Go, getting a deep copy of its contents, you need to either use the built-in &lt;a href=&#34;https://pkg.go.dev/builtin#copy&#34;&gt;&lt;code&gt;copy()&lt;/code&gt;&lt;/a&gt; function, or create a new empty slice and add all the elements of the first slice to it using the &lt;a href=&#34;https://pkg.go.dev/builtin#append&#34;&gt;&lt;code&gt;append()&lt;/code&gt;&lt;/a&gt; function. &lt;a href=&#34;https://gosamples.dev/capacity-and-length&#34;&gt;Because of how slices are built in Go&lt;/a&gt;, assigning one slice to another only makes a shallow copy, and you should not use it if you want to clone the slice in a deep way.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 20.04 修改时区和同步时间</title>
      <link>http://shanks.link/blog/2022/09/29/ubuntu-20.04-%E4%BF%AE%E6%94%B9%E6%97%B6%E5%8C%BA%E5%92%8C%E5%90%8C%E6%AD%A5%E6%97%B6%E9%97%B4/</link>
      <pubDate>Thu, 29 Sep 2022 17:40:40 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/29/ubuntu-20.04-%E4%BF%AE%E6%94%B9%E6%97%B6%E5%8C%BA%E5%92%8C%E5%90%8C%E6%AD%A5%E6%97%B6%E9%97%B4/</guid>
      <description>&lt;h4 id=&#34;查看系统支持的时区&#34;&gt;查看系统支持的时区&lt;/h4&gt;&#xA;&lt;p&gt;​&#x9;timedatectl list-timezones&lt;/p&gt;&#xA;&lt;h4 id=&#34;设置想要的时区&#34;&gt;设置想要的时区&lt;/h4&gt;&#xA;&lt;p&gt;​&#x9;sudo timedatectl set-timezone Asia/Shanghai&lt;/p&gt;&#xA;&lt;p&gt;​    或者  sudo timedatectl set-timezone Asia/Hong_Kong&lt;/p&gt;&#xA;&lt;h4 id=&#34;查看设置结果&#34;&gt;查看设置结果&lt;/h4&gt;&#xA;&lt;p&gt;​&#x9;date&lt;/p&gt;&#xA;&lt;h4 id=&#34;安装同步软件&#34;&gt;安装同步软件&lt;/h4&gt;&#xA;&lt;p&gt;​&#x9;apt-get install ntp&lt;/p&gt;&#xA;&lt;h4 id=&#34;和服务器同步&#34;&gt;和服务器同步&lt;/h4&gt;&#xA;&lt;p&gt;​&#x9;ntpdate time.nist.gov&lt;/p&gt;</description>
    </item>
    <item>
      <title>CentOS8上安装 Samba</title>
      <link>http://shanks.link/blog/2022/09/29/centos8%E4%B8%8A%E5%AE%89%E8%A3%85-samba/</link>
      <pubDate>Thu, 29 Sep 2022 16:59:59 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/29/centos8%E4%B8%8A%E5%AE%89%E8%A3%85-samba/</guid>
      <description>&lt;h1 id=&#34;centos-8安装samba服务器及配置&#34;&gt;centos 8安装Samba服务器及配置&lt;/h1&gt;&#xA;&lt;p&gt;1首先通过命令查看samba的安装情况 rpm -ql | grep samba&#xA;查看centos版本&#xA;[root@localhost ~]# rpm -q centos-release&#xA;centos-release-8.1-1.1911.0.8.el8.x86_64&#xA;2在线安装samba服务器 yum -y install samba3查看samba服务配置文件&#xA;root@localhost ~]# gedit /etc/samba/smb.conf&#xA;配置文件内容如下&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu linux编译alsa-lib报错 automake-1.16: command not found 的解决方案</title>
      <link>http://shanks.link/blog/2022/09/29/ubuntu-linux%E7%BC%96%E8%AF%91alsa-lib%E6%8A%A5%E9%94%99-automake-1.16-command-not-found-%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Thu, 29 Sep 2022 16:49:56 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/29/ubuntu-linux%E7%BC%96%E8%AF%91alsa-lib%E6%8A%A5%E9%94%99-automake-1.16-command-not-found-%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>&lt;p&gt;在编译alsa的时候报错，config完毕后，make错误如下： line 81: automake-1.16: command not found&lt;/p&gt;&#xA;&lt;p&gt;而我的automke的版本为1.15&lt;/p&gt;&#xA;&lt;p&gt;于是卸载了这个automake后，http://ftp.gnu.org/gnu/automake/下载了最新的1.16，然后安装，然后继续编译alsa，报错：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Gitlib部署简介</title>
      <link>http://shanks.link/blog/2022/09/29/gitlib%E9%83%A8%E7%BD%B2%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 29 Sep 2022 16:43:26 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/29/gitlib%E9%83%A8%E7%BD%B2%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h2 id=&#34;一前言&#34;&gt;一、前言&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1本文主要内容&#34;&gt;1、本文主要内容&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;GitLab社区版部署&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;GitLab配置禁用创建组权限&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;GitLab配置邮件(SMTP)&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Gitlab备份配置&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;GitLab常用命令说明&lt;/p&gt;&#xA;&lt;h3 id=&#34;2gitlab介绍&#34;&gt;2、GitLab介绍&lt;/h3&gt;&#xA;&lt;p&gt;GitLab一个开源的git仓库管理平台，方便团队协作开发、管理。在GitLab上可以实现完整的CI（持续集成）、CD（持续发布）流程。而且还提供了免费使用的Plan，以及免费的可以独立部署的社区版本(&lt;a href=&#34;https://link.segmentfault.com/?enc=VXI5DvoH1IjuycsvYzntAA%3D%3D.IIMjwBQP4GTixA6QXIEis5w2pqy215xiH5CGVX9yHeYpmfbDICaU03auLUkgw4bI&#34;&gt;https://gitlab.com/gitlab-org/gitlab-ce&lt;/a&gt; )。官网：&lt;a href=&#34;https://link.segmentfault.com/?enc=SWcIJHJAUiGen2CtZSgnfQ%3D%3D.zj7aoe8%2F233nXK3k1eh2bZmzB4z0h%2Fn5gh%2BCh%2FR1E8A%3D&#34;&gt;https://about.gitlab.com/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>磁盘那些事</title>
      <link>http://shanks.link/blog/2022/09/29/%E7%A3%81%E7%9B%98%E9%82%A3%E4%BA%9B%E4%BA%8B/</link>
      <pubDate>Thu, 29 Sep 2022 16:31:09 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/29/%E7%A3%81%E7%9B%98%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;&#xA;&lt;p&gt;计算机硬件性能在过去十年间的发展普遍遵循摩尔定律，通用计算机的CPU主频早已超过3GHz，内存也进入了普及DDR4的时代。然而传统硬盘虽然在存储容量上增长迅速，但是在读写性能上并无明显提升，同时SSD硬盘价格高昂，不能在短时间内完全替代传统硬盘。传统磁盘的I/O读写速度成为了计算机系统性能提高的瓶颈，制约了计算机整体性能的发展。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git生成patch和打patch</title>
      <link>http://shanks.link/blog/2022/09/29/git%E7%94%9F%E6%88%90patch%E5%92%8C%E6%89%93patch/</link>
      <pubDate>Thu, 29 Sep 2022 16:12:32 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/29/git%E7%94%9F%E6%88%90patch%E5%92%8C%E6%89%93patch/</guid>
      <description>&lt;h1 id=&#34;git生成patch和打patch&#34;&gt;git生成patch和打patch&lt;/h1&gt;&#xA;&lt;p&gt;日常开发与合作过程中，对于code生成patch和打patch(应用patch)成为经常需要做的事情，使用方法（直接给出一些examples）：&lt;/p&gt;</description>
    </item>
    <item>
      <title>CentOS相关链接</title>
      <link>http://shanks.link/blog/2022/09/29/centos%E7%9B%B8%E5%85%B3%E9%93%BE%E6%8E%A5/</link>
      <pubDate>Thu, 29 Sep 2022 16:10:32 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/29/centos%E7%9B%B8%E5%85%B3%E9%93%BE%E6%8E%A5/</guid>
      <description>&lt;h5 id=&#34;软件源&#34;&gt;软件源 &lt;a href=&#34;https://centos.pkgs.org/8/centos-powertools-x86_64/&#34;&gt;https://centos.pkgs.org/8/centos-powertools-x86_64/&lt;/a&gt;&lt;/h5&gt;</description>
    </item>
    <item>
      <title>Git常用命令</title>
      <link>http://shanks.link/blog/2022/09/29/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Thu, 29 Sep 2022 15:59:32 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/29/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;h5 id=&#34;忽略文件权限和文件所有者&#34;&gt;忽略文件权限和文件所有者&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;git config core.filemode false  // 当前版本库&lt;/li&gt;&#xA;&lt;li&gt;git config &amp;ndash;global core.fileMode false // 所有版本库&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;h5 id=&#34;查看远程库信息&#34;&gt;查看远程库信息&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;git remote 查看远程库的信息&lt;/li&gt;&#xA;&lt;li&gt;git remote –v 查看远程库的详细信息&lt;/li&gt;&#xA;&lt;li&gt;git remote add name url 添加远程仓库&lt;/li&gt;&#xA;&lt;li&gt;git remote rename oldname newname 重命名仓库&lt;/li&gt;&#xA;&lt;li&gt;git remote rm 删除仓库&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Hugo简易介绍</title>
      <link>http://shanks.link/blog/2022/09/29/hugo%E7%AE%80%E6%98%93%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Thu, 29 Sep 2022 15:39:32 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/29/hugo%E7%AE%80%E6%98%93%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;h1 id=&#34;hugo简易介绍&#34;&gt;Hugo简易介绍&lt;/h1&gt;&#xA;&lt;p&gt;Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。&lt;/p&gt;&#xA;&lt;h1 id=&#34;快速开始&#34;&gt;快速开始&lt;/h1&gt;&#xA;&lt;h3 id=&#34;安装hugo&#34;&gt;安装Hugo&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1-二进制安装推荐简单快速&#34;&gt;1. 二进制安装（推荐：简单、快速）&lt;/h4&gt;&#xA;&lt;p&gt;到 &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;Hugo Releases&lt;/a&gt; 下载对应的操作系统版本的Hugo二进制文件（hugo或者hugo.exe）&lt;/p&gt;</description>
    </item>
    <item>
      <title>利用hugo搭建个人博客入门教程</title>
      <link>http://shanks.link/blog/2022/09/29/%E5%88%A9%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</link>
      <pubDate>Thu, 29 Sep 2022 15:29:32 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/29/%E5%88%A9%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</guid>
      <description>&lt;h1 id=&#34;利用hugo搭建个人博客入门教程&#34;&gt;利用hugo搭建个人博客入门教程&lt;/h1&gt;&#xA;&lt;h3 id=&#34;起因&#34;&gt;起因&lt;/h3&gt;&#xA;&lt;p&gt;之前看过腾讯工程师写的《Web全站工程师的自我修养》&lt;a href=&#34;https://youngspring1.github.io/2016/2016-03-06-hugo/%E4%BD%99%E6%9E%9C%EF%BC%9A%5B%E3%80%8AWeb%E5%85%A8%E7%AB%99%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB%E3%80%8B%5D(http://www.amazon.cn/Web%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB-%E4%BD%99%E6%9E%9C/dp/B0141BI0D2/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1457233956&amp;amp;sr=1-1)&#34;&gt;^1&lt;/a&gt;一书，萌生了搭建一个博客的想法，用来记录学习记录和生活感受。先用免费的github，挂载静态页面试试吧。原来计划使用道听途说的Jekyll，然后一不小心看到了这篇文章http://blog.coderzh.com/2015/08/29/hugo/，各种好:&#xA;1.只有一个二进制文件。&#xA;2.可以将宇宙标准MarkDown格式的文章自动转换为静态网页。&#xA;3.内置Web服务器，可以立即在本地查看修改结果。&#xA;那么就用hugo[^2](&lt;a href=&#34;https://youngspring1.github.io/2016/2016-03-06-hugo/hugo&#34;&gt;https://youngspring1.github.io/2016/2016-03-06-hugo/hugo&lt;/a&gt;主页：吧。有空再试试hexo[^3](&lt;a href=&#34;https://youngspring1.github.io/2016/2016-03-06-hugo/hexo&#34;&gt;https://youngspring1.github.io/2016/2016-03-06-hugo/hexo&lt;/a&gt;主页：。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenWrt 编译杂记</title>
      <link>http://shanks.link/blog/2022/09/29/openwrt-%E7%BC%96%E8%AF%91%E6%9D%82%E8%AE%B0/</link>
      <pubDate>Thu, 29 Sep 2022 14:32:47 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/29/openwrt-%E7%BC%96%E8%AF%91%E6%9D%82%E8%AE%B0/</guid>
      <description>&lt;h4 id=&#34;概述&#34;&gt;概述：&lt;/h4&gt;&#xA;&lt;p&gt;​&#x9;根据github大神提供的教程，用人家的编译代码输入命令行逐步执行就好了！（中间输入自己路由的cpu架构和cpu型号以及路由的型号），如果要装插件，位置在luci -application里，自己选择就好了了！&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://shanks.link/blog/2022/09/20/</link>
      <pubDate>Tue, 20 Sep 2022 23:30:34 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/20/</guid>
      <description>&lt;h1 id=&#34;heading&#34;&gt;#&amp;mdash;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;categories-go&#34;&gt;title: Go：defer 语句如何工作&#xA;date: 2021-04-05 11:55:28&#xA;tags: [go]&#xA;categories: [go]&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://studygolang.com/articles/28431&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Go：defer 语句如何工作&lt;/p&gt;&#xA;&lt;p&gt;ℹ️ 这篇文章基于 Go 1.12。&lt;/p&gt;&#xA;&lt;p&gt;defer 语句是在函数返回前执行一段代码的便捷方法，如 Golang 规范所描述：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go更细粒度的读写锁设计</title>
      <link>http://shanks.link/blog/2022/09/20/go%E6%9B%B4%E7%BB%86%E7%B2%92%E5%BA%A6%E7%9A%84%E8%AF%BB%E5%86%99%E9%94%81%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Tue, 20 Sep 2022 23:30:34 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/20/go%E6%9B%B4%E7%BB%86%E7%B2%92%E5%BA%A6%E7%9A%84%E8%AF%BB%E5%86%99%E9%94%81%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;h2 id=&#34;go更细粒度的读写锁设计&#34;&gt;Go更细粒度的读写锁设计&lt;/h2&gt;&#xA;&lt;p&gt;在&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzIwNTA4MDAwMQ==&amp;amp;mid=2247484613&amp;amp;idx=1&amp;amp;sn=d79c33be877e8124d050ed3669b26e24&amp;amp;chksm=9737106ba040997d4bdd3aa077186d89568b0019b4b83164dc59b9b2e8c4a408e4496aa93d1a&amp;amp;scene=21#wechat_redirect&#34;&gt;《Go精妙的互斥锁设计》&lt;/a&gt;一文中，我们详细地讲解了互斥锁的实现原理。互斥锁为了避免竞争条件，它只允许一个线程进入代码临界区，而由于锁竞争的存在，程序的执行效率会被降低。同时我们知道，只有多线程在共享资源中有写操作，才会引发竞态问题，只要资源没有发生变化，多线程读取相同的资源就是安全的。因此，我们引申出更细粒度的锁：读写锁。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;什么是读写锁&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;读写锁是一种多读单写锁，分读和写两种锁，多个线程可以同时加读锁，但是写锁和写锁、写锁与读锁之间是互斥的。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/Go%E8%AF%BB%E5%86%99%E9%94%81/1.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;读写锁对临界区的处理如上图所示。其中，t1时刻，由于线程1已加写锁，线程2被互斥等待写锁的释放；t2时刻，线程2已加读锁，线程3可以对其继续加读锁并进入临界区；t3时刻，线程3加了读锁，线程4被互斥等待读锁的释放。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go语言调度器源代码情景分析之九：操作系统线程及线程调度</title>
      <link>http://shanks.link/blog/2022/09/20/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%B9%9D%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BA%BF%E7%A8%8B%E5%8F%8A%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Tue, 20 Sep 2022 23:30:34 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/20/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%B9%9D%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BA%BF%E7%A8%8B%E5%8F%8A%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6/</guid>
      <description>&lt;h3 id=&#34;原创-爱写程序的阿波张-源码游记-2019-04-25&#34;&gt;原创 爱写程序的阿波张 &lt;a href=&#34;https://mp.weixin.qq.com/s/OvGlI5VvvRdMRuJegNrOMg&#34;&gt;源码游记&lt;/a&gt; 2019-04-25&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;本文是《go调度器源代码情景分析》系列 第一章 预备知识的第九小节。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;要深入理解goroutine的调度器，就需要对操作系统线程有个大致的了解，因为go的调度系统是建立在操作系统线程之上的，所以接下来我们对其做一个简单的介绍。&lt;/p&gt;</description>
    </item>
    <item>
      <title>WebAssembly 系列（五）为什么 WebAssembly 更快？</title>
      <link>http://shanks.link/blog/2022/09/20/webassembly-%E7%B3%BB%E5%88%97%E4%BA%94%E4%B8%BA%E4%BB%80%E4%B9%88-webassembly-%E6%9B%B4%E5%BF%AB/</link>
      <pubDate>Tue, 20 Sep 2022 23:30:34 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/20/webassembly-%E7%B3%BB%E5%88%97%E4%BA%94%E4%B8%BA%E4%BB%80%E4%B9%88-webassembly-%E6%9B%B4%E5%BF%AB/</guid>
      <description></description>
    </item>
    <item>
      <title>OpenWrt 代码目录简介</title>
      <link>http://shanks.link/blog/2022/09/13/openwrt-%E4%BB%A3%E7%A0%81%E7%9B%AE%E5%BD%95%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 13 Sep 2022 10:29:11 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/13/openwrt-%E4%BB%A3%E7%A0%81%E7%9B%AE%E5%BD%95%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h2 id=&#34;顶层目录&#34;&gt;顶层目录&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20191011223104301.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;目 录&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;含 义&lt;/strong&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;config&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;编译选项配置文件，包含全局编译设置、开发人员编译设置、目标文件格式设置和内核 编译设置等 4 部分&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;include&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;包含准备环境脚本、下载补丁脚本、编译 Makefile 以及编译指令等&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;package&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;各种功能的软件包，软件包仅包含 Makefile 和修改补丁及配置文件。其中 Makefile 包含 源代码真正的地址及 MD5 值。OpenWrt 社区的修改代码以补丁包形式管理，package 只 保存一些常用的软件包&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;scripts&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;包含准备环境脚本、下载补丁脚本、编译 Makefile 以及编译指令等&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;target&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;指的是嵌入式平台，包括特定嵌入式平台的内容&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;toolchain&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;编译器和C库等（交叉编译工具），例如包含编译工具gcc和glibc库&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;tools&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;通用命令/工具，用来生成固件的辅助工具，如打补丁工具patch、编译工具make及squashfs等&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;config目录&#34;&gt;config目录&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;目录下存放的是编译配置文件，是 OpenWrt 15.05 的新增目录，是将一些编译选项配置文件放在此处，包含全局编译设置、开发人员编译设置、目标文件格式设置和内核编译设置等4部分。&lt;/li&gt;&#xA;&lt;li&gt;编译源码时，输入 make defconfig 命令，这个目录下的配置文件会被集中读取并生成一个 .config 配置文件，该文件在下面会介绍。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;包含文件&#34;&gt;包含文件&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20191011222922127.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>图解ECDHE秘钥交换算法</title>
      <link>http://shanks.link/blog/2022/07/18/%E5%9B%BE%E8%A7%A3ecdhe%E7%A7%98%E9%92%A5%E4%BA%A4%E6%8D%A2%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 18 Jul 2022 09:26:50 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/18/%E5%9B%BE%E8%A7%A3ecdhe%E7%A7%98%E9%92%A5%E4%BA%A4%E6%8D%A2%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/xiaolincoding/&#34;&gt;&lt;img src=&#34;https://www.cnblogs.com/skins/custom/images/logo.gif&#34; alt=&#34;返回主页&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;HTTPS 常用的密钥交换算法有两种，分别是 RSA 和 ECDHE 算法。&lt;/p&gt;&#xA;&lt;p&gt;其中，RSA 是比较传统的密钥交换算法，它不具备前向安全的性质，因此现在很少服务器使用的。而 ECDHE 算法具有前向安全，所以被广泛使用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>图解HTTPS</title>
      <link>http://shanks.link/blog/2022/07/18/%E5%9B%BE%E8%A7%A3https/</link>
      <pubDate>Mon, 18 Jul 2022 09:19:39 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/18/%E5%9B%BE%E8%A7%A3https/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/xiaolincoding/&#34;&gt;&lt;img src=&#34;https://www.cnblogs.com/skins/custom/images/logo.gif&#34; alt=&#34;返回主页&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;我很早之前写过一篇关于 HTTP 和 HTTPS 的文章，但对于 HTTPS 介绍还不够详细，只讲了比较基础的部分，所以这次我们再来深入一下 HTTPS，用&lt;strong&gt;实战抓包&lt;/strong&gt;的方式，带大家再来窥探一次 HTTPS。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Changed Timezone Ubuntu</title>
      <link>http://shanks.link/blog/2022/07/13/changed-timezone-ubuntu/</link>
      <pubDate>Wed, 13 Jul 2022 13:08:26 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/13/changed-timezone-ubuntu/</guid>
      <description>&lt;h1 id=&#34;how-to-set-or-change-timezone-in-ubuntu-linux-beginners-tip&#34;&gt;How to Set or Change Timezone in Ubuntu Linux [Beginner’s Tip]&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://itsfoss.com/install-ubuntu/&#34;&gt;When you install Ubuntu&lt;/a&gt;, it asks you to set timezone. If you chose a wrong timezone or if you have moved to some other part of the world, you can easily change it later.&lt;/p&gt;&#xA;&lt;h2 id=&#34;how-to-change-timezone-in-ubuntu-and-other-linux-distributions&#34;&gt;How to change Timezone in Ubuntu and other Linux distributions&lt;/h2&gt;&#xA;&lt;p&gt;There are two ways to change the timezone in Ubuntu. You can use the graphical settings or use the timedatectl command in the terminal. You may also change the /etc/timezone file directly but I won’t advise that.&lt;/p&gt;</description>
    </item>
    <item>
      <title>返璞归真实现OpenVPN第二阶段协商</title>
      <link>http://shanks.link/blog/2022/07/12/%E8%BF%94%E7%92%9E%E5%BD%92%E7%9C%9F%E5%AE%9E%E7%8E%B0openvpn%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%E5%8D%8F%E5%95%86/</link>
      <pubDate>Tue, 12 Jul 2022 09:39:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/12/%E8%BF%94%E7%92%9E%E5%BD%92%E7%9C%9F%E5%AE%9E%E7%8E%B0openvpn%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%E5%8D%8F%E5%95%86/</guid>
      <description>&lt;h1 id=&#34;背景介绍&#34;&gt;背景介绍&lt;/h1&gt;&#xA;&lt;p&gt;听着《梦中的额吉》，《天堂》&amp;hellip;女儿在睡觉&amp;hellip;外面细雨&amp;hellip;中秋小长假，完成自己的OpenVPN patch 编码中充满了快乐！前提是你知道自己在做什么！ OpenVPN不给力，虽然它给出了N多的Renegotiate选项，然则其实现却不尽人意。难道设计者以为我们众人就这么好忽悠吗？&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVP性能 当tap遇到bonding</title>
      <link>http://shanks.link/blog/2022/07/12/openvp%E6%80%A7%E8%83%BD-%E5%BD%93tap%E9%81%87%E5%88%B0bonding/</link>
      <pubDate>Tue, 12 Jul 2022 09:32:02 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/12/openvp%E6%80%A7%E8%83%BD-%E5%BD%93tap%E9%81%87%E5%88%B0bonding/</guid>
      <description>&lt;h1 id=&#34;引子&#34;&gt;引子&lt;/h1&gt;&#xA;&lt;p&gt;​&#x9;&#x9;别的就不多说什么了，前面的文章说过，OpenVPN有两个瓶颈，一个是tap网卡，另一个是加密/解密 ，然而不可否认，OpenVPN的客户端和服务器端处于一个“虚拟网段”，抛开虚拟不谈，只要是一个网段的，我们就可以说它们属于一个局域网(当然前提是使用tcp/ip网络)，既然属于一个局域网，那么它要么是广播的，要么是点对点的，不管怎样，两端都有确定的三层地址(IP地址)，所有的数据包都是通过这个三层地址来传输到对端的，因此为了使得路径畅通，我们只关心路由即可。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN性能 第二个瓶颈在ssl加解密</title>
      <link>http://shanks.link/blog/2022/07/12/openvpn%E6%80%A7%E8%83%BD-%E7%AC%AC%E4%BA%8C%E4%B8%AA%E7%93%B6%E9%A2%88%E5%9C%A8ssl%E5%8A%A0%E8%A7%A3%E5%AF%86/</link>
      <pubDate>Tue, 12 Jul 2022 09:28:26 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/12/openvpn%E6%80%A7%E8%83%BD-%E7%AC%AC%E4%BA%8C%E4%B8%AA%E7%93%B6%E9%A2%88%E5%9C%A8ssl%E5%8A%A0%E8%A7%A3%E5%AF%86/</guid>
      <description>&lt;p&gt;测试命令：&lt;code&gt;ab -k -c 8 -n 500 http://10.0.188.139/5m.html&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;机器部署：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;S0：&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eth0:192.168.188.194 mtu 1500 e1000e 1000baseT-FD flow-control&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tun0:172.17.0.2      mtu 1500 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;route:10.0.188.139   dev tun0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;S1:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eth0:192.168.188.193 mtu 1500 e1000e 1000baseT-FD flow-control&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eth1:10.0.188.193    mtu 1500 e1000e 1000baseT-FD flow-control&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tun0:172.16.0.1      mtu 1500&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;S2:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eth1:10.0.188.139    mtu 1500 e1000e 1000baseT-FD flow-control&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;route:172.17.0.0     gw  10.0.188.193&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试数据： OpenVPN配置：&lt;code&gt;--cipher BF-CBC --auth SHA1&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN的效率问题</title>
      <link>http://shanks.link/blog/2022/07/12/openvpn%E7%9A%84%E6%95%88%E7%8E%87%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 12 Jul 2022 09:25:37 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/12/openvpn%E7%9A%84%E6%95%88%E7%8E%87%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;OpenVPN由于其设计问题，速度很慢，有人认为是由于加密解密导致了速度变慢，当将cipher设置成none之后，发现效率并没有提升，并且使用最慢的cipher，使用比较好的cpu，设置比较大的txqueuelen，使用比较快的网卡&amp;ndash;100baseT-FD，OpenVPN的效率还是不行，cpu使用率没多少，那么可以认为提升cpu性能已经于事无补了，后来才发现是OpenVPN自身的问题，通过源代码看得出OpenVPN是一个单进程单线程的程序，整个程序启动后就是一个大的循环，结构如下：&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN高级路由技术 全面的互通性配置</title>
      <link>http://shanks.link/blog/2022/07/12/openvpn%E9%AB%98%E7%BA%A7%E8%B7%AF%E7%94%B1%E6%8A%80%E6%9C%AF-%E5%85%A8%E9%9D%A2%E7%9A%84%E4%BA%92%E9%80%9A%E6%80%A7%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 12 Jul 2022 09:22:14 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/12/openvpn%E9%AB%98%E7%BA%A7%E8%B7%AF%E7%94%B1%E6%8A%80%E6%9C%AF-%E5%85%A8%E9%9D%A2%E7%9A%84%E4%BA%92%E9%80%9A%E6%80%A7%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;p&gt;本文全面介绍OpenVPN的路由配置，不再阐述理论。为了简单且不引入其它问题，以下的配置不考虑NAT。 零.介绍和声明以及拓扑图&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;以下的配置不再给出任何配置文件或者配置选项，比如iroute配置等；以下路由配置可以不使用默认网关，使用默认网关只是为了方便。正确的做法是配置指向确切网络的路由，变长掩码非0&lt;/li&gt;&#xA;&lt;li&gt;由于OpenVPN支持tun和tap两种模式，在Tun中，路由指的是下一跳节点或者是一个虚拟网卡，在tap中，路由指的是从OpenVPN虚拟交换机出去的虚拟端口，这二者是截然不同的，协议也没有工作在同一个层，因此OpenVPN内部路由使用multi_instance代表这两者，tun模式中，multi_instance代表三层路由目标，tap模式中，multi_instance代表二层路由目标，即端口。 拓扑图如下：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/14/167ac0272d6f73cd~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN高级路由技术 虚拟交换机和内部路由缓存</title>
      <link>http://shanks.link/blog/2022/07/12/openvpn%E9%AB%98%E7%BA%A7%E8%B7%AF%E7%94%B1%E6%8A%80%E6%9C%AF-%E8%99%9A%E6%8B%9F%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%92%8C%E5%86%85%E9%83%A8%E8%B7%AF%E7%94%B1%E7%BC%93%E5%AD%98/</link>
      <pubDate>Tue, 12 Jul 2022 09:18:56 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/12/openvpn%E9%AB%98%E7%BA%A7%E8%B7%AF%E7%94%B1%E6%8A%80%E6%9C%AF-%E8%99%9A%E6%8B%9F%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%92%8C%E5%86%85%E9%83%A8%E8%B7%AF%E7%94%B1%E7%BC%93%E5%AD%98/</guid>
      <description>&lt;p&gt;前面的《OpenVPN高级路由技术》系列文章阐述了OpenVPN中潜在的内部路由技术以及具体的配置方法，另外也谈到了如何使用OpenVPN将网络进行扩展，然而具体到这些内部路由是怎么工作的，并没有谈及。为什么直到现在才说这些呢？我以为最好先不要管内部原理，先要学会用，只有当你明白这是个黑盒子的时候，你才会有目的的想进入它，希望它成为你的白盒子。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN的包过滤机制</title>
      <link>http://shanks.link/blog/2022/07/12/openvpn%E7%9A%84%E5%8C%85%E8%BF%87%E6%BB%A4%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 12 Jul 2022 09:10:40 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/12/openvpn%E7%9A%84%E5%8C%85%E8%BF%87%E6%BB%A4%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;p&gt;OpenVPN是和网络结合的非常紧密的一款VPN，事实上，每一个VPN框架都和IP网络结合的很紧密，因此在此首先劝一下那些想搞VPN的朋友们，一定要先彻底精通TCP/IP网络协议栈，特别是IP路由，防火墙原理之后再去啃OpenVPN或者其它的VPN，否则会事倍功半的，仅仅看懂源代码和灵活配置，灵活运用，灵活定制之间的差距和很远，精通VPN远远不是会写C代码会使用哈希表就能应付得了的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN高级路由技术 反向推送信息</title>
      <link>http://shanks.link/blog/2022/07/12/openvpn%E9%AB%98%E7%BA%A7%E8%B7%AF%E7%94%B1%E6%8A%80%E6%9C%AF-%E5%8F%8D%E5%90%91%E6%8E%A8%E9%80%81%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Tue, 12 Jul 2022 09:04:38 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/12/openvpn%E9%AB%98%E7%BA%A7%E8%B7%AF%E7%94%B1%E6%8A%80%E6%9C%AF-%E5%8F%8D%E5%90%91%E6%8E%A8%E9%80%81%E4%BF%A1%E6%81%AF/</guid>
      <description>&lt;p&gt;在&lt;a href=&#34;https://juejin.im/editor/drafts/5c13080be51d456859418774&#34;&gt;《VPN的概念以及要点》&lt;/a&gt;中，我指出了OpenVPN构建的网络是单向的，也就是说在不手工配置系统路由的情况下，只能由OpenVPN客户端一侧发起连接。这是因为OpenVPN服务器会把自己一侧的路由推送至OpenVPN客户端，反之，OpenVPN客户端却不能把自己一侧的路由推送给OpenVPN服务器。于是我自己修改代码手工实现了一个PUSH消息，将客户端的信息放在PUSH_REQUEST的后面进行发送，然后OpenVPN服务器端进行解析。此举改动了大量的代码，浪费了我一天无聊的时间…&lt;/p&gt;&#xA;&lt;p&gt;有什么更直接的方式么？事实上，当你认为没有的时候，蓦然回首，那人正在灯火阑珊处等你呢。如果你执行openvpn –help的时候，你会发现一个很有趣的选项，那就是push-peer-info选项，正如help解释所说，它只能用于client。该选项的含义是将OpenVPN客户端的信息推送至OpenVPN服务器。那么赶紧试试看。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN高级路由技术 扩展成巨大的网络</title>
      <link>http://shanks.link/blog/2022/07/12/openvpn%E9%AB%98%E7%BA%A7%E8%B7%AF%E7%94%B1%E6%8A%80%E6%9C%AF-%E6%89%A9%E5%B1%95%E6%88%90%E5%B7%A8%E5%A4%A7%E7%9A%84%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Tue, 12 Jul 2022 09:01:03 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/12/openvpn%E9%AB%98%E7%BA%A7%E8%B7%AF%E7%94%B1%E6%8A%80%E6%9C%AF-%E6%89%A9%E5%B1%95%E6%88%90%E5%B7%A8%E5%A4%A7%E7%9A%84%E7%BD%91%E7%BB%9C/</guid>
      <description>&lt;p&gt;OpenVPN内部实现了一个路由器的功能，其源代码的multi_get_instance_by_virtual_addr函数执行路由查找的工作，这种路由是OpenVPN的内部路由，也就是说这种路由是OpenVPN配置并查找的，和外部的系统路由是完全独立的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN的高级路由技术 内部路由</title>
      <link>http://shanks.link/blog/2022/07/12/openvpn%E7%9A%84%E9%AB%98%E7%BA%A7%E8%B7%AF%E7%94%B1%E6%8A%80%E6%9C%AF-%E5%86%85%E9%83%A8%E8%B7%AF%E7%94%B1/</link>
      <pubDate>Tue, 12 Jul 2022 08:57:11 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/12/openvpn%E7%9A%84%E9%AB%98%E7%BA%A7%E8%B7%AF%E7%94%B1%E6%8A%80%E6%9C%AF-%E5%86%85%E9%83%A8%E8%B7%AF%E7%94%B1/</guid>
      <description>&lt;h1 id=&#34;server模式以及点对点模式的openvpn&#34;&gt;server模式以及点对点模式的OpenVPN&lt;/h1&gt;&#xA;&lt;p&gt;前文好几次说过，虽然OpenVPN也可以创建隧道，该隧道封装了IP数据报或者以太帧，然而却和使用IPSec VPN的网络拓扑无法做到兼容，这是因为在网对网模式下，默认配置下，使用tun虚拟网卡模式的OpenVPN的客户端虚拟网卡上要强制做SNAT，否则便通不过OpenVPN服务器端的检查。这是因为OpenVPN服务器是根据分配给客户端的虚拟IP地址来维护客户端和自己保存的session(也就是multi_instance)的对应关系的。为了定位是哪个客户端发来了封装的数据包，OpenVPN需要解析出封装载荷中的源IP地址，从而找到和自己保存的multi_instance的对应关系。初看起来，这好像是OpenVPN服务器设计时端偷了一个懒，然而下一节会说明，事实并不是那样。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用OpenVPN的桥接模式扩展内部局域网</title>
      <link>http://shanks.link/blog/2022/07/12/%E4%BD%BF%E7%94%A8openvpn%E7%9A%84%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F%E6%89%A9%E5%B1%95%E5%86%85%E9%83%A8%E5%B1%80%E5%9F%9F%E7%BD%91/</link>
      <pubDate>Tue, 12 Jul 2022 08:53:11 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/12/%E4%BD%BF%E7%94%A8openvpn%E7%9A%84%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F%E6%89%A9%E5%B1%95%E5%86%85%E9%83%A8%E5%B1%80%E5%9F%9F%E7%BD%91/</guid>
      <description>&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;&#xA;&lt;p&gt;​&#x9;&#x9;&#x9;&#x9;OpenVPN是一款高度可扩展的VPN软件，除了既有的将应用客户端安全接入服务器这一传统功能外，还可以让你无缝的接入一个远程的局域网，正如你身在该局域网一样，如果你不用OpenVPN，你将很难做到这一点。当然，你可以选择像IPSec这样的重量级VPN，但是你的生活从此将不再简单，你也可以使用拨号，连接到远程，但是你永远无法体验完全接入这种身临其境的感觉。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN协议解析 通道 状态机 Reliability层</title>
      <link>http://shanks.link/blog/2022/07/11/openvpn%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90-%E9%80%9A%E9%81%93-%E7%8A%B6%E6%80%81%E6%9C%BA-reliability%E5%B1%82/</link>
      <pubDate>Mon, 11 Jul 2022 23:50:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/openvpn%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90-%E9%80%9A%E9%81%93-%E7%8A%B6%E6%80%81%E6%9C%BA-reliability%E5%B1%82/</guid>
      <description>&lt;h1 id=&#34;openvpn通道&#34;&gt;OpenVPN通道&lt;/h1&gt;&#xA;&lt;h2 id=&#34;openvpn通道-1&#34;&gt;OpenVPN通道&lt;/h2&gt;&#xA;&lt;p&gt;​&#x9;&#x9;OpenVPN内置了两个通道，一个用于控制，另一个用于数据传输，在设计上，很多网络协议都实现了多通道，也有N种方式实现多通道，其中常用的有两种，一种是使用带外数据传输控制信息，另一种就是将控制信息多路复用到数据通道。OpenVPN使用的就是第二种方式。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN协议解析 握手数据包分析</title>
      <link>http://shanks.link/blog/2022/07/11/openvpn%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90-%E6%8F%A1%E6%89%8B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 11 Jul 2022 23:31:43 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/openvpn%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90-%E6%8F%A1%E6%89%8B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;​&#x9;&#x9;学习一种协议的最好的方式就是研究它的数据包，这样可以加深对协议的理解。对于研究过某种协议数据包的家伙来讲，他一定知道协议头的哪个位置对应哪个字段，虽然这对于理解协议为什么这么设计可能没有太大的帮助，然而对于排查问题和实际实施是很有帮助的。既然很多人都对Richard Stevens的《TCP/IP详解》情有独钟，咱就剽窃他的风格，解析一下OpenVPN的握手是如何完成的。本文分析70余个数据包，当然，最终我会略去重复的内容，来看看OpenVPN的握手协商过程。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用OpenVPN时的问题 用源代码分析</title>
      <link>http://shanks.link/blog/2022/07/11/%E4%BD%BF%E7%94%A8openvpn%E6%97%B6%E7%9A%84%E9%97%AE%E9%A2%98-%E7%94%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 11 Jul 2022 23:28:49 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/%E4%BD%BF%E7%94%A8openvpn%E6%97%B6%E7%9A%84%E9%97%AE%E9%A2%98-%E7%94%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;使用OpenVPN时，有几点需要注意：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;如果不是OpenVPN客户端将自己的虚拟IP地址作为源地址发出的数据包，而是由其forward的数据包，那么就要在数据进入虚拟网卡之前做一个SNAT了，否则OpenVPN服务器将会拒绝接收这种数据包；&lt;/li&gt;&#xA;&lt;li&gt;如果使用的是tap虚拟网卡模式，那么一定要将OpenVPN服务器的虚拟ip设置成网关而不能仅仅设置一个出口设备，因为tap模式需要进行arp，如果目的地址不在OpenVPN服务器上或者即使在OpenVPN服务器上但是其arp_ignore设置了不同的值，arp都会不成功进而无法发送数据；&lt;/li&gt;&#xA;&lt;li&gt;在开启了client-to-client的情况下并且使用tun模式时，不要以为所有的client和server均在同一子网内，tun是点对点的，没有子网的概念，所以一个client或者其后的主机为了访问另一个client c2后面的资源，不能将网关设置成c2，除非做复杂的源/目的地址转换，因为OpenVPN服务器将不认识c2后面的目的地址。&lt;/li&gt;&#xA;&lt;li&gt;如果使用tap模式，并且开启了c2c，那么所有的client连同server共同组成一个虚拟子网，内部arp可流通，作为一个虚拟以太网和真实的以太网是一样的，OpenVPN服务器就是一个以太网交换机，可以设置任意的client或者server作为网关，这个意义上，OpenVPN服务器是一个三层交换机。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;具体的代码都在multi_process_incoming_link中：&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN关于push Peer Info的实现</title>
      <link>http://shanks.link/blog/2022/07/11/openvpn%E5%85%B3%E4%BA%8Epush-peer-info%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 11 Jul 2022 23:22:57 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/openvpn%E5%85%B3%E4%BA%8Epush-peer-info%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;OpenVPN在help中列举了push-peer-info选项，可是man手册中却没有，google之，发现了以下的帖子以及回复：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Subject:how to use --push-peer-info under 2.2-RC2?&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Flow:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;m testing out 2.2-RC2 under Linux - installed on both client and server (--help shows it&amp;#39;&lt;/span&gt;s there too). I have add &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;push-peer-info&amp;#34;&lt;/span&gt; to the client, and have up/down&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; scripts on the server that include a printenv line to capture environment variables. However, I&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;m not seeing any new vars showing up.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;So can someone tell me where does that detail show up on the server?&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#009c00&#34;&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;Subject:how to use --push-peer-info under 2.2-RC2?&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;Flow:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;AFAIK (and AFAICT from looking at the sources) the &amp;#39;&lt;/span&gt;push-peer-info&amp;#39; option is not complete yet. The *client* side works, but the server never extracts the right UV_* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;variables which are pushed out by the client to the server. &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;November last year I asked the -devel list what this option is supposed to &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; ; the result of that discussion was that &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;this is a work in progress&amp;#34;&lt;/span&gt;  :-/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;根据这个帖子，是否可以说OpenVPN对于push-peer-info的实现是个半吊子实现呢？实际上确实有点这个意思。可是这么做并没有什么不妥，永远不要指望开源代码能做到完美实现你的任意需求，人家开发者没有义务这么做。代码在自己手上，如果你看懂了逻辑，自己修改一下使之符合自己的需求便是了。唯一的问题就是将来有一天，他们实现了你现在通过修改代码实现的功能，你还要花一些时间来合并自己的实现和新版本的实现，有时候你要丢弃你的所有修改。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN的日志记录头</title>
      <link>http://shanks.link/blog/2022/07/11/openvpn%E7%9A%84%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E5%A4%B4/</link>
      <pubDate>Mon, 11 Jul 2022 23:17:47 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/openvpn%E7%9A%84%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E5%A4%B4/</guid>
      <description>&lt;p&gt;​&#x9;&#x9;日志记录机制是很多大型软件必不可少的组成部分，日志记录其实是蛮有趣的，既不能记录太多又要切中要害，因此很多程序将日志记录分为若干级别，比如调试级别只输出错误和调试信息，而错误级别则不再输出调试信息等，另外需要管理日志记录的分类，想完全实现这些机制是要动一番脑筋的，既有效又巧妙的实现遍布各大开源代码中，其中linux内核以及openvpn的记录都不错，都将日志作为一个协议而编码，该协议的通信双方是代码的处理逻辑部分和实际日志记录部分，不像printf或者fprintf仅仅记录内容本身，printk还包含一个级别信息，我们将此信息称作日志头，而消息本身就是日志体了，openvpn的实现更加精妙，本文详述其日志头的构成。实际上任何的消息如果想更加方便的管理和应用，都可以增加一个协议头，毕竟协议本身就是为了方便隔离的交互双方的耦合的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN中虚拟ip地址的自定义分配 总结</title>
      <link>http://shanks.link/blog/2022/07/11/openvpn%E4%B8%AD%E8%99%9A%E6%8B%9Fip%E5%9C%B0%E5%9D%80%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E9%85%8D-%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 11 Jul 2022 23:13:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/openvpn%E4%B8%AD%E8%99%9A%E6%8B%9Fip%E5%9C%B0%E5%9D%80%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E9%85%8D-%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;​&#x9;&#x9;OpenVPN中自定义IP地址分配有两种实现方式，一种是写一个plugin，plugin_call这个调用可以被添加到任何地方，OpenVPN中的plugin挂载点也可在任意位置定义，因此利用plugin来自定义IP地址分配策略就有两种方式，第一种方式是可以新定义一个plugin挂载点，紧接着动态分配IP的代码，然后在plugin中实现策略，当然具体到如何将已经分配的ip地址的指针传入plugin中还需要前文中介绍的方式，将ip地址的内存地址作为环境变量加入到env_set，然后&amp;hellip;，这种方式需要修改OpenVPN的代码，要么自己定义一个挂载点，要么在已有的CLIENT_CONNECT中加入新的内存地址环境变量；第二种方式是一种标准的方式，也就是OpenVPN建议的方式，那就是在multi_connection_established中做文章，OpenVPN的代码不需要做任何修改：&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN中虚拟ip地址的分配</title>
      <link>http://shanks.link/blog/2022/07/11/openvpn%E4%B8%AD%E8%99%9A%E6%8B%9Fip%E5%9C%B0%E5%9D%80%E7%9A%84%E5%88%86%E9%85%8D/</link>
      <pubDate>Mon, 11 Jul 2022 23:07:51 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/openvpn%E4%B8%AD%E8%99%9A%E6%8B%9Fip%E5%9C%B0%E5%9D%80%E7%9A%84%E5%88%86%E9%85%8D/</guid>
      <description>&lt;p&gt;​&#x9;&#x9;server将topology推送至client，这就是为何必须实现net30模式的原因，就是为了兼容windows，由于windows的低版本tap-win32驱动只支持这种模式，而后的topology为p2p(实际上windows的tap-win32驱动通过简单修改，比如改掉自问自答的那一部分逻辑看上去也支持这种拓扑，但是如果涉及到dhcp，事情就复杂了，因为通过net30拓扑分给windows的两个主机ip中有一个会充当虚假的dhcp服务器，如果在windows上采用了p2p拓扑，那么tap-win32网卡将直连server的虚拟网卡，而server的虚拟网卡可不敢担此大任)，对于server来讲，没有什么变化，只是对于client来讲，解放了ip的占用，但是client必须是非windows的，不过server倒是可以是 windows，因为对于net30和p2p而言，server端的虚拟ip地址是一样的，不同的是对client的影响&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN的广播问题以及tun和tap设备的深层次挖掘</title>
      <link>http://shanks.link/blog/2022/07/11/openvpn%E7%9A%84%E5%B9%BF%E6%92%AD%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8Atun%E5%92%8Ctap%E8%AE%BE%E5%A4%87%E7%9A%84%E6%B7%B1%E5%B1%82%E6%AC%A1%E6%8C%96%E6%8E%98/</link>
      <pubDate>Mon, 11 Jul 2022 23:04:08 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/openvpn%E7%9A%84%E5%B9%BF%E6%92%AD%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8Atun%E5%92%8Ctap%E8%AE%BE%E5%A4%87%E7%9A%84%E6%B7%B1%E5%B1%82%E6%AC%A1%E6%8C%96%E6%8E%98/</guid>
      <description>&lt;p&gt;​&#x9;&#x9;广播到底通过还是不通过OpenVPN呢？tap处理二层，tun处理三层，虽然tun两端ip是同一个子网，但是其二层却不是，广播是无法进行的，但是tap可以传输广播；由于windows的虚拟网卡驱动的特殊性，为了让windows也能进入vpn，OpenVPN和虚拟网卡驱动作了特殊且复杂的处理。本文详述之(注意，本文不介绍OpenVPN的各种专业术语，比如路由模式和桥接模式之类，需要的话请参考OpenVPN的文档或者FAQ)。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN遇到的Secondary地址问题</title>
      <link>http://shanks.link/blog/2022/07/11/openvpn%E9%81%87%E5%88%B0%E7%9A%84secondary%E5%9C%B0%E5%9D%80%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 11 Jul 2022 22:59:31 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/openvpn%E9%81%87%E5%88%B0%E7%9A%84secondary%E5%9C%B0%E5%9D%80%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;​&#x9;&#x9;对于提供服务的程序，一般而言喜欢使用0.0.0.0这个地址，但是如果这个服务是UDP的，那么就有可能出现一些问题，比如如果某块网卡配置了多个IP地址，那么问题就可能重现。最近使用OpenVPN的时候就遇到了这样的问题。OpenVPN建议使用UDP协议，然而正是由于使用了UDP协议才出现了问题。以下几个要点帮助解决这样的问题，记之备忘：&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN碰到Windows一些问题的解决</title>
      <link>http://shanks.link/blog/2022/07/11/openvpn%E7%A2%B0%E5%88%B0windows%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Mon, 11 Jul 2022 22:53:11 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/openvpn%E7%A2%B0%E5%88%B0windows%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;基本描述&#34;&gt;基本描述&lt;/h1&gt;&#xA;&lt;h2 id=&#34;tap-win32虚拟网卡&#34;&gt;tap-win32虚拟网卡&lt;/h2&gt;&#xA;&lt;p&gt;tap-win32虚拟网卡并不包含任何实际硬件，仅仅是一个驱动，该驱动中包含了一个DHCP服务器程序，可以回复DHCP协议的offer/ack/nak数据包。该驱动的DHCP服务器的参数是可配置的。 tap-win32驱动分为三大部分，首先它作为一个网卡驱动和NDIS中间驱动接口并且设置了一些回调函数，第二部分是一个DHCP服务器，但是这个DHCP的功能是简化的，这部分不和 NDIS接口。二者的关系在NDIS的网卡发送数据的回调函数中体现，网卡发送数据的回调函数中将特殊处理DHCP数据包，然后直接回复。第三部分，tap-win32实现了一个可以读/写/控制的文件，导出给用户态程序比如OpenVPN作为接口。&lt;/p&gt;</description>
    </item>
    <item>
      <title>MacOS上安装OpenVPN</title>
      <link>http://shanks.link/blog/2022/07/11/macos%E4%B8%8A%E5%AE%89%E8%A3%85openvpn/</link>
      <pubDate>Mon, 11 Jul 2022 22:48:32 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/macos%E4%B8%8A%E5%AE%89%E8%A3%85openvpn/</guid>
      <description>&lt;p&gt;​&#x9;这完全是一次需求驱动的行为，而不是工作驱动或者兴趣驱动的行为。我准备完全放弃我那牛慢的台式机，完全使用MacBook，而且绝不安装Windows虚拟机。因此所有 Windows上有的软件在Mac上都要能找到对应物，当然也包括OpenVPN，因为我需要使用OpenVPN连入公司。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN211在windows上的编译</title>
      <link>http://shanks.link/blog/2022/07/11/openvpn211%E5%9C%A8windows%E4%B8%8A%E7%9A%84%E7%BC%96%E8%AF%91/</link>
      <pubDate>Mon, 11 Jul 2022 22:42:22 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/openvpn211%E5%9C%A8windows%E4%B8%8A%E7%9A%84%E7%BC%96%E8%AF%91/</guid>
      <description>&lt;h1 id=&#34;总述&#34;&gt;总述：&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;对于openvpn-2.1.0的编译，由于微软cl编译器和GNU的gcc行为不同，需要修改不多的几个源文件来适应微软的编译器&lt;/li&gt;&#xA;&lt;li&gt;对于openvpn-2.1.1的编译，根目录下没有了Makefile.w32-vc，估计作者们觉得不应该修改源文件以适应编译器，也不能保证修改源文件这种事普通用户一定能用好，因此采用了一种别的编译方式，即使用MinGW和MSYS来支持编译，不过这些包都要下载，安装，这些也要消耗不小的工作量，但是一劳永逸&lt;/li&gt;&#xA;&lt;li&gt;但是仍然能通过2.1.0的方式编译2.1.1，就是将Makefile.w32-vc复制过来，然后修改源文件&lt;/li&gt;&#xA;&lt;li&gt;OpenVPN依赖OpenSSL，lzo以及pkcs11-helper，因此在编译OpenVPN之前必须确保上述依赖库均存在，如果都已经存在了，那么直接跳到第五节开始编译OpenVPN；&lt;/li&gt;&#xA;&lt;li&gt;OpenVPN的2.1.0以及之前的版本和2.1.1版本在windows上的编译方式不同，但是基本原理都是一样的（编译+链接），因此不妨采用老版本的方式，手动拷贝makefile到新版本目录；&lt;/li&gt;&#xA;&lt;li&gt;由于windows的C编译器和GNU的编译器行为有所不同，所以需要手工修改一些文件来适应windows的编译器，下面的编译均使用“Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 14.00.50727.42 for 80x86”编译器以及“Microsoft (R) Incremental Linker Version 8.00.50727.42”链接器，使用其它编译器的可能需要修改的文件以及怎样修改和此处不同甚至不用修改。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;编译openssl&#34;&gt;编译OpenSSL&lt;/h1&gt;&#xA;&lt;p&gt;（略）&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVP简易文档</title>
      <link>http://shanks.link/blog/2022/07/11/openvp%E7%AE%80%E6%98%93%E6%96%87%E6%A1%A3/</link>
      <pubDate>Mon, 11 Jul 2022 22:34:39 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/openvp%E7%AE%80%E6%98%93%E6%96%87%E6%A1%A3/</guid>
      <description>&lt;h1 id=&#34;openvpn简介&#34;&gt;OpenVPN简介&lt;/h1&gt;&#xA;&lt;p&gt;VPN 替代昂贵的专线用以在开放的 Internet 上实现了一个虚拟的网络，该虚拟网络本身在不安全的真实网络上对数据提供安全保护。&lt;/p&gt;&#xA;&lt;p&gt;OpenVPN 实现了一个灵活的 VPN，和通过修改协议栈而实现的基于 IPSec 的 VPN 相比，OpenVPN 有以下的优点：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux平台VPN技术概论 续</title>
      <link>http://shanks.link/blog/2022/07/11/linux%E5%B9%B3%E5%8F%B0vpn%E6%8A%80%E6%9C%AF%E6%A6%82%E8%AE%BA-%E7%BB%AD/</link>
      <pubDate>Mon, 11 Jul 2022 22:29:55 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/linux%E5%B9%B3%E5%8F%B0vpn%E6%8A%80%E6%9C%AF%E6%A6%82%E8%AE%BA-%E7%BB%AD/</guid>
      <description>&lt;p&gt;虚拟专用网处理的任务只有两个：&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;1. 虚拟&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;2. 专用&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;其中虚拟是次要的，专用才是主要的，只要能实现专用，不虚拟也行。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;“专用”这个概念有两个含义：&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux平台VPN技术概论</title>
      <link>http://shanks.link/blog/2022/07/11/linux%E5%B9%B3%E5%8F%B0vpn%E6%8A%80%E6%9C%AF%E6%A6%82%E8%AE%BA/</link>
      <pubDate>Mon, 11 Jul 2022 10:23:32 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/linux%E5%B9%B3%E5%8F%B0vpn%E6%8A%80%E6%9C%AF%E6%A6%82%E8%AE%BA/</guid>
      <description>&lt;h1 id=&#34;第一部分-vpn要解决的问题以及方案&#34;&gt;第一部分 VPN要解决的问题以及方案&lt;/h1&gt;&#xA;&lt;p&gt;基于主机的第三层 VPN 的要旨就是“&lt;strong&gt;透明/安全&lt;/strong&gt;的接入”，其中透明的含义就是配置要简单，尽量让用户感觉不到 VPN 的存在，因此这种 VPN 的实现其实只要解决两个问题即可：&lt;/p&gt;</description>
    </item>
    <item>
      <title>VPN原理及实现之TCP还是UDP</title>
      <link>http://shanks.link/blog/2022/07/11/vpn%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0%E4%B9%8Btcp%E8%BF%98%E6%98%AFudp/</link>
      <pubDate>Mon, 11 Jul 2022 10:18:02 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/vpn%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0%E4%B9%8Btcp%E8%BF%98%E6%98%AFudp/</guid>
      <description>&lt;p&gt;​&#x9;&#x9;&#x9;&#x9;有了 ip over ssl 的关键思想，OpenVPN 就是一个必然结果了，于是就不多说了，OpenVPN 和 OpenSSL 并不在一个层次上，虽然都很 open。OpenVPN 的配置非常复杂，主要就是为了建立更加合理的隧道，虽然 IPSec 实现的 VPN 不区分客户端和服务器，建立 sa 的时候全靠 dh 对称的协商加密密钥和算法，但是基于 OpenSSL 的 OpenVPN 却区分二者，因为 OpenVPN 的安全是 ssl 实现的，而 ssl 区分客户端和服务器，虚拟网卡已经说的很多了，现在说说隧道的一些细节，OpenVPN 可以建立 tcp 隧道和 udp 隧道，tcp 隧道顾名思义就是用 tcp 来封装 VPN 数据流，udp 亦然，但是虽然可以使用 udp 封装，在 OpenVPN 中你却不需要担心数据失序，因为 udp 之上还有 ssl ，而 ssl 不允许数据失序，确切的说不应说是 ssl，基于 udp 的 ssl 实际上是 tls，ssl 数据由于并不是流式的，而是基于记录的，每次必然读取一条记录，因此 ssl 是存储接收和存储发送的，如果下面用 udp 传输，那么就可能出现丢包或者失序的情况，如此一来读取的记录就会不正确，在 ssl 解密特别是 cbc 方式解密时就会出错，所以 ssl 下面必然是可靠而按序的，即使用 udp，那么在 ssl 和 udp 之间也必须实现可靠和按序。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VPN原理及实现之虚拟网卡构建VPN</title>
      <link>http://shanks.link/blog/2022/07/11/vpn%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0%E4%B9%8B%E8%99%9A%E6%8B%9F%E7%BD%91%E5%8D%A1%E6%9E%84%E5%BB%BAvpn/</link>
      <pubDate>Mon, 11 Jul 2022 10:10:33 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/vpn%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0%E4%B9%8B%E8%99%9A%E6%8B%9F%E7%BD%91%E5%8D%A1%E6%9E%84%E5%BB%BAvpn/</guid>
      <description>&lt;p&gt;​&#x9;&#x9;&#x9;&#x9;虚拟网卡通过实现一个字符设备来支持物理层，这样应用层和物理层就通过这个字符设备联系起来了，从这个字符设备读出来的就是虚拟网卡发往物理层的字节流，写入字符设备的数据作为字节流被虚拟网卡接收，虚拟网卡下面不再是网线或者无线电波，而是一个字符设备，这样从字符设备读出的还是写入字符设备的都是物理层字节流了，用它来实现隧道再简单不过了，VPN 程序读取字符设备，得到封装好的原始数据，然后用 SSL 再封装后发往 VPN 的对端，和 loopback 的最初尝试一样，实现配置一条路由，使得要通过隧道的数据从虚拟网卡流出，最终通过虚拟网卡的字符设备导入应用层的 VPN 进程。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN协议之Control packet wire format</title>
      <link>http://shanks.link/blog/2022/07/07/openvpn%E5%8D%8F%E8%AE%AE%E4%B9%8Bcontrol-packet-wire-format/</link>
      <pubDate>Thu, 07 Jul 2022 21:33:36 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/07/openvpn%E5%8D%8F%E8%AE%AE%E4%B9%8Bcontrol-packet-wire-format/</guid>
      <description>&lt;h3 id=&#34;control-packet-wire-format&#34;&gt;Control packet wire format&lt;/h3&gt;&#xA;&lt;p&gt;[header] [1-byte ack array len] [[4 bytes acked packet-id]] [8 bytes dest session-id] [4 bytes message-packet-id] [tls-encrypted payload]&lt;/p&gt;&#xA;&lt;p&gt;​&#x9; [header]&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;&#x9;&#x9; tls-plain&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;&#x9;&#x9;&#x9;  [1 byte opcode/key-id] [8 bytes self session-id]&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;&#x9;&#x9;tls-auth&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;&#x9;&#x9;&#x9;&#x9;[1 byte opcode/key-id]&#x9; [8 bytes self session-id] &#x9;[hmac] &#x9;[4 bytes packet-id] &#x9;[4 bytes packet-datetime]&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;&#x9;&#x9;&#x9;&#x9;[8 bytes self session-id] - 8 bytes of randomness, generated at the beginning of protocol session&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;&#x9;&#x9;&#x9; &#x9;[hmac] - calculate hmac over:&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN协议概要</title>
      <link>http://shanks.link/blog/2022/07/07/openvpn%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%A6%81/</link>
      <pubDate>Thu, 07 Jul 2022 21:23:36 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/07/openvpn%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%A6%81/</guid>
      <description>&lt;h2 id=&#34;openvpn-wire-protocol-work-in-progress&#34;&gt;OpenVPN Wire Protocol (work in progress)&lt;/h2&gt;&#xA;&lt;p&gt;​&#x9;&#x9;OpenVPN is an open source SSL/TLS based VPN solution which had its first release in May 2001.  This document describes the wire protocol OpenVPN makes use of for establishing end-to-end-connections.  Even though OpenVPN bases its communication on SSL/TLS, it is not a traditional SSL/TLS protocol which utilizes only TCP.  OpenVPN supports some enhanced security features as well as providing SSL/TLS connections both over TCP as well as UDP.&lt;/p&gt;</description>
    </item>
    <item>
      <title>VPN原理及实现之隧道的一种实现</title>
      <link>http://shanks.link/blog/2022/07/06/vpn%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0%E4%B9%8B%E9%9A%A7%E9%81%93%E7%9A%84%E4%B8%80%E7%A7%8D%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 06 Jul 2022 23:51:38 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/06/vpn%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0%E4%B9%8B%E9%9A%A7%E9%81%93%E7%9A%84%E4%B8%80%E7%A7%8D%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;理论上已经合理的 ip over ssl 还需要一些额外的技术支撑才能使用，必须想办法将一个 ip 数据报原封不动的让它被 ssl 重新封装一次，这个动作不可能在原始的标准协议栈中执行，标准协议栈不支持数据双向流动，那么解决方案之一就是修改协议栈，在 ip 层之下实现一个轻量的 ssl 协议层，但是如此一来就又回到了 IPSec 的老路上，因此此法不可取，正确的方法是不修改协议栈，让一切留在它应该在的地方，于是 ssl 必然得在应用层或者说是表示层实现，现在的问题是如何将下层的 ip 数据报重新引入上面的应用层，而且还不能修改标准协议栈，于是必然地要让 ip 数据报继续往下走，然后最终从一个网卡流出，于是就出了协议栈，接下来就可以自由发挥了，让数据流出网卡的原因是不能修改协议栈，但是还不能真的让它流出机器，如果它走了就不能指望用 ssl 封装它了，那么流到哪里呢？回环设备是一个不错的选择，从回环设备流出的数据实际上又流进了回环设备，用户空间只需要打开回环设备然后读取就可以了，注意不能通过一般套接字读取，毕竟那些数据不是发给我们的，要使用类似抓包的方式进行数据抓取，并且用防火墙禁止被抓取的数据继续被 forward，这实际上是一种巧妙的拦截方式，被抓取得数据然后经过 ssl 封装后再发向一个真的 ip 地址，我们需要配置的就是将所有的 vpn 数据全部发往回环设备，其实就是添加一条路由，虚拟网络已经建立，事情到此为止看似要结束了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VPN原理及实现之一般理论</title>
      <link>http://shanks.link/blog/2022/07/06/vpn%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0%E4%B9%8B%E4%B8%80%E8%88%AC%E7%90%86%E8%AE%BA/</link>
      <pubDate>Wed, 06 Jul 2022 23:46:26 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/06/vpn%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0%E4%B9%8B%E4%B8%80%E8%88%AC%E7%90%86%E8%AE%BA/</guid>
      <description>&lt;p&gt;OpenVPN 基于 OpenSSL 来实现安全，但是却不是传统意义上的 SSLVPN，它只是一个普通的 VPN，工作在 IP 层而不是传输层。&lt;/p&gt;&#xA;&lt;p&gt;VPN 的含义着重点有两层意思，一个是 &lt;strong&gt;V&lt;/strong&gt;，也就是&lt;strong&gt;虚拟&lt;/strong&gt;，另一个是 &lt;strong&gt;P&lt;/strong&gt;，也就是&lt;strong&gt;专用&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN简介</title>
      <link>http://shanks.link/blog/2022/07/06/openvpn%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 06 Jul 2022 23:25:36 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/06/openvpn%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h1 id=&#34;1-openvpn-简介&#34;&gt;1. OpenVPN 简介&lt;/h1&gt;&#xA;&lt;p&gt;VPN 直译就是虚拟专用通道，是提供给企业之间或者个人与公司之间&lt;strong&gt;安全数据传输&lt;/strong&gt;的隧道，OpenVPN 无疑是 Linux 下开源 VPN 的先锋，提供了良好的性能和友好的用户 GUI。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN协议解析之网络结构之外</title>
      <link>http://shanks.link/blog/2022/07/01/openvpn%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90%E4%B9%8B%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%E4%B9%8B%E5%A4%96/</link>
      <pubDate>Fri, 01 Jul 2022 23:27:09 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/01/openvpn%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90%E4%B9%8B%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%E4%B9%8B%E5%A4%96/</guid>
      <description>&lt;p&gt;​&#x9;前面写了不少关于OpenVPN的文章，那些文章大多数都是侧重于网络的，要么就是源码解析。其实OpenVPN还有更深的可挖掘的东西。只可惜我们很难搜到中文的，因此本文就增添几笔。实际上，很多人都很看好OpenVPN，虽然它看起来是很简陋，然而确实有很多值得挖掘的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vim鼠标右键无法粘贴</title>
      <link>http://shanks.link/blog/2022/05/31/vim%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE%E6%97%A0%E6%B3%95%E7%B2%98%E8%B4%B4/</link>
      <pubDate>Tue, 31 May 2022 19:17:51 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/05/31/vim%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE%E6%97%A0%E6%B3%95%E7%B2%98%E8%B4%B4/</guid>
      <description>&lt;p&gt;​&#x9;&#x9;最近维护一台服务器，使用putty登录后，用vim时，鼠标右键不能粘贴而是进入了visual模式。网上查找一番找到了解决方法：&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;方法一：在普通模式下键入“ :set mouse-=a”（不包括引号）&lt;/p&gt;</description>
    </item>
    <item>
      <title>共识算法Raft</title>
      <link>http://shanks.link/blog/2022/05/03/%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95raft/</link>
      <pubDate>Tue, 03 May 2022 16:43:53 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/05/03/%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95raft/</guid>
      <description>&lt;p&gt;上篇讲到了「拜占庭将军问题」：多个拜占庭将军要如何在可能有叛徒、信使可能被策反或者暗杀的情况下达成是否要进攻的一致性决定？还不了解的先看看上一篇&lt;a href=&#34;https://link.jianshu.com/?t=%5Bhttps%3A%2F%2Fmp.weixin.qq.com%2Fs%2FPJvCXm9pwU-Wp3LNN7g8pQ%5D(https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FPJvCXm9pwU-Wp3LNN7g8pQ)&#34;&gt;《拜占庭将军问题》&lt;/a&gt;。这篇主要是介绍简化版拜占庭将军问题的解决方案：Raft 共识算法。&lt;/p&gt;</description>
    </item>
    <item>
      <title>分布式系统面试知识点</title>
      <link>http://shanks.link/blog/2022/05/03/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
      <pubDate>Tue, 03 May 2022 16:33:44 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/05/03/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9/</guid>
      <description>&lt;p&gt;本文为笔者2019年秋招面试经验总结和牛客网面经总结。大部分资源来源于网络，公众号的总结。&lt;/p&gt;&#xA;&lt;p&gt;1.CAP原则&lt;/p&gt;&#xA;&lt;p&gt;答：分布式系统有三大特性，一致性，分区容忍性和可用性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>排序算法</title>
      <link>http://shanks.link/blog/2022/04/27/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 27 Apr 2022 16:31:08 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/27/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;p&gt;排序指的是将一组对象按照某种逻辑重新排列的过程，在计算机早期，大约30%的时间都用在排序上，今天这个比例降低了，这得益于高效的排序算法。排序有大量的应用场景，它往往是解决问题的第一步,它很基础但很重要，比如快速排序就被誉为20世纪科学和工程领域10大算法之一。排序如此有用的一个重要原因是在一个有序数组中查找一个元素比在一个无序数组中查找要简单的多。今天我们就来研究一下。&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据迁移方案和关键设计</title>
      <link>http://shanks.link/blog/2022/04/27/%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E6%96%B9%E6%A1%88%E5%92%8C%E5%85%B3%E9%94%AE%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Wed, 27 Apr 2022 15:07:09 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/27/%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E6%96%B9%E6%A1%88%E5%92%8C%E5%85%B3%E9%94%AE%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;h3 id=&#34;项目背景&#34;&gt;项目背景&lt;/h3&gt;&#xA;&lt;p&gt;对象存储系统系统架构升级后存在新老集群共存情况，为了降低成本，需将老集群数据迁移到新集群，下线并回收老集群资源。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;迁移目标&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;迁移数据正确、无遗漏。&lt;/li&gt;&#xA;&lt;li&gt;迁移进度可控。&lt;/li&gt;&#xA;&lt;li&gt;静默迁移。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;迁移思考&#34;&gt;迁移思考&lt;/h3&gt;&#xA;&lt;h3 id=&#34;迁移方案&#34;&gt;迁移方案&lt;/h3&gt;&#xA;&lt;p&gt;如下图所示，是一个数据迁移的简单抽象模型&lt;/p&gt;</description>
    </item>
    <item>
      <title>线程创建的开销与线程池</title>
      <link>http://shanks.link/blog/2022/04/27/%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA%E7%9A%84%E5%BC%80%E9%94%80%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Wed, 27 Apr 2022 12:28:48 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/27/%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA%E7%9A%84%E5%BC%80%E9%94%80%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>&lt;h3 id=&#34;1线程创建的开销&#34;&gt;1.&lt;strong&gt;线程创建的开销&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;对操作系统来说,创建一个线程的代价是十分昂贵的, 需要给它分配内存、列入调度，同时在线程切换的时候还要执行内存换页，CPU 的缓存被清空,切换回来的时候还要重新从内存中读取信息,破坏了数据的局部性。【分配内存、列入调度、内存换页、清空缓存和重新读取】&lt;/p&gt;</description>
    </item>
    <item>
      <title>TCP可靠性传输初探</title>
      <link>http://shanks.link/blog/2022/04/27/tcp%E5%8F%AF%E9%9D%A0%E6%80%A7%E4%BC%A0%E8%BE%93%E5%88%9D%E6%8E%A2/</link>
      <pubDate>Wed, 27 Apr 2022 11:20:55 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/27/tcp%E5%8F%AF%E9%9D%A0%E6%80%A7%E4%BC%A0%E8%BE%93%E5%88%9D%E6%8E%A2/</guid>
      <description>&lt;p&gt;众所周知，TCP/IP协议栈是事实的网络通信协议，而在保证可靠的网络通信上理解TCP至关重要，本文尝试从工程的视角分析为了保障可靠传输，可能会面对那些问题即对应策略，以及在保证可靠传输时同时提高传输效率，最后给出实际TCP的处理策略。&lt;/p&gt;</description>
    </item>
    <item>
      <title>系统高可靠加固</title>
      <link>http://shanks.link/blog/2022/04/27/%E7%B3%BB%E7%BB%9F%E9%AB%98%E5%8F%AF%E9%9D%A0%E5%8A%A0%E5%9B%BA/</link>
      <pubDate>Wed, 27 Apr 2022 11:12:50 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/27/%E7%B3%BB%E7%BB%9F%E9%AB%98%E5%8F%AF%E9%9D%A0%E5%8A%A0%E5%9B%BA/</guid>
      <description>&lt;h3 id=&#34;1敬畏风险&#34;&gt;&lt;strong&gt;1.敬畏风险&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;软件世界既是虚拟世界，同时也是客观世界的一部分，进行高可靠系统设计的第一步需要团队成员达成共识，尊重客观世界的运行规律，这些客观规律包含：&lt;/p&gt;&#xA;&lt;p&gt;承认世界的不确定性，小概率可能造成大影响，风险无处不在，这就是我们经常说的黑天鹅事件。突发事件虽无法避免的，但我们应尽可能避免问题的发生，在设计时Design for failure! 尽可能考虑可能出现的问题，比如网络专线抖动，机房故障，流量过载情况等等。当故障发生时，及时回溯和总结，避免再次发生。&lt;/p&gt;</description>
    </item>
    <item>
      <title>社交网络海量用户关系设计思考</title>
      <link>http://shanks.link/blog/2022/04/26/%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C%E6%B5%B7%E9%87%8F%E7%94%A8%E6%88%B7%E5%85%B3%E7%B3%BB%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%80%83/</link>
      <pubDate>Tue, 26 Apr 2022 17:52:21 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/26/%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C%E6%B5%B7%E9%87%8F%E7%94%A8%E6%88%B7%E5%85%B3%E7%B3%BB%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%80%83/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/186197535&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;1背景&#34;&gt;1.背景&lt;/h3&gt;&#xA;&lt;h3 id=&#34;11关系链业务&#34;&gt;1.1.关系链业务&lt;/h3&gt;&#xA;&lt;p&gt;社交系统（微信、QQ，支付宝）需要解决的一个工程问题是&lt;strong&gt;如何完成海量用户关系存储，并高效查询&lt;/strong&gt;。典型代表系统是微信好友、QQ好友、蚂蚁森林游戏中的好友关系、微博粉丝、知乎粉丝偶像列表等等。这类业务其实就是关系链业务，而关系链分弱好友关系和强好友关系。&lt;/p&gt;</description>
    </item>
    <item>
      <title>技术评审大纲</title>
      <link>http://shanks.link/blog/2022/04/26/%E6%8A%80%E6%9C%AF%E8%AF%84%E5%AE%A1%E5%A4%A7%E7%BA%B2/</link>
      <pubDate>Tue, 26 Apr 2022 17:45:08 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/26/%E6%8A%80%E6%9C%AF%E8%AF%84%E5%AE%A1%E5%A4%A7%E7%BA%B2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/188173448&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;1现状&#34;&gt;1.现状&lt;/h3&gt;&#xA;&lt;h3 id=&#34;11-业务背景&#34;&gt;1.1. 业务背景&lt;/h3&gt;&#xA;&lt;p&gt;（1）项目名称。&lt;/p&gt;&#xA;&lt;p&gt;（2）业务描述。&lt;/p&gt;&#xA;&lt;h3 id=&#34;12技术背景&#34;&gt;1.2.技术背景&lt;/h3&gt;&#xA;&lt;p&gt;（1）架构描述。&lt;/p&gt;&#xA;&lt;p&gt;（2）当前的系统容量：比如系统调用量的平均值，请求响应时间的平均值等。&lt;/p&gt;&#xA;&lt;p&gt;（3）当前系统调用量峰值、最大、最小响应时间等。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lru</title>
      <link>http://shanks.link/blog/2022/04/26/lru/</link>
      <pubDate>Tue, 26 Apr 2022 17:00:17 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/26/lru/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/161269766&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;LRU-least recently used-最近最少使用算法，是一种内存数据淘汰策略，使用常见是当内存不足时，需要淘汰最近最少使用的数据。LRU常用语缓存系统的淘汰策略。&lt;/p&gt;</description>
    </item>
    <item>
      <title>分布式事务重复消费顺序消费</title>
      <link>http://shanks.link/blog/2022/04/24/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E9%A1%BA%E5%BA%8F%E6%B6%88%E8%B4%B9/</link>
      <pubDate>Sun, 24 Apr 2022 22:21:52 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/24/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E9%A1%BA%E5%BA%8F%E6%B6%88%E8%B4%B9/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844904003877208071&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;上一期，简单的介绍了一下&lt;strong&gt;消息队列&lt;/strong&gt;的基础知识，里面有消息队列的应用场景，以及使用之后可能带来的问题，但是上期没对怎么解决这些问题做回答，因为要控制篇幅嘛（明明是自己觉得MQ写不了多少期，要多怼一期出来！渣男）&lt;/p&gt;</description>
    </item>
    <item>
      <title>深入了解map</title>
      <link>http://shanks.link/blog/2022/04/24/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3map/</link>
      <pubDate>Sun, 24 Apr 2022 22:19:30 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/24/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3map/</guid>
      <description>&lt;h3 id=&#34;摘要&#34;&gt;摘要&lt;/h3&gt;&#xA;&lt;p&gt;map 通过 hasTable 实现了我们最常见的 key-value 存储，能快速的对数据集增删查改。同时 Go 里的 map 也有很多特殊的地方，比如它的无序性、并发不安全等。今天，就让我们对 map 进行深入研究，看看它是怎么设计的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redis系列总结</title>
      <link>http://shanks.link/blog/2022/04/24/redis%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 24 Apr 2022 22:16:39 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/24/redis%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.modb.pro/db/247766&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;redis-总体介绍&#34;&gt;Redis 总体介绍&lt;/h1&gt;&#xA;&lt;p&gt;Redis 是 key-value 型的 memory 缓存中间件，相信大部分程序员都在项目中使用过它。我们也可以利用 memory 来实现缓存，只是使用 redis 的话，可以将缓存功能统一到一个组件里，方便后续重用拓展。&lt;/p&gt;</description>
    </item>
    <item>
      <title>关于分布式系统共识的思考</title>
      <link>http://shanks.link/blog/2022/04/24/%E5%85%B3%E4%BA%8E%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%85%B1%E8%AF%86%E7%9A%84%E6%80%9D%E8%80%83/</link>
      <pubDate>Sun, 24 Apr 2022 22:13:24 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/24/%E5%85%B3%E4%BA%8E%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%85%B1%E8%AF%86%E7%9A%84%E6%80%9D%E8%80%83/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.modb.pro/db/247776&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;分布式系统的挑战&#34;&gt;分布式系统的挑战&lt;/h1&gt;&#xA;&lt;p&gt;在前面的文章里，我们分析了分布式系统在业务上的一致性技术，即分布式事务，它的结果导向是面向用户的。然而在我们的系统内部，有时也需要面对来自软件架构等更高层次上的一致性要求，比如 Redis 的哨兵模式，Zookeeper 的选举过程等。它们所考虑的一致性更多的是服务节点之间一个&lt;code&gt;共识&lt;/code&gt;&#xA;的达成，当共识达成之后，就可以以此为指导原则，展开更多的协同操作。&lt;/p&gt;</description>
    </item>
    <item>
      <title>关于分布式事务的思考</title>
      <link>http://shanks.link/blog/2022/04/24/%E5%85%B3%E4%BA%8E%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%80%9D%E8%80%83/</link>
      <pubDate>Sun, 24 Apr 2022 22:10:50 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/24/%E5%85%B3%E4%BA%8E%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%80%9D%E8%80%83/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.modb.pro/db/247777&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;现象&#34;&gt;现象&lt;/h1&gt;&#xA;&lt;p&gt;互联网的世界与十几年前相比，已经大不相同。以往的单体服务就可以支撑起大多数的用户需求。然而随着手机等电子产品的普及，用户想要的服务已经是越来越复杂，各种需求相互关联。而这也给软件开发带来了更多的挑战。为了应付随时会变化的代码世界，现有的开发趋势都在逐渐的化整为零。其中最具代表性的就是&lt;strong&gt;微服务&lt;/strong&gt;的流行。&lt;/p&gt;</description>
    </item>
    <item>
      <title>架构理解总结</title>
      <link>http://shanks.link/blog/2022/04/24/%E6%9E%B6%E6%9E%84%E7%90%86%E8%A7%A3%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 24 Apr 2022 18:46:17 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/24/%E6%9E%B6%E6%9E%84%E7%90%86%E8%A7%A3%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.modb.pro/db/247774&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;一怎么理解架构&#34;&gt;一、怎么理解架构？&lt;/h1&gt;&#xA;&lt;p&gt;假如给你一个项目开发，你会怎么开始它？对于这个问题，我想很多猿友们都应该经历过吧。很多时候，我们会直接开干，让自己快速的进入 coding 状态。&lt;/p&gt;&#xA;&lt;p&gt;然而一旦遇上稍微有点规模，比如涉及到多个业务功能的开发，那大概率会在开发过程中经常的怀疑自己，甚至产生推倒重来的想法；又或者眼看就要交付了，只能将错就错，修修补补。最后，一个让人揪心的系统又诞生了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>秒懂消息队列</title>
      <link>http://shanks.link/blog/2022/04/24/%E7%A7%92%E6%87%82%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link>
      <pubDate>Sun, 24 Apr 2022 18:42:37 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/24/%E7%A7%92%E6%87%82%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.modb.pro/db/247447&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;摘要&#34;&gt;摘要&lt;/h3&gt;&#xA;&lt;p&gt;作为技术方案最常提到的组件：消息队列，它在我们的程序中起到了重要的作用。异步、解耦、削峰（缓冲）等特性正是我们选择它的原因。本文将会按自己的理解聊一聊消息队列的本质、使用场景、注意事项、以及介绍下主流的消息队列。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang系列之channel全面解析</title>
      <link>http://shanks.link/blog/2022/04/24/golang%E7%B3%BB%E5%88%97%E4%B9%8Bchannel%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Sun, 24 Apr 2022 18:39:34 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/24/golang%E7%B3%BB%E5%88%97%E4%B9%8Bchannel%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.modb.pro/db/247758&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;&#xA;&lt;p&gt;channel 是 goroutine 与 goroutine 之间通信的重要桥梁，借助 channel，我们能很轻易的写出一个&lt;strong&gt;多协程&lt;/strong&gt;通信程序。今天，我们就来看看这个 channel 的常用用法以及底层原理。&lt;/p&gt;&#xA;&lt;h3 id=&#34;一channel-的概念&#34;&gt;一、channel 的概念&lt;/h3&gt;&#xA;&lt;p&gt;channel 是一个通道，用于&lt;strong&gt;端到端&lt;/strong&gt;的数据传输，这有点像我们平常使用的消息队列，只不过 channel 的发送方和接受方是 &lt;strong&gt;goroutine&lt;/strong&gt; 对象，属于&lt;strong&gt;内存级别&lt;/strong&gt;的通信。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redis面试总结</title>
      <link>http://shanks.link/blog/2022/04/24/redis%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 24 Apr 2022 16:47:59 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/24/redis%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;h1 id=&#34;1-redis-为什么快&#34;&gt;1. redis 为什么快？&lt;/h1&gt;&#xA;&lt;p&gt;在底层上， redis 使用了 IO 多路复用技术，像 select、epoll 等。能较好的保障吞吐量。而且 redis 采用了单线程处理请求，避免了线程切换和锁竞争锁带来的额外消耗。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goroutinue理解</title>
      <link>http://shanks.link/blog/2022/04/24/goroutinue%E7%90%86%E8%A7%A3/</link>
      <pubDate>Sun, 24 Apr 2022 15:53:47 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/24/goroutinue%E7%90%86%E8%A7%A3/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000018150987&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Go语言最大的特色就是从语言层面支持并发（Goroutine），Goroutine是Go中最基本的执行单元。事实上每一个Go程序至少有一个Goroutine：主Goroutine。当程序启动时，它会自动创建。&lt;/p&gt;</description>
    </item>
    <item>
      <title>计算机网络面试知识点</title>
      <link>http://shanks.link/blog/2022/04/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
      <pubDate>Sun, 24 Apr 2022 15:14:30 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9/</guid>
      <description>&lt;h1 id=&#34;计算机网络面试知识点&#34;&gt;计算机网络面试知识点&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.modb.pro/db/332622&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;计算机网络体系模型&#34;&gt;计算机网络体系模型&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;物理层：建立、维护、断开物理连接。&lt;/li&gt;&#xA;&lt;li&gt;数据链路层：建立逻辑连接、进行硬件地址寻址、差错校验等功能。&lt;/li&gt;&#xA;&lt;li&gt;网络层：进行逻辑地址寻址，实现不同网络之间的路径选择。&lt;/li&gt;&#xA;&lt;li&gt;传输层：定义传输数据的协议端口号，以及流控和差错校验。&lt;/li&gt;&#xA;&lt;li&gt;会话层：建立、管理、终止会话，（在五层模型里面已经合并到了应用层） 会话的一端是本地主机，另一端是远程主机。&lt;/li&gt;&#xA;&lt;li&gt;表示层：数据的表示、安全、压缩。（在五层模型里面已经合并到了应用层） 格式有，JPEG、ASCll、EBCDIC、加密格式等。&lt;/li&gt;&#xA;&lt;li&gt;应用层：网络服务与最终用户的一个接口。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/tcpip/modb_20220222_6694eb70-9395-11ec-90a4-fa163eb4f6be.png&#34; alt=&#34;&#34;&gt;计算机网络模型&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go面试总结</title>
      <link>http://shanks.link/blog/2022/04/24/go%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 24 Apr 2022 15:08:40 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/24/go%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.modb.pro/db/247446&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;相比较于其他语言-go-有什么优势或者特点&#34;&gt;相比较于其他语言, Go 有什么优势或者特点？&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Go 允许跨平台编译，编译出来的是二进制的可执行文件，直接部署在对应系统上即可运行。&lt;/li&gt;&#xA;&lt;li&gt;Go 在语言层次上天生支持高并发，通过 goroutine 和 channel 实现。channel 的理论依据是 CSP 并发模型， 即所谓的&lt;code&gt;通过通信来共享内存&lt;/code&gt;&#xA;；Go 在 runtime 运行时里实现了属于自己的调度机制：GPM，降低了内核态和用户态的切换成本。&lt;/li&gt;&#xA;&lt;li&gt;Go 的代码风格是强制性的统一，如果没有按照规定来，会编译不通过。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;golang-里的-gpm-模型&#34;&gt;Golang 里的 GPM 模型？&lt;/h1&gt;&#xA;&lt;p&gt;GPM 模型是 golang 自己的一个调度模型，它抽象出了下面三个结构：&lt;/p&gt;</description>
    </item>
    <item>
      <title>linux中查看端口被那个程序占用</title>
      <link>http://shanks.link/blog/2021/12/13/linux%E4%B8%AD%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E8%A2%AB%E9%82%A3%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%8D%A0%E7%94%A8/</link>
      <pubDate>Mon, 13 Dec 2021 23:31:39 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/12/13/linux%E4%B8%AD%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E8%A2%AB%E9%82%A3%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%8D%A0%E7%94%A8/</guid>
      <description>&lt;p&gt;之前查询端口是否被占用一直搞不明白，问了好多人，终于搞懂了，现在总结下：&lt;/p&gt;&#xA;&lt;p&gt;1.netstat  -anp  |grep  端口号&lt;/p&gt;&#xA;&lt;p&gt;如下，我以3306为例，netstat  -anp  |grep  3306（此处备注下，我是以普通用户操作，故加上了sudo，如果是以root用户操作，不用加sudo即可查看），如下图1：&lt;/p&gt;</description>
    </item>
    <item>
      <title>git git@github.com: Permission denied (publickey)</title>
      <link>http://shanks.link/blog/2021/12/13/git-git@github.com-permission-denied-publickey/</link>
      <pubDate>Mon, 13 Dec 2021 19:38:35 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/12/13/git-git@github.com-permission-denied-publickey/</guid>
      <description>&lt;p&gt;前言&lt;/p&gt;&#xA;&lt;p&gt;背着 Air，背了好长时间，挤地铁，背着感觉不仅仅是一个 Air，更是希望，压力以及动力。&lt;/p&gt;&#xA;&lt;p&gt;随着项目一期差不多了，我的 MBP 也该派上用场啦。&lt;/p&gt;&#xA;&lt;p&gt;早期 LZ 在 MBP 上只是简单配置了 Git 的名称，今天在 Clone Github 遇到如下问题：&lt;/p&gt;</description>
    </item>
    <item>
      <title>git查看文件的历史提交信息</title>
      <link>http://shanks.link/blog/2021/12/13/git%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E7%9A%84%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Mon, 13 Dec 2021 10:22:35 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/12/13/git%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E7%9A%84%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF/</guid>
      <description>&lt;p&gt;工作中我们有时候想要查看某一个文件的历史提交版本,]&lt;/p&gt;&#xA;&lt;p&gt;还想看都修改过那些内容,那么这两个简单的命令就会帮到你了,&lt;/p&gt;&#xA;&lt;p&gt;话不多说,comeBaby&amp;hellip;&amp;hellip;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git远程仓库地址变更本地如何修改</title>
      <link>http://shanks.link/blog/2021/12/13/git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80%E5%8F%98%E6%9B%B4%E6%9C%AC%E5%9C%B0%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9/</link>
      <pubDate>Mon, 13 Dec 2021 10:17:13 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/12/13/git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80%E5%8F%98%E6%9B%B4%E6%9C%AC%E5%9C%B0%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9/</guid>
      <description>&lt;p&gt;公司搬移， 作为git仓库的服务器IP地址变了。 本地代码挺多，重新检出太占时间，可以修改一个什么配置让我本地仓库和新的远程仓库建立关联吗， 答案是肯定的！&lt;/p&gt;</description>
    </item>
    <item>
      <title>git忽略文件权限和所有者</title>
      <link>http://shanks.link/blog/2021/12/13/git%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E5%92%8C%E6%89%80%E6%9C%89%E8%80%85/</link>
      <pubDate>Mon, 13 Dec 2021 10:15:26 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/12/13/git%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E5%92%8C%E6%89%80%E6%9C%89%E8%80%85/</guid>
      <description>&lt;p&gt;在发布项目到线上时，很多时候需要修改文件的权限，如果是使用git版本管理软件来发布的话，那么下次更新线上文件的时候就会提示文件冲突。明明文件没有修改，为什么会冲突呢？原来git把文件权限也算作文件差异的一部分。下面笔者自己做了个简单的例子来演示这种情况。&lt;/p&gt;</description>
    </item>
    <item>
      <title>合并多次提交</title>
      <link>http://shanks.link/blog/2021/12/13/%E5%90%88%E5%B9%B6%E5%A4%9A%E6%AC%A1%E6%8F%90%E4%BA%A4/</link>
      <pubDate>Mon, 13 Dec 2021 10:09:52 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/12/13/%E5%90%88%E5%B9%B6%E5%A4%9A%E6%AC%A1%E6%8F%90%E4%BA%A4/</guid>
      <description>&lt;ol&gt;&#xA;&lt;li&gt;找到需要合并的最后一条commitid的上一条commitid&#xA;a3953b9&#xA;55ecd9c&#xA;a142bb1&#xA;33018e91766fb&#xA;比如，这里需要合并前三个commit 则他们的上一个是 33018e91766fb&lt;/li&gt;&#xA;&lt;li&gt;执行 git rebase -i 33018e91766fb  (git rebase -i [startpoint] (endpoint))&#xA;将区分范围内的commit 合并&#xA;第一条pick保留，其它的pick改为f&#xA;pick a3953b9 feature: incoming code block name function.&#xA;f 55ecd9c feature: add compile string length information and debugging symbol information&#xA;f a142bb1 optimize: remove unnecessary strlen calls&lt;/li&gt;&#xA;&lt;li&gt;修改commit的注释&#xA;执行 git commit &amp;ndash;amend 把日志修改一下&lt;/li&gt;&#xA;&lt;li&gt;使用fork工具看看修改是否符合自己的预期&lt;/li&gt;&#xA;&lt;li&gt;强制提交&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;git-rebase--i合并多次提交&#34;&gt;git rebase -i合并多次提交&lt;/h1&gt;&#xA;&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;&#xA;&lt;p&gt;在日常开发中，代码变更比较频繁，有时候想让前几次提交的合并为一次提交，这里可以使用git rebase -i 命令来完成，当然，git rebase命令不仅仅用于合并提交，它还有许多用处，比如可以使用git rebase onto将某一段commit粘贴到另一个分支上等等，这里主要介绍合并提交。&lt;/p&gt;</description>
    </item>
    <item>
      <title>git squash用法</title>
      <link>http://shanks.link/blog/2021/12/13/git-squash%E7%94%A8%E6%B3%95/</link>
      <pubDate>Mon, 13 Dec 2021 10:24:32 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/12/13/git-squash%E7%94%A8%E6%B3%95/</guid>
      <description>&lt;p&gt;在开发一个功能的时候会反复的提交代码，会造成一个功能有很多次提交，在我们要向master做分支合并的时候，就会出现很多commits，在合并以后同一个功能的commits就会很多，导致我们无法清晰的知道这个功能关联的commit有哪些，这个squash就是优化我们的commits信息，让我们的版本仓库看起来简洁明了，功能点一目了然：&#xA;使用比较简单，比如我想将本地开发分支的内容合并到master主线分支上，并且期望将一个功能的所有提交压缩成一个commit；&lt;/p&gt;</description>
    </item>
    <item>
      <title>Centos8更改软件源为阿里源</title>
      <link>http://shanks.link/blog/2021/12/05/centos8%E6%9B%B4%E6%94%B9%E8%BD%AF%E4%BB%B6%E6%BA%90%E4%B8%BA%E9%98%BF%E9%87%8C%E6%BA%90/</link>
      <pubDate>Sun, 05 Dec 2021 20:32:52 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/12/05/centos8%E6%9B%B4%E6%94%B9%E8%BD%AF%E4%BB%B6%E6%BA%90%E4%B8%BA%E9%98%BF%E9%87%8C%E6%BA%90/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/sinicheveen/p/13866942.html&#34;&gt;以上内容转载自&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;1、备份现有源&lt;/p&gt;&#xA;&lt;p&gt;cd /etc/yum.repos.d/&lt;/p&gt;&#xA;&lt;p&gt;mkdir backup&lt;/p&gt;&#xA;&lt;p&gt;mv *.repo ./backup&lt;/p&gt;&#xA;&lt;p&gt;2、下载阿里云源文件&lt;/p&gt;&#xA;&lt;p&gt;wget -O /etc/yum.repos.d/CentOS-Base.repo &lt;a href=&#34;http://mirrors.aliyun.com/repo/Centos-8.repo&#34;&gt;http://mirrors.aliyun.com/repo/Centos-8.repo&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;或&lt;/p&gt;&#xA;&lt;p&gt;curl -o /etc/yum.repos.d/CentOS-Base.repo &lt;a href=&#34;http://mirrors.aliyun.com/repo/Centos-8.repo&#34;&gt;http://mirrors.aliyun.com/repo/Centos-8.repo&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;3、检查以下是否成功&lt;/p&gt;&#xA;&lt;p&gt;cat /etc/yum.repos.d/CentOS-Base.repo&lt;/p&gt;&#xA;&lt;p&gt;4、生成缓存&lt;/p&gt;&#xA;&lt;p&gt;yum makecache&lt;/p&gt;</description>
    </item>
    <item>
      <title>linux动态库so调用外部so，运行时出现undefined symbol</title>
      <link>http://shanks.link/blog/2021/11/09/linux%E5%8A%A8%E6%80%81%E5%BA%93so%E8%B0%83%E7%94%A8%E5%A4%96%E9%83%A8so%E8%BF%90%E8%A1%8C%E6%97%B6%E5%87%BA%E7%8E%B0undefined-symbol/</link>
      <pubDate>Tue, 09 Nov 2021 14:41:56 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/11/09/linux%E5%8A%A8%E6%80%81%E5%BA%93so%E8%B0%83%E7%94%A8%E5%A4%96%E9%83%A8so%E8%BF%90%E8%A1%8C%E6%97%B6%E5%87%BA%E7%8E%B0undefined-symbol/</guid>
      <description>&lt;p&gt;出现这种问题，一般为某工程的动态链接库出现问题，一般为以下解决办法：&#xA;一、当前工程的.so文件和生成该.so文件的工程代码不一致，当前.so文件中不包含工程代码中的某些函数。例如我的工程代码中有NdarrytoImage()这个函数，但是我使用的.so生成时却没有该函数，则在编译的时候不包含NdarrytoImage函数，则会抛出no ndarrytoimage undefined symbol,&#xA;解决办法为将包含那个函数的工程代码重新编译，然后复制到目录中即可。&lt;/p&gt;</description>
    </item>
    <item>
      <title>WebAssembly 不完全指北</title>
      <link>http://shanks.link/blog/2021/10/29/webassembly-%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8C%97/</link>
      <pubDate>Fri, 29 Oct 2021 17:22:07 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/29/webassembly-%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8C%97/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844903895110533133&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;背景从-javascript-说起&#34;&gt;背景：从 JavaScript 说起&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;JavaScript 占据着统治地位，不管是公开还是私有的项目、任何组织、世界任何地区，JavaScript 都是第一。 -GitHub 2018 年度报告&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/23/16c1cbdedf8c36c4~tplv-t2oaga2asx-watermark.awebp&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;随着JavaScript的快速发展，目前它已然成为最流行的编程语言之一，这背后正是 Web 的发展所推动的。但是随着JavaScript被广泛的应用，它也暴露了很多问题：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wasm介绍之7：文本格式</title>
      <link>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B7%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Fri, 29 Oct 2021 17:08:46 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B7%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844904097791868941&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/20/170f65a0d551a389~tplv-t2oaga2asx-zoom-crop-mark:1304:1304:1304:734.awebp&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;-wasm介绍之7文本格式&#34;&gt;# Wasm介绍之7：文本格式&lt;/h1&gt;&#xA;&lt;p&gt;前面的文章详细介绍了&lt;a href=&#34;https%3A%2F%2Fwebassembly.org%2F&#34;&gt;WebAssembly&lt;/a&gt;（简称Wasm）&lt;a href=&#34;https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fbinary%2Findex.html&#34;&gt;二进制格式&lt;/a&gt;和&lt;a href=&#34;https://link.juejin.cn/?target=https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fsyntax%2Finstructions.html&#34;&gt;指令集&lt;/a&gt;，这篇文章将介绍&lt;a href=&#34;https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Ftext%2Findex.html&#34;&gt;Wasm文本格式&lt;/a&gt;（WebAssembly Text Format，后面简称WAT）。&lt;/p&gt;&#xA;&lt;h2 id=&#34;整体结构&#34;&gt;整体结构&lt;/h2&gt;&#xA;&lt;p&gt;WAT采用了&lt;a href=&#34;https://link.juejin.cn/?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FS-expression&#34;&gt;S-表达式&lt;/a&gt;写法，整体结构如下所示：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(module&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (type   ... )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (import ... )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#00f&#34;&gt;func&lt;/span&gt;   ... )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (table  ... )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (mem    ... )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (global ... )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#00f&#34;&gt;export&lt;/span&gt; ... )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (start  ... )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (elem   ... )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (data   ... )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;复制代码&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;文本格式是二进制格式的另外一种表现形式，但是对人类更加友好。二进制格式更适合机器（比如编译器）生成和（比如Wasm解释器）理解，文本格式则更适合人类编写和阅读。除了表现形式有明显不同，在结构上，两种格式主要有下面这些不同点：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wasm介绍之6: 间接函数调用</title>
      <link>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B6-%E9%97%B4%E6%8E%A5%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</link>
      <pubDate>Fri, 29 Oct 2021 16:54:22 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B6-%E9%97%B4%E6%8E%A5%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/12/170ccd25b6a16402~tplv-t2oaga2asx-zoom-crop-mark:1304:1304:1304:734.awebp&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;-wasm介绍之6间接函数调用&#34;&gt;# Wasm介绍之6：间接函数调用&lt;/h1&gt;&#xA;&lt;p&gt;在前面的5篇文章里，我们详细讨论了&lt;a href=&#34;https%3A%2F%2Fwebassembly.org%2F&#34;&gt;WebAssembly&lt;/a&gt;（简称Wasm）&lt;a href=&#34;https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fbinary%2Findex.html&#34;&gt;二进制格式&lt;/a&gt;和除&lt;code&gt;call_indirect&lt;/code&gt;之外的所有指令。这篇文章将详细介绍Wasm间接函数调用机制和&lt;code&gt;call_indirect&lt;/code&gt;指令。&lt;/p&gt;&#xA;&lt;h2 id=&#34;call_indirect指令&#34;&gt;call_indirect指令&lt;/h2&gt;&#xA;&lt;p&gt;为了更好的理解&lt;code&gt;call_indirect&lt;/code&gt;指令，我们首先来回顾一下&lt;code&gt;call&lt;/code&gt;指令的工作方式。根据之前文章的介绍 可知，&lt;code&gt;call&lt;/code&gt;指令带有一个立即数参数，指定被调用函数的索引。在Wasm实现执行&lt;code&gt;call&lt;/code&gt;指令之前，必须保证要传递给被调用函数的参数已经在栈顶，且参数的顺序和类型必须完全匹配被调函数的签名。&lt;code&gt;call&lt;/code&gt;指令执行完毕之后，参数已经从栈顶弹出，函数的返回值（如果有的话）会出现在栈顶。我们假设被调用函数接收两个参数，类型分别是&lt;code&gt;f32&lt;/code&gt;和&lt;code&gt;f64&lt;/code&gt;，返回值类型是&lt;code&gt;i64&lt;/code&gt;，下面是&lt;code&gt;call&lt;/code&gt;指令的示意图：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wasm介绍之5：控制指令</title>
      <link>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B5%E6%8E%A7%E5%88%B6%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Fri, 29 Oct 2021 16:51:54 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B5%E6%8E%A7%E5%88%B6%E6%8C%87%E4%BB%A4/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844904082071617544&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/5/170a96e59f4522e8~tplv-t2oaga2asx-zoom-crop-mark:1304:1304:1304:734.awebp&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;-wasm介绍之5控制指令&#34;&gt;# Wasm介绍之5：控制指令&lt;/h1&gt;&#xA;&lt;p&gt;[WebAssembly]https%3A%2F%2Fwebassembly.org%2F)（简称Wasm）&lt;a href=&#34;https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fbinary%2Finstructions.html%23control-instructions&#34;&gt;控制指令&lt;/a&gt;一共有11条，其中&lt;code&gt;unreachable&lt;/code&gt;指令（操作码&lt;code&gt;0x00&lt;/code&gt;）和&lt;code&gt;nop&lt;/code&gt;指令（操作码&lt;code&gt;0x01&lt;/code&gt;）比较简单，不介绍。&lt;code&gt;call&lt;/code&gt;指令（操作码&lt;code&gt;0x10&lt;/code&gt;）已经在上一篇文章里介绍，&lt;code&gt;call_indirect&lt;/code&gt;指令（操作码&lt;code&gt;0x11&lt;/code&gt;）将在下一篇文章里介绍。本文重点讨论&lt;code&gt;block&lt;/code&gt;（操作码&lt;code&gt;0x02&lt;/code&gt;）、&lt;code&gt;loop&lt;/code&gt;（操作码&lt;code&gt;0x03&lt;/code&gt;）、&lt;code&gt;if&lt;/code&gt;（操作码&lt;code&gt;0x04&lt;/code&gt;）、&lt;code&gt;br&lt;/code&gt;（操作码&lt;code&gt;0x0C&lt;/code&gt;）、&lt;code&gt;br_if&lt;/code&gt;（操作码&lt;code&gt;0x0D&lt;/code&gt;）、&lt;code&gt;br_table&lt;/code&gt;（操作码&lt;code&gt;0x0E&lt;/code&gt;）和&lt;code&gt;return&lt;/code&gt;（操作码&lt;code&gt;0x0F&lt;/code&gt;）这7条指令。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wasm介绍之4：函数调用</title>
      <link>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B4%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</link>
      <pubDate>Fri, 29 Oct 2021 16:48:03 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B4%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844904077411745800&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/2/28/1708b4c47191d9b5~tplv-t2oaga2asx-watermark.awebp&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;上一篇文章介绍了&lt;a href=&#34;https%3A%2F%2Fwebassembly.org%2F&#34;&gt;WebAssembly&lt;/a&gt;（简称Wasm）内存和相关指令，这篇文章将介绍&lt;a href=&#34;https://link.juejin.cn/?target=https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fbinary%2Finstructions.html%23variable-instructions&#34;&gt;变量指令&lt;/a&gt;和函数调用指令。&lt;/p&gt;&#xA;&lt;h2 id=&#34;全局变量&#34;&gt;全局变量&lt;/h2&gt;&#xA;&lt;p&gt;Wasm&lt;a href=&#34;https://link.juejin.cn/?target=https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fsyntax%2Fmodules.html&#34;&gt;模块&lt;/a&gt;可以&lt;a href=&#34;https://link.juejin.cn/?target=https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fsyntax%2Fmodules.html%23globals&#34;&gt;定义&lt;/a&gt;或者&lt;a href=&#34;https://link.juejin.cn/?target=https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fsyntax%2Fmodules.html%23imports&#34;&gt;导入&lt;/a&gt;全局变量。导入时，可以限定全局变量的类型和可修改性（mutability）。定义时，除了限定类型和可修改性还可以给定初始值。下面是一个&lt;a href=&#34;https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Ftext%2Fconventions.html&#34;&gt;WAT&lt;/a&gt;例子，展示了全局变量的导入和定义：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(module&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (import &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;env&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;g1&amp;#34;&lt;/span&gt; (global $g1 i32))       ;; immutable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (import &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;env&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;g2&amp;#34;&lt;/span&gt; (global $g2 (mut f32))) ;; mutable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (global $g3 (mut i32) (i32.&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; 123)) ;; mutable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (global $g4 (mut i64) (i64.&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; 456)) ;; mutable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (global $g5 f32 (f32.&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; 1.5))       ;; immutable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (global $g6 f64 (f64.&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; 2.5))       ;; immutable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#00f&#34;&gt;func&lt;/span&gt; $main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ;; $g3 = $g1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (global.get $g1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (global.set $g3)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;复制代码&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;变量指令一共5条，其中2条用来读写全局变量，下面分别介绍。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wasm介绍之3：内存</title>
      <link>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B3%E5%86%85%E5%AD%98/</link>
      <pubDate>Fri, 29 Oct 2021 16:40:13 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B3%E5%86%85%E5%AD%98/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844904069186715656&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/2/21/17066003f2cbfc43~tplv-t2oaga2asx-watermark.awebp&#34; alt=&#34;1.jpg&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;上一篇文章介绍了&lt;a href=&#34;target=https%3A%2F%2Fwebassembly.org%2F&#34;&gt;WebAssembly&lt;/a&gt;（简称Wasm）&lt;a href=&#34;https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fsyntax%2Finstructions.html&#34;&gt;指令集&lt;/a&gt;以及指令的操作码（Opcode）、立即数（Immediate Arguments）、操作数（Operands）、操作数栈（Operand Stack，简称栈）等概念，并且详细介绍了&lt;a href=&#34;https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fbinary%2Finstructions.html%23parametric-instructions&#34;&gt;参数指令&lt;/a&gt;和&lt;a href=&#34;https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fbinary%2Finstructions.html%23numeric-instructions&#34;&gt;数值指令&lt;/a&gt;。这篇文章将介绍Wasm内存和相关指令。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wasm介绍之2：指令集和栈</title>
      <link>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B2%E6%8C%87%E4%BB%A4%E9%9B%86%E5%92%8C%E6%A0%88/</link>
      <pubDate>Fri, 29 Oct 2021 16:36:38 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B2%E6%8C%87%E4%BB%A4%E9%9B%86%E5%92%8C%E6%A0%88/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844904065411842056&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;上一篇文章介绍了&lt;a href=&#34;https%3A%2F%2Fwebassembly.org%2F&#34;&gt;WebAssembly&lt;/a&gt;（后文简称Wasm）&lt;a href=&#34;https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fbinary%2Findex.html&#34;&gt;二进制格式&lt;/a&gt;，这一篇文章将介绍Wasm&lt;a href=&#34;https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fsyntax%2Finstructions.html&#34;&gt;指令集&lt;/a&gt;、操作数栈和部分指令。&lt;/p&gt;&#xA;&lt;h2 id=&#34;wasm指令集&#34;&gt;Wasm指令集&lt;/h2&gt;&#xA;&lt;p&gt;和真实的&lt;a href=&#34;https://link.juejin.cn/?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FMachine_code&#34;&gt;机器码&lt;/a&gt;一样，Wasm二进制文件中的代码也由一条一条的&lt;strong&gt;指令&lt;/strong&gt;构成。同样，Wasm指令也包含两部分信息：&lt;strong&gt;操作码&lt;/strong&gt;（Opcode）和&lt;strong&gt;操作数&lt;/strong&gt; （Operands）。Wasm操作码固定为一个字节，因此最多能表示256条指令，这一点和&lt;a href=&#34;https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FJava_bytecode&#34;&gt;Java字节码&lt;/a&gt;一样。Wasm1.0规范一共定义了172条指令，这些指令按功能可以分为5大类，分别是：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;控制指令&lt;/strong&gt;（Control Instructions），共13条。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;参数指令&lt;/strong&gt;（Parametric Instructions），共2条。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;变量指令&lt;/strong&gt;（Variable Instructions），共5条。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;内存指令&lt;/strong&gt;（Memory Instructions），共25条。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;数值指令&lt;/strong&gt;（Numeric Instructions），共127条。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;可以看到，已经定义的指令中，有超过2/3属于数值指令。为了方便人类书写和理解，Wasm规范给也给每个操作码定义了&lt;strong&gt;助记符&lt;/strong&gt;（&lt;a href=&#34;https://link.juejin.cn/?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FAssembly_language%23Opcode_mnemonics_and_extended_mnemonics&#34;&gt;Mnemonic&lt;/a&gt;），比如说操作码&lt;code&gt;0x41&lt;/code&gt;的助记符是&lt;code&gt;i32.const&lt;/code&gt;。下面是已定义指令的操作码分布示意图：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wasm介绍之1：二进制格式</title>
      <link>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B1%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Fri, 29 Oct 2021 16:33:16 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B1%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%A0%BC%E5%BC%8F/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844904062148689933&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;关于&lt;a href=&#34;https%3A%2F%2Fwebassembly.org%2F&#34;&gt;WebAssembly&lt;/a&gt;（下文简称Wasm）的介绍已经有很多了，本文不打算再多啰嗦。本文介绍的重点是Wasm&lt;a href=&#34;https://link.juejin.cn/?target=https%3A%2F%2Flinks.jianshu.com%2Fgo%3Fto%3Dhttps%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fbinary%2Findex.html&#34;&gt;二进制格式&lt;/a&gt;，我们会把一个最简单的&lt;a href=&#34;https://link.juejin.cn/?target=https%3A%2F%2Flinks.jianshu.com%2Fgo%3Fto%3Dhttps%3A%2F%2Fwww.rust-lang.org%2F&#34;&gt;Rust&lt;/a&gt;程序（没错，就是&lt;code&gt;Hello，World！&lt;/code&gt;程序）编译成Wasm二进制格式，然后以Go伪代码结合&lt;code&gt;xxd&lt;/code&gt;命令的形式来剖析Wasm二进制格式 。下面是这个Rust程序的完整代码（如果不了解如何将Rust编译成Wasm，请看&lt;a href=&#34;https%3A%2F%2Fdev.to%2Fdandyvica%2Fwasm-in-rust-without-nodejs-2e0c&#34;&gt;这篇文章&lt;/a&gt;）：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#![no_std]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#![no_main]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;print_str&lt;/span&gt;(ptr: *&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;u8&lt;/span&gt;, len: &lt;span style=&#34;color:#00f&#34;&gt;usize&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#[panic_handler]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;panic&lt;/span&gt;(_info: &lt;span style=&#34;color:#00f&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#007575&#34;&gt;core&lt;/span&gt;::panic::PanicInfo) -&amp;gt; ! {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;loop&lt;/span&gt; {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#[no_mangle]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsafe&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;let&lt;/span&gt; s = &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;Hello, World!&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print_str(s.as_ptr(), s.len());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;module&#34;&gt;Module&lt;/h2&gt;&#xA;&lt;p&gt;Wasm的顶层结构是&lt;strong&gt;模块&lt;/strong&gt;（Module），每一个Wasm二进制文件对应一个模块。模块以4字节&lt;a href=&#34;https://link.juejin.cn/?target=https%3A%2F%2Flinks.jianshu.com%2Fgo%3Fto%3Dhttps%3A%2F%2Fen.wikipedia.org%2Fwiki%2FMagic_number_%28programming%29&#34;&gt;魔数&lt;/a&gt;开始，接着是4字节版本号，其余是模块的数据。具体的模块数据被分门别类的放在不同的&lt;strong&gt;段&lt;/strong&gt;（Section）中，每个段都由唯一的段ID来标识。除了&lt;strong&gt;自定义段&lt;/strong&gt;（后文会介绍）以外，其他所有的段都最多只能出现一次，且必须按照段ID递增的顺序出现。下面的&lt;strong&gt;伪代码&lt;/strong&gt;（采用Go语言语法，下同）给出了模块的整体结构：&lt;/p&gt;</description>
    </item>
    <item>
      <title>FFI</title>
      <link>http://shanks.link/blog/2021/10/28/ffi/</link>
      <pubDate>Thu, 28 Oct 2021 20:57:17 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/28/ffi/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://moonbingbing.gitbooks.io/openresty-best-practices/content/lua/FFI.html&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;FFI 库，是 LuaJIT 中最重要的一个扩展库。它允许从纯 Lua 代码调用外部 C 函数，使用 C 数据结构。有了它，就不用再像 Lua 标准 &lt;code&gt;math&lt;/code&gt; 库一样，编写 Lua 扩展库。把开发者从开发 Lua 扩展 C 库（语言/功能绑定库）的繁重工作中释放出来。学习完本小节对开发纯 &lt;code&gt;ffi&lt;/code&gt; 的库是有帮助的，像 &lt;a href=&#34;https://github.com/openresty/lua-resty-lrucache&#34;&gt;lru-resty-lrucache&lt;/a&gt; 中的 &lt;code&gt;pureffi.lua&lt;/code&gt;，这个纯 &lt;code&gt;ffi&lt;/code&gt; 库非常高效地完成了 lru 缓存策略。&lt;/p&gt;</description>
    </item>
    <item>
      <title>linux ucontext族函数的原理及使用</title>
      <link>http://shanks.link/blog/2021/10/28/linux-ucontext%E6%97%8F%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 28 Oct 2021 20:02:45 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/28/linux-ucontext%E6%97%8F%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_44443986/article/details/117739157&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;ucontext函数族&#34;&gt;ucontext函数族&lt;/h1&gt;&#xA;&lt;p&gt;这里的context族是偏向底层的，其实底层就是通过汇编来实现的，但是我们使用的时候就和平常使用变量和函数一样使用就行，因为大佬们已经将它们封装成C库里了的&lt;/p&gt;</description>
    </item>
    <item>
      <title>WebAssembly完全入门了解wasm的前世今身</title>
      <link>http://shanks.link/blog/2021/10/20/webassembly%E5%AE%8C%E5%85%A8%E5%85%A5%E9%97%A8%E4%BA%86%E8%A7%A3wasm%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E8%BA%AB/</link>
      <pubDate>Wed, 20 Oct 2021 14:43:14 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/20/webassembly%E5%AE%8C%E5%85%A8%E5%85%A5%E9%97%A8%E4%BA%86%E8%A7%A3wasm%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E8%BA%AB/</guid>
      <description>&lt;p&gt;首发于&lt;a href=&#34;https://www.zhihu.com/column/detectiveHLH&#34;&gt;SH的全栈笔记&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;接触WebAssembly之后，在google上看了很多资料。感觉对WebAssembly的使用、介绍、意义都说的比较模糊和笼统。感觉看了之后收获没有达到预期，要么是文章中的例子自己去实操不能成功，要么就是不知所云、一脸蒙蔽。本着业务催生技术的态度，这边文章就诞生了。前部分主要是对WebAssembly的背景做一些介绍，WebAssembly是怎么出现的，优势在哪儿。如果想直接开始撸代码试试效果，可以直接跳到最后一个板块。&lt;/p&gt;</description>
    </item>
    <item>
      <title>十年磨一剑，WebAssembly是如何诞生的？</title>
      <link>http://shanks.link/blog/2021/10/20/%E5%8D%81%E5%B9%B4%E7%A3%A8%E4%B8%80%E5%89%91webassembly%E6%98%AF%E5%A6%82%E4%BD%95%E8%AF%9E%E7%94%9F%E7%9A%84/</link>
      <pubDate>Wed, 20 Oct 2021 14:34:08 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/20/%E5%8D%81%E5%B9%B4%E7%A3%A8%E4%B8%80%E5%89%91webassembly%E6%98%AF%E5%A6%82%E4%BD%95%E8%AF%9E%E7%94%9F%E7%9A%84/</guid>
      <description>&lt;p&gt;首发于&lt;a href=&#34;https://www.zhihu.com/column/c_1228368234593677312&#34;&gt;寒雁Talk&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;创造一个编程语言最好的时间是10年前，其次是现在。&lt;/p&gt;&#xA;&lt;p&gt;从Emscripten到asm.js再到WebAssembly，从一个业余项目到W3C标准，差不多是整整10年。&lt;/p&gt;</description>
    </item>
    <item>
      <title>深入浅出WebAssembly1-8链接</title>
      <link>http://shanks.link/blog/2021/10/20/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAwebassembly1-8%E9%93%BE%E6%8E%A5/</link>
      <pubDate>Wed, 20 Oct 2021 10:45:41 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/20/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAwebassembly1-8%E9%93%BE%E6%8E%A5/</guid>
      <description>&lt;p&gt;这系列主要是我对WASM研究的笔记，可能内容比较简略。总共包括：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/6844904050656444424&#34;&gt;深入浅出WebAssembly(1) Compilation&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/6844904190146248712&#34;&gt;深入浅出WebAssembly(2) Basic Api&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;[深入浅出WebAssembly(3) Instructions]((&lt;a href=&#34;https://juejin.cn/post/6844904190150443015&#34;&gt;https://juejin.cn/post/6844904190150443015&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/6844904190150443022&#34;&gt;深入浅出WebAssembly(4) Validation&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/6844904176816783374&#34;&gt;深入浅出WebAssembly(5) Memory&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/6844904190163025934&#34;&gt;深入浅出WebAssembly(6) Binary Format&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/6844904176820944904&#34;&gt;深入浅出WebAssembly(7) Future&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;[深入浅出WebAssembly(8) Wasm in Rust（TODO）]&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>深入浅出WebAssembly(2) Basic API</title>
      <link>http://shanks.link/blog/2021/10/20/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAwebassembly2-basic-api/</link>
      <pubDate>Wed, 20 Oct 2021 10:43:19 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/20/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAwebassembly2-basic-api/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844904190146248712&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;这系列主要是我对WASM研究的笔记，可能内容比较简略。总共包括：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(1) Compilation&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(2) Basic Api&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(3) Instructions&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(4) Validation&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(5) Memory&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(6) Binary Format&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(7) Future&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(8) Wasm in Rust（TODO）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;api总览&#34;&gt;API总览&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;//async version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WebAssembly.compile(bufferSource: ArrayBuffer): Promise&amp;lt;WebAssembly.Module&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WebAssembly.instantiate(bufferSource: ArrayBuffer, importObj?: any): Promise&amp;lt;{module: WebAssembly.Module, instance: WebAssembly.Instance}&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WebAssembly.instantiate(module: WebAssembly.Module, importObj?: any): Promise&amp;lt;WebAssembly.Instance&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WebAssembly.compileStreaming(source: Promise&amp;lt;Responce&amp;gt;): Promise&amp;lt;WebAssembly.Module&amp;gt; // wasm 请求头：Context-type: application/wasm&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;//sync version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new WebAssembly.Module(bufferSource: ArrayBuffer)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new WebAssembly.Instance(module: WebAssembly.Module, importObj?: any)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// helper&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WebAssembly.Module.customSections(module:WebAssembly.Module, sectionName: string): ArrayBuffer[]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WebAssembly.Module.exports(module: WebAssembly.Module): { name: string, kind: &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;function|table|memory|global&amp;#34;&lt;/span&gt; }][]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WebAssembly.Module.imports(module: WebAssembly.Module): { module: string, name: string, kind: &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;function|table|memory|global&amp;#34;&lt;/span&gt; }][]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// validation and error&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WebAssembly.validate(bufferSource: ArrayBuffer):boolean&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;interface CommonError {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  message: string&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  filename: string&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lineNumber: number&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new WebAssembly.CompileError(message: string, fileName: string, lineNumber: number) // 解码，验证阶段&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new WebAssembly.LinkError(message: string, fileName: string, lineNumber: number)  // 实例化阶段&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new WebAssembly.RuntimeError(message: string, fileName: string, lineNumber: number) // 运行阶段&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;复制代码&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;如何初始化一个模块&#34;&gt;如何初始化一个模块？&lt;/h2&gt;&#xA;&lt;h3 id=&#34;async-way&#34;&gt;Async way:&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fetch(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;./index.wasm&amp;#39;&lt;/span&gt;).then(response =&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  response.arrayBuffer()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;).then(bytes =&amp;gt; WebAssembly.instantiate(bytes, {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  env: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    yyy: xxx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})).then(wasm =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; { module, instance } = wasm;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}).catch(console.error);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;复制代码&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;streaming-way&#34;&gt;Streaming way:&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; source = fetch(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;./index.wasm&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WebAssembly.compileStreaming(source).then(module =&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  WebAssembly.instantiate(module, {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    env: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      xxx: yyy&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  })&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;).then(instance =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  //xxx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}).catch(console.error);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;复制代码&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;sync-way&#34;&gt;Sync way:&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; source = fetch(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;./index.wasm&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WebAssembly.compileStreaming(source).then(module =&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  WebAssembly.instantiate(module, {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    env: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      xxx: yyy&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  })&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;).then(instance =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  //xxx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}).catch(console.error);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;复制代码&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最好的方式是通过 &lt;code&gt;WebAssembly.compileStreaming&lt;/code&gt; 的方式来加载。可以对wasm模块提前进行编译验证。&lt;/p&gt;</description>
    </item>
    <item>
      <title>深入浅出WebAssembly(1) Compilation</title>
      <link>http://shanks.link/blog/2021/10/20/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAwebassembly1-compilation/</link>
      <pubDate>Wed, 20 Oct 2021 10:39:28 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/20/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAwebassembly1-compilation/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844904050656444424&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;这系列主要是我对WASM研究的笔记，可能内容比较简略。总共包括：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(1) Compilation&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(2) Basic Api&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(3) Instructions&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(4) Validation&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(5) Memory&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(6) Binary Format&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(7) Future&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(8) Wasm in Rust（TODO）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;js是如何解析运行的&#34;&gt;JS是如何解析运行的？&lt;/h2&gt;&#xA;&lt;h3 id=&#34;词法分析&#34;&gt;词法分析&lt;/h3&gt;&#xA;&lt;p&gt;JS代码首先需要经过词法分析器(Lexer)来生成Token，如a = 1 + 2将被解析成&lt;code&gt;{a, =, 1, +, 2}&lt;/code&gt;五个Token&lt;/p&gt;</description>
    </item>
    <item>
      <title>编程语言、虚拟机和 webAssembly 三者有什么关系</title>
      <link>http://shanks.link/blog/2021/10/20/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C-webassembly-%E4%B8%89%E8%80%85%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Wed, 20 Oct 2021 09:43:43 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/20/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C-webassembly-%E4%B8%89%E8%80%85%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;前言：今天我们聊一聊最近很火热的技术 webAssembly。webAssbemly 作为一项新的技术，自 2015 年诞生之初，就逐渐受到人们的关注。那究竟什么是 webAssembly ？它是一门新的编程语言吗？它跟虚拟机又有什么样的关系呢？它有着什么样的应用场景呢？接下来就让我们用 5-10分钟的时间来回答这些问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>WebAssembly 系列（六）WebAssembly 的现在与未来</title>
      <link>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E5%85%ADwebassembly-%E7%9A%84%E7%8E%B0%E5%9C%A8%E4%B8%8E%E6%9C%AA%E6%9D%A5/</link>
      <pubDate>Wed, 20 Oct 2021 09:34:37 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E5%85%ADwebassembly-%E7%9A%84%E7%8E%B0%E5%9C%A8%E4%B8%8E%E6%9C%AA%E6%9D%A5/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;本文作者：Lin Clark&lt;/p&gt;&#xA;&lt;p&gt;翻译原文：&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//huziketang.com/blog/posts/detail%3FpostId%3D58ce7fd3a6d8a07e449fdd26&#34;&gt;http://huziketang.com/blog/posts/detail?postId=58ce7fd3a6d8a07e449fdd26&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;英文原文：&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//hacks.mozilla.org/2017/02/where-is-webassembly-now-and-whats-next/&#34;&gt;Where is WebAssembly now and what’s next?&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;本文是关于 WebAssembly 系列的第六篇文章（&lt;strong&gt;本系列共六篇文章&lt;/strong&gt;），也同时是本系列的收尾文章。如果你没有读先前文章的话，建议&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//huziketang.com/blog/posts/detail%3FpostId%3D58ce8036a6d8a07e449fdd27&#34;&gt;先读这里&lt;/a&gt;。如果对 WebAssembly 没概念，建议&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//blog.csdn.net/wulixiaoxiao1/article/details/60581397&#34;&gt;先读这里&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>WebAssembly 系列（四）WebAssembly 工作原理</title>
      <link>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E5%9B%9Bwebassembly-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 20 Oct 2021 09:15:58 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E5%9B%9Bwebassembly-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;p&gt;首发于&lt;a href=&#34;https://www.zhihu.com/column/qianduandaha&#34;&gt;前端大哈&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;本文作者：Lin Clark&lt;/p&gt;&#xA;&lt;p&gt;翻译原文：&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//huziketang.com/blog/posts/detail%3FpostId%3D58c77641a6d8a07e449fdd24&#34;&gt;http://huziketang.com/blog/posts/detail?postId=58c77641a6d8a07e449fdd24&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;英文原文：&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//hacks.mozilla.org/2017/02/creating-and-working-with-webassembly-modules/&#34;&gt;Creating and working with WebAssembly modules&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;本文是关于 WebAssembly 系列的第四篇文章（&lt;strong&gt;本系列共六篇文章&lt;/strong&gt;）。如果你没有读先前文章的话，建议&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//huziketang.com/blog/posts/detail%3FpostId%3D58ce8036a6d8a07e449fdd27&#34;&gt;先读这里&lt;/a&gt;。如果对 WebAssembly 没概念，建议&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//blog.csdn.net/wulixiaoxiao1/article/details/60581397&#34;&gt;先读这里&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>WebAssembly 系列（三）编译器如何生成汇编</title>
      <link>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E4%B8%89%E7%BC%96%E8%AF%91%E5%99%A8%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E6%B1%87%E7%BC%96/</link>
      <pubDate>Wed, 20 Oct 2021 09:13:32 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E4%B8%89%E7%BC%96%E8%AF%91%E5%99%A8%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E6%B1%87%E7%BC%96/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;本文作者：Lin Clark&#xA;翻译原文：&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//huziketang.com/blog/posts/detail%3FpostId%3D58c55a3ba6d8a07e449fdd23&#34;&gt;http://huziketang.com/blog/posts/detail?postId=58c55a3ba6d8a07e449fdd23&lt;/a&gt;&#xA;英文原文：&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//hacks.mozilla.org/2017/02/a-crash-course-in-assembly/&#34;&gt;A crash course in assembly&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;本文是关于 WebAssembly 系列的第三篇文章&lt;/em&gt;**（本系列共六篇文章）&lt;em&gt;&lt;em&gt;&lt;em&gt;。如果你没有读先前文章的话，建议&lt;/em&gt;&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//huziketang.com/blog/posts/detail%3FpostId%3D58ce8036a6d8a07e449fdd27&#34;&gt;先读这里&lt;/a&gt;&lt;/em&gt;。如果对 WebAssembly 没概念，建议&lt;/em&gt;&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//blog.csdn.net/wulixiaoxiao1/article/details/60581397&#34;&gt;先读这里&lt;/a&gt;&lt;em&gt;。&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>WebAssembly 系列（二）JavaScript Just-in-time (JIT) 工作</title>
      <link>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E4%BA%8Cjavascript-just-in-time-jit-%E5%B7%A5%E4%BD%9C/</link>
      <pubDate>Wed, 20 Oct 2021 09:10:21 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E4%BA%8Cjavascript-just-in-time-jit-%E5%B7%A5%E4%BD%9C/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;作者：Lin Clark&#xA;翻译原文：&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//huziketang.com/blog/posts/detail%3FpostId%3D58c12f36a6d8a07e449fdd22&#34;&gt;http://huziketang.com/blog/posts/detail?postId=58c12f36a6d8a07e449fdd22&lt;/a&gt;&#xA;英文原文：&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//hacks.mozilla.org/2017/02/a-crash-course-in-just-in-time-jit-compilers/&#34;&gt;A crash course in just-in-time (JIT) compilers&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;本文是关于 WebAssembly 系列的第二篇文章**（本系列共六篇文章）**。如果你没有读先前文章的话，建议&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//huziketang.com/blog/posts/detail%3FpostId%3D58ce8036a6d8a07e449fdd27&#34;&gt;先读这里&lt;/a&gt;。如果对 WebAssembly 没概念，建议&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//blog.csdn.net/wulixiaoxiao1/article/details/60581397&#34;&gt;先读这里&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>WebAssembly 系列（一）生动形象地介绍 WebAssembly</title>
      <link>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E4%B8%80%E7%94%9F%E5%8A%A8%E5%BD%A2%E8%B1%A1%E5%9C%B0%E4%BB%8B%E7%BB%8D-webassembly/</link>
      <pubDate>Wed, 20 Oct 2021 09:07:03 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E4%B8%80%E7%94%9F%E5%8A%A8%E5%BD%A2%E8%B1%A1%E5%9C%B0%E4%BB%8B%E7%BB%8D-webassembly/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;本文作者：Lin Clark&lt;/p&gt;&#xA;&lt;p&gt;翻译原文：&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//huziketang.com/blog/posts/detail%3FpostId%3D58ce8036a6d8a07e449fdd27&#34;&gt;http://huziketang.com/blog/posts/detail?postId=58ce8036a6d8a07e449fdd27&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;英文原文：&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//hacks.mozilla.org/2017/02/a-cartoon-intro-to-webassembly/&#34;&gt;A cartoon intro to WebAssembly&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;你可能已经听说过，WebAssembly 执行的更快。但是 WebAssembly 为什么执行的更快呢？&lt;/p&gt;&#xA;&lt;p&gt;在这个系列文章中，我会为你解释这一点。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CentOS8使用ifconfig没有ens33网卡</title>
      <link>http://shanks.link/blog/2021/10/19/centos8%E4%BD%BF%E7%94%A8ifconfig%E6%B2%A1%E6%9C%89ens33%E7%BD%91%E5%8D%A1/</link>
      <pubDate>Tue, 19 Oct 2021 14:51:27 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/19/centos8%E4%BD%BF%E7%94%A8ifconfig%E6%B2%A1%E6%9C%89ens33%E7%BD%91%E5%8D%A1/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_42162618/article/details/106977483&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;本人遇到的问题&#34;&gt;本人遇到的问题&lt;/h2&gt;&#xA;&lt;p&gt;虚拟机开启 ifconfig 没有ens33网卡，无法上网，同时 图形化模式 没有有线连接选项&#xA;手动启动网卡提示：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Connection &amp;#39;ens33&amp;#39; is not available on device ens33 because device is strictly unmanaged&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有一种临时方案 ：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dhclient  ens33&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行后可以上网，可以远程连接，但是每次开机都无法自动启动，&#xA;最终找到原因是由于 NM托管未开启导致的&lt;/p&gt;</description>
    </item>
    <item>
      <title>bash: $&#39;&#39;: command not found</title>
      <link>http://shanks.link/blog/2021/10/19/bash-command-not-found/</link>
      <pubDate>Tue, 19 Oct 2021 10:58:10 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/19/bash-command-not-found/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/taojijisky/article/details/78969980&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;问题描述&#34;&gt;问题描述&lt;/h1&gt;&#xA;&lt;p&gt;在Windows下编写好sh文件后，在Linux下运行会报错：bash: $’\r’: command not found&#xA;&lt;img src=&#34;https://img-blog.csdnimg.cn/20190620202621773.PNG&#34; alt=&#34;问题&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;问题解决&#34;&gt;问题解决&lt;/h1&gt;&#xA;&lt;p&gt;这是因为Windows系统的文件换行使用的是\r\n，而Unix系统是\n&lt;/p&gt;</description>
    </item>
    <item>
      <title>git常用命令</title>
      <link>http://shanks.link/blog/2021/10/19/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 19 Oct 2021 11:12:49 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/10/19/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>&lt;h1 id=&#34;git-config&#34;&gt;git config&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# 显示当前的Git配置&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git config --list&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# 编辑Git配置文件&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git config -e [--global]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# 设置提交代码时的用户信息&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git config [--global] user.name &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;[name]&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git config [--global] user.email &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;[email address]&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;git-workflow&#34;&gt;git workflow&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2012/07/git.html&#34;&gt;http://www.ruanyifeng.com/blog/2012/07/git.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2015/08/git-use-process.html&#34;&gt;http://www.ruanyifeng.com/blog/2015/08/git-use-process.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2015/12/git-workflow.html?bsh_bid=2219775734&#34;&gt;http://www.ruanyifeng.com/blog/2015/12/git-workflow.html?bsh_bid=2219775734&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2019/12/git-undo.html&#34;&gt;http://www.ruanyifeng.com/blog/2019/12/git-undo.html&lt;/a&gt;  撤销提交&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html&#34;&gt;http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html&lt;/a&gt;   撰写commit&lt;/p&gt;</description>
    </item>
    <item>
      <title>vim中查找和替换</title>
      <link>http://shanks.link/blog/2021/10/18/vim%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%92%8C%E6%9B%BF%E6%8D%A2/</link>
      <pubDate>Mon, 18 Oct 2021 08:47:44 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/18/vim%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%92%8C%E6%9B%BF%E6%8D%A2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/huxinga/p/7942194.html&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;1，查找&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;在normal模式下按下&lt;code&gt;/&lt;/code&gt;即可进入查找模式，输入要查找的字符串并按下回车。 Vim会跳转到第一个匹配。按下&lt;code&gt;n&lt;/code&gt;查找下一个，按下&lt;code&gt;N&lt;/code&gt;查找上一个。&lt;/p&gt;</description>
    </item>
    <item>
      <title>记录一个完整的git提交pr的过程</title>
      <link>http://shanks.link/blog/2021/10/18/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E7%9A%84git%E6%8F%90%E4%BA%A4pr%E7%9A%84%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Mon, 18 Oct 2021 08:42:13 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/18/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E7%9A%84git%E6%8F%90%E4%BA%A4pr%E7%9A%84%E8%BF%87%E7%A8%8B/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.bengtian.club/archives/55710&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;今天提交了第一个pr，过程中查了很多资料，这里做个总结文字。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;git下载&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;https://git-scm.com/downloads&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;git配置邮箱和用户名&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;打开git bash，分别执行以下两句命令git config &amp;ndash;global user.name “用户名”git config &amp;ndash;global user.email “邮箱”&lt;/p&gt;</description>
    </item>
    <item>
      <title>centos8防火墙设置</title>
      <link>http://shanks.link/blog/2021/10/18/centos8%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Mon, 18 Oct 2021 08:36:17 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/18/centos8%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/johnyong/p/13473133.html&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;1centos中firewalld与iptables&#34;&gt;1、centos中firewalld与iptables&lt;/h2&gt;&#xA;&lt;p&gt;centos7以前的版本默认使用iptables服务进行管理防火墙规则。centos7以及其以上版本默认使用firewalld服务管理防火墙。所以在centos8中，就使用其默认的firewalld配置防火墙。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何在CentOS上安装RPM软件包</title>
      <link>http://shanks.link/blog/2021/10/14/%E5%A6%82%E4%BD%95%E5%9C%A8centos%E4%B8%8A%E5%AE%89%E8%A3%85rpm%E8%BD%AF%E4%BB%B6%E5%8C%85/</link>
      <pubDate>Thu, 14 Oct 2021 22:38:25 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/14/%E5%A6%82%E4%BD%95%E5%9C%A8centos%E4%B8%8A%E5%AE%89%E8%A3%85rpm%E8%BD%AF%E4%BB%B6%E5%8C%85/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.myfreax.com/how-to-install-rpm-packages-on-centos/&#34;&gt;原文地址&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;如何在centos上安装rpm软件包&#34;&gt;如何在CentOS上安装RPM软件包&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.myfreax.com/content/images/2019/09/yum.jpg&#34; alt=&#34;如何在CentOS上安装RPM软件包&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;RPM是Red Hat及其衍生产品（如CentOS和Fedora）使用的安装包管理系统。&lt;/p&gt;&#xA;&lt;p&gt;官方CentOS存储库包含数千个RPM软件包，可以使用yum命令行进行安装。通过启用适当的存储库，可以轻松安装标准CentOS存储库中不可用的软件包。&lt;/p&gt;</description>
    </item>
    <item>
      <title>axel包的安装</title>
      <link>http://shanks.link/blog/2021/10/14/axel%E5%8C%85%E7%9A%84%E5%AE%89%E8%A3%85/</link>
      <pubDate>Thu, 14 Oct 2021 21:36:22 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/10/14/axel%E5%8C%85%E7%9A%84%E5%AE%89%E8%A3%85/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.codenong.com/js2ea907032e5b/&#34;&gt;原文地址&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;直接安装&#34;&gt;直接安装&lt;/h3&gt;&#xA;&lt;p&gt;有源的情况下，axel 在 CentOS 可以通过 yum 的方式直接安装：&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;sudo yum install -y axel&lt;/p&gt;&#xA;&lt;p&gt;没有源的情况下，在 CentOS 6/7 中可以先添加 Epel 源再安装：&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;sudo yum install epel-release&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;sudo yum install axel&lt;/p&gt;&#xA;&lt;p&gt;或者通过 rpm 的方式安装：&lt;/p&gt;</description>
    </item>
    <item>
      <title>数学之美每章小结</title>
      <link>http://shanks.link/blog/2021/10/09/%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E%E6%AF%8F%E7%AB%A0%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Sat, 09 Oct 2021 14:59:21 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/09/%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E%E6%AF%8F%E7%AB%A0%E5%B0%8F%E7%BB%93/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_37431224/article/details/106841246&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;书评：本书讲的是道而不是术，真正的术还要自己细致的研究下去，目前看的第一遍总结的不是很好，后面再看会继续完善。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;第1章文字和语言vs数字和信息&#34;&gt;第1章：文字和语言VS数字和信息&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1文字和数字&#34;&gt;1.文字和数字&lt;/h2&gt;&#xA;&lt;p&gt;讲了一堆古代文字，其实就是为了引出下面两个概念用于翻译&lt;/p&gt;</description>
    </item>
    <item>
      <title>nginx整体介绍</title>
      <link>http://shanks.link/blog/2021/10/08/nginx%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 08 Oct 2021 23:47:37 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/08/nginx%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/muhy/&#34;&gt;转载自永恒的留忆&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;nginx是什么&#34;&gt;Nginx是什么？&lt;/h1&gt;&#xA;&lt;p&gt;Nginx就是反向代理服务器。&lt;/p&gt;&#xA;&lt;p&gt;首先我们先来看看什么是代理服务器，代理服务器一般是指局域网内部的机器通过代理服务发送请求到互联网上的服务器，代理服务器一般作用于客户端。比如GoAgent，FQ神器。&lt;/p&gt;</description>
    </item>
    <item>
      <title>TiDB 源码阅读系列文章（二）初识 TiDB 源码</title>
      <link>http://shanks.link/blog/2021/09/04/tidb-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E4%BA%8C%E5%88%9D%E8%AF%86-tidb-%E6%BA%90%E7%A0%81/</link>
      <pubDate>Sat, 04 Sep 2021 16:27:11 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/09/04/tidb-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E4%BA%8C%E5%88%9D%E8%AF%86-tidb-%E6%BA%90%E7%A0%81/</guid>
      <description>&lt;p&gt;申砾2018-03-02&lt;/p&gt;&#xA;&lt;p&gt;本文为 TiDB 源码阅读系列文章的第二篇， &lt;a href=&#34;https://pingcap.com/zh/blog/tidb-source-code-reading-1&#34;&gt;第一篇文章 &lt;/a&gt;介绍了 TiDB 整体的架构，知道 TiDB 有哪些模块，分别是做什么的，从哪里入手比较好，哪些可以忽略，哪些需要仔细阅读。&lt;/p&gt;</description>
    </item>
    <item>
      <title>TiDB 源码阅读系列文章（一）序</title>
      <link>http://shanks.link/blog/2021/09/04/tidb-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E4%B8%80%E5%BA%8F/</link>
      <pubDate>Sat, 04 Sep 2021 15:32:44 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/09/04/tidb-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E4%B8%80%E5%BA%8F/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://pingcap.com/zh/blog/tidb-source-code-reading-1&#34;&gt;以下内容转载自博客&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;申砾2018-02-28&lt;/p&gt;&#xA;&lt;p&gt;在 TiDB DevCon2018 上，我们对外宣布了 TiDB 源码阅读分享活动，承诺对外发布一系列文章以及视频帮助大家理解 TiDB 源码。大家一直很关心这项活动的时间，而我们忙于新版本的开发，一直不得闲。在春节放假期间，终于有时间开始动手写这个系列。&lt;/p&gt;</description>
    </item>
    <item>
      <title>分布式系统的Raft算法</title>
      <link>http://shanks.link/blog/2021/09/03/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84raft%E7%AE%97%E6%B3%95/</link>
      <pubDate>Fri, 03 Sep 2021 17:38:11 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/09/03/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84raft%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;p&gt;　　过去, Paxos一直是分布式协议的标准，但是Paxos难于理解，更难以实现，Google的分布式锁系统Chubby作为Paxos实现曾经遭遇到很多坑。&lt;/p&gt;</description>
    </item>
    <item>
      <title>More Redis internals: Tracing a GET &amp; SET</title>
      <link>http://shanks.link/blog/2021/09/02/more-redis-internals-tracing-a-get-set/</link>
      <pubDate>Thu, 02 Sep 2021 01:24:09 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/09/02/more-redis-internals-tracing-a-get-set/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.pauladamsmith.com/blog/2011/03/redis_get_set.html&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;MARCH 10, 2011&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.pauladamsmith.com/images/redis.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;In my &lt;a href=&#34;https://www.pauladamsmith.com/articles/redis-under-the-hood.html&#34;&gt;previous article&lt;/a&gt;, I took a superficial look at how Redis starts up and prepares itself to process commands. In this article, I&amp;rsquo;ll follow a &lt;code&gt;GET&lt;/code&gt; and a &lt;code&gt;SET&lt;/code&gt; command as they move from client through the server and back. The &lt;code&gt;GET&lt;/code&gt; will be for a key that doesn&amp;rsquo;t exist, and the &lt;code&gt;SET&lt;/code&gt; will set that key. Then I&amp;rsquo;ll look quickly at a subsequent &lt;code&gt;GET&lt;/code&gt; and how it differs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>under the hood</title>
      <link>http://shanks.link/blog/2021/09/01/under-the-hood/</link>
      <pubDate>Wed, 01 Sep 2021 19:37:20 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/09/01/under-the-hood/</guid>
      <description>&lt;p&gt;by &lt;a href=&#34;https://www.pauladamsmith.com/&#34;&gt;Paul Smith&lt;/a&gt; (&lt;a href=&#34;http://twitter.com/paulsmith&#34;&gt;@paulsmith&lt;/a&gt;)&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://code.google.com/p/redis/&#34;&gt;&lt;img src=&#34;https://www.pauladamsmith.com/articles/redis_under_the_hood/redis.png&#34; alt=&#34;Redis logo&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;How does the &lt;a href=&#34;http://code.google.com/p/redis/&#34;&gt;Redis&lt;/a&gt; server work?&lt;/p&gt;&#xA;&lt;p&gt;I was curious to learn more about Redis’s internals, so I’ve been familiarizing myself with the source, largely by reading and jumping around in Emacs. After I had peeled back enough of the onion’s layers, I realized I was trying to keep track of too many details in my head, and it wasn’t clear how it all hung together. I decided to write out in narrative form how an instance of the Redis server starts up and initializes itself, and how it handles the request/response cycle with a client, as a way of explaining it to myself, hopefully in a clear fashion. Luckily, Redis has a nice, clean code base that is easy to read and follow along. Armed with a &lt;a href=&#34;http://ctags.sourceforge.net/&#34;&gt;TAGS&lt;/a&gt; file, my &lt;code&gt;$EDITOR&lt;/code&gt;, and GDB, I set out to see how it all works under the hood. (Incidentally, I was working with the Redis code base as of &lt;a href=&#34;http://github.com/antirez/redis/tree/b4f2e412d087bae0a523fe6ea40fcad30fe74b5b&#34;&gt;commit b4f2e41&lt;/a&gt;. Of course, internals such as I outline below are subject to change. However, the broad architecture of the server is unlikely to change very much, and I tried to keep that in mind as I went along.)&lt;/p&gt;</description>
    </item>
    <item>
      <title>深入理解Linux IO模型(二)</title>
      <link>http://shanks.link/blog/2021/08/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux-io%E6%A8%A1%E5%9E%8B%E4%BA%8C/</link>
      <pubDate>Thu, 26 Aug 2021 18:09:43 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux-io%E6%A8%A1%E5%9E%8B%E4%BA%8C/</guid>
      <description>&lt;h1 id=&#34;深入理解linux-io模型二&#34;&gt;深入理解Linux IO模型(二)&lt;/h1&gt;&#xA;&lt;p&gt;原创 Pearl &lt;a href=&#34;javascript:void(0);&#34;&gt;Pearl的仲夏夜之梦&lt;/a&gt; &lt;em&gt;6月13日&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;为何使用epollselect的缺陷epoll的提出epoll的原理数据结构实现原理高效原因epoll的API创建epoll控制epoll等待epoll使用epoll API触发方式水平触发(Level Triggered, LT)边缘触发(Edge Triggered, ET)两者对比Reference&lt;/p&gt;</description>
    </item>
    <item>
      <title>深入理解Linux IO模型(一)</title>
      <link>http://shanks.link/blog/2021/08/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux-io%E6%A8%A1%E5%9E%8B%E4%B8%80/</link>
      <pubDate>Thu, 26 Aug 2021 17:50:32 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux-io%E6%A8%A1%E5%9E%8B%E4%B8%80/</guid>
      <description>&lt;h3 id=&#34;深入理解linux-io模型一&#34;&gt;深入理解Linux IO模型(一)&lt;/h3&gt;&#xA;&lt;p&gt;原创 Pearl &lt;a href=&#34;javascript:void(0);&#34;&gt;Pearl的仲夏夜之梦&lt;/a&gt; &lt;em&gt;6月12日&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Linux IO模型是后端工程师的必备技能。从以往的面试中看，部分后端开发人员对它的理解停留在调API的层面，我自己也理解欠缺。最近系统学习了一下，整理了此文。本文参考了一些文章，放在本文最后，大家可以直接去看这些文章，值得阅读。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redis的47连环炮，试试你能看住几个 -面前复习</title>
      <link>http://shanks.link/blog/2021/08/26/redis%E7%9A%8447%E8%BF%9E%E7%8E%AF%E7%82%AE%E8%AF%95%E8%AF%95%E4%BD%A0%E8%83%BD%E7%9C%8B%E4%BD%8F%E5%87%A0%E4%B8%AA-%E9%9D%A2%E5%89%8D%E5%A4%8D%E4%B9%A0/</link>
      <pubDate>Thu, 26 Aug 2021 00:59:58 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/26/redis%E7%9A%8447%E8%BF%9E%E7%8E%AF%E7%82%AE%E8%AF%95%E8%AF%95%E4%BD%A0%E8%83%BD%E7%9C%8B%E4%BD%8F%E5%87%A0%E4%B8%AA-%E9%9D%A2%E5%89%8D%E5%A4%8D%E4%B9%A0/</guid>
      <description>&lt;h2 id=&#34;写在前面&#34;&gt;写在前面&lt;/h2&gt;&#xA;&lt;p&gt;大家好，我是老田，前面我们已经分享了五篇连环炮文章，今天我们继续。今天我们接着来聊聊Redis。Redis已经成为我们开发者必备技能之一了，同时面试也是必问的。下面就来对Redis进行一个总结，然后赠送43连环炮。&lt;/p&gt;</description>
    </item>
    <item>
      <title>redis基础数据结构skiplist</title>
      <link>http://shanks.link/blog/2021/08/25/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84skiplist/</link>
      <pubDate>Wed, 25 Aug 2021 15:18:17 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/25/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84skiplist/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_45827856/article/details/103254965&#34;&gt;以下内容转载自csdn-Knight0xffff&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;太长不看版&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;跳跃表是有序集合的底层实现之一， 除此之外它在 Redis 中没有其他应用。&lt;/li&gt;&#xA;&lt;li&gt;每个跳跃表节点的层高都是 1 至 64 之间的随机数&lt;/li&gt;&#xA;&lt;li&gt;层高越高出现的概率越低，层高为i的概率为( 1 − p ) ∗ p i − 1 , ( p = 1 / 4 ) (1-p) * p^{i-1}, (p=1/4)(1−&lt;em&gt;p&lt;/em&gt;)∗&lt;em&gt;p**i&lt;/em&gt;−1,(&lt;em&gt;p&lt;/em&gt;=1/4)。&lt;/li&gt;&#xA;&lt;li&gt;跳跃表中，分值可以重复， 但对象成员唯一。分值相同时，节点按照成员对象的大小进行排序。&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;本篇解析基于&lt;a href=&#34;https://github.com/antirez/redis&#34;&gt;redis&lt;/a&gt; 5.0.0版本，本篇涉及源码文件为t_zset.c, server.h。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础56-磁盘调度算法</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8056-%E7%A3%81%E7%9B%98%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 25 Aug 2021 11:30:26 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8056-%E7%A3%81%E7%9B%98%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h1 id=&#34;操作系统基础56-磁盘调度算法&#34;&gt;操作系统基础56-磁盘调度算法&lt;/h1&gt;&#xA;&lt;p&gt;2021-02-08 02:15·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;操作系统的职责之一是有效使用硬件。对于磁盘驱动器，满足这个要求具有较快的访问速度和较宽的磁盘带宽。&#xA;对于磁盘，访问时间包括两个主要部分：&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础55-磁盘冗余阵列RAID</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8055-%E7%A3%81%E7%9B%98%E5%86%97%E4%BD%99%E9%98%B5%E5%88%97raid/</link>
      <pubDate>Wed, 25 Aug 2021 11:29:04 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8055-%E7%A3%81%E7%9B%98%E5%86%97%E4%BD%99%E9%98%B5%E5%88%97raid/</guid>
      <description>&lt;h1 id=&#34;操作系统基础55-磁盘冗余阵列raid&#34;&gt;操作系统基础55-磁盘冗余阵列RAID&lt;/h1&gt;&#xA;&lt;p&gt;2021-02-07 01:17·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;磁盘驱动器继续变得更小更便宜，如今在一台计算机系统上连接许多磁盘从经济上来说已经可行了。一个系统拥有大量磁盘，就有机会改善数据的读写速率，因为磁盘操作可以并行进行。此外，这种设置提供能力，以提高数据存储的可靠性，因为冗佘信息可以存储在多 个磁盘上。因此，单个磁盘的故障不会导致数据丢失。&#xA;多种磁盘组织技术统称为磁盘冗余阵列(RAID)技术，通常用于处理性能与可靠性问题。过去，RAID是由小且便宜的磁盘组成，可作为大且昂贵的磁盘的有效替代品。现在，RAID的使用主要是因为高可靠性和高数据传输率，而不是经济原因。因此，RAID中的 I 表示“独立”(independent)而不是“廉价”(inexpensive)。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础54-磁盘管理</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8054-%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/</link>
      <pubDate>Wed, 25 Aug 2021 11:27:55 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8054-%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;h1 id=&#34;操作系统基础54-磁盘管理&#34;&gt;操作系统基础54-磁盘管理&lt;/h1&gt;&#xA;&lt;p&gt;2021-02-06 01:09·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;操作系统还负责磁盘管理的其他几个方面。本节讨论磁盘初始化、磁盘引导、坏块恢复等。&lt;/p&gt;&#xA;&lt;h1 id=&#34;磁盘格式化&#34;&gt;磁盘格式化&lt;/h1&gt;&#xA;&lt;p&gt;一个新的磁盘是一个空白盘，它只是一个磁性记录材料的盘子。在磁盘可以存储数据之前，它必须分成扇区，以便磁盘控制器能够读写，这个过程称为低级格式化或物理格式化。&#xA;低级格式化为每个扇区使用特殊的数据结构，填充磁盘。每个扇区的数据结构通常由头部、数据区域(通常为512字节大小)和尾部组成。头部和尾部包含了一些磁盘控制器的使用信息，如扇区号和纠错代码(ECC)。&#xA;当控制器通过正常I/O写入一个扇区的数据时，ECC采用根据数据区域所有字节而计算的新值来加以更新。在读取一个扇区时，ECC值会重新计算，并与原来存储的值相比较，如果存储和计算的数值不一样，则表示扇区数据区已损坏，并且磁盘扇区可能已坏。&#xA;ECC是纠错代码，因为它有足够的信息，以便在只有少数数据损坏时，控制器能够识别哪些位已经改变，并且计算它们的正确值应该是什么。然后它会报告可恢复的软错误。当读或写一个扇区时，控制器自动进行ECC处理。&#xA;大多数磁盘在工厂时作为制造过程的一部分就已低级格式化。这种格式化能让制造商测试磁盘，并且初始化逻辑块号到无损磁盘扇区的映射。对于许多磁盘，当磁盘控制器低级格式化磁盘时，还能指定在头部和尾部之间留下多长的数据区。通常有几个选择，如256、512和1024字节等。采用较大扇区来低级格式化磁盘，意味着每个磁道的扇区数会更少，但也意味着每个磁道的头部和尾部信息会更少，用户数据的可用空间会更多。有的操作系统只能处理512字节的扇区大小。&#xA;在可以使用磁盘存储文件之前，操作系统仍然需要将自己的数据结构记录在磁盘上。这分为两步：&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础53-磁盘连接</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8053-%E7%A3%81%E7%9B%98%E8%BF%9E%E6%8E%A5/</link>
      <pubDate>Wed, 25 Aug 2021 11:26:11 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8053-%E7%A3%81%E7%9B%98%E8%BF%9E%E6%8E%A5/</guid>
      <description>&lt;h1 id=&#34;操作系统基础53-磁盘连接&#34;&gt;操作系统基础53-磁盘连接&lt;/h1&gt;&#xA;&lt;p&gt;2021-02-04 02:24·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;计算机访问磁盘存储有3种方式：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;通过 I/O 端口（或直接连接存储(又称“直连式存储”，DAS))，小系统常采用这种方式；&lt;/li&gt;&#xA;&lt;li&gt;通过分布式文件系统的远程主机，这称为网络连接存储(NAS)；&lt;/li&gt;&#xA;&lt;li&gt;存储区域网络(SAN)适用于大型客户机-服务器环境；&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;直接连接存储das&#34;&gt;直接连接存储(DAS)&lt;/h1&gt;&#xA;&lt;p&gt;直接连接存储是通过本地 I/O 端口来访问的存储。这些端口使用多种技术。典型的台式PC采用I/O 总线架构，如IDE或 ATA。这类架构允许每条I/O总线最多支持两个驱动器。SATA 为更新的、类似的、布线更加简化的一个协议。&#xA;高端工作站和服务器通常采用更复杂的I/O架构，例如光纤通道(FC)。FC是一个高速的串行架构，运行在光纤或四芯铜线上。它有两个变体。一个是大的交换结构，具有24位地址空间。这个变体预计未来将占主导地位，是存储域网(SAN)的基础。&#xA;由于通信的较大地址空间和交换性质，多个主机和存储设备可以连到架构，使得 I/O 通信具有极大的灵活性。另一个FC变体是FC仲裁环路(FC-AL)，可以寻址126个设备（驱动器和控制器）。&#xA;多种存储设备适合用作主机连接存储；包括硬盘驱动器、RAID阵列、CD、DVD 和磁带驱动器。对主机连接存储设备进行数据传输的I/O命令是，针对特定存储单元（例如总线 ID 和目标逻辑单元）的逻辑数据块的读和写。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础52-磁盘物理结构</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8052-%E7%A3%81%E7%9B%98%E7%89%A9%E7%90%86%E7%BB%93%E6%9E%84/</link>
      <pubDate>Wed, 25 Aug 2021 11:18:53 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8052-%E7%A3%81%E7%9B%98%E7%89%A9%E7%90%86%E7%BB%93%E6%9E%84/</guid>
      <description>&lt;h1 id=&#34;操作系统基础52-磁盘物理结构&#34;&gt;操作系统基础52-磁盘物理结构&lt;/h1&gt;&#xA;&lt;p&gt;2021-02-03 01:25·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;磁盘&#34;&gt;磁盘&lt;/h1&gt;&#xA;&lt;p&gt;由于内存通常太小而且不能永久保存所有数据和程序，因此计算机系统必须提供外存来备份内存。现代计算机系统采用磁盘（硬盘）作为信息（程序与数据）的主要在线存储介质。换句话说，硬盘或磁盘为现代计算机系统提供大量外存。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础51-磁盘空间的分配方法</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8051-%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E7%9A%84%E5%88%86%E9%85%8D%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 25 Aug 2021 11:17:42 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8051-%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E7%9A%84%E5%88%86%E9%85%8D%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;h1 id=&#34;操作系统基础51-磁盘空间的分配方法&#34;&gt;操作系统基础51-磁盘空间的分配方法&lt;/h1&gt;&#xA;&lt;p&gt;2021-01-31 20:49·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;磁盘直接访问的特点在文件实现时提供了灵活性。在几乎每种情况下，很多文件都是存储在同一个磁盘上的。主要的问题是，如何为这些文件分配空间，以便有效使用磁盘空间和快速访问文件。&#xA;磁盘空间分配的主要常用方法有三个：&lt;strong&gt;连续分配、链接分配&lt;/strong&gt;和&lt;strong&gt;索引分配&lt;/strong&gt;。每个方法各有优缺点。虽然有些系统对这三种方法都支持。但是更为常见的是，一个系统只对同一文件系统类型的所有文件采用一种方法。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础50-文件系统实现</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8050-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 25 Aug 2021 11:16:12 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8050-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;h1 id=&#34;操作系统基础50-文件系统实现&#34;&gt;操作系统基础50-文件系统实现&lt;/h1&gt;&#xA;&lt;p&gt;2021-01-30 02:32·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;文件系统提供了在线存储和访问包括数据和程序在内的文件内容的机制，文件系统永久地驻留在外存上，外存可以永久存储大量数据。&lt;/p&gt;&#xA;&lt;h1 id=&#34;概述&#34;&gt;概述&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;1、&lt;strong&gt;在磁盘上，文件系统可能包括如下信息：&#xA;①如何启动所存储的操作系统②总的块数③空闲块的数目和位置④目录结构以及各个具体文件等&lt;/strong&gt;2、&lt;strong&gt;磁盘结构包括：&#xA;①(每个卷的)&lt;strong&gt;引导控制块(boot control block\Volume)&lt;/strong&gt;：通常为分区的第一块。如果该分区没有OS，则为空。(其他名称：引导块(Linux)、分区引导扇区(WindowsNT))&#xA;②(每个卷的)&lt;strong&gt;卷控制块(Volume control block (/volume）&lt;/strong&gt;：包括分区详细信息，如分区的块数、块的大小、空闲块的数量和指针、空闲FCB的数量和指针等(亦称为超级块(Linux)、主控文件表(WindowsNT))&#xA;③&lt;/strong&gt;目录结构&lt;/strong&gt;：用来组织文件&#xA;④&lt;strong&gt;文件控制块&lt;/strong&gt;（&lt;strong&gt;FCB&lt;/strong&gt;）：包括很多文件信息，如文件许可、拥有者、大小和数据块的位置等&#xA;**3、**一个典型的文件控制块包括：&#xA;文件权限、文件日期、文件所有者，组，ACL、文件尺寸、文件数据块&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://p6-tt.byteimg.com/origin/pgc-image/6c42b8afcb5242008421b91aff8b12c9?from=pc&#34; alt=&#34;操作系统基础50-文件系统实现&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础49-文件共享与保护</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8049-%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E4%B8%8E%E4%BF%9D%E6%8A%A4/</link>
      <pubDate>Wed, 25 Aug 2021 11:14:52 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8049-%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E4%B8%8E%E4%BF%9D%E6%8A%A4/</guid>
      <description>&lt;h1 id=&#34;操作系统基础49-文件共享与保护&#34;&gt;操作系统基础49-文件共享与保护&lt;/h1&gt;&#xA;&lt;p&gt;2021-01-29 02:34·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://p6-tt.byteimg.com/origin/pgc-image/bc2abd1f53eb406ba6848e352c66a3f4?from=pc&#34; alt=&#34;操作系统基础49-文件共享与保护&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;文件共享&#34;&gt;文件共享&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;1、多用户&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Linux是一个真实的、完整的多用户多任务操作系统，多用户多任务就是可以在系统上建立多个用户，而多个用户可以在同一时间内登录同一个系统执行各自不同的任务，而互不影响，例如某台linux服务器上有4个用户，分别是root、www、ftp和mysql，在同一时间内，root用户可能在查看系统日志，管理维护系统，www用户可能在修改自己的网页程序，ftp用户可能在上传软件到服务器，mysql用户可能在执行自己的SQL查询，每个用户互不干扰，有条不紊的进行着自己的工作，而每个用户之间不能越权访问，比如www用户不能执行mysql用户的SQL查询操作，ftp用户也不能修改www用户的网页程序，因此可知，不同用户具有不同的权限，每个用户是在权限允许的范围内完成不同的任务，linux正是通过这种权限的划分与管理，实现了多用户多任务的运行机制。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础48-目录结构</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8048-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</link>
      <pubDate>Wed, 25 Aug 2021 11:13:41 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8048-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</guid>
      <description>&lt;h1 id=&#34;操作系统基础48-目录结构&#34;&gt;操作系统基础48-目录结构&lt;/h1&gt;&#xA;&lt;p&gt;2021-01-28 02:06·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;1-存储结构&#34;&gt;1. 存储结构&lt;/h1&gt;&#xA;&lt;p&gt;文件存储在随机存取设备上，包括硬盘、光盘和固态(基于内存)盘。&lt;/p&gt;&#xA;&lt;p&gt;一个磁盘可以划分多个分区(partition)，每个分区可以有多个单独的文件系统。存储设备可以组成RAID集。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础47-文件访问方法</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8047-%E6%96%87%E4%BB%B6%E8%AE%BF%E9%97%AE%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 25 Aug 2021 11:12:32 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8047-%E6%96%87%E4%BB%B6%E8%AE%BF%E9%97%AE%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;h1 id=&#34;操作系统基础47-文件访问方法&#34;&gt;操作系统基础47-文件访问方法&lt;/h1&gt;&#xA;&lt;p&gt;2021-01-27 01:58·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;文件存储信息。当使用时，必须访问这种信息，并将其读到计算机内存。文件信息可按多种方式来访问。&lt;/p&gt;&#xA;&lt;h1 id=&#34;顺序访问sequential-access&#34;&gt;顺序访问(sequential access)&lt;/h1&gt;&#xA;&lt;p&gt;顺序访问就是打开文件后，一个字节一个字节的读，一个20Kb的文件，必须先读完前10Kb（即使不做任何操作），才能访问到第11Kb。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础46-文件系统</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8046-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Wed, 25 Aug 2021 11:11:07 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8046-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</guid>
      <description>&lt;h1 id=&#34;操作系统基础46-文件系统&#34;&gt;操作系统基础46-文件系统&lt;/h1&gt;&#xA;&lt;p&gt;2021-01-26 01:05·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://p1-tt.byteimg.com/origin/pgc-image/d9d47449d6ba4cd289f2cd1bac9a8af8?from=pc&#34; alt=&#34;操作系统基础46-文件系统&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;计算机可以在各种存储介质（诸如磁盘、磁带和光盘）上存储信息。为了方便使用计算机系统，操作系统提供了信息存储的统一逻辑视图。操作系统对存储设备的物理属性加以抽象，从而定义逻辑存储单位，即文件(&lt;strong&gt;file&lt;/strong&gt;)。文件由操作系统映射到物理设备上。这些存储设备通常是非易失性的，因此在系统重新启动之间内容可以持久。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础45-伙伴系统和slab内存分配</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8045-%E4%BC%99%E4%BC%B4%E7%B3%BB%E7%BB%9F%E5%92%8Cslab%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</link>
      <pubDate>Wed, 25 Aug 2021 00:13:53 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8045-%E4%BC%99%E4%BC%B4%E7%B3%BB%E7%BB%9F%E5%92%8Cslab%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</guid>
      <description>&lt;h1 id=&#34;操作系统基础45-伙伴系统和slab内存分配&#34;&gt;操作系统基础45-伙伴系统和slab内存分配&lt;/h1&gt;&#xA;&lt;p&gt;2021-01-25 13:48·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;当在用户模式下运行进程请求额外内存时，从内核维护的空闲页帧列表上分配页面。这个列表通常使用页面置换算法来填充，如前所述，它很可能包含散布在&lt;strong&gt;物理内存&lt;/strong&gt;中的空闲页面。也要记住，如果用户进程请求单个字节内存，那么就会导致内部碎片，因为进程会得到整个帧。&#xA;用于分配内核内存的空闲内存池通常不同于用于普通用户模式进程的列表。这有两个主要原因：&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础44-内存映射文件</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8044-%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6/</link>
      <pubDate>Wed, 25 Aug 2021 00:11:31 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8044-%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;h1 id=&#34;操作系统基础44-内存映射文件&#34;&gt;操作系统基础44-内存映射文件&lt;/h1&gt;&#xA;&lt;p&gt;2021-01-23 11:17·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;假设采用标准系统调用 &lt;strong&gt;open()、read()&lt;/strong&gt; 和 &lt;strong&gt;write()&lt;/strong&gt; 来顺序读取磁盘文件，每个文件访问都需要系统调用和磁盘访问。又或者采用虚拟内存技术，以将文件&lt;strong&gt;I/O&lt;/strong&gt;作为常规内存访问，这种方法称为内存映射文件，允许一部分虚拟内存与文件进行逻辑关联，这会导致显著的性能提高。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础43-帧分配</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8043-%E5%B8%A7%E5%88%86%E9%85%8D/</link>
      <pubDate>Wed, 25 Aug 2021 00:09:58 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8043-%E5%B8%A7%E5%88%86%E9%85%8D/</guid>
      <description>&lt;h1 id=&#34;操作系统基础43-帧分配&#34;&gt;操作系统基础43-帧分配&lt;/h1&gt;&#xA;&lt;p&gt;2021-01-22 23:00·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;如何在各个进程之间分配一定的空闲内存？&#xA;简单办法是将帧挂在空闲帧链表上，当发生页错误之时即进行分配。进程终止时帧再次放回空闲帧链表。&#xA;帧分配策略受到多方面限制。例如， 分配数不能超过可用帧数，也必须分配至少&lt;strong&gt;最少数量&lt;/strong&gt;。保证最少量的原因之一是涉及&lt;strong&gt;性能&lt;/strong&gt;。&lt;em&gt;&lt;strong&gt;缺页错误&lt;/strong&gt;&lt;/em&gt;增加会减慢进程的执行。并且，在指令完成前出现缺页错误，该指令必须重新执行。所以有足够的帧至关重要。&#xA;每个进程最少帧数由体系结构决定，而最大帧数是由可用物理内存的数量决定。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础42-系统抖动及解决方法</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8042-%E7%B3%BB%E7%BB%9F%E6%8A%96%E5%8A%A8%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 25 Aug 2021 00:08:22 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8042-%E7%B3%BB%E7%BB%9F%E6%8A%96%E5%8A%A8%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;h1 id=&#34;操作系统基础42-系统抖动及解决方法&#34;&gt;操作系统基础42-系统抖动及解决方法&lt;/h1&gt;&#xA;&lt;p&gt;2021-01-21 21:14·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;什么是系统抖动&#34;&gt;什么是系统抖动&lt;/h1&gt;&#xA;&lt;p&gt;如果低优先级进程所分配的帧数低于计算机体系结构所需的最小数量，那么必须暂停该进程执行。然后，应调出它的所有剩余页面，以便释放所有分配的帧。这个规定引入了中级CPU调度的换进换出层。&#xA;事实上，需要研究一下没有“足够”帧的进程。如果进程没有需要支持活动使用页面的帧数，那么它会很快产生缺页错误。此时，必须置换某个页面。然而，由于它的所有页面都在使用中，所以必须立即置换需要再次使用的页面。因此，它会再次快速产生缺页错误，再一次置换必须立即返回的页面，如此快速进行。&#xA;这种高度的页面调度活动称为抖动。如果一个进程的调页时间多于它的执行时间，那么这个进程就在抖动。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础41-LRU页面置换</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8041-lru%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2/</link>
      <pubDate>Wed, 25 Aug 2021 00:07:03 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8041-lru%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2/</guid>
      <description>&lt;h1 id=&#34;操作系统基础41-lru页面置换&#34;&gt;操作系统基础41-LRU页面置换&lt;/h1&gt;&#xA;&lt;p&gt;2021-01-06 11:53·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;如果最优算法不可行，那么最优算法的近似或许成为可能。&lt;strong&gt;FIFO&lt;/strong&gt;和&lt;strong&gt;最优页面置换(OPT)&lt;strong&gt;算法的关键区别在于，除了在时间上向后或向前看之外，&lt;strong&gt;FIFO&lt;/strong&gt;算法使用的是页面调入内存的时间，&lt;strong&gt;OPT&lt;/strong&gt;算法使用的是页面将来使用的时间。&#xA;如果我们使用最近的过去作为不远将来的近似，那么可以置换最长时间没有使用的页。这种方法称为&lt;/strong&gt;最近最少使用&lt;/strong&gt;(&lt;strong&gt;LRU&lt;/strong&gt;)算法。&#xA;&lt;strong&gt;LRU&lt;/strong&gt;置换将每个页面与它的上次使用的时间关联起来。当需要置换页面时，&lt;strong&gt;LRU&lt;/strong&gt;选择最长时间没有使用的页面。这种策略可当作在时间上向后看而不是向前看的最优页面置换算法。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础40-最优页面置换</title>
      <link>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8040-%E6%9C%80%E4%BC%98%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2/</link>
      <pubDate>Wed, 25 Aug 2021 00:05:44 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8040-%E6%9C%80%E4%BC%98%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2/</guid>
      <description>&lt;h1 id=&#34;操作系统基础40-最优页面置换&#34;&gt;操作系统基础40-最优页面置换&lt;/h1&gt;&#xA;&lt;p&gt;2021-01-06 01:28·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;发现 Belady 异常的一个结果是寻找&lt;strong&gt;最优页面置换算&lt;/strong&gt;法，这个算法具有所有算法的最低的缺页错误率，并且不会遭受Belady异常。这种算法确实存在，它被称为OPT或MIN。该算法的思想是：置换最长时间不会使用的页面。&#xA;这种页面置换算法确保对于给定数量的帧会产生最低的可能的缺页错误率。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础39-FIFO页面置换</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8039-fifo%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2/</link>
      <pubDate>Tue, 24 Aug 2021 23:33:30 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8039-fifo%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2/</guid>
      <description>&lt;h1 id=&#34;操作系统基础39-fifo页面置换&#34;&gt;操作系统基础39-FIFO页面置换&lt;/h1&gt;&#xA;&lt;p&gt;2021-01-04 01:25·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;进程运行时，若其访问的页面不在内存而需将其调入，但内存已无空闲空间时，就需要从内存中调出一页程序或数据，送入磁盘的对换区，其中选择调出页面的算法就称为&lt;strong&gt;页面置换算法&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础38-写时复制技术</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8038-%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Tue, 24 Aug 2021 23:31:51 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8038-%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6%E6%8A%80%E6%9C%AF/</guid>
      <description>&lt;h1 id=&#34;操作系统基础38-写时复制技术&#34;&gt;操作系统基础38-写时复制技术&lt;/h1&gt;&#xA;&lt;p&gt;2021-01-03 17:04·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;前面学习一个进程如何采用请求调页，仅调入包括第一条指令的页面，从而能够很 快开始执行。然而，通过系统调用 fork() 的进程创建最初可以通过使用类似于页面共享的技术，绕过请求调页的需要。这种技术提供了快速的进程创建，并最小化必须分配给新创建进程的新页面的数量&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础37-请求调页的性能</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8037-%E8%AF%B7%E6%B1%82%E8%B0%83%E9%A1%B5%E7%9A%84%E6%80%A7%E8%83%BD/</link>
      <pubDate>Tue, 24 Aug 2021 23:30:08 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8037-%E8%AF%B7%E6%B1%82%E8%B0%83%E9%A1%B5%E7%9A%84%E6%80%A7%E8%83%BD/</guid>
      <description>&lt;h1 id=&#34;操作系统基础37-请求调页的性能&#34;&gt;操作系统基础37-请求调页的性能&lt;/h1&gt;&#xA;&lt;p&gt;2020-12-29 01:08·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;请求调页可以显著影响计算机系统的性能。为了说明起见，下面计算一下请求调页内存的有效访问时间。&#xA;对大多数计算机系统而言，&lt;strong&gt;内存访问时间&lt;/strong&gt;(用&lt;strong&gt;ma&lt;/strong&gt;表示)的范围为10〜200ns。只要没有出现缺页错误，有效访问时间就等于内存访问时间。然而，如果出现缺页错误，那么就应先从磁盘中读入相关页面，再访问所需要的字。&#xA;设 &lt;strong&gt;p&lt;/strong&gt; 为&lt;strong&gt;缺页错误的概率&lt;/strong&gt;(&lt;strong&gt;0≤p≤1&lt;/strong&gt;)。希望&lt;strong&gt;p&lt;/strong&gt;接近于&lt;strong&gt;0&lt;/strong&gt;，即缺页错误很少。那么有效访问时间为：&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础36-请求页面调度概念</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8036-%E8%AF%B7%E6%B1%82%E9%A1%B5%E9%9D%A2%E8%B0%83%E5%BA%A6%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Tue, 24 Aug 2021 22:36:26 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8036-%E8%AF%B7%E6%B1%82%E9%A1%B5%E9%9D%A2%E8%B0%83%E5%BA%A6%E6%A6%82%E5%BF%B5/</guid>
      <description>&lt;h1 id=&#34;操作系统基础36-请求页面调度概念&#34;&gt;操作系统基础36-请求页面调度概念&lt;/h1&gt;&#xA;&lt;p&gt;2020-12-28 10:54·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;如何从磁盘加载可执行程序到内存?&#xA;一种选择是在程序执行时将整个程序加载到物理内存，这种方法的问题是最初可能不需要整个程序都处于内存。假设程序开始时带有一组用户可选的选项。加载整个程序会导致所有选项的执行代码都加载到内存中，而不管这些选项是否最终使用。&#xA;另一种策略是仅在需要时才加载页面。这种技术被称为&lt;strong&gt;请求调页&lt;/strong&gt;，常常用于&lt;strong&gt;虚拟内存系统&lt;/strong&gt;。对于请求调页的虚拟内存，页面只有在程序执行期间被请求时才被加载。因此，从未访问的那些页从不加载到物理内存中。&#xA;&lt;strong&gt;请求调页&lt;/strong&gt;系统类似于具有交换的分页系统，如下图所示，这里进程驻留在外存上（通常为磁盘）。当进程需要执行时，它被交换到内存中。不过，不是将整个进程交换到内存中，而是采用惰性交换器。惰性交换器除非需要某个页面，否则从不将它交换到内存中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础35-什么是虚拟内存</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8035-%E4%BB%80%E4%B9%88%E6%98%AF%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</link>
      <pubDate>Tue, 24 Aug 2021 22:25:55 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8035-%E4%BB%80%E4%B9%88%E6%98%AF%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</guid>
      <description>&lt;h1 id=&#34;操作系统基础35-什么是虚拟内存&#34;&gt;操作系统基础35-什么是虚拟内存&lt;/h1&gt;&#xA;&lt;p&gt;2020-12-27 15:32·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;分页，分段这些策略都有相同的目标，就是同时将多个进程保存在内存中，以便允许多道程序。然而，这些策略都倾向于要求每个进程在执行之前应完全处于内存中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础34-页表结构</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8034-%E9%A1%B5%E8%A1%A8%E7%BB%93%E6%9E%84/</link>
      <pubDate>Tue, 24 Aug 2021 22:24:42 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8034-%E9%A1%B5%E8%A1%A8%E7%BB%93%E6%9E%84/</guid>
      <description>&lt;h1 id=&#34;操作系统基础34-页表结构&#34;&gt;操作系统基础34-页表结构&lt;/h1&gt;&#xA;&lt;p&gt;2020-12-24 13:01·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;下面将探讨组织页表的一些最常用技术，包括&lt;strong&gt;分层分页&lt;/strong&gt;、&lt;strong&gt;哈希页表&lt;/strong&gt;和&lt;strong&gt;倒置页表&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h1 id=&#34;分层分页&#34;&gt;分层分页&lt;/h1&gt;&#xA;&lt;p&gt;大多数现代计算机系统支持大逻辑地址空间（2^32〜2^64）。在这种情况下，页表本身可以非常大。例如，假设具有 32 位逻辑地址空间的一个计算机系统。如果系统的页大小为4KB（2^12），那么页表可以多达 100万的条目（2^32/2^12）。假设每个条目有4字节，那么每个进程需要4MB 物理地址空间来存储页表本身。显然，我们并不想在内存中连续地分配这个页表。这个问题的一个简单解决方法是将页表划分为更小的块。完成这种划分有多个方法。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础33-内存管理-分页</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8033-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%88%86%E9%A1%B5/</link>
      <pubDate>Tue, 24 Aug 2021 22:23:15 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8033-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%88%86%E9%A1%B5/</guid>
      <description>&lt;h1 id=&#34;操作系统基础33-内存管理-分页&#34;&gt;操作系统基础33-内存管理-分页&lt;/h1&gt;&#xA;&lt;p&gt;2020-12-21 12:10·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;分段&lt;/strong&gt;允许进程的物理地址空间是非连续的。&lt;strong&gt;分页&lt;/strong&gt;是提供这种优势的另一种内存管理方案。然而，分页避免了外部碎片和紧缩，而分段不可以。分页还避免了将不同大小的内存块匹配到交换空间的问题，在分页引入之前采用的内存管理方案都有这个问题。由于比早期方法更加优越，各种形式的分页为大多数操作系统采用，包括大型机的和智能手机的操作系统。实现分页需要操作系统和计算机硬件的协作。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础32-内存管理-分段</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8032-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%88%86%E6%AE%B5/</link>
      <pubDate>Tue, 24 Aug 2021 22:21:41 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8032-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%88%86%E6%AE%B5/</guid>
      <description>&lt;h1 id=&#34;操作系统基础32-内存管理-分段&#34;&gt;操作系统基础32-内存管理-分段&lt;/h1&gt;&#xA;&lt;p&gt;2020-12-20 03:27·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;通过前面的学习我们知道，用户的&lt;strong&gt;内存视图&lt;/strong&gt;与实际的&lt;strong&gt;物理内存&lt;/strong&gt;不一样。这同样适用于程序员的内存视图。&lt;/p&gt;&#xA;&lt;p&gt;事实上，对操作系统和程序员来说，按物理性质来处理内存是不方便的。如果硬件可以提供内存机制，以便将程序员的内存视图映射到实际的物理内存，系统将有更多的自由来管理内存，而程序员将有一个更自然的编程环境。&lt;strong&gt;分段&lt;/strong&gt;提供了这种机制。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础31-连续内存分配</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8031-%E8%BF%9E%E7%BB%AD%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</link>
      <pubDate>Tue, 24 Aug 2021 22:19:46 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8031-%E8%BF%9E%E7%BB%AD%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</guid>
      <description>&lt;h1 id=&#34;操作系统基础31-连续内存分配&#34;&gt;操作系统基础31-连续内存分配&lt;/h1&gt;&#xA;&lt;p&gt;2020-12-19 03:40·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;内存应容纳操作系统和各种用户进程，因此应该尽可能有效地分配内存。下面介绍一种早期方法：连续内存分配。&#xA;内存通常分为两个区域：一个用于驻留操作系统，另一个用于用户进程。操作系统可以放在低内存，也可放在高内存，这取决于中断向量的位置。由于中断向量通常位于低内存，因此程序员通常将操作系统也放在低内存。因此，这里只讨论操作系统位于低内存的情况，其他情况的讨论也类似。&#xA;通常，我们需要将多个进程同时放在内存中。因此我们需要考虑，如何为输入队列中需要调入内存的进程分配内存空间。在采用连续内存分配时，每个进程位于一个连续的内存区域，与包含下一个进程的内存相连。&lt;/p&gt;</description>
    </item>
    <item>
      <title>HyperLogLog 算法详解</title>
      <link>http://shanks.link/blog/2021/08/24/hyperloglog-%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 24 Aug 2021 18:23:20 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/24/hyperloglog-%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;p&gt;首发于&lt;a href=&#34;https://www.zhihu.com/column/techcats&#34;&gt;技术猫开源俱乐部&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;hyperloglog-算法详解&#34;&gt;HyperLogLog 算法详解&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/people/abserari&#34;&gt;Abser Ari&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;基数计数基本概念&#34;&gt;基数计数基本概念&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://pic4.zhimg.com/80/v2-d1c9f07d292ba8a9fe2ea93a246ee377_1440w.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;概率算法&#34;&gt;概率算法&lt;/h2&gt;&#xA;&lt;p&gt;实际上目前还没有发现更好的在大数据场景中准确计算基数的高效算法，因此在不追求绝对准确的情况下，使用概率算法算是一个不错的解决方案。概率算法不直接存储数据集合本身，通过一定的概率统计方法预估基数值，这种方法可以大大节省内存，同时保证误差控制在一定范围内。目前用于基数计数的概率算法包括:&lt;/p&gt;</description>
    </item>
    <item>
      <title>两数字之和</title>
      <link>http://shanks.link/blog/2021/08/25/%E4%B8%A4%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Wed, 25 Aug 2021 01:04:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/08/25/%E4%B8%A4%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/</guid>
      <description>&lt;h3 id=&#34;场景描述&#34;&gt;场景描述&lt;/h3&gt;&#xA;&lt;p&gt;给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。&lt;/p&gt;&#xA;&lt;p&gt;你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。&lt;/p&gt;</description>
    </item>
    <item>
      <title>单链表-反转</title>
      <link>http://shanks.link/blog/2021/08/25/%E5%8D%95%E9%93%BE%E8%A1%A8-%E5%8F%8D%E8%BD%AC/</link>
      <pubDate>Wed, 25 Aug 2021 00:56:24 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/08/25/%E5%8D%95%E9%93%BE%E8%A1%A8-%E5%8F%8D%E8%BD%AC/</guid>
      <description>&lt;h3 id=&#34;问题描述&#34;&gt;问题描述&lt;/h3&gt;&#xA;&lt;p&gt;给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。&#xA;&lt;img src=&#34;http://shanks.link/img/%E9%93%BE%E8%A1%A8-%E5%8D%95%E9%93%BE%E8%A1%A8-%E5%8F%8D%E8%BD%AC/1.jpg&#34; alt=&#34;示范输入&#34;&gt;&#xA;&lt;img src=&#34;http://shanks.link/img/%E9%93%BE%E8%A1%A8-%E5%8D%95%E9%93%BE%E8%A1%A8-%E5%8F%8D%E8%BD%AC/2.png&#34; alt=&#34;示范输入&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;解答代码&#34;&gt;解答代码&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * Definition for singly-linked list.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * struct ListNode {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; *     int val;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; *     struct ListNode *next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; ListNode* &lt;span style=&#34;color:#c34e00&#34;&gt;reverseList&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; ListNode* head){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; ListNode *pre = NULL, *cur =  head, *next = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (cur) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        next = cur-&amp;gt;next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur-&amp;gt;next = pre;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pre = cur;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur = next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; pre;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>操作系统基础30-内存交换</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8030-%E5%86%85%E5%AD%98%E4%BA%A4%E6%8D%A2/</link>
      <pubDate>Tue, 24 Aug 2021 11:50:20 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8030-%E5%86%85%E5%AD%98%E4%BA%A4%E6%8D%A2/</guid>
      <description>&lt;h1 id=&#34;操作系统基础30-内存交换&#34;&gt;操作系统基础30-内存交换&lt;/h1&gt;&#xA;&lt;p&gt;2020-12-17 15:21·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;进程必须在内存中以便执行。不过，进程可以暂时从内存交换到备份存储，当再次执行时再调回到内存中(图 1)。交换有可能让所有进程的总的物理地址空间超过真实系统的物理地址空间，从而增加了系统的多道程序程度。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础29-内存管理的概念</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8029-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%9A%84%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Tue, 24 Aug 2021 11:44:12 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8029-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%9A%84%E6%A6%82%E5%BF%B5/</guid>
      <description>&lt;h1 id=&#34;操作系统基础29-内存管理的概念&#34;&gt;操作系统基础29-内存管理的概念&lt;/h1&gt;&#xA;&lt;p&gt;2020-12-18 03:37·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;操作系统作为系统资源的管理者，当然也需要对内存进行管理，要管些什么呢?&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;\1. 操作系统负责内存空间的分配与回收。&lt;/p&gt;&#xA;&lt;p&gt;\2. 操作系统需要提供某种技术从逻辑.上对内存空间进行扩充。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础28-内存基础知识</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8028-%E5%86%85%E5%AD%98%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Tue, 24 Aug 2021 11:42:30 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8028-%E5%86%85%E5%AD%98%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>&lt;h1 id=&#34;操作系统基础28-内存基础知识&#34;&gt;操作系统基础28-内存基础知识&lt;/h1&gt;&#xA;&lt;p&gt;2020-12-16 05:59·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;什么是内存有何作用&#34;&gt;什么是内存，有何作用&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://p6-tt.byteimg.com/origin/pgc-image/f73fa5bc910441aab424f5f90f574333?from=pc&#34; alt=&#34;操作系统基础28-内存基础知识&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;进程运行的原理-指令&#34;&gt;进程运行的原理-指令&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://p3-tt.byteimg.com/origin/pgc-image/a1580be9b97d4614b0c22efc54294e0e?from=pc&#34; alt=&#34;操作系统基础28-内存基础知识&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;我们写的代码要翻译成&lt;strong&gt;CPU&lt;/strong&gt;能识别的指令。这些指令会告诉CPU应该去内存的哪个地址存/取数据，这个数据应该做什么样的处理。在这个例子中，指令中直接给出了变量x的实际存放地址(物理地址)。但实际在生成机器指令的时候并不知道该进程的数据会被放到什么位置。所以编译生成的指令中一般是使用&lt;strong&gt;逻辑地址&lt;/strong&gt;(相对地址)。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础27-存储器管理</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8027-%E5%AD%98%E5%82%A8%E5%99%A8%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 24 Aug 2021 11:40:53 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8027-%E5%AD%98%E5%82%A8%E5%99%A8%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;h1 id=&#34;操作系统基础27-存储器管理&#34;&gt;操作系统基础27-存储器管理&lt;/h1&gt;&#xA;&lt;p&gt;2020-12-15 13:37·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;　　在前面学习了处理器调度后，下面接着学习存储器管理，如何对存储器进行有效的管理，直接影响着存储器的利用率和系统性能。&lt;/p&gt;&#xA;&lt;h1 id=&#34;存储器的层次结构&#34;&gt;存储器的层次结构&lt;/h1&gt;&#xA;&lt;p&gt;　　1.&lt;strong&gt;主存储器&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础26-多级反馈队列调度算法</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8026-%E5%A4%9A%E7%BA%A7%E5%8F%8D%E9%A6%88%E9%98%9F%E5%88%97%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 24 Aug 2021 01:11:41 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8026-%E5%A4%9A%E7%BA%A7%E5%8F%8D%E9%A6%88%E9%98%9F%E5%88%97%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h1 id=&#34;操作系统基础26-多级反馈队列调度算法&#34;&gt;操作系统基础26-多级反馈队列调度算法&lt;/h1&gt;&#xA;&lt;p&gt;2020-12-02 01:54·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;通常在使用**&lt;a href=&#34;https://www.toutiao.com/i6901145871342109196/?group_id=6901145871342109196&#34;&gt;多级队列调度算法&lt;/a&gt;**时，进程进入系统时被永久地分配到某个队列。例如，如果前台和后台进程分别具有单独队列，那么进程并不从一个队列移到另一个队列，这是因为进程不会改变前台或后台的性质。这种设置的优点是调度开销低，缺点是不够灵活。&lt;/p&gt;&#xA;&lt;p&gt;相反，&lt;strong&gt;多级反馈队列(multievel feedback queue)调度算法&lt;/strong&gt;允许进程在队列之间迁移。这种想法是，根据不同&lt;strong&gt;CPU&lt;/strong&gt;执行的特点来区分进程。如果进程使用过多的&lt;strong&gt;CPU&lt;/strong&gt;时间，那么它会被移到更低的优先级队列。这种方案将&lt;strong&gt;I/O&lt;/strong&gt;密集型和交互进程放在更高优先级队列上。 此外，在较低优先级队列中等待过长的进程会被移到更高优先级队列。这种形式的优化可阻止饥饿的发生。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础25-多级队列调度算法</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8025-%E5%A4%9A%E7%BA%A7%E9%98%9F%E5%88%97%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 24 Aug 2021 01:10:32 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8025-%E5%A4%9A%E7%BA%A7%E9%98%9F%E5%88%97%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h1 id=&#34;操作系统基础25-多级队列调度算法&#34;&gt;操作系统基础25-多级队列调度算法&lt;/h1&gt;&#xA;&lt;p&gt;2020-12-01 13:30·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;在&lt;strong&gt;进程&lt;/strong&gt;容易分成不同组的情况下，可以有另一类调度算法。例如，进程通常分为&lt;strong&gt;前台进程(foreground process)&lt;/strong&gt;(或交互进程)和&lt;strong&gt;后台进程(background process)&lt;/strong&gt;(或批处理进程)。这两种类型的进程具有不同的响应时间要求，进而也有不同调度需要。另外，与&lt;strong&gt;后台进程&lt;/strong&gt;相比，&lt;strong&gt;前台进程&lt;/strong&gt;可能要有更高的优先级(外部定义)。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础24-轮转调度</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8024-%E8%BD%AE%E8%BD%AC%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Tue, 24 Aug 2021 01:09:12 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8024-%E8%BD%AE%E8%BD%AC%E8%B0%83%E5%BA%A6/</guid>
      <description>&lt;h1 id=&#34;操作系统基础24-轮转调度rr算法&#34;&gt;操作系统基础24-轮转调度(RR)算法&lt;/h1&gt;&#xA;&lt;p&gt;2020-11-30 11:05·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;时间片轮转（RR）&lt;strong&gt;调度算法是专门为分时系统设计的。它类似于&lt;/strong&gt;FCFS&lt;/strong&gt;调度，但是增加了抢占以切换进程。也称为&lt;strong&gt;时间片技术&lt;/strong&gt;(&lt;strong&gt;time slicing，SL&lt;/strong&gt;)。&#xA;该算法中，将一个较小时间单元定义为&lt;strong&gt;时间量&lt;/strong&gt;或&lt;strong&gt;时间片&lt;/strong&gt;。时间片的大小通常为10~100ms。就绪队列作为循环队列。&lt;strong&gt;CPU&lt;/strong&gt;调度程序循环整个就绪队列，为每个进程分配不超过一个时间片的&lt;strong&gt;CPU&lt;/strong&gt;。&#xA;为了实现&lt;strong&gt;RR&lt;/strong&gt;调度，我们再次将就绪队列视为进程的&lt;strong&gt;FIFO&lt;/strong&gt; 队列。新进程添加到就绪队列的尾部。&lt;strong&gt;CPU&lt;/strong&gt;调度程序从就绪队列中选择第一个进程，将定时器设置在一个时间片后中断，最后分派这个进程。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础23-优先级调度算法</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8023-%E4%BC%98%E5%85%88%E7%BA%A7%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 24 Aug 2021 01:07:39 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8023-%E4%BC%98%E5%85%88%E7%BA%A7%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h1 id=&#34;操作系统基础23-优先级调度算法&#34;&gt;操作系统基础23-优先级调度算法&lt;/h1&gt;&#xA;&lt;p&gt;2020-11-29 17:17·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;上一篇学习了&lt;a href=&#34;https://www.toutiao.com/i6900087980027838980/?group_id=6900087980027838980&#34;&gt;最短作业优先(SJF)算法&lt;/a&gt;是通用&lt;strong&gt;优先级调度(priority-scheduling)&lt;strong&gt;算法的一个特例。每个进程都有一个优先级与其关联，而具有最高优先级的进程会分配到&lt;/strong&gt;CPU&lt;/strong&gt;。具有相同优先级的进程按&lt;strong&gt;FCFS&lt;/strong&gt;顺序调度。&lt;strong&gt;SJF&lt;/strong&gt;算法是一个简单的优先级算法，其优先级(p)为下次（预测的）&lt;strong&gt;CPU&lt;/strong&gt; 执行的倒数。&lt;strong&gt;CPU&lt;/strong&gt; 执行越长，则优先级越小；反之亦然。&lt;/p&gt;&#xA;&lt;p&gt;举个例子，假设有如下一组进程，它们在时间 0 按顺序 P1，P2，…，P5 到达，其&lt;strong&gt;CPU&lt;/strong&gt;执行时间以 ms 计：&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础22-最短作业优先(SJF)调度算法</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8022-%E6%9C%80%E7%9F%AD%E4%BD%9C%E4%B8%9A%E4%BC%98%E5%85%88sjf%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 24 Aug 2021 01:04:12 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8022-%E6%9C%80%E7%9F%AD%E4%BD%9C%E4%B8%9A%E4%BC%98%E5%85%88sjf%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h1 id=&#34;操作系统基础22-最短作业优先sjf调度算法&#34;&gt;操作系统基础22-最短作业优先(SJF)调度算法&lt;/h1&gt;&#xA;&lt;p&gt;2020-11-28 17:16·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;最短作业优先&lt;/strong&gt;( &lt;strong&gt;Shortest Job First&lt;/strong&gt; &lt;strong&gt;SJF&lt;/strong&gt;)调度算法将每个进程与其下次&lt;strong&gt;CPU&lt;/strong&gt;执行的长度关联起来。当&lt;strong&gt;CPU&lt;/strong&gt;变为空闲时，它会被赋给具有最短&lt;strong&gt;CPU&lt;/strong&gt;执行的进程。如果两个进程具有同样长度的&lt;strong&gt;CPU&lt;/strong&gt;执行，那么可以由**先到先服务(FCFS)**调度算法来处理。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础21-先来先服务调度(FCFS)算法</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8021-%E5%85%88%E6%9D%A5%E5%85%88%E6%9C%8D%E5%8A%A1%E8%B0%83%E5%BA%A6fcfs%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 24 Aug 2021 00:35:44 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8021-%E5%85%88%E6%9D%A5%E5%85%88%E6%9C%8D%E5%8A%A1%E8%B0%83%E5%BA%A6fcfs%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h1 id=&#34;操作系统基础21-先来先服务调度fcfs算法&#34;&gt;操作系统基础21-先来先服务调度(FCFS)算法&lt;/h1&gt;&#xA;&lt;p&gt;2020-11-24 09:51·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;作业、进程和程序之间的联系：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;一个&lt;strong&gt;作业&lt;/strong&gt;(&lt;strong&gt;job&lt;/strong&gt;)通常包括&lt;strong&gt;程序&lt;/strong&gt;、&lt;strong&gt;数据&lt;/strong&gt;和&lt;strong&gt;操作说明书&lt;/strong&gt;3部分。每一个&lt;strong&gt;进程&lt;/strong&gt;由&lt;strong&gt;PCB&lt;/strong&gt;、&lt;strong&gt;程序&lt;/strong&gt;和&lt;strong&gt;数据集合&lt;/strong&gt;组成。这说明程序是进程的一部分，是进程的实体。因此，一个作业可划分为若干个进程来完成，而每一个进程有其实体——程序和数据集合&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础20-调度算法的评价指标</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8020-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%E7%9A%84%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/</link>
      <pubDate>Tue, 24 Aug 2021 00:28:29 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8020-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%E7%9A%84%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/</guid>
      <description>&lt;h1 id=&#34;操作系统基础20-调度算法的评价指标&#34;&gt;操作系统基础20-调度算法的评价指标&lt;/h1&gt;&#xA;&lt;p&gt;2020-11-23 10:08·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;不同的&lt;strong&gt;CPU&lt;/strong&gt;调度算法具有不同属性，选择一个特定算法会对某些进程更为有利。为了选择算法以便用于特定情景，我们必须考虑各个算法的属性。&#xA;为了比较&lt;strong&gt;CPU&lt;/strong&gt;调度算法，可以采用许多比较准则。选择哪些特征来比较，对于确定哪种算法是最好的有本质上的区别。这些准则包括：&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础19-CPU调度</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8019-cpu%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Tue, 24 Aug 2021 00:26:41 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8019-cpu%E8%B0%83%E5%BA%A6/</guid>
      <description>&lt;h1 id=&#34;操作系统基础19-cpu调度&#34;&gt;操作系统基础19-CPU调度&lt;/h1&gt;&#xA;&lt;p&gt;2020-11-20 13:11·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;本节是对&lt;a href=&#34;https://www.toutiao.com/i6889224598341190155/?group_id=6889224598341190155&#34;&gt;操作系统基础12-进程调度&lt;/a&gt;的一个补充学习。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;CPU调度&lt;/strong&gt;是&lt;strong&gt;多道程序&lt;/strong&gt;操作系统的基础。通过在进程间切换&lt;strong&gt;CPU&lt;/strong&gt;，操作系统可以使得计算机更加高效。&#xA;对于&lt;strong&gt;单处理器系统&lt;/strong&gt;，同一时间只有一个进程可以运行；其他进程都应等待，直到&lt;strong&gt;CPU&lt;/strong&gt;空闲并可调度为止。&lt;strong&gt;多道程序&lt;/strong&gt;的目标是，始终允许某个进程运行以最大化CPU利用率。这种想法比较简单。一个进程执行直到它应等待为止，通常等待某个 &lt;strong&gt;I/O&lt;/strong&gt; 请求的完成。对于简单的计算机系统，&lt;strong&gt;CPU&lt;/strong&gt;就处于闲置状态。所有这些等待时间就会浪费，没有完成任何有用的工作。采用多道程序，我们试图有效利用这个时间。多个进程同时处于内存。当一个进程等待时，操作系统就从该进程接管&lt;strong&gt;CPU&lt;/strong&gt;控制，并将&lt;strong&gt;CPU&lt;/strong&gt;交给另一进程。这种方式不断重复。当一个进程必须等待时，另一进程接管&lt;strong&gt;CPU&lt;/strong&gt;使用权。&#xA;这种调度是操作系统的基本功能。几乎所有计算机资源在使用前都要调度。当然，&lt;strong&gt;CPU&lt;/strong&gt;是最重要的计算机资源之一。因此，&lt;strong&gt;CPU&lt;/strong&gt;调度是操作系统设计的重要部分。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础18-死锁</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8018-%E6%AD%BB%E9%94%81/</link>
      <pubDate>Tue, 24 Aug 2021 00:25:10 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8018-%E6%AD%BB%E9%94%81/</guid>
      <description>&lt;h1 id=&#34;操作系统基础18-死锁&#34;&gt;操作系统基础18-死锁&lt;/h1&gt;&#xA;&lt;p&gt;2020-11-18 10:19·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;在多道程序环境中，多个进程可以竞争有限数量的资源。当一个进程申请资源时，如果这时没有可用资源，那么这个进程进入等待状态。有时，如果所申请的资源被其他等待进程占有，那么该等待进程有可能再也无法改变状态。这种情况称为&lt;strong&gt;死锁&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础17-哲学家就餐问题</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8017-%E5%93%B2%E5%AD%A6%E5%AE%B6%E5%B0%B1%E9%A4%90%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 24 Aug 2021 00:23:44 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8017-%E5%93%B2%E5%AD%A6%E5%AE%B6%E5%B0%B1%E9%A4%90%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;h1 id=&#34;操作系统基础17-哲学家就餐问题&#34;&gt;操作系统基础17-哲学家就餐问题&lt;/h1&gt;&#xA;&lt;p&gt;2020-11-13 15:55·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;哲学家就餐问题&lt;/strong&gt;(&lt;strong&gt;dining-philosophers problem&lt;/strong&gt;)是一个经典的进程之间的同步互斥问题。该问题是&lt;strong&gt;1965&lt;/strong&gt;年由荷兰学者Dijkstra提出的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础16-读者写者问题</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8016-%E8%AF%BB%E8%80%85%E5%86%99%E8%80%85%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 24 Aug 2021 00:22:24 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8016-%E8%AF%BB%E8%80%85%E5%86%99%E8%80%85%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;h1 id=&#34;操作系统基础16-读者写者问题&#34;&gt;操作系统基础16-读者写者问题&lt;/h1&gt;&#xA;&lt;p&gt;2020-11-12 00:56·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;进程同步问题&lt;/strong&gt;是一个非常重要且相当有趣的问题，本篇我们对其中比较有名的&lt;strong&gt;读者-写者问题&lt;/strong&gt;来进行学习。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://p1-tt.byteimg.com/origin/pgc-image/e0e739ded63642ff8f0ec46654168d2f?from=pc&#34; alt=&#34;操作系统基础16-读者写者问题&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;读者-写者&lt;/p&gt;&#xA;&lt;h1 id=&#34;问题描述&#34;&gt;问题描述&lt;/h1&gt;&#xA;&lt;p&gt;假设一个数据库为多个并发进程所共享。有的进程可能只需要读数据库，而另一些进程可能更新(即&lt;strong&gt;读&lt;/strong&gt;和&lt;strong&gt;写&lt;/strong&gt;)数据库。为了区分这两种类型的进程，我们称前者为&lt;strong&gt;读者&lt;/strong&gt;(&lt;strong&gt;Reader&lt;/strong&gt;)，称后者为&lt;strong&gt;写者&lt;/strong&gt;(&lt;strong&gt;Writer&lt;/strong&gt;)。显然，如果多个&lt;strong&gt;读者同时访问&lt;/strong&gt;共享数据，而不会产生副作用。但如果某个&lt;strong&gt;写者&lt;/strong&gt;和其他进程**(或读者或写者)**同时访问数据库时可能导致数据不一致的错误。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础15-生产者消费者问题</title>
      <link>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8015-%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 24 Aug 2021 00:20:52 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8015-%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;h1 id=&#34;操作系统基础15-生产者消费者问题&#34;&gt;操作系统基础15-生产者消费者问题&lt;/h1&gt;&#xA;&lt;p&gt;2020-11-11 11:37·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;在&lt;a href=&#34;https://www.toutiao.com/i6893419548255453700/?group_id=6893419548255453700&#34;&gt;上一篇操作系统基础14&lt;/a&gt;提到通过&lt;strong&gt;信号量&lt;/strong&gt;解决生产者消费者问题。本篇来详细说说&lt;strong&gt;操作系统中的经典问题-生成者消费者问题&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;生产者消费者问题-producer-consumer-problem&#34;&gt;生产者消费者问题 (Producer-consumer problem)&lt;/h1&gt;&#xA;&lt;p&gt;该问题是一个著名的同步问题。通俗的描述是：一群生产者进程正在生产产品，并将这些产品提供给消费者进程去消费。为使生产者和消费者能够并发执行。在两者之间设置了一个公共区域，生产者进入公共区域生产产品并放入其中。消费者进入公共区域并取走产品进行消费。&lt;/p&gt;</description>
    </item>
    <item>
      <title>redis源码推荐阅读顺序</title>
      <link>http://shanks.link/blog/2021/08/23/redis%E6%BA%90%E7%A0%81%E6%8E%A8%E8%8D%90%E9%98%85%E8%AF%BB%E9%A1%BA%E5%BA%8F/</link>
      <pubDate>Mon, 23 Aug 2021 19:45:13 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/23/redis%E6%BA%90%E7%A0%81%E6%8E%A8%E8%8D%90%E9%98%85%E8%AF%BB%E9%A1%BA%E5%BA%8F/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.huangz.me/diary/2014/how-to-read-redis-source-code.html#&#34;&gt;转载自黄健宏的博客&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;在这篇文章中， 我将向大家介绍一种我认为比较合理的 Redis 源码阅读顺序， 希望可以给对 Redis 有兴趣并打算阅读 Redis 源码的朋友带来一点帮助。&lt;/p&gt;&#xA;&lt;h2 id=&#34;第-1-步阅读数据结构实现&#34;&gt;第 1 步：阅读数据结构实现&lt;/h2&gt;&#xA;&lt;p&gt;刚开始阅读 Redis 源码的时候， 最好从数据结构的相关文件开始读起， 因为这些文件和 Redis 中的其他部分耦合最少， 并且这些文件所实现的数据结构在大部分算法书上都可以了解到， 所以从这些文件开始读是最轻松的、难度也是最低的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>redis独立模块-慢查询日志</title>
      <link>http://shanks.link/blog/2021/08/23/redis%E7%8B%AC%E7%AB%8B%E6%A8%A1%E5%9D%97-%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97/</link>
      <pubDate>Mon, 23 Aug 2021 16:02:14 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/23/redis%E7%8B%AC%E7%AB%8B%E6%A8%A1%E5%9D%97-%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97/</guid>
      <description>&lt;h3 id=&#34;数据结构&#34;&gt;数据结构&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* This structure defines an entry inside the slow log list */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;typedef &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; slowlogEntry {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    robj **argv;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; argc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    long long id;       &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Unique entry identifier. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    long long duration; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Time spent by the query, in nanoseconds. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    time_t time;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Unix time at which the query was executed. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} slowlogEntry;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;特点&#34;&gt;特点&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;超过阈值时长的操作会被记录(不写入硬盘)&lt;/li&gt;&#xA;&lt;li&gt;仅记录最近N(配置)条记录&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>操作系统基础14-同步与互斥机制</title>
      <link>http://shanks.link/blog/2021/08/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8014-%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BA%92%E6%96%A5%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sun, 22 Aug 2021 11:49:52 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8014-%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BA%92%E6%96%A5%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;h1 id=&#34;操作系统基础14-同步与互斥机制&#34;&gt;操作系统基础14-同步与互斥机制&lt;/h1&gt;&#xA;&lt;p&gt;2020-11-10 22:55·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;上一篇介绍操心系统中的同步互斥的基本概念，本篇继续对同步互斥进行学习&lt;/p&gt;&#xA;&lt;h1 id=&#34;锁机制&#34;&gt;锁机制&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;基本概念&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;锁是一个更高等级的编程抽象。&lt;/p&gt;&#xA;&lt;p&gt;包含一个二进制变量（锁定/解锁），两个操作：&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础13-进程同步与互斥的概念</title>
      <link>http://shanks.link/blog/2021/08/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8013-%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BA%92%E6%96%A5%E7%9A%84%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Sun, 22 Aug 2021 11:22:53 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8013-%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BA%92%E6%96%A5%E7%9A%84%E6%A6%82%E5%BF%B5/</guid>
      <description>&lt;h1 id=&#34;操作系统基础13-进程同步与互斥的概念&#34;&gt;操作系统基础13-进程同步与互斥的概念&lt;/h1&gt;&#xA;&lt;p&gt;2020-11-02 11:26·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;进程同步是一个操作系统级别的概念，在多道程序环境下，进程是并发执行的，不同进程之间存在着不同的相互制约关系。为了协调进程之间的相互制约关系，引入了&lt;strong&gt;进程同步&lt;/strong&gt;的概念。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础12-进程调度</title>
      <link>http://shanks.link/blog/2021/08/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8012-%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Sun, 22 Aug 2021 11:13:38 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8012-%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/</guid>
      <description>&lt;h1 id=&#34;操作系统基础12-进程调度&#34;&gt;操作系统基础12-进程调度&lt;/h1&gt;&#xA;&lt;p&gt;2020-10-30 11:59·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;前面&lt;a href=&#34;https://www.toutiao.com/i6885577093749408260/?group_id=6885577093749408260&#34;&gt;操作系统基础8&lt;/a&gt;和&lt;a href=&#34;https://www.toutiao.com/i6886370746575094286/?group_id=6886370746575094286&#34;&gt;操作系统基础10&lt;/a&gt;已经学习关于进程和线程的的基础知识，本次我们继续学习关于操作系统中调度的概念。&lt;/p&gt;&#xA;&lt;p&gt;前面学习了线程相关内容，我们知道对于支持线程的操作系统，操作系统实际调度的是内核级线程而非进程。对于术语&lt;strong&gt;进程调度(process scheduling)&lt;strong&gt;或&lt;/strong&gt;线程调度(thread scheduling)&lt;strong&gt;常常交替使用，在一般说到调度概念时，采用&lt;/strong&gt;进程调度&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础11-关于多核编程</title>
      <link>http://shanks.link/blog/2021/08/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8011-%E5%85%B3%E4%BA%8E%E5%A4%9A%E6%A0%B8%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Sun, 22 Aug 2021 11:06:27 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8011-%E5%85%B3%E4%BA%8E%E5%A4%9A%E6%A0%B8%E7%BC%96%E7%A8%8B/</guid>
      <description>&lt;p&gt;2020-10-26 12:43·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;之前，&lt;strong&gt;CPU&lt;/strong&gt;的性能还主要取决于CPU的主频，经过超&lt;strong&gt;摩尔定律&lt;/strong&gt;的发展后，没过多长时间CPU的主频速度就已接近“极限”，使得单单靠提高CPU的主频来提升性能变得非常困难。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础10-线程及多线程模型</title>
      <link>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8010-%E7%BA%BF%E7%A8%8B%E5%8F%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Sat, 21 Aug 2021 20:26:22 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%8010-%E7%BA%BF%E7%A8%8B%E5%8F%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</guid>
      <description>&lt;h1 id=&#34;操作系统基础10-线程及多线程模型&#34;&gt;操作系统基础10-线程及多线程模型&lt;/h1&gt;&#xA;&lt;p&gt;2020-10-23 14:42·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;什么是线程&#34;&gt;什么是线程&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;线程&lt;/strong&gt;（&lt;strong&gt;thread&lt;/strong&gt;）是操作系统能够进行运算调度的最小单位。它被包含在&lt;strong&gt;进程&lt;/strong&gt;之中，是进程中的&lt;strong&gt;实际运作单位&lt;/strong&gt;。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础9-进程通信IPC</title>
      <link>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%809-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1ipc/</link>
      <pubDate>Sat, 21 Aug 2021 17:54:41 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%809-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1ipc/</guid>
      <description>&lt;h1 id=&#34;操作系统基础9-进程通信ipc&#34;&gt;操作系统基础9-进程通信IPC&lt;/h1&gt;&#xA;&lt;p&gt;2020-10-21 18:00·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;什么是进程通信&#34;&gt;什么是进程通信？&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;进程通信(Interprocess Communication&lt;/strong&gt;)就是指进程之间的信息交换。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;进程&lt;/strong&gt;是分配系统资源的单位(包括内存地址空间) ，各个进程拥有的内存地址空间相互独立，为了保证安全， 操作系统中规定一个进程不能直接访问另一个进程的地址空间。如下图中的进程1就不能直接访问进程2的地址空间。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础8-进程及进程控制</title>
      <link>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%808-%E8%BF%9B%E7%A8%8B%E5%8F%8A%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Sat, 21 Aug 2021 15:58:32 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%808-%E8%BF%9B%E7%A8%8B%E5%8F%8A%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid>
      <description>&lt;h1 id=&#34;操作系统基础8-进程及进程控制&#34;&gt;操作系统基础8-进程及进程控制&lt;/h1&gt;&#xA;&lt;p&gt;2020-10-20 17:44·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;进程process-的定义&#34;&gt;进程(Process) 的定义&lt;/h1&gt;&#xA;&lt;p&gt;从不同的角度，进程可以有不同的定义，传统典型的定义：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;进程&lt;/strong&gt;是程序的一次执行过程。 或者：一个正在执行的程序的实例&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;进程&lt;/strong&gt;是一个程序及其数据在处理机上顺序执行所发生的活动&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;进程&lt;/strong&gt;是具有独立功能的程序在数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单位&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://p6-tt.byteimg.com/origin/pgc-image/0c3913a87d044e77b519bf21683a46f1?from=pc&#34; alt=&#34;操作系统基础8-进程及进程控制&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础7-支持操作系统的最基本的硬件-时钟</title>
      <link>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%807-%E6%94%AF%E6%8C%81%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84%E7%A1%AC%E4%BB%B6-%E6%97%B6%E9%92%9F/</link>
      <pubDate>Sat, 21 Aug 2021 15:23:29 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%807-%E6%94%AF%E6%8C%81%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84%E7%A1%AC%E4%BB%B6-%E6%97%B6%E9%92%9F/</guid>
      <description>&lt;p&gt;操作系统基础7-支持操作系统的最基本的硬件-时钟&#xA;2020-10-19 13:21·重学IT的老猫&#xA;时钟又称为计时器，简单来说作用就是负责维护时间。&lt;/p&gt;&#xA;&lt;p&gt;可以分为两种时间：硬件时钟、系统时钟&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础6-支持操作系统的最基本的硬件-中断</title>
      <link>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%806-%E6%94%AF%E6%8C%81%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84%E7%A1%AC%E4%BB%B6-%E4%B8%AD%E6%96%AD/</link>
      <pubDate>Sat, 21 Aug 2021 15:05:05 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%806-%E6%94%AF%E6%8C%81%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84%E7%A1%AC%E4%BB%B6-%E4%B8%AD%E6%96%AD/</guid>
      <description>&lt;h1 id=&#34;操作系统基础6-支持操作系统的最基本的硬件-中断&#34;&gt;操作系统基础6-支持操作系统的最基本的硬件-中断&lt;/h1&gt;&#xA;&lt;p&gt;2020-10-17 20:54·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;无论是桌面PC操作系统还是嵌入式都是多任务的操作系统，而很遗憾，处理器往往是单个的，即便在硬件成本逐渐下降，而硬件配置直线上升的今天，PC机的核心可能已经达到４核心，８核心，而手机移动设备更不可思议的达到16核心，32核心，处理器的数量依然不可能做到每个任务一个&lt;strong&gt;CPU&lt;/strong&gt;，所以&lt;strong&gt;CPU&lt;/strong&gt;必须作为一种全局的资源让所有任务共享。说到共享，如何共享呢？什么时候给任务A用，什么时候给任务B用&amp;hellip;&amp;hellip;这就是&lt;strong&gt;进程调度&lt;/strong&gt;，具体的安排就由调度算法决定了。进程如何去调度？现代操作系统一般都是采用基于&lt;strong&gt;时间片的优先级&lt;/strong&gt;调度算法，把&lt;strong&gt;CPU&lt;/strong&gt;的时间划分为很细粒度的时间片，一个任务每次只能占用这么多的时间，时间到了就必须交出使用权，换由其他的任务使用。这种要看操作系统的定时器机制了。那么时间片到之后，系统做了什么呢？这就要用到我们的中断了，时间片到了由定时器触发一个软中断，然后进入相应的处理历程。当然这一点不足以表明中断的重要性，计算机操作系统自然离不开外部设备：鼠标、键盘、网卡、磁盘等等。就拿网卡来讲，计算机并不知道什么时候数据包会来到，能保证的就是数据来了能正常接收就行了。但是我又不可能一直等着接收数据包，要是这样其他任务就死完了。所以合理的办法是，你数据包来到之后，通知我，然后我再对你处理，怎么通知呢？答：中断！&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础5-支持操作系统的最基本的硬件-内存</title>
      <link>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%805-%E6%94%AF%E6%8C%81%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84%E7%A1%AC%E4%BB%B6-%E5%86%85%E5%AD%98/</link>
      <pubDate>Sat, 21 Aug 2021 14:51:33 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%805-%E6%94%AF%E6%8C%81%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84%E7%A1%AC%E4%BB%B6-%E5%86%85%E5%AD%98/</guid>
      <description>&lt;h1 id=&#34;操作系统基础5-支持操作系统的最基本的硬件-内存&#34;&gt;操作系统基础5-支持操作系统的最基本的硬件-内存&lt;/h1&gt;&#xA;&lt;p&gt;2020-10-15 16:23·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;在&lt;a href=&#34;https://www.toutiao.com/i6883040524463407630/?group_id=6883040524463407630&#34;&gt;操心系统基础4&lt;/a&gt;我们已经介绍了OS依赖的重要硬件CPU，下面我们来介绍操心系统依赖的另一类重要部件-内存，这里说的内存是比较宽泛的概念，是指存储器(Memory)。&lt;/p&gt;&#xA;&lt;h1 id=&#34;存储器memory&#34;&gt;存储器(Memory)&lt;/h1&gt;&#xA;&lt;p&gt;是用来存储程序和数据的部件。&lt;/p&gt;&#xA;&lt;p&gt;存储器的概念很广，有很多层次，在数字系统中，只要能保存二进制数据的都可以是存储器；在集成电路中，一个没有实物形式的具有存储功能的电路也叫存储器，如RAM、FIFO等；在计算机系统中，具有实物形式的存储设备也叫存储器，如内存条、TF卡等。计算机中全部信息，包括输入的原始数据、计算机程序、中间运行结果和最终运行结果都保存在存储器中。存储器根据控制器指定的位置存入和取出信息。对于计算机来说，有了存储器，才有了记忆功能，才能保证正常工作。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础4-支持操作系统的最基本硬件-CPU</title>
      <link>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%804-%E6%94%AF%E6%8C%81%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%A1%AC%E4%BB%B6-cpu/</link>
      <pubDate>Sat, 21 Aug 2021 11:05:01 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%804-%E6%94%AF%E6%8C%81%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%A1%AC%E4%BB%B6-cpu/</guid>
      <description>&lt;h1 id=&#34;操作系统基础4-支持操作系统的最基本硬件-cpu&#34;&gt;操作系统基础4-支持操作系统的最基本硬件-CPU&lt;/h1&gt;&#xA;&lt;p&gt;2020-10-14 11:24·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;从&lt;a href=&#34;https://www.toutiao.com/i6881510359304405517/?group_id=6881510359304405517&#34;&gt;操作系统基础1&lt;/a&gt;我们已经知道：操作系统作为用户与计算机硬件直接的接口，是配置在计算机硬件上的第一层软件，所以操作系统的运行必须要依赖一些基本的硬件，或者说需要一些基本硬件的支持。主要包括以下几种：CPU(Central Processing Unit)中央处理器、内存、中断、时钟&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://p6-tt.byteimg.com/origin/pgc-image/35739dcd226a47ca8c376e60543da766?from=pc&#34; alt=&#34;操作系统基础4-支持操作系统的最基本硬件-CPU&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;cpu中央处理器&#34;&gt;CPU中央处理器&lt;/h1&gt;&#xA;&lt;p&gt;中央处理器（CPU，Central Processing Unit）是一块超大规模的集成电路，是一台计算机的运算核心（Core）和控制核心（Control Unit）。它的功能主要是解释计算机指令以及处理计算机软件中的数据。中央处理器主要包括运算器（算术逻辑运算单元，ALU，Arithmetic Logic Unit）和高速缓冲存储器（Cache）及实现它们之间联系的数据（Data）、控制及状态的总线（Bus）&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础3-宏内核与微内核</title>
      <link>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%803-%E5%AE%8F%E5%86%85%E6%A0%B8%E4%B8%8E%E5%BE%AE%E5%86%85%E6%A0%B8/</link>
      <pubDate>Sat, 21 Aug 2021 10:15:56 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%803-%E5%AE%8F%E5%86%85%E6%A0%B8%E4%B8%8E%E5%BE%AE%E5%86%85%E6%A0%B8/</guid>
      <description>&lt;h1 id=&#34;操作系统基础3-宏内核与微内核&#34;&gt;操作系统基础3-宏内核与微内核&lt;/h1&gt;&#xA;&lt;p&gt;2020-10-11 22:04·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;转载自重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;操作系统的内核&#34;&gt;操作系统的内核&lt;/h1&gt;&#xA;&lt;p&gt;内核 是计算机上配置的底层软件，是操作系统最基本、最核心的部分。实现操作系统内核功能的那些程序就是内核程序。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://p3-tt.byteimg.com/origin/pgc-image/7f4376eeaa9449a78100f6eba2d2b1f7?from=pc&#34; alt=&#34;操作系统基础3-宏内核与微内核&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;可以看到内核的主要功能有：时钟管理、中断管理、原语(设备驱动、CPU切换等)。还有对系统资源的管理功能：进程管理、存储器管理、设备管理等功能。有些操作系统不把这部分功能归为&amp;quot;内核&amp;quot;功能，不同的操作系统对内核功能的划分可能不一样。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础2-发展及分类</title>
      <link>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%802-%E5%8F%91%E5%B1%95%E5%8F%8A%E5%88%86%E7%B1%BB/</link>
      <pubDate>Sat, 21 Aug 2021 09:36:47 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%802-%E5%8F%91%E5%B1%95%E5%8F%8A%E5%88%86%E7%B1%BB/</guid>
      <description>&lt;h1 id=&#34;操作系统基础2-发展及分类&#34;&gt;操作系统基础2-发展及分类&lt;/h1&gt;&#xA;&lt;p&gt;2020-10-10 17:50·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://p1-tt.byteimg.com/origin/pgc-image/a04b0ec9d8794bfdb17e9b6b5b4bbd5b?from=pc&#34; alt=&#34;操作系统基础2-发展及分类&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://p1-tt.byteimg.com/origin/pgc-image/2b31ee5da6274d3e9d4071cc17186820?from=pc&#34; alt=&#34;操作系统基础2-发展及分类&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://p6-tt.byteimg.com/origin/pgc-image/985edc2ffceb4328b546188caef3b8db?from=pc&#34; alt=&#34;操作系统基础2-发展及分类&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;穿孔卡片&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://p6-tt.byteimg.com/origin/pgc-image/c57059a680744dcb9c33f7ffe46bfa48?from=pc&#34; alt=&#34;操作系统基础2-发展及分类&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;图形操作系统鼻祖-Alto&lt;/p&gt;&#xA;&lt;p&gt;按照操作系统的使用环境及处理方式的不同，一般可以把操作系统分为3个基本类型：&lt;/p&gt;&#xA;&lt;h1 id=&#34;批处理操作系统batch-processing-operating-system&#34;&gt;批处理操作系统(Batch Processing Operating System)：&lt;/h1&gt;&#xA;&lt;p&gt;将用户作业按照一定的顺序排列，统一交给计算机系统,由计算机自动地、顺序地完成作业的系统。批处理采用尽量避免人机交互的方式来提高CPU的运行效率.常用的系统有&lt;strong&gt;IBM&lt;/strong&gt;的*&lt;strong&gt;OS/360&lt;/strong&gt;、*&lt;strong&gt;MVX&lt;/strong&gt;等。&lt;/p&gt;</description>
    </item>
    <item>
      <title>操作系统基础1-功能目标及特征</title>
      <link>http://shanks.link/blog/2021/08/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%801-%E5%8A%9F%E8%83%BD%E7%9B%AE%E6%A0%87%E5%8F%8A%E7%89%B9%E5%BE%81/</link>
      <pubDate>Fri, 20 Aug 2021 17:15:15 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%801-%E5%8A%9F%E8%83%BD%E7%9B%AE%E6%A0%87%E5%8F%8A%E7%89%B9%E5%BE%81/</guid>
      <description>&lt;h1 id=&#34;操作系统基础1-功能目标及特征&#34;&gt;操作系统基础1-功能目标及特征&lt;/h1&gt;&#xA;&lt;p&gt;2020-10-09 15:03·&lt;a href=&#34;https://www.toutiao.com/c/user/token/MS4wLjABAAAAQN9l7B0O7YxEym7_bMZQaTheh3CQz_W6SC-j3N36vPo/?source=tuwen_detail&#34;&gt;重学IT的老猫&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;操作系统(Operating System，简称OS)是管理计算机硬件与软件资源的计算机程序。&lt;/p&gt;&#xA;&lt;p&gt;操作系统是配置在计算机硬件上的&lt;strong&gt;第一层软件&lt;/strong&gt;，是对硬件系统的&lt;strong&gt;首次扩充&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>动图图解！既然IP层会分片，为什么TCP层也还要分段？</title>
      <link>http://shanks.link/blog/2021/08/20/%E5%8A%A8%E5%9B%BE%E5%9B%BE%E8%A7%A3%E6%97%A2%E7%84%B6ip%E5%B1%82%E4%BC%9A%E5%88%86%E7%89%87%E4%B8%BA%E4%BB%80%E4%B9%88tcp%E5%B1%82%E4%B9%9F%E8%BF%98%E8%A6%81%E5%88%86%E6%AE%B5/</link>
      <pubDate>Fri, 20 Aug 2021 16:42:21 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/20/%E5%8A%A8%E5%9B%BE%E5%9B%BE%E8%A7%A3%E6%97%A2%E7%84%B6ip%E5%B1%82%E4%BC%9A%E5%88%86%E7%89%87%E4%B8%BA%E4%BB%80%E4%B9%88tcp%E5%B1%82%E4%B9%9F%E8%BF%98%E8%A6%81%E5%88%86%E6%AE%B5/</guid>
      <description>&lt;h1 id=&#34;动图图解既然ip层会分片为什么tcp层也还要分段&#34;&gt;动图图解！既然IP层会分片，为什么TCP层也还要分段？&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/4a52b9606d0cb1e552cf1eb6e87a2f5a.png&#34; alt=&#34;动图图解！既然IP层会分片，为什么TCP层也还要分段？&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;什么是tcp分段和ip分片&#34;&gt;什么是TCP分段和IP分片&lt;/h1&gt;&#xA;&lt;p&gt;我们知道网络就像一根管子，而管子吧，就会有粗细。&lt;/p&gt;&#xA;&lt;p&gt;一个数据包想从管子的一端到另一端，得过这个管子。&lt;em&gt;（废话）&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;但数据包的量&lt;strong&gt;有大有小&lt;/strong&gt;，想过管子，数据包不能大于这根管子的粗细。&lt;/p&gt;</description>
    </item>
    <item>
      <title>golang 中slice 、map、chan作为函数参数分析</title>
      <link>http://shanks.link/blog/2021/08/20/golang-%E4%B8%ADslice-mapchan%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 20 Aug 2021 11:07:45 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/20/golang-%E4%B8%ADslice-mapchan%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h1 id=&#34;golang-中slice-mapchan作为函数参数分析&#34;&gt;golang 中slice 、map、chan作为函数参数分析&lt;/h1&gt;&#xA;&lt;p&gt;写这篇文章之前考虑一个问题：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;go里面都是值传递，不存在引用传递？&lt;/strong&gt;&#xA;&lt;a href=&#34;https://cloud.tencent.com/developer/article/1416563&#34;&gt;https://cloud.tencent.com/developer/article/1416563&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;先来总结一下slice、map、chan的特性：&#xA;&lt;strong&gt;slice：&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>热爱生命</title>
      <link>http://shanks.link/blog/2021/08/19/%E7%83%AD%E7%88%B1%E7%94%9F%E5%91%BD/</link>
      <pubDate>Thu, 19 Aug 2021 17:33:48 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/08/19/%E7%83%AD%E7%88%B1%E7%94%9F%E5%91%BD/</guid>
      <description>&lt;p&gt;热爱生命&#xA;&amp;ndash; 汪国真&lt;/p&gt;&#xA;&lt;p&gt;我不去想，&#xA;是否能够成功 ，&#xA;既然选择了远方 ，&#xA;便只顾风雨兼程。&lt;/p&gt;&#xA;&lt;p&gt;我不去想，&#xA;能否赢得爱情 ，&#xA;既然钟情于玫瑰 ，&#xA;就勇敢地吐露真诚 。&lt;/p&gt;&#xA;&lt;p&gt;我不去想，&#xA;身后会不会袭来寒风冷雨 ，&#xA;既然目标是地平线，&#xA;留给世界的只能是背影 。&lt;/p&gt;</description>
    </item>
    <item>
      <title>linux环境内存分配原理</title>
      <link>http://shanks.link/blog/2021/08/18/linux%E7%8E%AF%E5%A2%83%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 18 Aug 2021 18:28:18 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/18/linux%E7%8E%AF%E5%A2%83%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;h1 id=&#34;linux环境内存分配原理-mallocinfo&#34;&gt;linux环境内存分配原理 mallocinfo&lt;/h1&gt;&#xA;&lt;p&gt;Linux的虚拟内存管理有几个关键概念：&lt;/p&gt;&#xA;&lt;p&gt;Linux 虚拟地址空间如何分布？malloc和free是如何分配和释放内存？如何查看堆内内存的碎片情况？既然堆内内存brk和sbrk不能直接释放，为什么不全部使用 mmap 来分配，munmap直接释放呢 ？&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据库事务的四大原则</title>
      <link>http://shanks.link/blog/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E5%A4%A7%E5%8E%9F%E5%88%99/</link>
      <pubDate>Wed, 18 Aug 2021 15:42:20 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E5%A4%A7%E5%8E%9F%E5%88%99/</guid>
      <description>&lt;h1 id=&#34;数据库的事务四大原则&#34;&gt;数据库的事务四大原则&lt;/h1&gt;&#xA;&lt;p&gt;说到&lt;a href=&#34;https://cloud.tencent.com/solution/database?from=10680&#34;&gt;数据库&lt;/a&gt;，以前我老师有一句很经典的话。你可以不会写SQL，但是一定不能不知道&lt;strong&gt;ACID&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;在工业领域，SQL可以说是应用最广泛的技术。从后端到算法，从数据到DBA，再到产品，甚至连一些运营也会基本的SQL。所以如果你现在还不太会的话，我建议你用一个下午的时间找个网站好好学一下。&lt;/p&gt;</description>
    </item>
    <item>
      <title>详解Redis源码中的部分快速排序算法pqsort</title>
      <link>http://shanks.link/blog/2021/08/16/%E8%AF%A6%E8%A7%A3redis%E6%BA%90%E7%A0%81%E4%B8%AD%E7%9A%84%E9%83%A8%E5%88%86%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95pqsort/</link>
      <pubDate>Mon, 16 Aug 2021 17:08:33 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/16/%E8%AF%A6%E8%A7%A3redis%E6%BA%90%E7%A0%81%E4%B8%AD%E7%9A%84%E9%83%A8%E5%88%86%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95pqsort/</guid>
      <description>&lt;h1 id=&#34;详解redis源码中的部分快速排序算法pqsortc&#34;&gt;详解Redis源码中的部分快速排序算法（pqsort.c）&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/guodongxiaren&#34;&gt;转载自果冻虾仁&lt;/a&gt; 2015-06-07 19:08:39&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;　　看标题，你可能会疑惑：咦？你这家伙，怎么不讲解完整的快排，只讲一部分快排……&lt;code&gt;-。-&lt;/code&gt; 哎，冤枉。“部分快排”是算法的名字，实际上本文相当详细呢。本文几乎与普通快排无异。看懂了本文，你对普通的快排也会有更深的认识了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>一键搞定 VSCode 下的 C/C&#43;&#43;基本开发环境配置</title>
      <link>http://shanks.link/blog/2021/08/13/%E4%B8%80%E9%94%AE%E6%90%9E%E5%AE%9A-vscode-%E4%B8%8B%E7%9A%84-c/c-%E5%9F%BA%E6%9C%AC%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 13 Aug 2021 11:50:48 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/13/%E4%B8%80%E9%94%AE%E6%90%9E%E5%AE%9A-vscode-%E4%B8%8B%E7%9A%84-c/c-%E5%9F%BA%E6%9C%AC%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;p&gt;以下内容转载自 &lt;a href=&#34;https://zhuanlan.zhihu.com/p/137760796&#34;&gt;https://zhuanlan.zhihu.com/p/137760796&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;如果你能看懂并确认已做到以下两点:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;C/C++编译器(例如MingGW)环境已经配置好&lt;/li&gt;&#xA;&lt;li&gt;VSCode已安装C/C++插件&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;那就废话不多说, 直接开始:&lt;/p&gt;</description>
    </item>
    <item>
      <title>常见的10种排序算法</title>
      <link>http://shanks.link/blog/2021/08/12/%E5%B8%B8%E8%A7%81%E7%9A%8410%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Thu, 12 Aug 2021 23:31:57 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/12/%E5%B8%B8%E8%A7%81%E7%9A%8410%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h1 id=&#34;常见的排序算法常见的10种排序&#34;&gt;[常见的排序算法——常见的10种排序]&lt;/h1&gt;&#xA;&lt;h2 id=&#34;常见算法可以分为两大类&#34;&gt;常见算法可以分为两大类：&lt;/h2&gt;&#xA;&lt;p&gt;　　非线性时间比较类排序：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此称为非线性时间比较类排序。&lt;/p&gt;&#xA;&lt;p&gt;　　线性时间非比较类排序：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此称为线性时间非比较类排序。&#xA;&lt;img src=&#34;http://shanks.link/img/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/1730367-20190711231258717-1334457150.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>redis-lzf压缩算法</title>
      <link>http://shanks.link/blog/2021/08/10/redis-lzf%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 10 Aug 2021 18:20:17 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/10/redis-lzf%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h3 id=&#34;文件&#34;&gt;文件&lt;/h3&gt;&#xA;&lt;p&gt;lzf.h&#xA;lzfP.h&#xA;lzf_c.c (压缩)&#xA;lzf_d.c (解压)&lt;/p&gt;&#xA;&lt;h3 id=&#34;压缩&#34;&gt;压缩&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;默认模式是&lt;strong&gt;VERY_FAST&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;核心思想&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对重复值进行压缩&lt;/li&gt;&#xA;&lt;li&gt;通过hash表来判断是否重复数据&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;h4 id=&#34;三种模式&#34;&gt;三种模式&lt;/h4&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;模式&lt;/th&gt;&#xA;          &lt;th&gt;（压缩）时间&lt;/th&gt;&#xA;          &lt;th&gt;（压缩后）空间&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;ULTRA_FAST&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;极端快&lt;/td&gt;&#xA;          &lt;td&gt;大&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;VERY_FAST&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;非常快&lt;/td&gt;&#xA;          &lt;td&gt;中&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;普通&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;快&lt;/td&gt;&#xA;          &lt;td&gt;小&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;h4 id=&#34;变量&#34;&gt;变量&lt;/h4&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;LZF_HSLOT_BIAS&lt;/strong&gt; 64位系统，是in_data的起始地址&#xA;&lt;strong&gt;ip&lt;/strong&gt; 输入游标&#xA;&lt;strong&gt;op&lt;/strong&gt; 输出游标&#xA;&lt;strong&gt;hval&lt;/strong&gt; 整型，当前游标的4位数值ip[-1]|ip[0]|ip[1]|ip[2]&#xA;&lt;strong&gt;htab&lt;/strong&gt; 保存输入数据(in_data)的下标&#xA;&lt;strong&gt;hslot&lt;/strong&gt; 哈希槽，指向哈希表(htab)的指针&#xA;&lt;strong&gt;ref&lt;/strong&gt; 值引用，ref = *hslot + LZF_HSLOT_BIAS，也是引用in_data的数据&#xA;&lt;strong&gt;off&lt;/strong&gt; 偏移量，ip相对于ref的偏移量&#xA;&lt;strong&gt;lit&lt;/strong&gt; literal，非压缩字符串长度&lt;/p&gt;</description>
    </item>
    <item>
      <title>redis基础组件-ae简介</title>
      <link>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6-ae%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 10 Aug 2021 17:15:11 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6-ae%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h3 id=&#34;数据结构&#34;&gt;数据结构&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* File event structure */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; aeFileEvent {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; mask; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* one of AE_(READABLE|WRITABLE) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    aeFileProc *rfileProc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    aeFileProc *wfileProc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *clientData;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} aeFileEvent;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Time event structure */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; aeTimeEvent {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;long&lt;/span&gt; id; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* time event identifier. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;long&lt;/span&gt; when_sec; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* seconds */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;long&lt;/span&gt; when_ms; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* milliseconds */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    aeTimeProc *timeProc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    aeEventFinalizerProc *finalizerProc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *clientData;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; aeTimeEvent *next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} aeTimeEvent;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* A fired event */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; aeFiredEvent {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; fd;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; mask;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} aeFiredEvent;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* State of an event based program */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; aeEventLoop {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; maxfd;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;long&lt;/span&gt; timeEventNextId;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    aeFileEvent events[AE_SETSIZE]; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Registered events */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    aeFiredEvent fired[AE_SETSIZE]; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Fired events */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    aeTimeEvent *timeEventHead;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; stop;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *apidata; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* This is used for polling API specific data */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    aeBeforeSleepProc *beforesleep;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} aeEventLoop;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;特点&#34;&gt;特点&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;整个redis服务器运行的发动机&lt;/li&gt;&#xA;&lt;li&gt;利用OS提供的多路复用机制，高效的处理句柄的读写事件和超时事件&lt;/li&gt;&#xA;&lt;li&gt;同一个fd，可读和可写的event是分开的(fd可能随时来数据，所以时刻监听其可读，但只有在还有待写数据的情况下才需要监听fd的可写事件)&lt;/li&gt;&#xA;&lt;li&gt;在处理时间事件的句柄中，不处理新生成的时间事件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;重要接口函数&#34;&gt;重要接口函数&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;处理文件fd的读写事件,若没有则等待最近的时间事件超时&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Process every pending time event, then every pending file event&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * (that may be registered by time event callbacks just processed).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * Without special flags the function sleeps until some file event&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * fires, or when the next time event occurrs (if any).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; *&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * If flags is 0, the function does nothing and returns.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * if flags has AE_ALL_EVENTS set, all the kind of events are processed.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * if flags has AE_FILE_EVENTS set, file events are processed.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * if flags has AE_TIME_EVENTS set, time events are processed.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * if flags has AE_DONT_WAIT set the function returns ASAP until all&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * the events that&amp;#39;s possible to process without to wait are processed.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; *&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * The function returns the number of events processed. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;aeProcessEvents&lt;/span&gt;(aeEventLoop *eventLoop, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; flags)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; processed = 0, numevents;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Nothing to do? return ASAP */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!(flags &amp;amp; AE_TIME_EVENTS) &amp;amp;&amp;amp; !(flags &amp;amp; AE_FILE_EVENTS)) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Note that we want call select() even if there are no&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;     * file events to process as long as we want to process time&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;     * events, in order to sleep until the next time event is ready&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;     * to fire. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (eventLoop-&amp;gt;maxfd != -1 ||&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ((flags &amp;amp; AE_TIME_EVENTS) &amp;amp;&amp;amp; !(flags &amp;amp; AE_DONT_WAIT))) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; j;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        aeTimeEvent *shortest = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; timeval tv, *tvp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (flags &amp;amp; AE_TIME_EVENTS &amp;amp;&amp;amp; !(flags &amp;amp; AE_DONT_WAIT))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            shortest = &lt;span style=&#34;color:#c34e00&#34;&gt;aeSearchNearestTimer&lt;/span&gt;(eventLoop);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (shortest) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;long&lt;/span&gt; now_sec, now_ms;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Calculate the time missing for the nearest&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;             * timer to fire. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;aeGetTime&lt;/span&gt;(&amp;amp;now_sec, &amp;amp;now_ms);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            tvp = &amp;amp;tv;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            tvp-&amp;gt;tv_sec = shortest-&amp;gt;when_sec - now_sec;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (shortest-&amp;gt;when_ms &amp;lt; now_ms) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                tvp-&amp;gt;tv_usec = ((shortest-&amp;gt;when_ms+1000) - now_ms)*1000;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                tvp-&amp;gt;tv_sec --;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                tvp-&amp;gt;tv_usec = (shortest-&amp;gt;when_ms - now_ms)*1000;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (tvp-&amp;gt;tv_sec &amp;lt; 0) tvp-&amp;gt;tv_sec = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (tvp-&amp;gt;tv_usec &amp;lt; 0) tvp-&amp;gt;tv_usec = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* If we have to check for events but need to return&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;             * ASAP because of AE_DONT_WAIT we need to se the timeout&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;             * to zero */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (flags &amp;amp; AE_DONT_WAIT) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                tv.tv_sec = tv.tv_usec = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                tvp = &amp;amp;tv;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Otherwise we can block */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                tvp = NULL; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* wait forever */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        numevents = &lt;span style=&#34;color:#c34e00&#34;&gt;aeApiPoll&lt;/span&gt;(eventLoop, tvp);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (j = 0; j &amp;lt; numevents; j++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            aeFileEvent *fe = &amp;amp;eventLoop-&amp;gt;events[eventLoop-&amp;gt;fired[j].fd];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; mask = eventLoop-&amp;gt;fired[j].mask;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; fd = eventLoop-&amp;gt;fired[j].fd;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; rfired = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* note the fe-&amp;gt;mask &amp;amp; mask &amp;amp; ... code: maybe an already processed&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;             * event removed an element that fired and we still didn&amp;#39;t&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;             * processed, so we check if the event is still valid. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (fe-&amp;gt;mask &amp;amp; mask &amp;amp; AE_READABLE) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                rfired = 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                fe-&amp;gt;&lt;span style=&#34;color:#c34e00&#34;&gt;rfileProc&lt;/span&gt;(eventLoop,fd,fe-&amp;gt;clientData,mask);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (fe-&amp;gt;mask &amp;amp; mask &amp;amp; AE_WRITABLE) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!rfired || fe-&amp;gt;wfileProc != fe-&amp;gt;rfileProc)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    fe-&amp;gt;&lt;span style=&#34;color:#c34e00&#34;&gt;wfileProc&lt;/span&gt;(eventLoop,fd,fe-&amp;gt;clientData,mask);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            processed++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Check time events */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (flags &amp;amp; AE_TIME_EVENTS)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        processed += &lt;span style=&#34;color:#c34e00&#34;&gt;processTimeEvents&lt;/span&gt;(eventLoop);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; processed; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* return the number of processed file/time events */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>redis基础组件-anet简介</title>
      <link>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6-anet%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 10 Aug 2021 17:06:09 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6-anet%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h3 id=&#34;特点&#34;&gt;特点&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;模块非常简洁，提供了监听指定端口，链接指定地址，读，写网络句柄等功能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;重要的接口函数&#34;&gt;重要的接口函数&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;监听指定端口&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;anetTcpServer&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *err, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; port, &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *bindaddr)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; s, on = 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; sockaddr_in sa;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; ((s = &lt;span style=&#34;color:#c34e00&#34;&gt;socket&lt;/span&gt;(AF_INET, SOCK_STREAM, 0)) == -1) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;anetSetError&lt;/span&gt;(err, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;socket: %s&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c34e00&#34;&gt;strerror&lt;/span&gt;(errno));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ANET_ERR;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;setsockopt&lt;/span&gt;(s, SOL_SOCKET, SO_REUSEADDR, &amp;amp;on, &lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(on)) == -1) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;anetSetError&lt;/span&gt;(err, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;setsockopt SO_REUSEADDR: %s&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c34e00&#34;&gt;strerror&lt;/span&gt;(errno));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;close&lt;/span&gt;(s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ANET_ERR;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;memset&lt;/span&gt;(&amp;amp;sa,0,&lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(sa));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sa.sin_family = AF_INET;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sa.sin_port = &lt;span style=&#34;color:#c34e00&#34;&gt;htons&lt;/span&gt;(port);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sa.sin_addr.s_addr = &lt;span style=&#34;color:#c34e00&#34;&gt;htonl&lt;/span&gt;(INADDR_ANY);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (bindaddr) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;inet_aton&lt;/span&gt;(bindaddr, &amp;amp;sa.sin_addr) == 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;anetSetError&lt;/span&gt;(err, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;Invalid bind address&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;close&lt;/span&gt;(s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ANET_ERR;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;bind&lt;/span&gt;(s, (&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; sockaddr*)&amp;amp;sa, &lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(sa)) == -1) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;anetSetError&lt;/span&gt;(err, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;bind: %s&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c34e00&#34;&gt;strerror&lt;/span&gt;(errno));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;close&lt;/span&gt;(s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ANET_ERR;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;listen&lt;/span&gt;(s, 511) == -1) { &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* the magic 511 constant is from nginx */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;anetSetError&lt;/span&gt;(err, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;listen: %s&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c34e00&#34;&gt;strerror&lt;/span&gt;(errno));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;close&lt;/span&gt;(s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ANET_ERR;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; s;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;链接指定地址&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;anetTcpGenericConnect&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *err, &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *addr, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; port, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; flags)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; s, on = 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; sockaddr_in sa;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; ((s = &lt;span style=&#34;color:#c34e00&#34;&gt;socket&lt;/span&gt;(AF_INET, SOCK_STREAM, 0)) == -1) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;anetSetError&lt;/span&gt;(err, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;creating socket: %s&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c34e00&#34;&gt;strerror&lt;/span&gt;(errno));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ANET_ERR;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Make sure connection-intensive things like the redis benckmark&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;     * will be able to close/open sockets a zillion of times */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setsockopt&lt;/span&gt;(s, SOL_SOCKET, SO_REUSEADDR, &amp;amp;on, &lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(on));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sa.sin_family = AF_INET;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sa.sin_port = &lt;span style=&#34;color:#c34e00&#34;&gt;htons&lt;/span&gt;(port);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;inet_aton&lt;/span&gt;(addr, &amp;amp;sa.sin_addr) == 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; hostent *he;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        he = &lt;span style=&#34;color:#c34e00&#34;&gt;gethostbyname&lt;/span&gt;(addr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (he == NULL) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;anetSetError&lt;/span&gt;(err, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;can&amp;#39;t resolve: %s&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, addr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;close&lt;/span&gt;(s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ANET_ERR;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;memcpy&lt;/span&gt;(&amp;amp;sa.sin_addr, he-&amp;gt;h_addr, &lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; in_addr));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (flags &amp;amp; ANET_CONNECT_NONBLOCK) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;anetNonBlock&lt;/span&gt;(err,s) != ANET_OK)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ANET_ERR;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;connect&lt;/span&gt;(s, (&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; sockaddr*)&amp;amp;sa, &lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(sa)) == -1) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (errno == EINPROGRESS &amp;amp;&amp;amp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            flags &amp;amp; ANET_CONNECT_NONBLOCK)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; s;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;anetSetError&lt;/span&gt;(err, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;connect: %s&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c34e00&#34;&gt;strerror&lt;/span&gt;(errno));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;close&lt;/span&gt;(s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ANET_ERR;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; s;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;读写指定句柄&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Like read(2) but make sure &amp;#39;count&amp;#39; is read before to return&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * (unless error or EOF condition is encountered) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;anetRead&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; fd, &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *buf, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; count)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nread, totlen = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt;(totlen != count) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        nread = &lt;span style=&#34;color:#c34e00&#34;&gt;read&lt;/span&gt;(fd,buf,count-totlen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (nread == 0) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; totlen;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (nread == -1) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; -1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        totlen += nread;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        buf += nread;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; totlen;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Like write(2) but make sure &amp;#39;count&amp;#39; is read before to return&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * (unless error is encountered) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;anetWrite&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; fd, &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *buf, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; count)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nwritten, totlen = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt;(totlen != count) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        nwritten = &lt;span style=&#34;color:#c34e00&#34;&gt;write&lt;/span&gt;(fd,buf,count-totlen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (nwritten == 0) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; totlen;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (nwritten == -1) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; -1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        totlen += nwritten;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        buf += nwritten;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; totlen;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>redis基础组件-zmalloc简介</title>
      <link>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6-zmalloc%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 10 Aug 2021 16:52:16 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6-zmalloc%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h3 id=&#34;数据结构&#34;&gt;数据结构&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;len|context&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;特点&#34;&gt;特点&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;申请内存时，自带整个MEM的len，用于统计当前进程总共消耗的MEM&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;模糊点&#34;&gt;模糊点&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在申请内存的接口中怎么确定ptr+sizeof(size_t)后的地址一定就能满足内存对齐？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;主要接口函数&#34;&gt;主要接口函数&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;申请一片内存&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *&lt;span style=&#34;color:#c34e00&#34;&gt;zmalloc&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; size) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *ptr = &lt;span style=&#34;color:#c34e00&#34;&gt;malloc&lt;/span&gt;(size+PREFIX_SIZE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!ptr) &lt;span style=&#34;color:#c34e00&#34;&gt;zmalloc_oom&lt;/span&gt;(size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#ifdef HAVE_MALLOC_SIZE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;increment_used_memory&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;redis_malloc_size&lt;/span&gt;(ptr));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ptr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#else&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    *((&lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt;*)ptr) = size;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;increment_used_memory&lt;/span&gt;(size+PREFIX_SIZE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt;*)ptr+PREFIX_SIZE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;调整内存大小&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *&lt;span style=&#34;color:#c34e00&#34;&gt;zrealloc&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *ptr, &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; size) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#ifndef HAVE_MALLOC_SIZE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *realptr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; oldsize;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *newptr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ptr == NULL) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;zmalloc&lt;/span&gt;(size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#ifdef HAVE_MALLOC_SIZE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    oldsize = &lt;span style=&#34;color:#c34e00&#34;&gt;redis_malloc_size&lt;/span&gt;(ptr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    newptr = &lt;span style=&#34;color:#c34e00&#34;&gt;realloc&lt;/span&gt;(ptr,size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!newptr) &lt;span style=&#34;color:#c34e00&#34;&gt;zmalloc_oom&lt;/span&gt;(size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;decrement_used_memory&lt;/span&gt;(oldsize);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;increment_used_memory&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;redis_malloc_size&lt;/span&gt;(newptr));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; newptr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#else&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    realptr = (&lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt;*)ptr-PREFIX_SIZE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    oldsize = *((&lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt;*)realptr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    newptr = &lt;span style=&#34;color:#c34e00&#34;&gt;realloc&lt;/span&gt;(realptr,size+PREFIX_SIZE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!newptr) &lt;span style=&#34;color:#c34e00&#34;&gt;zmalloc_oom&lt;/span&gt;(size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    *((&lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt;*)newptr) = size;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;decrement_used_memory&lt;/span&gt;(oldsize);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;increment_used_memory&lt;/span&gt;(size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt;*)newptr+PREFIX_SIZE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;释放内存&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;zfree&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *ptr) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#ifndef HAVE_MALLOC_SIZE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *realptr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; oldsize;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ptr == NULL) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#ifdef HAVE_MALLOC_SIZE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;decrement_used_memory&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;redis_malloc_size&lt;/span&gt;(ptr));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;free&lt;/span&gt;(ptr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#else&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    realptr = (&lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt;*)ptr-PREFIX_SIZE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    oldsize = *((&lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt;*)realptr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;decrement_used_memory&lt;/span&gt;(oldsize+PREFIX_SIZE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;free&lt;/span&gt;(realptr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>redis基础数据结构-zipmap简介</title>
      <link>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-zipmap%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 10 Aug 2021 15:57:58 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-zipmap%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h3 id=&#34;数据结构&#34;&gt;数据结构&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--------------------------------------------------------------------------------------------------------------------------------------------------&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cnt |key1.len|key1.context|val1.len|free1.len|val1.context|null1.context|key2.len|key2.context|val2.len|free2.len|val2.context|null2.context|0xFF| &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--------------------------------------------------------------------------------------------------------------------------------------------------&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;cnt:一个字节，如果&amp;lt;ZIPMAP_BIGLEN(254),则是key-val对的数量，否则==ZIPMAP_BIGLEN时需要循环遍历zip来确定实时的数量&lt;/li&gt;&#xA;&lt;li&gt;key.len: 头字节若&amp;lt;ZIPMAP_BIGLEN则存储的是key的长度，否则==ZIPMAP_BIGLEN时，key的长度存在后续4个字节中&lt;/li&gt;&#xA;&lt;li&gt;key.context:可包含二进制数据的的key&lt;/li&gt;&#xA;&lt;li&gt;val.len:同key.len&lt;/li&gt;&#xA;&lt;li&gt;free.len:固定一个字节,理论上能给val预留不超过255个byte，但实际代码中不能超过&#xA;超过ZIPMAP_VALUE_MAX_FREE(4)，否则会被回收（不太明白作者为何不将此值扩大点)&lt;/li&gt;&#xA;&lt;li&gt;OXFF:标志位，zip的尽头&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;特点&#34;&gt;特点&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;给val预留了free，避免频繁的系统调用&lt;/li&gt;&#xA;&lt;li&gt;len采用非固定格式，尽量的避免浪费MEM&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;主要接口函数&#34;&gt;主要接口函数&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;构建zipmap&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Create a new empty zipmap. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *&lt;span style=&#34;color:#c34e00&#34;&gt;zipmapNew&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *zm = &lt;span style=&#34;color:#c34e00&#34;&gt;zmalloc&lt;/span&gt;(2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    zm[0] = 0; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Length */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    zm[1] = ZIPMAP_END;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; zm;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;计算key.len和val.len的实际代表的长度&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Decode the encoded length pointed by &amp;#39;p&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapDecodeLength&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *p) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; len = *p;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (len &amp;lt; ZIPMAP_BIGLEN) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;memcpy&lt;/span&gt;(&amp;amp;len,p+1,&lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;设置一对key.val&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Set key to value, creating the key if it does not already exist.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * If &amp;#39;update&amp;#39; is not NULL, *update is set to 1 if the key was&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * already preset, otherwise to 0. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *&lt;span style=&#34;color:#c34e00&#34;&gt;zipmapSet&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *zm, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *key, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; klen, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *val, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; vlen, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; *update) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; zmlen, offset;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; freelen, reqlen = &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapRequiredLength&lt;/span&gt;(klen,vlen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; empty, vempty;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *p;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    freelen = reqlen;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (update) *update = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p = &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapLookupRaw&lt;/span&gt;(zm,key,klen,&amp;amp;zmlen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (p == NULL) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Key not found: enlarge */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        zm = &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapResize&lt;/span&gt;(zm, zmlen+reqlen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        p = zm+zmlen-1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        zmlen = zmlen+reqlen;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 新的总长 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Increase zipmap length (this is an insert) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (zm[0] &amp;lt; ZIPMAP_BIGLEN) zm[0]++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Key found. Is there enough space for the new value? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Compute the total length: */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (update) *update = 1;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* key已存在，则更新key对应的val */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        freelen = &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapRawEntryLength&lt;/span&gt;(p);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (freelen &amp;lt; reqlen) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 现存的空间不够用 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Store the offset of this key within the current zipmap, so&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;             * it can be resized. Then, move the tail backwards so this&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;             * pair fits at the current position. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            offset = p-zm;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            zm = &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapResize&lt;/span&gt;(zm, zmlen-freelen+reqlen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            p = zm+offset;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* The +1 in the number of bytes to be moved is caused by the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;             * end-of-zipmap byte. Note: the *original* zmlen is used. &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;             * void *memmove(void *dest, const void *src, size_t n) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;memmove&lt;/span&gt;(p+reqlen, p+freelen, zmlen-(offset+freelen+1));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            zmlen = zmlen-freelen+reqlen;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            freelen = reqlen;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* We now have a suitable block where the key/value entry can&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;     * be written. If there is too much free space, move the tail&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;     * of the zipmap a few bytes to the front and shrink the zipmap,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;     * as we want zipmaps to be very space efficient. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    empty = freelen-reqlen;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (empty &amp;gt;= ZIPMAP_VALUE_MAX_FREE) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* First, move the tail &amp;lt;empty&amp;gt; bytes to the front, then resize&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;         * the zipmap to be &amp;lt;empty&amp;gt; bytes smaller. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        offset = p-zm;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;memmove&lt;/span&gt;(p+reqlen, p+freelen, zmlen-(offset+freelen+1));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        zmlen -= empty;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        zm = &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapResize&lt;/span&gt;(zm, zmlen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        p = zm+offset;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        vempty = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        vempty = empty;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Just write the key + value and we are done. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Key: */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p += &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapEncodeLength&lt;/span&gt;(p,klen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;memcpy&lt;/span&gt;(p,key,klen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p += klen;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Value: */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p += &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapEncodeLength&lt;/span&gt;(p,vlen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    *p++ = vempty;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;memcpy&lt;/span&gt;(p,val,vlen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; zm;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;删除一对key.val&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Remove the specified key. If &amp;#39;deleted&amp;#39; is not NULL the pointed integer is&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * set to 0 if the key was not found, to 1 if it was found and deleted. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *&lt;span style=&#34;color:#c34e00&#34;&gt;zipmapDel&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *zm, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *key, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; klen, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; *deleted) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; zmlen, freelen;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *p = &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapLookupRaw&lt;/span&gt;(zm,key,klen,&amp;amp;zmlen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (p) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        freelen = &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapRawEntryLength&lt;/span&gt;(p);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;memmove&lt;/span&gt;(p, p+freelen, zmlen-((p-zm)+freelen+1));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        zm = &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapResize&lt;/span&gt;(zm, zmlen-freelen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Decrease zipmap length */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (zm[0] &amp;lt; ZIPMAP_BIGLEN) zm[0]--;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (deleted) *deleted = 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (deleted) *deleted = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; zm;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;读取指定的val值&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Search a key and retrieve the pointer and len of the associated value.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * If the key is found the function returns 1, otherwise 0. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapGet&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *zm, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *key, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; klen, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; **value, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; *vlen) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *p;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; ((p = &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapLookupRaw&lt;/span&gt;(zm,key,klen,NULL)) == NULL) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p += &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapRawKeyLength&lt;/span&gt;(p);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    *vlen = &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapDecodeLength&lt;/span&gt;(p);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    *value = p + &lt;span style=&#34;color:#c34e00&#34;&gt;ZIPMAP_LEN_BYTES&lt;/span&gt;(*vlen) + 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;迭代遍历zipmap&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Call it before to iterate trought elements via zipmapNext() */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *&lt;span style=&#34;color:#c34e00&#34;&gt;zipmapRewind&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *zm) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; zm+1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* This function is used to iterate through all the zipmap elements.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * In the first call the first argument is the pointer to the zipmap + 1.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * In the next calls what zipmapNext returns is used as first argument.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * Example:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; *&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * unsigned char *i = zipmapRewind(my_zipmap);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * while((i = zipmapNext(i,&amp;amp;key,&amp;amp;klen,&amp;amp;value,&amp;amp;vlen)) != NULL) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; *     printf(&amp;#34;%d bytes key at $p\n&amp;#34;, klen, key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; *     printf(&amp;#34;%d bytes value at $p\n&amp;#34;, vlen, value);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *&lt;span style=&#34;color:#c34e00&#34;&gt;zipmapNext&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *zm, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; **key, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; *klen, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; **value, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; *vlen) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (zm[0] == ZIPMAP_END) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        *key = zm;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        *klen = &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapDecodeLength&lt;/span&gt;(zm);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        *key += &lt;span style=&#34;color:#c34e00&#34;&gt;ZIPMAP_LEN_BYTES&lt;/span&gt;(*klen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    zm += &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapRawKeyLength&lt;/span&gt;(zm);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (value) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        *value = zm+1;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* +1是free.len.head格式占用的一个字节空间 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        *vlen = &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapDecodeLength&lt;/span&gt;(zm);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        *value += &lt;span style=&#34;color:#c34e00&#34;&gt;ZIPMAP_LEN_BYTES&lt;/span&gt;(*vlen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    zm += &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapRawValueLength&lt;/span&gt;(zm);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; zm;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Golang知识小结</title>
      <link>http://shanks.link/blog/2021/08/10/golang%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Tue, 10 Aug 2021 10:53:12 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/08/10/golang%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93/</guid>
      <description>&lt;h3 id=&#34;string&#34;&gt;string&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;string类型采用UTF-8编码，且不可修的，len返回byte数量而不是字符数量，eg(len(你好)==6&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;数组和slice&#34;&gt;数组和slice&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数组在函数调用的参数传递模式是独立复制一份数据给被调用函数&lt;/li&gt;&#xA;&lt;li&gt;slice以及map,chan对应的的函数传参知识参考这里&lt;a href=&#34;http://shankusu.me/go/golang%20%E4%B8%ADslice_map_chan%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%88%86%E6%9E%90/#more&#34;&gt;Golang函数参数传递&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;map&#34;&gt;map&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;初始化： h := map[int]string{} 显示构造，或者 h = make(map[int]string),&lt;/li&gt;&#xA;&lt;li&gt;空值 h := map[int]string 将构造一个nil的map，可以调用range, len, 读，但不能写值&lt;/li&gt;&#xA;&lt;li&gt;map是指针数据结构，即当作函数参数传递时，函数内部修改了其值，会影响函数外部原始的map&lt;/li&gt;&#xA;&lt;li&gt;var = map[k],若对应的k不存在，则返回零值，故而要判断时候存在，需引入第二个参数eg: val, exist := map[k]&lt;/li&gt;&#xA;&lt;li&gt;不可对map中的元素取地址eg:&amp;amp;tbl[k]是非法的（map的大小可能随时调整故取地址无意义)。&lt;/li&gt;&#xA;&lt;li&gt;可以采用range风格对其轮询，顺序是随机的（设计如此）。如果需要按照一定的规则读取map，一个办法是先把key排好序，再用map[key]的的方法读写&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;struct&#34;&gt;struct&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;导出规则与模块一样&lt;/li&gt;&#xA;&lt;li&gt;一般而言一行定义一个成员&lt;/li&gt;&#xA;&lt;li&gt;不能递归定义自己，但可以在内部使用自己类型的指针&lt;/li&gt;&#xA;&lt;li&gt;其零值是每个成员的零值，如果内部有(map,chan)，还需要在struct{}构造后，显式的对其初始化&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;type&lt;/span&gt;  sh &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;m &lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt;]&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;var&lt;/span&gt; st = sh{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;st.m = make(&lt;span style=&#34;color:#00f&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt;]&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;function&#34;&gt;function&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;参数是传值模式，没有默认值，数量可以是可变模式&lt;/li&gt;&#xA;&lt;li&gt;可以递归调用自己&lt;/li&gt;&#xA;&lt;li&gt;函数名是第一类值，可以和nil比较，但不能作为map的key&lt;/li&gt;&#xA;&lt;li&gt;支持闭包(closures)，这点和lua中的函数一致，与之对应，C语言不支持闭包&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;方法&#34;&gt;方法&lt;/h3&gt;&#xA;&lt;h3 id=&#34;变量类型&#34;&gt;变量类型&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;七个小矮人（slice,map,func,channel,pointer, string, interface），自带魔法绳（指针）, 所以没必要将它定义成引用类型&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>redis基础数据结构-dict简介</title>
      <link>http://shanks.link/blog/2021/08/09/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-dict%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 09 Aug 2021 15:57:56 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/09/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-dict%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h3 id=&#34;数据结构&#34;&gt;数据结构&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; dictEntry {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *key;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *val;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; dictEntry *next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} dictEntry;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* This is our hash table structure. Every dictionary has two of this as we&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * implement incremental rehashing, for the old to the new table. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; dictht {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dictEntry **table;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;long&lt;/span&gt; size;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;long&lt;/span&gt; sizemask;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;long&lt;/span&gt; used;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} dictht;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; dict {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dictType *type;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *privdata;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dictht ht[2];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; rehashidx; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* rehashing not in progress if rehashidx == -1 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; iterators; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* number of iterators currently running */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} dict;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; dictIterator {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dict *d;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; table;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; index;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dictEntry *entry, *nextEntry;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} dictIterator;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;特点&#34;&gt;特点&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;2个ht,用于循环渐进式的rehash，避免ht过大的情况下一次性rehash而卡住程序&lt;/li&gt;&#xA;&lt;li&gt;底层实现为哈希桶&lt;/li&gt;&#xA;&lt;li&gt;fingerprint：指纹值方法用于粗略判断两个时间戳之间ht是否有被修改&lt;/li&gt;&#xA;&lt;li&gt;rehash的条件考虑到了存档RDB时的linux操作系统的写时复制策略&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;主要接口实现&#34;&gt;主要接口实现&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;插入节点&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Add an element to the target hash table */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;dictAdd&lt;/span&gt;(dict *d, &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *key, &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *val)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; index;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dictEntry *entry;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dictht *ht;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 执行一次rehash */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;dictIsRehashing&lt;/span&gt;(d)) &lt;span style=&#34;color:#c34e00&#34;&gt;_dictRehashStep&lt;/span&gt;(d);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Get the index of the new element, or -1 if&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;     * the element already exists. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; ((index = &lt;span style=&#34;color:#c34e00&#34;&gt;_dictKeyIndex&lt;/span&gt;(d, key)) == -1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; DICT_ERR;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Allocates the memory and stores key&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; * 正在rehash则存入ht[0]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;    ht = dictIsRehashing(d) ? &amp;amp;d-&amp;gt;ht[1] : &amp;amp;d-&amp;gt;ht[0];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;    entry = _dictAlloc(sizeof(*entry));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;    entry-&amp;gt;next = ht-&amp;gt;table[index];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;    ht-&amp;gt;table[index] = entry;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;    ht-&amp;gt;used++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;    /* Set the hash entry fields. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;dictSetHashKey&lt;/span&gt;(d, entry, key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;dictSetHashVal&lt;/span&gt;(d, entry, val);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; DICT_OK;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;rehash&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;dictRehash&lt;/span&gt;(dict *d, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; n) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;dictIsRehashing&lt;/span&gt;(d)) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt;(n--) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dictEntry *de, *nextde;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Check if we already rehashed the whole table... */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (d-&amp;gt;ht[0].used == 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;_dictFree&lt;/span&gt;(d-&amp;gt;ht[0].table);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            d-&amp;gt;ht[0] = d-&amp;gt;ht[1];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;_dictReset&lt;/span&gt;(&amp;amp;d-&amp;gt;ht[1]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            d-&amp;gt;rehashidx = -1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Note that rehashidx can&amp;#39;t overflow as we are sure there are more&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;         * elements because ht[0].used != 0 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;         * 因为上面used的判断，这里可以确定不会溢出 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt;(d-&amp;gt;ht[0].table[d-&amp;gt;rehashidx] == NULL) d-&amp;gt;rehashidx++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        de = d-&amp;gt;ht[0].table[d-&amp;gt;rehashidx];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Move all the keys in this bucket from the old to the new hash HT */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt;(de) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; h;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            nextde = de-&amp;gt;next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Get the index in the new hash table */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            h = &lt;span style=&#34;color:#c34e00&#34;&gt;dictHashKey&lt;/span&gt;(d, de-&amp;gt;key) &amp;amp; d-&amp;gt;ht[1].sizemask;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            de-&amp;gt;next = d-&amp;gt;ht[1].table[h];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            d-&amp;gt;ht[1].table[h] = de;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            d-&amp;gt;ht[0].used--;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            d-&amp;gt;ht[1].used++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            de = nextde;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        d-&amp;gt;ht[0].table[d-&amp;gt;rehashidx] = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        d-&amp;gt;rehashidx++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>redis基础数据结构-list简介</title>
      <link>http://shanks.link/blog/2021/08/06/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-list%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Fri, 06 Aug 2021 18:01:06 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/06/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-list%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h3 id=&#34;数据结构&#34;&gt;数据结构&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; listNode {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; listNode *prev;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; listNode *next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} listNode;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; listIter {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    listNode *next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; direction;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} listIter;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; list {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    listNode *head;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    listNode *tail;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *(*dup)(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *ptr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; (*free)(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *ptr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; (*match)(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *ptr, &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} list;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;特点&#34;&gt;特点&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;可以转载任何类型的数据&lt;/li&gt;&#xA;&lt;li&gt;可以定制dup,free,match方法，自由度大&lt;/li&gt;&#xA;&lt;li&gt;可以从头、尾分别插入链表&lt;/li&gt;&#xA;&lt;li&gt;提供迭代器，方便遍历整个链表&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;重要接口实现&#34;&gt;重要接口实现&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;构建/释放list&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;list *&lt;span style=&#34;color:#c34e00&#34;&gt;listCreate&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; list *list;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; ((list = &lt;span style=&#34;color:#c34e00&#34;&gt;zmalloc&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(*list))) == NULL)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    list-&amp;gt;head = list-&amp;gt;tail = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    list-&amp;gt;len = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    list-&amp;gt;dup = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    list-&amp;gt;free = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    list-&amp;gt;match = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; list;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;listRelease&lt;/span&gt;(list *list)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    listNode *current, *next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    current = list-&amp;gt;head;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    len = list-&amp;gt;len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt;(len--) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        next = current-&amp;gt;next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (list-&amp;gt;free) list-&amp;gt;&lt;span style=&#34;color:#c34e00&#34;&gt;free&lt;/span&gt;(current-&amp;gt;value);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;zfree&lt;/span&gt;(current);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        current = next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;zfree&lt;/span&gt;(list);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;遍历和复制list&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;listIter *&lt;span style=&#34;color:#c34e00&#34;&gt;listGetIterator&lt;/span&gt;(list *list, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; direction)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    listIter *iter;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; ((iter = &lt;span style=&#34;color:#c34e00&#34;&gt;zmalloc&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(*iter))) == NULL) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (direction == AL_START_HEAD)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        iter-&amp;gt;next = list-&amp;gt;head;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        iter-&amp;gt;next = list-&amp;gt;tail;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    iter-&amp;gt;direction = direction;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; iter;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;listNode *&lt;span style=&#34;color:#c34e00&#34;&gt;listNext&lt;/span&gt;(listIter *iter)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    listNode *current = iter-&amp;gt;next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (current != NULL) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (iter-&amp;gt;direction == AL_START_HEAD)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            iter-&amp;gt;next = current-&amp;gt;next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            iter-&amp;gt;next = current-&amp;gt;prev;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; current;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;list *&lt;span style=&#34;color:#c34e00&#34;&gt;listDup&lt;/span&gt;(list *orig)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    list *copy;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    listIter *iter;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    listNode *node;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; ((copy = &lt;span style=&#34;color:#c34e00&#34;&gt;listCreate&lt;/span&gt;()) == NULL)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    copy-&amp;gt;dup = orig-&amp;gt;dup;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    copy-&amp;gt;free = orig-&amp;gt;free;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    copy-&amp;gt;match = orig-&amp;gt;match;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    iter = &lt;span style=&#34;color:#c34e00&#34;&gt;listGetIterator&lt;/span&gt;(orig, AL_START_HEAD);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt;((node = &lt;span style=&#34;color:#c34e00&#34;&gt;listNext&lt;/span&gt;(iter)) != NULL) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (copy-&amp;gt;dup) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            value = copy-&amp;gt;&lt;span style=&#34;color:#c34e00&#34;&gt;dup&lt;/span&gt;(node-&amp;gt;value);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (value == NULL) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#c34e00&#34;&gt;listRelease&lt;/span&gt;(copy);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#c34e00&#34;&gt;listReleaseIterator&lt;/span&gt;(iter);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            value = node-&amp;gt;value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;listAddNodeTail&lt;/span&gt;(copy, value) == NULL) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;listRelease&lt;/span&gt;(copy);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;listReleaseIterator&lt;/span&gt;(iter);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;listReleaseIterator&lt;/span&gt;(iter);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; copy;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>redis基础数据结构-sds简介</title>
      <link>http://shanks.link/blog/2021/08/06/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-sds%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Fri, 06 Aug 2021 16:55:31 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/06/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-sds%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h3 id=&#34;数据结构&#34;&gt;数据结构&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* context &#x9;= &amp;#34;hello&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * len &#x9;&#x9;= 5 不包含redis自动添加的&amp;#39;\0&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * free &#x9;= 0 预分配和惰性释放&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * buf[5]&#x9;= &amp;#39;\0&amp;#39; 自动添加一个&amp;#39;\0&amp;#39;在末尾，&amp;#39;\0&amp;#39;对外透明  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; sdshdr {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;long&lt;/span&gt; len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;long&lt;/span&gt; free;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; buf[];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;特点&#34;&gt;特点&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;空间预分配和惰性释放&#xA;&lt;ul&gt;&#xA;&lt;li&gt;避免频繁的系统调用造成的CPU耗时&lt;/li&gt;&#xA;&lt;li&gt;减少内存碎片&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;二进制安全和兼容部分C的string函数&#xA;&lt;ul&gt;&#xA;&lt;li&gt;尾部自动添加&amp;rsquo;\0&amp;rsquo;,以及len字段 实现了装载二进制数据的能力和兼容部分C的string函数&lt;/li&gt;&#xA;&lt;li&gt;明确的len和free避免了缓冲区的溢出&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;降低获取len的复杂度&#xA;&lt;ul&gt;&#xA;&lt;li&gt;相比C原始风格的字符串风格，sds可以直接读取len字段来获得len，从而将复杂度从0(n)优化为0(1)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;重要接口实现&#34;&gt;重要接口实现&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;构建指定长度的sds&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sds &lt;span style=&#34;color:#c34e00&#34;&gt;sdsnewlen&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *init, &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; initlen) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; sdshdr *sh;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sh = &lt;span style=&#34;color:#c34e00&#34;&gt;zmalloc&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; sdshdr)+initlen+0+1);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;// initlen:len 0:free 1:&amp;#39;\0&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (sh == NULL) &lt;span style=&#34;color:#c34e00&#34;&gt;sdsOomAbort&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sh-&amp;gt;len = initlen;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sh-&amp;gt;free = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (initlen) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (init) &lt;span style=&#34;color:#c34e00&#34;&gt;memcpy&lt;/span&gt;(sh-&amp;gt;buf, init, initlen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;memset&lt;/span&gt;(sh-&amp;gt;buf,0,initlen);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;// 空指针则填充&amp;#39;\0&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sh-&amp;gt;buf[initlen] = &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;// 添加哨兵&amp;#39;\0&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt;*)sh-&amp;gt;buf;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;// NOTE: 这里返回的是buf&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;- 初始化时没有预分配MEM，因为一般而言sds是只读的，未修改则先不预分配空间&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;修改sds的长度&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; sds &lt;span style=&#34;color:#c34e00&#34;&gt;sdsMakeRoomFor&lt;/span&gt;(sds s, &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; addlen) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; sdshdr *sh, *newsh;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; free = &lt;span style=&#34;color:#c34e00&#34;&gt;sdsavail&lt;/span&gt;(s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; len, newlen;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (free &amp;gt;= addlen) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; s;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    len = &lt;span style=&#34;color:#c34e00&#34;&gt;sdslen&lt;/span&gt;(s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sh = (&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt;*) (s-(&lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; sdshdr)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    newlen = (len+addlen)*2;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;// 直接预分配一倍&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    newsh = &lt;span style=&#34;color:#c34e00&#34;&gt;zrealloc&lt;/span&gt;(sh, &lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; sdshdr)+newlen+1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (newsh == NULL) &lt;span style=&#34;color:#c34e00&#34;&gt;sdsOomAbort&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    newsh-&amp;gt;free = newlen - len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; newsh-&amp;gt;buf;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;- 这里可以看到作者的思路，既然此sds被修改，那么很有可能再次修改，所以为了频繁系统调用，这里预分配一部分内存&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>redis源码阅读计划</title>
      <link>http://shanks.link/blog/2021/08/06/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%A1%E5%88%92/</link>
      <pubDate>Fri, 06 Aug 2021 15:21:07 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/06/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%A1%E5%88%92/</guid>
      <description>&lt;h3 id=&#34;整体思路&#34;&gt;整体思路&lt;/h3&gt;&#xA;&lt;p&gt;        鉴于在DB和分布式方面没有啥知识储备，以及空闲时间的不确定，整体思路：从简到繁，从基础到单机再到分布式&lt;/p&gt;&#xA;&lt;h3 id=&#34;内容计划&#34;&gt;内容计划&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;阅读0.0.1版本，了解大致的数据结构，事件系统，网络模块等主模块的逻辑(已完成)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go学习建议</title>
      <link>http://shanks.link/blog/2021/08/04/go%E5%AD%A6%E4%B9%A0%E5%BB%BA%E8%AE%AE/</link>
      <pubDate>Wed, 04 Aug 2021 20:10:55 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/04/go%E5%AD%A6%E4%B9%A0%E5%BB%BA%E8%AE%AE/</guid>
      <description>&lt;h1 id=&#34;如果学习-go&#34;&gt;如果学习 Go&lt;/h1&gt;&#xA;&lt;p&gt;整理了目前市面上的各类图书，特别是开源的图书，阅读学习建议分享给你&lt;/p&gt;&#xA;&lt;h2 id=&#34;入门建议&#34;&gt;入门建议&lt;/h2&gt;&#xA;&lt;p&gt;Go 语言入门图书挺多的，根据我的了解和大家的反馈、讨论，比较推荐如下图书，选择一本认真看即可，没必要那么多。&lt;/p&gt;</description>
    </item>
    <item>
      <title>彻底弄懂TCP协议：从三次握手说起</title>
      <link>http://shanks.link/blog/2021/07/30/%E5%BD%BB%E5%BA%95%E5%BC%84%E6%87%82tcp%E5%8D%8F%E8%AE%AE%E4%BB%8E%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E8%AF%B4%E8%B5%B7/</link>
      <pubDate>Fri, 30 Jul 2021 17:36:14 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/07/30/%E5%BD%BB%E5%BA%95%E5%BC%84%E6%87%82tcp%E5%8D%8F%E8%AE%AE%E4%BB%8E%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E8%AF%B4%E8%B5%B7/</guid>
      <description>&lt;p&gt;作者：morganhuang，腾讯 IEG 后台开发工程师&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;说到 TCP 协议，相信大家都比较熟悉了，对于 TCP 协议总能说个一二三来，但是 TCP 协议又是一个非常复杂的协议，其中有不少细节点让人头疼点。本文就是来说说这些头疼点的，浅谈一些 TCP 的疑难杂症。那么从哪说起呢？当然是从三次握手和四次挥手说起啦，可能大家都知道 TCP 是三次交互完成连接的建立，四次交互来断开一个连接，那为什么是三次握手和四次挥手呢？反过来不行吗？&lt;/p&gt;</description>
    </item>
    <item>
      <title>wget命令详解</title>
      <link>http://shanks.link/blog/2021/07/30/wget%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 30 Jul 2021 17:13:32 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/07/30/wget%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;p&gt;#Linux wget 命令用法详解&lt;/p&gt;&#xA;&lt;p&gt;Linux wget是一个下载文件的工具，它用在命令行下。对于Linux用户是必不可少的工具，尤其对于网络管理员，经常要下载一些软件或从远程服务器恢复备份到本地服务器。如果我们使用虚拟主机，处理这样的事务我们只能先从远程服务器下载到我们电脑磁盘，然后再用ftp工具上传到服务器。这样既浪费时间又浪费精力，那不没办法的事。而到了Linux VPS，它则可以直接下载到服务器而不用经过上传这一步。wget工具体积小但功能完善，它支持断点下载功能，同时支持FTP和HTTP下载方式，支持代理服务器和设置起来方便简单。下面我们以实例的形式说明怎么使用wget。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux内存管理小结三-其他内存相关知识</title>
      <link>http://shanks.link/blog/2021/07/30/linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%B0%8F%E7%BB%93%E4%B8%89-%E5%85%B6%E4%BB%96%E5%86%85%E5%AD%98%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Fri, 30 Jul 2021 18:17:27 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/30/linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%B0%8F%E7%BB%93%E4%B8%89-%E5%85%B6%E4%BB%96%E5%86%85%E5%AD%98%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</guid>
      <description>&lt;h1 id=&#34;其他内存相关知识linux内存管理小结三&#34;&gt;其他内存相关知识——Linux内存管理小结三&lt;/h1&gt;&#xA;&lt;h1 id=&#34;overcommit和oom&#34;&gt;【Overcommit和OOM】&lt;/h1&gt;&#xA;&lt;p&gt;​     在Unix中，当一个用户进程使用malloc()函数申请内存时，假如返回值是NULL，说明当前系统没有足够的可用内存。一般程序都会判断malloc返回值是null时便报错退出。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux内存管理小结二-glibc内存管理</title>
      <link>http://shanks.link/blog/2021/07/30/linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%B0%8F%E7%BB%93%E4%BA%8C-glibc%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
      <pubDate>Fri, 30 Jul 2021 18:14:38 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/30/linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%B0%8F%E7%BB%93%E4%BA%8C-glibc%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;h1 id=&#34;glibc内存管理linux内存管理小结二&#34;&gt;glibc内存管理——Linux内存管理小结二&lt;/h1&gt;&#xA;&lt;h1 id=&#34;引言&#34;&gt;【引言】&lt;/h1&gt;&#xA;&lt;p&gt;最近在生产环境遇到一个奇怪的现象，nginx占用的虚拟内存和物理内存都很高，并且一直不会下降。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/%E7%BC%96%E7%A8%8B%E6%9D%82%E8%B0%88/2.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;因为服务器本身的业务量并不大，而且对比集群其他服务器nginx才几十兆的内存消耗，第一个想到的就是内存泄漏。但是连续观察了多天，内存也没有进一步上涨，和以前遇过的内存泄漏问题不是很像。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux内存管理小结一-什么是物理/虚拟/共享内存</title>
      <link>http://shanks.link/blog/2021/07/30/linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%B0%8F%E7%BB%93%E4%B8%80-%E4%BB%80%E4%B9%88%E6%98%AF%E7%89%A9%E7%90%86/%E8%99%9A%E6%8B%9F/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/</link>
      <pubDate>Fri, 30 Jul 2021 18:10:45 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/30/linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%B0%8F%E7%BB%93%E4%B8%80-%E4%BB%80%E4%B9%88%E6%98%AF%E7%89%A9%E7%90%86/%E8%99%9A%E6%8B%9F/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/</guid>
      <description>&lt;h1 id=&#34;什么是物理虚拟共享内存linux内存管理小结一&#34;&gt;什么是物理/虚拟/共享内存——Linux内存管理小结一&lt;/h1&gt;&#xA;&lt;h1 id=&#34;物理内存和虚拟内存到底有什么区别&#34;&gt;物理内存和虚拟内存到底有什么区别？&lt;/h1&gt;&#xA;&lt;p&gt;提到内存，我们会想到经常接触的三个词：虚拟内存、物理内存、共享内存。它们分别对应top输出中的VIRT、RES、SHR三列。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/%E7%BC%96%E7%A8%8B%E6%9D%82%E8%B0%88/11.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;1-物理内存&#34;&gt;1. 物理内存&lt;/h1&gt;&#xA;&lt;p&gt;​    系统的物理内存被划分为许多相同大小的部分，也称作内存页。内存页的大小取决于CPU的架构和操作系统的配置，一般为4KB。物理内存的使用主要分为以下几方面：&lt;/p&gt;</description>
    </item>
    <item>
      <title>malloc_stats---检查内存泄露的神器</title>
      <link>http://shanks.link/blog/2021/07/30/malloc_stats---%E6%A3%80%E6%9F%A5%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E7%9A%84%E7%A5%9E%E5%99%A8/</link>
      <pubDate>Fri, 30 Jul 2021 17:58:40 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/30/malloc_stats---%E6%A3%80%E6%9F%A5%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E7%9A%84%E7%A5%9E%E5%99%A8/</guid>
      <description>&lt;p&gt;在之前的博客中提到过，&lt;a href=&#34;http://blog.csdn.net/hust_wusen/article/details/8776002&#34;&gt;valgrind可以&lt;/a&gt;用来检测内存泄露，但在使用中，往往会遇到一些问题，给调试工作带来很多不必要的麻烦，我自己遇到的有以下两种：&lt;/p&gt;&#xA;&lt;p&gt;(1)内存泄露误检（系统初始化时，可能有一些需要长期保存在内存中的&lt;a href=&#34;http://lib.csdn.net/base/datastructure&#34;&gt;数据结构&lt;/a&gt;，这些空间是永远不释放的，而这些内存会被认为绝对泄露）&lt;/p&gt;&#xA;&lt;p&gt;(2) valgrind检查内存泄露过于全面，运行后的结果太多往往很难从中找到有用的信息。有时候，我们只需要关注某些函数，可能在执行某个操作，调用某些函数时会出现内存泄露，此时，valgrind的工作显得冗余而复杂&lt;/p&gt;</description>
    </item>
    <item>
      <title>c运行库、c标准库、windows API的区别和联系</title>
      <link>http://shanks.link/blog/2021/07/30/c%E8%BF%90%E8%A1%8C%E5%BA%93c%E6%A0%87%E5%87%86%E5%BA%93windows-api%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB/</link>
      <pubDate>Fri, 30 Jul 2021 17:29:46 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/30/c%E8%BF%90%E8%A1%8C%E5%BA%93c%E6%A0%87%E5%87%86%E5%BA%93windows-api%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB/</guid>
      <description>&lt;h1 id=&#34;c运行库c标准库windows-api的区别和联系&#34;&gt;&lt;a href=&#34;https://www.cnblogs.com/renyuan/p/5031100.html&#34;&gt;c运行库、c标准库、windows API的区别和联系&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;C运行时库函数&lt;/strong&gt;&#xA;C运行时库函数是指C语言本身支持的一些基本函数，通常是汇编直接实现的。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;API函数&lt;/strong&gt;&#xA;API函数是操作系统为方便用户设计应用程序而提供的实现特定功能的函数，API函数也是C语言的函数实现的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>为什么请求时,需要使用URLEncode做encode转码操作</title>
      <link>http://shanks.link/blog/2021/07/30/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B7%E6%B1%82%E6%97%B6%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8urlencode%E5%81%9Aencode%E8%BD%AC%E7%A0%81%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Fri, 30 Jul 2021 17:18:15 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/30/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B7%E6%B1%82%E6%97%B6%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8urlencode%E5%81%9Aencode%E8%BD%AC%E7%A0%81%E6%93%8D%E4%BD%9C/</guid>
      <description>&lt;h1 id=&#34;为什么请求时需使用urlencode做encode转码操作&#34;&gt;为什么请求时,需使用URLEncode做encode转码操作&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.blogjava.net/donghang73/archive/2011/08/10/356208.html&#34;&gt;为什么要对url进行encode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;发现现在几乎所有的网站都对url中的汉字和特殊的字符，进行了urlencode操作，也就是：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://hi.baidu.com/%BE%B2%D0%C4%C0%CF%C8%CB/creat/blog/&#34;&gt;http://hi.baidu.com/%BE%B2%D0%C4%C0%CF%C8%CB/creat/blog/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;这个样子，中间%形式的，肯定就是我的登录用户名称了吧。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何阅读一份源代码?</title>
      <link>http://shanks.link/blog/2021/07/30/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E4%BB%BD%E6%BA%90%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Fri, 30 Jul 2021 17:04:53 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/30/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E4%BB%BD%E6%BA%90%E4%BB%A3%E7%A0%81/</guid>
      <description>&lt;h1 id=&#34;如何阅读一份源代码&#34;&gt;如何阅读一份源代码？&lt;/h1&gt;&#xA;&lt;h2 id=&#34;contents&#34;&gt;CONTENTS&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.codedump.info/post/20190324-how-to-read-code/#%E5%85%88%E8%B7%91%E8%B5%B7%E6%9D%A5&#34;&gt;先跑起来&lt;/a&gt;&lt;a href=&#34;https://www.codedump.info/post/20190324-how-to-read-code/#%E8%B0%83%E8%AF%95%E6%89%8B%E6%AE%B5&#34;&gt;调试手段&lt;/a&gt;&lt;a href=&#34;https://www.codedump.info/post/20190324-how-to-read-code/#%E4%BD%BF%E7%94%A8%E9%A1%BA%E6%89%8B%E7%9A%84%E5%B7%A5%E5%85%B7&#34;&gt;使用顺手的工具&lt;/a&gt;&lt;a href=&#34;https://www.codedump.info/post/20190324-how-to-read-code/#%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90&#34;&gt;情景分析&lt;/a&gt;&lt;a href=&#34;https://www.codedump.info/post/20190324-how-to-read-code/#%E5%88%A9%E7%94%A8%E5%A5%BD%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B&#34;&gt;利用好测试用例&lt;/a&gt;&lt;a href=&#34;https://www.codedump.info/post/20190324-how-to-read-code/#%E5%8E%98%E6%B8%85%E6%A0%B8%E5%BF%83%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB&#34;&gt;厘清核心数据结构之间的关系&lt;/a&gt;&lt;a href=&#34;https://www.codedump.info/post/20190324-how-to-read-code/#%E6%95%B4%E4%BD%93%E5%92%8C%E7%BB%86%E8%8A%82&#34;&gt;整体和细节&lt;/a&gt;&lt;a href=&#34;https://www.codedump.info/post/20190324-how-to-read-code/#%E5%A4%9A%E9%97%AE%E8%87%AA%E5%B7%B1%E5%87%A0%E4%B8%AA%E9%97%AE%E9%A2%98&#34;&gt;多问自己几个问题&lt;/a&gt;&lt;a href=&#34;https://www.codedump.info/post/20190324-how-to-read-code/#%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0&#34;&gt;写自己的代码阅读笔记&lt;/a&gt;&lt;a href=&#34;https://www.codedump.info/post/20190324-how-to-read-code/#%E6%80%BB%E7%BB%93&#34;&gt;总结&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;我在本文的基础上做了一些补充和改进，见&lt;a href=&#34;https://www.codedump.info/post/20200605-how-to-read-code-v2020/&#34;&gt;《如何阅读一份源代码？（2020年版）》&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;阅读源代码的能力算是程序员的一种底层基础能力之一，这个能力之所以重要，原因在于：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不可避免的需要阅读或者接手他人的项目。比如调研一个开源项目，比如接手一个其他人的项目。&lt;/li&gt;&#xA;&lt;li&gt;阅读优秀的项目源码是学习他人优秀经验的重要途径之一，这一点我自己深有体会。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;然而，读代码比写代码还是更难一些，原因在于“&lt;a href=&#34;https://www.zhihu.com/question/21820752/answer/19427754&#34;&gt;写代码是在表达自己,读代码是在理解别人&lt;/a&gt;”。因为面对的项目多，项目的作者有各自的风格，理解起来需要花费不少的精力。&lt;/p&gt;</description>
    </item>
    <item>
      <title>gdb 提示 coredump 文件 truncated 问题排查</title>
      <link>http://shanks.link/blog/2021/07/27/gdb-%E6%8F%90%E7%A4%BA-coredump-%E6%96%87%E4%BB%B6-truncated-%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</link>
      <pubDate>Tue, 27 Jul 2021 18:28:34 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/07/27/gdb-%E6%8F%90%E7%A4%BA-coredump-%E6%96%87%E4%BB%B6-truncated-%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</guid>
      <description>&lt;h1 id=&#34;gdb-提示-coredump-文件-truncated-问题排查&#34;&gt;gdb 提示 coredump 文件 truncated 问题排查&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;本文选自“字节跳动基础架构实践”系列文章。&lt;/p&gt;&#xA;&lt;p&gt;“字节跳动基础架构实践”系列文章是由字节跳动基础架构部门各技术团队及专家倾力打造的技术干货内容，和大家分享团队在基础架构发展和演进过程中的实践经验与教训，与各位技术同学一起交流成长。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go的一次故障排除</title>
      <link>http://shanks.link/blog/2021/07/27/go%E7%9A%84%E4%B8%80%E6%AC%A1%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4/</link>
      <pubDate>Tue, 27 Jul 2021 18:25:31 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/07/27/go%E7%9A%84%E4%B8%80%E6%AC%A1%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4/</guid>
      <description>&lt;h1 id=&#34;引发的线上事故&#34;&gt;“���”引发的线上事故&lt;/h1&gt;&#xA;&lt;p&gt;最近遇到了一起依赖升级 + 异常数据引发的线上事故，教训惨痛，本文对此进行回故和总结。&lt;/p&gt;&#xA;&lt;h1 id=&#34;背景&#34;&gt;&lt;strong&gt;背景&lt;/strong&gt;&lt;/h1&gt;&#xA;&lt;p&gt;起因是我们使用的服务框架版本比较老，GC 次数的 metrics 打点一直为 0，咨询了相关同学后，决定升级框架。升级的过程中，出现了 &lt;code&gt;useofinternalpackagexxxnotallowed&lt;/code&gt; 的报错，又咨询了一下相关同学后，尝试使用 &lt;code&gt;go mod&lt;/code&gt; 解决。&lt;/p&gt;</description>
    </item>
    <item>
      <title>字节跳动在 Go 网络库上的实践</title>
      <link>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%9C%A8-go-%E7%BD%91%E7%BB%9C%E5%BA%93%E4%B8%8A%E7%9A%84%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 27 Jul 2021 17:11:01 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%9C%A8-go-%E7%BD%91%E7%BB%9C%E5%BA%93%E4%B8%8A%E7%9A%84%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;h1 id=&#34;字节跳动在-go-网络库上的实践&#34;&gt;字节跳动在 Go 网络库上的实践&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;本文选自“字节跳动基础架构实践”系列文章。&lt;/p&gt;&#xA;&lt;p&gt;“字节跳动基础架构实践”系列文章是由字节跳动基础架构部门各技术团队及专家倾力打造的技术干货内容，和大家分享团队在基础架构发展和演进过程中的实践经验与教训，与各位技术同学一起交流成长。&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据库面试简答、30道高频面试题</title>
      <link>http://shanks.link/blog/2021/07/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%A2%E8%AF%95%E7%AE%80%E7%AD%9430%E9%81%93%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Tue, 27 Jul 2021 16:16:32 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/07/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%A2%E8%AF%95%E7%AE%80%E7%AD%9430%E9%81%93%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/ZhuChangwu/&#34;&gt;&lt;img src=&#34;https://www.cnblogs.com/skins/custom/images/logo.gif&#34; alt=&#34;返回主页&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;数据库面试简答30道高频面试题&#34;&gt;&lt;a href=&#34;shankusu.me/%E8%81%8C%E5%9C%BA/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%A2%E8%AF%95%E7%AE%80%E7%AD%9430%E9%81%93%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98/#more&#34;&gt;数据库面试简答、30道高频面试题&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h3 id=&#34;一mysql问答&#34;&gt;一、MySQL问答&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1数据库sql语句查询跨表查询有哪几种方式&#34;&gt;1、数据库sql语句查询，跨表查询有哪几种方式&lt;/h4&gt;&#xA;&lt;p&gt;内连接(inner可以不写)&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt; e.name e.age p.product_name p.saled&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;from&lt;/span&gt; employee e，product p &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;where&lt;/span&gt; e.id = p.id&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt; e.name e.age p.product_name p.saled&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;from&lt;/span&gt; employee &lt;span style=&#34;color:#00f&#34;&gt;inner&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;join&lt;/span&gt; e，product p &lt;span style=&#34;color:#00f&#34;&gt;on&lt;/span&gt; e.id = p.id&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这就是内连接，它要求数据必须On条件必须百分百匹配才会符合条件并返回。当不满足时，他会返回空。&lt;/p&gt;</description>
    </item>
    <item>
      <title>字节跳动 Flink 单点恢复功能实践</title>
      <link>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8-flink-%E5%8D%95%E7%82%B9%E6%81%A2%E5%A4%8D%E5%8A%9F%E8%83%BD%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 27 Jul 2021 18:21:02 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8-flink-%E5%8D%95%E7%82%B9%E6%81%A2%E5%A4%8D%E5%8A%9F%E8%83%BD%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;h1 id=&#34;跳动-flink-单点恢复功能实践&#34;&gt;跳动 Flink 单点恢复功能实践&lt;/h1&gt;&#xA;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;&#xA;&lt;p&gt;在字节跳动的实时计算场景中，我们有很多任务（数量 2k+）会直接服务于线上，其输出时延和稳定性会直接影响线上产品的用户体验，这类任务通常具有如下特点：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kernel trace tools（三）：中断和软中断关闭时间过长问题追踪</title>
      <link>http://shanks.link/blog/2021/07/27/kernel-trace-tools%E4%B8%89%E4%B8%AD%E6%96%AD%E5%92%8C%E8%BD%AF%E4%B8%AD%E6%96%AD%E5%85%B3%E9%97%AD%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E9%97%AE%E9%A2%98%E8%BF%BD%E8%B8%AA/</link>
      <pubDate>Tue, 27 Jul 2021 18:09:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/27/kernel-trace-tools%E4%B8%89%E4%B8%AD%E6%96%AD%E5%92%8C%E8%BD%AF%E4%B8%AD%E6%96%AD%E5%85%B3%E9%97%AD%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E9%97%AE%E9%A2%98%E8%BF%BD%E8%B8%AA/</guid>
      <description>&lt;h1 id=&#34;kernel-trace-tools三内核-runqueue-延迟跟踪&#34;&gt;Kernel trace tools（三）：内核 runqueue 延迟跟踪&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;本文是由字节跳动系统部 STE 团队出品的“kernel trace tools”系列文章之一，以介绍团队自研多类延迟问题追踪工具。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kernel trace tools（二）：中断和软中断关闭时间过长问题追踪</title>
      <link>http://shanks.link/blog/2021/07/27/kernel-trace-tools%E4%BA%8C%E4%B8%AD%E6%96%AD%E5%92%8C%E8%BD%AF%E4%B8%AD%E6%96%AD%E5%85%B3%E9%97%AD%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E9%97%AE%E9%A2%98%E8%BF%BD%E8%B8%AA/</link>
      <pubDate>Tue, 27 Jul 2021 18:03:53 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/27/kernel-trace-tools%E4%BA%8C%E4%B8%AD%E6%96%AD%E5%92%8C%E8%BD%AF%E4%B8%AD%E6%96%AD%E5%85%B3%E9%97%AD%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E9%97%AE%E9%A2%98%E8%BF%BD%E8%B8%AA/</guid>
      <description>&lt;h1 id=&#34;kernel-trace-tools二内核态执行时间跟踪&#34;&gt;Kernel trace tools（二）：内核态执行时间跟踪&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;本文是由字节跳动系统部 STE 团队出品的“kernel trace tools”系列文章之一，以介绍团队自研多类延迟问题追踪工具。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kernel trace tools（一）：中断和软中断关闭时间过长问题追踪</title>
      <link>http://shanks.link/blog/2021/07/27/kernel-trace-tools%E4%B8%80%E4%B8%AD%E6%96%AD%E5%92%8C%E8%BD%AF%E4%B8%AD%E6%96%AD%E5%85%B3%E9%97%AD%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E9%97%AE%E9%A2%98%E8%BF%BD%E8%B8%AA/</link>
      <pubDate>Tue, 27 Jul 2021 17:57:14 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/27/kernel-trace-tools%E4%B8%80%E4%B8%AD%E6%96%AD%E5%92%8C%E8%BD%AF%E4%B8%AD%E6%96%AD%E5%85%B3%E9%97%AD%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E9%97%AE%E9%A2%98%E8%BF%BD%E8%B8%AA/</guid>
      <description>&lt;h1 id=&#34;kenel-trace-tools一中断和软中断关闭时间过长问题追踪&#34;&gt;kenel trace tools（一）：中断和软中断关闭时间过长问题追踪&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;本文是由字节跳动系统部 STE 团队出品的 “kernel trace tools” 系列文章，以介绍团队自研多类延迟问题追踪工具。&lt;/p&gt;</description>
    </item>
    <item>
      <title>基于有限状态机与消息队列的三方支付系统补单实践</title>
      <link>http://shanks.link/blog/2021/07/27/%E5%9F%BA%E4%BA%8E%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA%E4%B8%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%A1%A5%E5%8D%95%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 27 Jul 2021 17:46:19 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/27/%E5%9F%BA%E4%BA%8E%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA%E4%B8%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%A1%A5%E5%8D%95%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;h1 id=&#34;基于有限状态机与消息队列的三方支付系统补单实践&#34;&gt;基于有限状态机与消息队列的三方支付系统补单实践&lt;/h1&gt;&#xA;&lt;h1 id=&#34;0-引言&#34;&gt;0. 引言&lt;/h1&gt;&#xA;&lt;p&gt;在日常生活中，从线下的超市购物到线上的外卖点餐、电商网购等，支付无时无刻不在发生，不论是通过现金、pos 机刷卡还是微信支付宝等第三方支付。线上支付有着及时便捷一气呵成的极致体验，当然也有少数的时候体验不够丝滑，比如早期我们在 PC 版 12306 买火车票，当支付完成后，订单的支付状态却经常不能及时更新，会有一段时间的延迟，有时甚至会等待很长时间处在未支付状态。&lt;/p&gt;</description>
    </item>
    <item>
      <title>微服务架构中如何优雅地重试？</title>
      <link>http://shanks.link/blog/2021/07/27/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E9%87%8D%E8%AF%95/</link>
      <pubDate>Tue, 27 Jul 2021 17:38:46 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/27/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E9%87%8D%E8%AF%95/</guid>
      <description>&lt;h1 id=&#34;字节跳动--微服务架构中如何优雅地重试&#34;&gt;字节跳动 | 微服务架构中如何优雅地重试？&lt;/h1&gt;&#xA;&lt;h1 id=&#34;背景&#34;&gt;&lt;strong&gt;背景&lt;/strong&gt;&lt;/h1&gt;&#xA;&lt;p&gt;在微服务架构中，一个大系统被拆分成多个小服务，小服务之间大量 RPC 调用，经常可能因为网络抖动等原因导致 RPC 调用失败，这时候使用重试机制可以提高请求的最终成功率，减少故障影响，让系统运行更稳定。&lt;/p&gt;</description>
    </item>
    <item>
      <title>字节跳动分布式表格存储系统的演进</title>
      <link>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%88%86%E5%B8%83%E5%BC%8F%E8%A1%A8%E6%A0%BC%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%BC%94%E8%BF%9B/</link>
      <pubDate>Tue, 27 Jul 2021 17:08:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%88%86%E5%B8%83%E5%BC%8F%E8%A1%A8%E6%A0%BC%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%BC%94%E8%BF%9B/</guid>
      <description>&lt;h1 id=&#34;跳动分布式表格存储系统的演进&#34;&gt;跳动分布式表格存储系统的演进&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;本文选自“字节跳动基础架构实践”系列文章。&lt;/p&gt;&#xA;&lt;p&gt;“字节跳动基础架构实践”系列文章是由字节跳动基础架构部门各技术团队及专家倾力打造的技术干货内容，和大家分享团队在基础架构发展和演进过程中的实践经验与教训，与各位技术同学一起交流成长。&lt;/p&gt;</description>
    </item>
    <item>
      <title>字节跳动自研线上引流回放系统的架构演进</title>
      <link>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E8%87%AA%E7%A0%94%E7%BA%BF%E4%B8%8A%E5%BC%95%E6%B5%81%E5%9B%9E%E6%94%BE%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/</link>
      <pubDate>Tue, 27 Jul 2021 16:56:51 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E8%87%AA%E7%A0%94%E7%BA%BF%E4%B8%8A%E5%BC%95%E6%B5%81%E5%9B%9E%E6%94%BE%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/</guid>
      <description>&lt;h1 id=&#34;字节跳动自研线上引流回放系统的架构演进&#34;&gt;字节跳动自研线上引流回放系统的架构演进&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;本文选自“字节跳动基础架构实践”系列文章。&lt;/p&gt;&#xA;&lt;p&gt;“字节跳动基础架构实践”系列文章是由字节跳动基础架构部门各技术团队及专家倾力打造的技术干货内容，和大家分享团队在基础架构发展和演进过程中的实践经验与教训，与各位技术同学一起交流成长。&lt;/p&gt;</description>
    </item>
    <item>
      <title>字节跳动表格存储中的事务</title>
      <link>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E8%A1%A8%E6%A0%BC%E5%AD%98%E5%82%A8%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Tue, 27 Jul 2021 16:54:59 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E8%A1%A8%E6%A0%BC%E5%AD%98%E5%82%A8%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/</guid>
      <description>&lt;h1 id=&#34;表格存储中的事务&#34;&gt;表格存储中的事务&lt;/h1&gt;&#xA;&lt;h1 id=&#34;1-背景&#34;&gt;1. 背景&lt;/h1&gt;&#xA;&lt;p&gt;分布式表格存储系统在业界拥有广泛的应用场景。Google 先后发布了 Bigtable 和 Spanner 两代分布式表格存储系统，承接了其公司内部和外部云服务中的所有表格存储需求，其中 Bigtable 的开源实现 HBase 在国内外公司中都得到了广泛的使用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>字节跳动自研强一致在线 KV &amp;表格存储实践 - 下篇</title>
      <link>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E8%87%AA%E7%A0%94%E5%BC%BA%E4%B8%80%E8%87%B4%E5%9C%A8%E7%BA%BF-kv-%E8%A1%A8%E6%A0%BC%E5%AD%98%E5%82%A8%E5%AE%9E%E8%B7%B5-%E4%B8%8B%E7%AF%87/</link>
      <pubDate>Tue, 27 Jul 2021 16:45:17 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E8%87%AA%E7%A0%94%E5%BC%BA%E4%B8%80%E8%87%B4%E5%9C%A8%E7%BA%BF-kv-%E8%A1%A8%E6%A0%BC%E5%AD%98%E5%82%A8%E5%AE%9E%E8%B7%B5-%E4%B8%8B%E7%AF%87/</guid>
      <description>&lt;h1 id=&#34;字节跳动自研强一致在线-kv-表格存储实践---下篇&#34;&gt;字节跳动自研强一致在线 KV &amp;amp;表格存储实践 - 下篇&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;本文选自“字节跳动基础架构实践”系列文章。&lt;/p&gt;&#xA;&lt;p&gt;“字节跳动基础架构实践”系列文章是由字节跳动基础架构部门各技术团队及专家倾力打造的技术干货内容，和大家分享团队在基础架构发展和演进过程中的实践经验与教训，与各位技术同学一起交流成长。&lt;/p&gt;</description>
    </item>
    <item>
      <title>字节跳动自研强一致在线 KV &amp;表格存储实践 - 上篇</title>
      <link>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E8%87%AA%E7%A0%94%E5%BC%BA%E4%B8%80%E8%87%B4%E5%9C%A8%E7%BA%BF-kv-%E8%A1%A8%E6%A0%BC%E5%AD%98%E5%82%A8%E5%AE%9E%E8%B7%B5-%E4%B8%8A%E7%AF%87/</link>
      <pubDate>Tue, 27 Jul 2021 16:43:26 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E8%87%AA%E7%A0%94%E5%BC%BA%E4%B8%80%E8%87%B4%E5%9C%A8%E7%BA%BF-kv-%E8%A1%A8%E6%A0%BC%E5%AD%98%E5%82%A8%E5%AE%9E%E8%B7%B5-%E4%B8%8A%E7%AF%87/</guid>
      <description>&lt;h1 id=&#34;字节跳动自研强一致在线-kv-表格存储实践---上篇&#34;&gt;字节跳动自研强一致在线 KV &amp;amp;表格存储实践 - 上篇&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;本文选自“字节跳动基础架构实践”系列文章。&lt;/p&gt;&#xA;&lt;p&gt;“字节跳动基础架构实践”系列文章是由字节跳动基础架构部门各技术团队及专家倾力打造的技术干货内容，和大家分享团队在基础架构发展和演进过程中的实践经验与教训，与各位技术同学一起交流成长。&lt;/p&gt;</description>
    </item>
    <item>
      <title>字节跳动自研万亿级图数据库 &amp; 图计算实践</title>
      <link>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E8%87%AA%E7%A0%94%E4%B8%87%E4%BA%BF%E7%BA%A7%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%9B%BE%E8%AE%A1%E7%AE%97%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 27 Jul 2021 16:39:57 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E8%87%AA%E7%A0%94%E4%B8%87%E4%BA%BF%E7%BA%A7%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%9B%BE%E8%AE%A1%E7%AE%97%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;h1 id=&#34;跳动自研万亿级图数据库--图计算实践&#34;&gt;跳动自研万亿级图数据库 &amp;amp; 图计算实践&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;本文选自“字节跳动基础架构实践”系列文章。&lt;/p&gt;&#xA;&lt;p&gt;“字节跳动基础架构实践”系列文章是由字节跳动基础架构部门各技术团队及专家倾力打造的技术干货内容，和大家分享团队在基础架构发展和演进过程中的实践经验与教训，与各位技术同学一起交流成长。&lt;/p&gt;</description>
    </item>
    <item>
      <title>字节跳动混沌工程实践总结</title>
      <link>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E6%B7%B7%E6%B2%8C%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 27 Jul 2021 15:34:27 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E6%B7%B7%E6%B2%8C%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;h2 id=&#34;字节跳动混沌工程实践总结&#34;&gt;字节跳动混沌工程实践总结&lt;/h2&gt;&#xA;&lt;p&gt;原创 基础架构团队 &lt;a href=&#34;javascript:void(0);&#34;&gt;字节跳动技术团队&lt;/a&gt; &lt;em&gt;2020-04-27&lt;/em&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;本文选自“字节跳动基础架构实践”系列文章。&lt;/p&gt;&#xA;&lt;p&gt;“字节跳动基础架构实践”系列文章是由字节跳动基础架构部门各技术团队及专家倾力打造的技术干货内容，和大家分享团队在基础架构发展和演进过程中的实践经验与教训，与各位技术同学一起交流成长。&lt;/p&gt;</description>
    </item>
    <item>
      <title>字节跳动 EB 级 HDFS 实践</title>
      <link>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8-eb-%E7%BA%A7-hdfs-%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 27 Jul 2021 15:23:52 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8-eb-%E7%BA%A7-hdfs-%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;h2 id=&#34;字节跳动-eb-级-hdfs-实践&#34;&gt;字节跳动 EB 级 HDFS 实践&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;本文选自“字节跳动基础架构实践”系列文章。&lt;/p&gt;&#xA;&lt;p&gt;“字节跳动基础架构实践”系列文章是由字节跳动基础架构部门各技术团队及专家倾力打造的技术干货内容，和大家分享团队在基础架构发展和演进过程中的实践经验与教训，与各位技术同学一起交流成长。&lt;/p&gt;</description>
    </item>
    <item>
      <title>日志辅助工具timecat</title>
      <link>http://shanks.link/blog/2021/07/27/%E6%97%A5%E5%BF%97%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7timecat/</link>
      <pubDate>Tue, 27 Jul 2021 14:52:13 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/27/%E6%97%A5%E5%BF%97%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7timecat/</guid>
      <description>&lt;h2 id=&#34;日志辅助工具timecat&#34;&gt;日志辅助工具timecat&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;javascript:void(0);&#34;&gt;字节跳动技术团队&lt;/a&gt; &lt;em&gt;2017-09-08&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;今天我要分享一个用于对日志文件进行二分查找的工具：timecat&lt;/p&gt;&#xA;&lt;h2 id=&#34;0-用途&#34;&gt;0 用途&lt;/h2&gt;&#xA;&lt;p&gt;在线演示页面：http://aap.reetsee.com/page/timecat&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43;面试常见问题</title>
      <link>http://shanks.link/blog/2021/07/20/c-%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 20 Jul 2021 14:43:48 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/07/20/c-%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;h4 id=&#34;extern关键字的作用&#34;&gt;extern关键字的作用&lt;/h4&gt;&#xA;&lt;p&gt;置于变量或函数前，用于标示变量或函数的定义在别的文件中，提示编译器遇到此变量和函数时在其他模块中寻找其定义。它只要有两个作用：&lt;/p&gt;&#xA;&lt;p&gt;    当它与“C”一起连用的时候，如：extern &amp;ldquo;C&amp;rdquo; void fun(int a,int b);则告诉编译器在编译fun这个函数时候按着C的规矩去翻译，而不是C++的（这与C++的重载有关，C++语言支持函数重载，C语言不支持函数重载，函数被C++编译器编译后在库中的名字与C语言的不同）&#xA;    当extern不与“C”在一起修饰变量或函数时，如：extern int g_Int；它的作用就是声明函数或全局变量的作用范围的关键字，其声明的函数和变量可以在本模块或其他模块中使用。记住它是一个声明不是定义!也就是说B模块(编译单元)要是引用模块(编译单元)A中定义的全局变量或函数时，它只要包含A模块的头文件即可,在编译阶段，模块B虽然找不到该函数或变量，但它不会报错，它会在连接时从模块A生成的目标代码中找到此函数。&lt;/p&gt;</description>
    </item>
    <item>
      <title>面经 | 手把手教你挑选一个吸引人的简历模板</title>
      <link>http://shanks.link/blog/2021/07/19/%E9%9D%A2%E7%BB%8F-%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%8C%91%E9%80%89%E4%B8%80%E4%B8%AA%E5%90%B8%E5%BC%95%E4%BA%BA%E7%9A%84%E7%AE%80%E5%8E%86%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Mon, 19 Jul 2021 18:10:24 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/07/19/%E9%9D%A2%E7%BB%8F-%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%8C%91%E9%80%89%E4%B8%80%E4%B8%AA%E5%90%B8%E5%BC%95%E4%BA%BA%E7%9A%84%E7%AE%80%E5%8E%86%E6%A8%A1%E6%9D%BF/</guid>
      <description>&lt;p&gt;大家好，这是&lt;strong&gt;面试专题的第四篇&lt;/strong&gt;文章，中间间隔许久，实在是事情比较多，有些忙不过来。好在现在校招时间还没过去，也许还能给大家一点帮助。&lt;/p&gt;&#xA;&lt;p&gt;前段时间有一个妹子在知乎里给我发了一个有偿咨询，让我帮她看看她的简历有什么问题，为什么很多公司简历关都过不去。一般对于这种有偿咨询，我都是有求必应的。倒不是为了钱，而是我觉得别人愿意花钱来提问，说明对方是真的想要得到一个解答。那么如果有能力的话，我都会给予力所能及的帮助。但这一次我真没好意思收这个钱，原因也很简单，因为她连基本的模板都没选对，我很难用三言两语帮助到她。&lt;/p&gt;</description>
    </item>
    <item>
      <title>你找我内推，简历就写了这？</title>
      <link>http://shanks.link/blog/2021/07/19/%E4%BD%A0%E6%89%BE%E6%88%91%E5%86%85%E6%8E%A8%E7%AE%80%E5%8E%86%E5%B0%B1%E5%86%99%E4%BA%86%E8%BF%99/</link>
      <pubDate>Mon, 19 Jul 2021 17:55:31 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/07/19/%E4%BD%A0%E6%89%BE%E6%88%91%E5%86%85%E6%8E%A8%E7%AE%80%E5%8E%86%E5%B0%B1%E5%86%99%E4%BA%86%E8%BF%99/</guid>
      <description>&lt;p&gt;大家好，最近由于我司发展不错。在国内知名度越来越大，这两天从各种渠道收到了朋友送来的几封简历，让我帮忙内推。&lt;/p&gt;&#xA;&lt;p&gt;收到简历我当然是很开心的，因为通过了会有奖金嘛。但也有几封简历让我很尴尬，不知道如何是好。你说推吧，推了也肯定不过，挂在HR手上大家都不好看。你说不推吧，朋友那边面子过不去，很难受。大学里没有关于简历以及就业的培训，简历写不好我非常理解，但是可以写得这么出人意料还是挺难得的。所以这篇文章老生常谈，再和大家聊聊写简历这件事。&lt;/p&gt;</description>
    </item>
    <item>
      <title>leader总让我干杂活，我很不满，该怎么办？</title>
      <link>http://shanks.link/blog/2021/07/19/leader%E6%80%BB%E8%AE%A9%E6%88%91%E5%B9%B2%E6%9D%82%E6%B4%BB%E6%88%91%E5%BE%88%E4%B8%8D%E6%BB%A1%E8%AF%A5%E6%80%8E%E4%B9%88%E5%8A%9E/</link>
      <pubDate>Mon, 19 Jul 2021 17:51:29 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/07/19/leader%E6%80%BB%E8%AE%A9%E6%88%91%E5%B9%B2%E6%9D%82%E6%B4%BB%E6%88%91%E5%BE%88%E4%B8%8D%E6%BB%A1%E8%AF%A5%E6%80%8E%E4%B9%88%E5%8A%9E/</guid>
      <description>&lt;p&gt;众所周知互联网公司当中&lt;strong&gt;充满了套路&lt;/strong&gt;，什么把年终奖摊平到每个月跟你说薪水的，什么把年终的月份说得特别多，等你发现已经来不及的。明明跟你说的是A岗位结果让你去做B事情的，这些事情数不胜数，简直都不叫个事。要说其中最让人不能忍受的，我个人觉得还是&lt;strong&gt;无休无止的杂活&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>golang 的channels 行为</title>
      <link>http://shanks.link/blog/2021/07/19/golang-%E7%9A%84channels-%E8%A1%8C%E4%B8%BA/</link>
      <pubDate>Mon, 19 Jul 2021 16:22:27 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/07/19/golang-%E7%9A%84channels-%E8%A1%8C%E4%B8%BA/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;&#xA;&lt;p&gt;当我第一次使用 Go 的 channels 工作的时候，我犯了一个错误，把 channels 考虑为一个数据结构。我把 channels 看作为 goroutines 之间提供自动同步访问的队列。这种结构上的理解导致我写了很多不好且结构复杂的并发代码。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GO 开发者对 GO 初学者的建议</title>
      <link>http://shanks.link/blog/2021/07/19/go-%E5%BC%80%E5%8F%91%E8%80%85%E5%AF%B9-go-%E5%88%9D%E5%AD%A6%E8%80%85%E7%9A%84%E5%BB%BA%E8%AE%AE/</link>
      <pubDate>Mon, 19 Jul 2021 16:02:51 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/07/19/go-%E5%BC%80%E5%8F%91%E8%80%85%E5%AF%B9-go-%E5%88%9D%E5%AD%A6%E8%80%85%E7%9A%84%E5%BB%BA%E8%AE%AE/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;注：原文地址为 &lt;a href=&#34;http://www.gophercon.in/blog/2014/08/23/adviceforgonewbies/&#34;&gt;Advise from Go developers to Go programming newbies&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;以促进 India 的 go 编程作为 GopherConIndia 承诺的一部分。我们采访了 &lt;a href=&#34;http://list.ly/list/Pak-gopher-interviews&#34;&gt;40 位 Gophers&lt;/a&gt;（一个 Gopher 代表一个 GO 项目或是任何地方的 GO 程序员），得到了他们关于 GO 的意见。从 2014 年的八月到十一月，我们将每个星期发表两篇采访稿。&lt;/p&gt;</description>
    </item>
    <item>
      <title>程序员的精进方法，如何从一个底层程序员开始逆袭？</title>
      <link>http://shanks.link/blog/2021/07/19/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E7%B2%BE%E8%BF%9B%E6%96%B9%E6%B3%95%E5%A6%82%E4%BD%95%E4%BB%8E%E4%B8%80%E4%B8%AA%E5%BA%95%E5%B1%82%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BC%80%E5%A7%8B%E9%80%86%E8%A2%AD/</link>
      <pubDate>Mon, 19 Jul 2021 16:55:40 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/19/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E7%B2%BE%E8%BF%9B%E6%96%B9%E6%B3%95%E5%A6%82%E4%BD%95%E4%BB%8E%E4%B8%80%E4%B8%AA%E5%BA%95%E5%B1%82%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BC%80%E5%A7%8B%E9%80%86%E8%A2%AD/</guid>
      <description>&lt;p&gt;前两天有粉丝在群里让我写一下&lt;strong&gt;程序员的精进方法&lt;/strong&gt;，今天就来简单聊一下这个话题。&lt;/p&gt;&#xA;&lt;p&gt;在我看来程序员和小兵的职业发展路线是一样的，我简单的把小兵到将军的过程分成三个阶段，来看一下在这三个阶段当中我们需要做些什么。&lt;/p&gt;</description>
    </item>
    <item>
      <title>vscode 解决正在下载程序包C/C&#43;&#43; language components (Linux / x86_64) 失败引起的符号找不到问题</title>
      <link>http://shanks.link/blog/2021/07/10/vscode-%E8%A7%A3%E5%86%B3%E6%AD%A3%E5%9C%A8%E4%B8%8B%E8%BD%BD%E7%A8%8B%E5%BA%8F%E5%8C%85c/c-language-components-linux-/-x86_64-%E5%A4%B1%E8%B4%A5%E5%BC%95%E8%B5%B7%E7%9A%84%E7%AC%A6%E5%8F%B7%E6%89%BE%E4%B8%8D%E5%88%B0%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 10 Jul 2021 16:57:31 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/07/10/vscode-%E8%A7%A3%E5%86%B3%E6%AD%A3%E5%9C%A8%E4%B8%8B%E8%BD%BD%E7%A8%8B%E5%BA%8F%E5%8C%85c/c-language-components-linux-/-x86_64-%E5%A4%B1%E8%B4%A5%E5%BC%95%E8%B5%B7%E7%9A%84%E7%AC%A6%E5%8F%B7%E6%89%BE%E4%B8%8D%E5%88%B0%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;h2 id=&#34;1问题&#34;&gt;1.问题&lt;/h2&gt;&#xA;&lt;p&gt;vscode ssh远程查看代码时，大纲无法罗列函数列表。&#xA;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210416232848358.png&#34; alt=&#34;img&#34;&gt;&#xA;根本原因是远程c/c++插件没有安装成功&#xA;错误信息如下&#xA;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210416232926264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW53cjIwMTg=,size_16,color_FFFFFF,t_70&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;正在下载程序包“C/C++ language components (Linux / x86_64)” 失败。正在重试... 失败。正在重试... 失败。正在重试...正在等待 8 秒... 失败。正在重试...正在等待 16 秒... 未能下载 https://go.microsoft.com/fwlink/?linkid=2161011&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;在阶段 downloadPackages 失败&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Error: self signed certificate in certificate chain&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    at TLSSocket.onConnectSecure (_tls_wrap.js:1501:34)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    at TLSSocket.emit (events.js:315:20)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    at TLSSocket._finishInit (_tls_wrap.js:936:8)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    at TLSWrap.ssl.onhandshakedone (_tls_wrap.js:710:12)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;如果在脱机环境中工作或反复看到此错误，请尝试从 https://github.com/microsoft/vscode-cpptools/releases 下载预包含了所有依赖项的扩展版本，然后使用 VS Code 中的“从 VSIX 安装”命令来安装它。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;123456789&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2解决办法&#34;&gt;2.解决办法&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21文件下载&#34;&gt;2.1文件下载&lt;/h3&gt;&#xA;&lt;p&gt;github上release好多个版本，我远程看代码的主机是Ubuntu系统，所有下载cpptools-linux.vsix。&#xA;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210416233119165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW53cjIwMTg=,size_16,color_FFFFFF,t_70&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>这枚让我心仪的男人</title>
      <link>http://shanks.link/blog/2021/07/10/%E8%BF%99%E6%9E%9A%E8%AE%A9%E6%88%91%E5%BF%83%E4%BB%AA%E7%9A%84%E7%94%B7%E4%BA%BA/</link>
      <pubDate>Sat, 10 Jul 2021 17:54:53 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/10/%E8%BF%99%E6%9E%9A%E8%AE%A9%E6%88%91%E5%BF%83%E4%BB%AA%E7%9A%84%E7%94%B7%E4%BA%BA/</guid>
      <description>&lt;p&gt;1.正直。&lt;/p&gt;&#xA;&lt;p&gt;2.我讲的笑话他都笑。&lt;/p&gt;&#xA;&lt;p&gt;3.有时候咬下嘴唇的样子很可爱。&lt;/p&gt;&#xA;&lt;p&gt;4.平头。&lt;/p&gt;&#xA;&lt;p&gt;5.撒娇对他没有用，生病了他只会想到医生。&lt;/p&gt;&#xA;&lt;p&gt;6.不道歉。&lt;/p&gt;&#xA;&lt;p&gt;7.逛街就是逛书店。&lt;/p&gt;&#xA;&lt;p&gt;8.每天坚持锻炼。&lt;/p&gt;</description>
    </item>
    <item>
      <title>删除文件出现项目不在请确认该项目的位置</title>
      <link>http://shanks.link/blog/2021/07/10/%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%87%BA%E7%8E%B0%E9%A1%B9%E7%9B%AE%E4%B8%8D%E5%9C%A8%E8%AF%B7%E7%A1%AE%E8%AE%A4%E8%AF%A5%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%BD%8D%E7%BD%AE/</link>
      <pubDate>Sat, 10 Jul 2021 17:12:34 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/10/%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%87%BA%E7%8E%B0%E9%A1%B9%E7%9B%AE%E4%B8%8D%E5%9C%A8%E8%AF%B7%E7%A1%AE%E8%AE%A4%E8%AF%A5%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%BD%8D%E7%BD%AE/</guid>
      <description>&lt;p&gt;&lt;strong&gt;删除文件出现”找不到该项目，该项目不在请确认该项目的位置“，如下图：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20190106164432349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hyaW5vc3ZpcA==,size_16,color_FFFFFF,t_70&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;解决办法：&lt;/p&gt;&#xA;&lt;p&gt;1、首先新建一个txt文件，把下面的代码复制到里面然后保存&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DEL /F /A /Q &lt;span style=&#34;color:#009c00&#34;&gt;\\&lt;/span&gt;?&lt;span style=&#34;color:#009c00&#34;&gt;\%&lt;/span&gt;1 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RD /S /Q &lt;span style=&#34;color:#009c00&#34;&gt;\\&lt;/span&gt;?&lt;span style=&#34;color:#009c00&#34;&gt;\%&lt;/span&gt;1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如下图所示：&lt;/p&gt;</description>
    </item>
    <item>
      <title>用十年的时间学会编程，而不是21天</title>
      <link>http://shanks.link/blog/2021/07/09/%E7%94%A8%E5%8D%81%E5%B9%B4%E7%9A%84%E6%97%B6%E9%97%B4%E5%AD%A6%E4%BC%9A%E7%BC%96%E7%A8%8B%E8%80%8C%E4%B8%8D%E6%98%AF21%E5%A4%A9/</link>
      <pubDate>Fri, 09 Jul 2021 16:07:37 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/07/09/%E7%94%A8%E5%8D%81%E5%B9%B4%E7%9A%84%E6%97%B6%E9%97%B4%E5%AD%A6%E4%BC%9A%E7%BC%96%E7%A8%8B%E8%80%8C%E4%B8%8D%E6%98%AF21%E5%A4%A9/</guid>
      <description>&lt;p&gt;今天是周末，难得有闲暇，抽点时间和大家分享一些心得和感受，希望能够一些在迷茫中的同学带来一点帮助。&lt;/p&gt;&#xA;&lt;h2 id=&#34;为什么拒绝速成&#34;&gt;&lt;strong&gt;为什么拒绝速成&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;这是我的第一篇闲聊文章，我写的自然也是我最想写的内容，我想我要说的大家通过标题应该就能get到了。实际上这句话的前半句并不是我说的，它来源于一篇著名的英文文章: &amp;ldquo;&lt;strong&gt;Teach Yourself Programming in Ten Years&lt;/strong&gt;&amp;quot;，即用十年的时间自学编程。原作者是Google的技术总监Peter Norvig，大家感兴趣可以读下这篇文章，虽然是英文的，但也不难懂。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git远程操作详解</title>
      <link>http://shanks.link/blog/2021/07/09/git%E8%BF%9C%E7%A8%8B%E6%93%8D%E4%BD%9C%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 09 Jul 2021 11:27:46 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/07/09/git%E8%BF%9C%E7%A8%8B%E6%93%8D%E4%BD%9C%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;p&gt;作者： &lt;a href=&#34;https://www.ruanyifeng.com/&#34;&gt;阮一峰&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;日期： &lt;a href=&#34;https://www.ruanyifeng.com/blog/2014/06/&#34;&gt;2014年6月12日&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/Git&#34;&gt;Git&lt;/a&gt;是目前最流行的&lt;a href=&#34;https://www.ruanyifeng.com/blog/2008/12/a_visual_guide_to_version_control.html&#34;&gt;版本管理系统&lt;/a&gt;，学会Git几乎成了开发者的必备技能。&lt;/p&gt;&#xA;&lt;p&gt;Git有很多优势，其中之一就是远程操作非常简便。本文详细介绍5个Git命令，它们的概念和用法，理解了这些内容，你就会完全掌握Git远程操作。&lt;/p&gt;</description>
    </item>
    <item>
      <title>总有一种力量让我们泪流满面</title>
      <link>http://shanks.link/blog/2021/07/09/%E6%80%BB%E6%9C%89%E4%B8%80%E7%A7%8D%E5%8A%9B%E9%87%8F%E8%AE%A9%E6%88%91%E4%BB%AC%E6%B3%AA%E6%B5%81%E6%BB%A1%E9%9D%A2/</link>
      <pubDate>Fri, 09 Jul 2021 13:06:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/09/%E6%80%BB%E6%9C%89%E4%B8%80%E7%A7%8D%E5%8A%9B%E9%87%8F%E8%AE%A9%E6%88%91%E4%BB%AC%E6%B3%AA%E6%B5%81%E6%BB%A1%E9%9D%A2/</guid>
      <description>&lt;p&gt;这是新年的第一天。这是我们与你见面的第777次。祝愿阳光打在你的脸上。&lt;/p&gt;&#xA;&lt;p&gt;阳光打在你的脸上，温暖留在我们心里。这是冬天里平常的一天。北方的树叶已经落尽，南方的树叶还留在枝上，人们在大街上懒洋洋地走着，或者急匆匆地跑着，每个人都怀着自己的希望，每个人都握紧自己的心事。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 为什么这么快 GPM模型简介</title>
      <link>http://shanks.link/blog/2021/07/08/go-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%B9%88%E5%BF%AB-gpm%E6%A8%A1%E5%9E%8B%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 08 Jul 2021 11:28:22 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/07/08/go-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%B9%88%E5%BF%AB-gpm%E6%A8%A1%E5%9E%8B%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;p&gt;作者：joellwang，腾讯 CSIG 后台开发工程师&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;本文主要介绍了 Go 程序为了实现极高的并发性能，其内部调度器的实现架构（G-P-M 模型），以及为了最大限度利用计算资源，Go 调度器是如何处理线程阻塞的场景。&lt;/p&gt;</description>
    </item>
    <item>
      <title>亿级系统的Redis缓存如何设计???</title>
      <link>http://shanks.link/blog/2021/07/05/%E4%BA%BF%E7%BA%A7%E7%B3%BB%E7%BB%9F%E7%9A%84redis%E7%BC%93%E5%AD%98%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Mon, 05 Jul 2021 20:24:32 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/05/%E4%BA%BF%E7%BA%A7%E7%B3%BB%E7%BB%9F%E7%9A%84redis%E7%BC%93%E5%AD%98%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;h2 id=&#34;亿级系统的redis缓存如何设计&#34;&gt;亿级系统的Redis缓存如何设计？？？&lt;/h2&gt;&#xA;&lt;p&gt;以下文章来源于微观技术 ，作者TomGE&lt;/p&gt;&#xA;&lt;p&gt;缓存设计可谓老生常谈了，早些时候都是采用&lt;code&gt;memcache&lt;/code&gt;，现在大家更多倾向使用&lt;code&gt;redis&lt;/code&gt;，除了知晓常用的数据存储类型，结合业务场景有针对性选择，好像其他也没有什么大的难点。&lt;/p&gt;</description>
    </item>
    <item>
      <title>lua51 Instructions Commment</title>
      <link>http://shanks.link/blog/2021/07/01/lua51-instructions-commment/</link>
      <pubDate>Thu, 01 Jul 2021 00:20:54 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/07/01/lua51-instructions-commment/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;enum&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*----------------------------------------------------------------------&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;name&#x9;&#x9;args&#x9;description&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;------------------------------------------------------------------------*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_MOVE,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B&#x9;&#x9;R(A) := R(B)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_LOADK,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A Bx&#x9;R(A) := Kst(Bx)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_LOADBOOL,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A) := (Bool)B; if (C) pc++&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_LOADNIL,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B&#x9;&#x9;R(A) := ... := R(B) := nil&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_GETUPVAL,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B&#x9;&#x9;R(A) := UpValue[B]&#x9;&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_GETGLOBAL,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A Bx&#x9;R(A) := Gbl[Kst(Bx)]&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_GETTABLE,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A) := R(B)[RK(C)]&#x9;&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_SETGLOBAL,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A Bx&#x9;Gbl[Kst(Bx)] := R(A)&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_SETUPVAL,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B&#x9;&#x9;UpValue[B] := R(A)&#x9;&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_SETTABLE,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A)[RK(B)] := RK(C)&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_NEWTABLE,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A) := {} (size = B,C)&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_SELF,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A+1) := R(B); R(A) := R(B)[RK(C)]&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_ADD,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A) := RK(B) + RK(C)&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_SUB,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A) := RK(B) - RK(C)&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_MUL,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A) := RK(B) * RK(C)&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_DIV,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A) := RK(B) / RK(C)&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_MOD,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A) := RK(B) % RK(C)&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_POW,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A) := RK(B) ^ RK(C)&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_UNM,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B&#x9;&#x9;R(A) := -R(B)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_NOT,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B&#x9;&#x9;R(A) := not R(B)&#x9;&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_LEN,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B&#x9;&#x9;R(A) := length of R(B)&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_CONCAT,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A) := R(B).. ... ..R(C)&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_JMP,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;sBx&#x9;&#x9;pc+=sBx&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_EQ,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;if ((RK(B) == RK(C)) ~= A) then pc++*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_LT,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;if ((RK(B) &amp;lt;  RK(C)) ~= A) then pc++*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_LE,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;if ((RK(B) &amp;lt;= RK(C)) ~= A) then pc++*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* !!!! &amp;lt;=&amp;gt;:用bool值做相等性比较，而不是判断不相等 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_TEST,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A C&#x9;&#x9;if not (R(A) &amp;lt;=&amp;gt; C) then pc++&#x9;&#x9;*/&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_TESTSET,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;if (R(B) &amp;lt;=&amp;gt; C) then R(A) := R(B) else pc++&#x9;*/&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** B=1表示没有传入参数,2:传入一个参数,0:传入了不定参数 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** C=1:期待没有返回值，2：期待一个返回值，0：期待不定数量返回值&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_CALL,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1)) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_TAILCALL,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;return R(A)(R(A+1), ... ,R(A+B-1))&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* B=1：无返回值，2：一个返回值，0：不定数量返回值 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_RETURN,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B&#x9;&#x9;return R(A), ... ,R(A+B-2)&#x9;(see note)&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_FORLOOP,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A sBx&#x9;R(A)+=R(A+2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if R(A) &amp;lt;?= R(A+1) then { pc+=sBx; R(A+3)=R(A) }*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_FORPREP,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A sBx&#x9;R(A)-=R(A+2); pc+=sBx&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_TFORLOOP,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A C&#x9;R(A+3), ... ,R(A+2+C) := R(A)(R(A+1), R(A+2)); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;                        &#x9;&#x9;if R(A+3) ~= nil then R(A+2)=R(A+3) else pc++&#x9;*/&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_SETLIST,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A)[(C-1)*FPF+i] := R(A+i), 1 &amp;lt;= i &amp;lt;= B&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_CLOSE,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A &#x9;&#x9;close all variables in the stack up to (&amp;gt;=) R(A)*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_CLOSURE,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A Bx&#x9;R(A) := closure(KPROTO[Bx], R(A), ... ,R(A+n))&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_VARARG&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B&#x9;&#x9;R(A), R(A+1), ..., R(A+B-1) = vararg&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} OpCode;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>哈希表</title>
      <link>http://shanks.link/blog/2021/06/26/%E5%93%88%E5%B8%8C%E8%A1%A8/</link>
      <pubDate>Sat, 26 Jun 2021 22:55:54 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/06/26/%E5%93%88%E5%B8%8C%E8%A1%A8/</guid>
      <description>&lt;h3 id=&#34;哈希表&#34;&gt;哈希表&lt;/h3&gt;&#xA;&lt;h4 id=&#34;什么是哈希表&#34;&gt;什么是哈希表&lt;/h4&gt;&#xA;&lt;p&gt;哈希表就是一个元素有一一对应位置的一个表，如下图，哈希表也叫散列表，和函数的一个x对应一个y类似，不存在多个y对应一个x，当然哈希表可能有多个数对应一个下标，我们后面讲，这里暂且理解为和函数一样，是一种映射。&#xA;在图中，哈希表存的数据位整形，如果我们存手机号，可以将后四位作为key，或者是后四位经过一个算数处理，当作key也可以。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何避免Go变量被GC</title>
      <link>http://shanks.link/blog/2021/06/15/%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8Dgo%E5%8F%98%E9%87%8F%E8%A2%ABgc/</link>
      <pubDate>Tue, 15 Jun 2021 17:15:06 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/06/15/%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8Dgo%E5%8F%98%E9%87%8F%E8%A2%ABgc/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/Go%E9%81%BF%E5%85%8D%E5%8F%98%E9%87%8F%E8%A2%ABGC/1.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Illustration created for “A Journey With Go”, made from the original Go Gopher, created by Renee French.&lt;/p&gt;&#xA;&lt;p&gt;本文基于 Go 1.13。&lt;/p&gt;&#xA;&lt;p&gt;在 Go 中，我们不需要自己管理内存分配和释放。然而，有些时候我们需要对程序进行更细粒度的控制。Go 运行时提供了很多种控制运行时状态及其与内存管理器之间相互影响的方式。本文中，我们来审查让变量不被 GC 回收的能力。&lt;/p&gt;</description>
    </item>
    <item>
      <title>分布式锁实现原理与最佳实践</title>
      <link>http://shanks.link/blog/2021/06/15/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 15 Jun 2021 19:57:11 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/06/15/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;h2 id=&#34;分布式锁实现原理与最佳实践&#34;&gt;分布式锁实现原理与最佳实践&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;分布式锁应用场景&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;很多应用场景是需要系统保证幂等性的（如api服务或消息消费者），并发情况下或消息重复很容易造成系统重入，那么分布式锁是保障幂等的一个重要手段。&lt;/p&gt;</description>
    </item>
    <item>
      <title>lua源码注释lcode.c</title>
      <link>http://shanks.link/blog/2021/06/08/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8Alcode.c/</link>
      <pubDate>Tue, 08 Jun 2021 23:26:48 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/06/08/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8Alcode.c/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** $Id: lcode.c,v 2.25.1.5 2011/01/31 14:53:16 roberto Exp $&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Code generator for Lua&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** See Copyright Notice in lua.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define lcode_c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define LUA_CORE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lua.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lcode.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ldebug.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ldo.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lgc.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;llex.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lmem.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lobject.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lopcodes.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lparser.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ltable.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* e的类型 expdesc */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define hasjumps(e)&#x9;((e)-&amp;gt;t != (e)-&amp;gt;f)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;isnumeral&lt;/span&gt;(expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; (e-&amp;gt;k == VKNUM &amp;amp;&amp;amp;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 仅仅e-&amp;gt;k == VKNUM 不够么？ */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;  &#x9;e-&amp;gt;t == NO_JUMP &amp;amp;&amp;amp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;  &#x9;e-&amp;gt;f == NO_JUMP);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 给连续的变量赋nil&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** OP_LOADNIL A B R(A) := ... := R(B) := nil&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 当可以合并前一条OP_LOADNIL时则尝试合并，可以利用fun&amp;#39;stack的默认NIL时，直接用NIL&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_nil&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; from, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; n) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Instruction *previous;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (fs-&amp;gt;pc &amp;gt; fs-&amp;gt;lasttarget) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no jumps to current position? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (fs-&amp;gt;pc == 0) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* function start? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (from &amp;gt;= fs-&amp;gt;nactvar)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 新调用一个fun时，其私有stack默认会被置NULL，这种情况直接使用默认的NULL即可 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* positions are already clean */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      previous = &amp;amp;fs-&amp;gt;f-&amp;gt;code[fs-&amp;gt;pc-1];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(*previous) == OP_LOADNIL) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 尝试合并前后连续的OP_LOADNIL指令 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; pfrom = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_A&lt;/span&gt;(*previous);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; pto = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(*previous);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (pfrom &amp;lt;= from &amp;amp;&amp;amp; from &amp;lt;= pto+1) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* can connect both? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (from+n-1 &amp;gt; pto)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;SETARG_B&lt;/span&gt;(*previous, from+n-1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_LOADNIL, from, from+n-1, 0);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else no optimization */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** OP_JMP sBx PC += sBx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 待回填的跳转链表指向我，而我又指向其它pc，那么将上述链表和我串联在一起即可&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_jump&lt;/span&gt; (FuncState *fs) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; jpc = fs-&amp;gt;jpc;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* save list of jumps to here */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; j;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;jpc = NO_JUMP;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  j = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeAsBx&lt;/span&gt;(fs, OP_JMP, 0, NO_JUMP);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_concat&lt;/span&gt;(fs, &amp;amp;j, jpc);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* keep them on hold */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; j;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 从函数返回&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** OP_RETURN A B return R(A), ... ,R(A+B-2)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_ret&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; first, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nret) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_RETURN, first, nret+1, 0);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里可以反推OP_RETURNS中A,B,C的含义了 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 有条件跳转 OP_TEST, OP_TESTSET */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;condjump&lt;/span&gt; (FuncState *fs, OpCode op, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; A, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; B, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; C) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, op, A, B, C);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_jump&lt;/span&gt;(fs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 将待回填的跳转指令pc指向dest */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fixjump&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; pc, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; dest) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Instruction *jmp = &amp;amp;fs-&amp;gt;f-&amp;gt;code[pc];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 下面计算跳转指令的跳转目标绝对值时也加了1，和这里是一致的 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; offset = dest-(pc+1);&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(dest != NO_JUMP);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;abs&lt;/span&gt;(offset) &amp;gt; MAXARG_sBx)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_syntaxerror&lt;/span&gt;(fs-&amp;gt;ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;control structure too long&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;SETARG_sBx&lt;/span&gt;(*jmp, offset);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** returns current `pc&amp;#39; and marks it as a jump target (to avoid wrong&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** optimizations(优化) with consecutive(连续) instructions not in the same basic block).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_getlabel&lt;/span&gt; (FuncState *fs) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;lasttarget = fs-&amp;gt;pc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; fs-&amp;gt;pc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 获取跳转指令指向的绝对位置 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;getjump&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; pc) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; offset = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_sBx&lt;/span&gt;(fs-&amp;gt;f-&amp;gt;code[pc]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (offset == NO_JUMP)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* point to itself represents end of list */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; NO_JUMP;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* end of list */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; (pc+1)+offset;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* turn offset into absolute position */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; Instruction *&lt;span style=&#34;color:#c34e00&#34;&gt;getjumpcontrol&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; pc) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Instruction *pi = &amp;amp;fs-&amp;gt;f-&amp;gt;code[pc];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (pc &amp;gt;= 1 &amp;amp;&amp;amp; &lt;span style=&#34;color:#c34e00&#34;&gt;testTMode&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(*(pi-1))))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; pi-1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; pi;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** check whether list has any jump that do not produce a value&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** (or produce an inverted(颠,倒) value)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;need_value&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; list) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (; list != NO_JUMP; list = &lt;span style=&#34;color:#c34e00&#34;&gt;getjump&lt;/span&gt;(fs, list)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Instruction i = *&lt;span style=&#34;color:#c34e00&#34;&gt;getjumpcontrol&lt;/span&gt;(fs, list);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(i) != OP_TESTSET) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* not found */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;patchtestreg&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; node, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; reg) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Instruction *i = &lt;span style=&#34;color:#c34e00&#34;&gt;getjumpcontrol&lt;/span&gt;(fs, node);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(*i) != OP_TESTSET)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* cannot patch other instructions */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (reg != NO_REG &amp;amp;&amp;amp; reg != &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(*i))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;SETARG_A&lt;/span&gt;(*i, reg);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no register to put value or register already has the value */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    *i = &lt;span style=&#34;color:#c34e00&#34;&gt;CREATE_ABC&lt;/span&gt;(OP_TEST, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(*i), 0, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_C&lt;/span&gt;(*i));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;removevalues&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; list) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (; list != NO_JUMP; list = &lt;span style=&#34;color:#c34e00&#34;&gt;getjump&lt;/span&gt;(fs, list))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;patchtestreg&lt;/span&gt;(fs, list, NO_REG);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 回填跳转指令链表上的指令到指定目标&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 将待回填跳转指令列表list上指令的跳转参数sBx更新到target上 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;patchlistaux&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; list, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; vtarget, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; reg,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; dtarget) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (list != NO_JUMP) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; next = &lt;span style=&#34;color:#c34e00&#34;&gt;getjump&lt;/span&gt;(fs, list);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;patchtestreg&lt;/span&gt;(fs, list, reg))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;fixjump&lt;/span&gt;(fs, list, vtarget);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;fixjump&lt;/span&gt;(fs, list, dtarget);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* jump to default target */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    list = next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 将待回填的跳转到当前指令的跳转链表上的跳转指令的sBx更新为fs-&amp;gt;pc */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;dischargejpc&lt;/span&gt; (FuncState *fs) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;patchlistaux&lt;/span&gt;(fs, fs-&amp;gt;jpc, fs-&amp;gt;pc, NO_REG, fs-&amp;gt;pc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;jpc = NO_JUMP;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 置空 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchlist&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; list, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; target) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (target == fs-&amp;gt;pc)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchtohere&lt;/span&gt;(fs, list);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(target &amp;lt; fs-&amp;gt;pc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;patchlistaux&lt;/span&gt;(fs, list, target, NO_REG, target);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 将待回填的跳转指令链表list挂到fs-&amp;gt;jpc,等生成下一条指令时回填sBx */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchtohere&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; list) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_getlabel&lt;/span&gt;(fs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_concat&lt;/span&gt;(fs, &amp;amp;fs-&amp;gt;jpc, list);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*  l1.sBx = l2 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 将l2指向的待回填跳转指令/指令链表挂到l1的跳转链表上&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_concat&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; *l1, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; l2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (l2 == NO_JUMP) &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* l2不是一条跳转指令，直接返回 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (*l1 == NO_JUMP)&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 当前跳转列表为空 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    *l1 = l2;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* l1尚未初始化，直接赋值即可 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; list = *l1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; ((next = &lt;span style=&#34;color:#c34e00&#34;&gt;getjump&lt;/span&gt;(fs, list)) != NO_JUMP)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* find last element */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      list = next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;fixjump&lt;/span&gt;(fs, list, l2);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 将待回填的跳转指令链表l2挂到l1的末尾 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 调整maxstacksize以便匹配locvar的数量 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_checkstack&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; n) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; newstack = fs-&amp;gt;freereg + n;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (newstack &amp;gt; fs-&amp;gt;f-&amp;gt;maxstacksize) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这个判断是必须的 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (newstack &amp;gt;= MAXSTACK)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_syntaxerror&lt;/span&gt;(fs-&amp;gt;ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;function or expression too complex&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fs-&amp;gt;f-&amp;gt;maxstacksize = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_byte&lt;/span&gt;(newstack);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* reserve reg:预定 寄存器 实际上是占用n个寄存器的意思&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_reserveregs&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; n) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_checkstack&lt;/span&gt;(fs, n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;freereg += n;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 占用n个locvar,释放则n为负值或在其它函数中实现 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 重点函数，需要细读 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;freereg&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; reg) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ISK&lt;/span&gt;(reg) &amp;amp;&amp;amp;            &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 常量的就不用释放了，压根没占用reg */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      reg &amp;gt;= fs-&amp;gt;nactvar) {   &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* reg从0开始，nactvar从1开始，所以这里reg&amp;gt;=fs-&amp;gt;nactvar是可以的&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  &#x9;/* 释放一个reg后,reg==fs-&amp;gt;freereg:确保只能释放最新一个被激活的reg(作为exp的临时reg占用？) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fs-&amp;gt;freereg--;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(reg == fs-&amp;gt;freereg);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 释放被临时占用的reg */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt; (FuncState *fs, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e-&amp;gt;k == VNONRELOC)&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 表达式的值已被CP_XXX到reg中的，才释放 (还没加载到reg，那压根没占用reg，释放个锤子*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;freereg&lt;/span&gt;(fs, e-&amp;gt;u.s.info);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* VNONRELOC info = result register */&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 将常量加载到fs-&amp;gt;f的常量表中&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** local var = &amp;#34;hello&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34; 则本函数的k,v=&amp;#34;hello&amp;#34; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;addk&lt;/span&gt; (FuncState *fs, TValue *k, TValue *v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lua_State *L = fs-&amp;gt;L;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TValue *idx = &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_set&lt;/span&gt;(L, fs-&amp;gt;h, k);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Proto *f = fs-&amp;gt;f;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; oldsize = f-&amp;gt;sizek;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnumber&lt;/span&gt;(idx)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaO_rawequalObj&lt;/span&gt;(&amp;amp;fs-&amp;gt;f-&amp;gt;k[&lt;span style=&#34;color:#c34e00&#34;&gt;cast_int&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(idx))], v));&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;cast_int&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(idx));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* constant not found; create a new entry */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(idx, &lt;span style=&#34;color:#c34e00&#34;&gt;cast_num&lt;/span&gt;(fs-&amp;gt;nk));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_growvector&lt;/span&gt;(L, f-&amp;gt;k, fs-&amp;gt;nk, f-&amp;gt;sizek, TValue,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    MAXARG_Bx, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;constant table overflow&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (oldsize &amp;lt; f-&amp;gt;sizek) &lt;span style=&#34;color:#c34e00&#34;&gt;setnilvalue&lt;/span&gt;(&amp;amp;f-&amp;gt;k[oldsize++]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setobj&lt;/span&gt;(L, &amp;amp;f-&amp;gt;k[fs-&amp;gt;nk], v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_barrier&lt;/span&gt;(L, f, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; fs-&amp;gt;nk++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 将字符串常量加载到fs-&amp;gt;f的常量表中 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_stringK&lt;/span&gt; (FuncState *fs, TString *s) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TValue o;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setsvalue&lt;/span&gt;(fs-&amp;gt;L, &amp;amp;o, s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;addk&lt;/span&gt;(fs, &amp;amp;o, &amp;amp;o);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_numberK&lt;/span&gt; (FuncState *fs, lua_Number r) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TValue o;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(&amp;amp;o, r);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;addk&lt;/span&gt;(fs, &amp;amp;o, &amp;amp;o);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;boolK&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; b) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TValue o;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setbvalue&lt;/span&gt;(&amp;amp;o, b);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;addk&lt;/span&gt;(fs, &amp;amp;o, &amp;amp;o);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;nilK&lt;/span&gt; (FuncState *fs) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TValue k, v;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setnilvalue&lt;/span&gt;(&amp;amp;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* cannot use nil as key; instead use table itself to represent nil */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;sethvalue&lt;/span&gt;(fs-&amp;gt;L, &amp;amp;k, fs-&amp;gt;h);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;addk&lt;/span&gt;(fs, &amp;amp;k, &amp;amp;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* nresults:-1, C=0，表示希望返回变参&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** nresults: 0, C=1, 表示希望返回0个参数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** nresults: 2, C=2, 表示希望返回1个参数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_setreturns&lt;/span&gt; (FuncState *fs, expdesc *e, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nresults) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* OP_CALL A B C &#x9;&#x9;R(A), … ,R(A+C-2) := R(A)(R(A+1), … ,R(A+B-1)) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e-&amp;gt;k == VCALL) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* expression is an open function call? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;SETARG_C&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getcode&lt;/span&gt;(fs, e), nresults+1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e-&amp;gt;k == VVARARG) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* OP_VARARG A B &#x9;R(A), R(A+1), ..., R(A+B-1) = vararg &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  &#x9;** 将变参拷贝到RA指定的寄存器开始的地方，拷贝B个元素，这里仅使用了一个寄存器的编码?&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  &#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;SETARG_B&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getcode&lt;/span&gt;(fs, e), nresults+1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;SETARG_A&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getcode&lt;/span&gt;(fs, e), fs-&amp;gt;freereg);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_reserveregs&lt;/span&gt;(fs, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 对于可能返回变参的表达式，强制其仅返回一个值 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_setoneret&lt;/span&gt; (FuncState *fs, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e-&amp;gt;k == VCALL) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* expression is an open function call? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* A B C R(A), … ,R(A+C-2) := R(A)(R(A+1), … ,R(A+B-1)) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 函数调用返回的第一个值占用的reg就是函数指针本身占用的reg,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  &#x9;** 不能返回到其它地方，故而这里是VNONRELOC&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  &#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    e-&amp;gt;k = VNONRELOC;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    e-&amp;gt;u.s.info = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_A&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getcode&lt;/span&gt;(fs, e));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e-&amp;gt;k == VVARARG) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;SETARG_B&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getcode&lt;/span&gt;(fs, e), 2);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 2:期待返回一个返回值 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    e-&amp;gt;k = VRELOCABLE;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* can relocate its simple result */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 生成LOAD_XXX(加载)系列指令，（为后续加载间接表达式的值到reg做准备）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 对需间接读取src.val的表达式生成对应的读值指令(eg:OP_GETTABLE),以便下一步的dst=src&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 需要间接求表达式src.val的：&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 生成求表达式src.val的指令&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** e-&amp;gt;u.s.info----&amp;gt;pc.addr方便后面确定dst后进行指令回填&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** e.k        ----&amp;gt;VNONRELOC 表达式的src.val对应读值指令已生成，但不在reg中&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 表达式的src.val已经在reg中的&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** src.val已在reg中的表达式(VLOCAL,VCALL)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**   e.k      ----&amp;gt; e.k=VNONRELOC&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 表达式的src.val是直接值的&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** src.val是直接值的表达式，无需处理&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** discharge:释放&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_dischargevars&lt;/span&gt; (FuncState *fs, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (e-&amp;gt;k) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VLOCAL: {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* exp.src已在reg中，故而这里是VNONRELOC */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      e-&amp;gt;k = VNONRELOC;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VUPVAL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      e-&amp;gt;u.s.info = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_GETUPVAL, 0, e-&amp;gt;u.s.info, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      e-&amp;gt;k = VRELOCABLE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VGLOBAL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      e-&amp;gt;u.s.info = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABx&lt;/span&gt;(fs, OP_GETGLOBAL, 0, e-&amp;gt;u.s.info);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      e-&amp;gt;k = VRELOCABLE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VINDEXED: {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* OP_GETTABLE A B C R(A) := R(B)[RK(C)] */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* !!这里是依次释放的&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;  ** a.b.c.d.e... 释放a.b.c.d之前占用的reg,以便重利用reg&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;freereg&lt;/span&gt;(fs, e-&amp;gt;u.s.aux);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;freereg&lt;/span&gt;(fs, e-&amp;gt;u.s.info);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* A填 0，配合下面的可重定位VRELOCALBLE */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      e-&amp;gt;u.s.info = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_GETTABLE, 0, e-&amp;gt;u.s.info, e-&amp;gt;u.s.aux);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      e-&amp;gt;k = VRELOCABLE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VVARARG:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VCALL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_setoneret&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* !!!!常量，常量，常量 不需要用到reg，无需更新reg的信息e-&amp;gt;k了 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VNIL:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VTRUE:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VFALSE:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VKNUM:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VK: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 还没遇到过，不太理解 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VJMP:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* e-&amp;gt;k已经确定了寄存器的信息了，直接返回 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VRELOCABLE:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VNONRELOC:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* there is one value available (somewhere) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;code_label&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; A, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; b, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; jump) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_getlabel&lt;/span&gt;(fs);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* those instructions may be jump targets */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_LOADBOOL, A, b, jump);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** CP_XXX拷贝指令&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 拷贝表达式的值到指定的目的寄存器(reg(dst) = exp(src)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** step.1 生成表达式的src.val的加载指令(R(B))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** step.2 回填表达式的目标寄存器(RA),对VNONRELOC的则生成MV指令&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 参考init_exp 和 luaK_dischargevars函数来理解本函数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;discharge2reg&lt;/span&gt; (FuncState *fs, expdesc *e, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; reg) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** step1. 对&amp;#34;间接表达式&amp;#34;生成求值指令 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_dischargevars&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** step2. 对&amp;#34;直接表达式&amp;#34;生成求值指令&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** step3. 对&amp;#34;上述表达式&amp;#34;进行回填处理(确定目标寄存器(R(A)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (e-&amp;gt;k) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 表达式的值是常值, 这里生成指令并回填R(A) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VNIL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_nil&lt;/span&gt;(fs, reg, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VFALSE:  &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VTRUE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_LOADBOOL, reg, e-&amp;gt;k == VTRUE, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 表达式的值在e-&amp;gt;u.s.info：常量表中，这里提出来，生成指令并回填R(A)                       */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VK: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* reg：指令的目标寄存器RA, e-&amp;gt;u.s.info:指令中常量exp在常量表中的索引 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABx&lt;/span&gt;(fs, OP_LOADK, reg, e-&amp;gt;u.s.info);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 同上VK，只是nval在常量中的索引延迟到这里确定 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VKNUM: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABx&lt;/span&gt;(fs, OP_LOADK, reg, &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_numberK&lt;/span&gt;(fs, e-&amp;gt;u.nval));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 指令，表达式的值都已确定，这里回填指令的目的地R(A)即可 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VRELOCABLE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Instruction *pc = &amp;amp;&lt;span style=&#34;color:#c34e00&#34;&gt;getcode&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;SETARG_A&lt;/span&gt;(*pc, reg);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 表达式的值已确定，生成OP_MOVE指令，回填R(A)=R(B)中的即可 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VNONRELOC: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (reg != e-&amp;gt;u.s.info)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_MOVE, reg, e-&amp;gt;u.s.info, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* VJMP尚不理解 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(e-&amp;gt;k == VVOID || e-&amp;gt;k == VJMP);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* nothing to do... */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 表达式的目的寄存器R(A)已确定 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e-&amp;gt;u.s.info = reg;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e-&amp;gt;k = VNONRELOC;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;discharge2anyreg&lt;/span&gt; (FuncState *fs, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e-&amp;gt;k != VNONRELOC) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_reserveregs&lt;/span&gt;(fs, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;discharge2reg&lt;/span&gt;(fs, e, fs-&amp;gt;freereg-1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* dst=src CP_XXX指令，将表达式的值赋值给指定的寄存器reg */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;exp2reg&lt;/span&gt; (FuncState *fs, expdesc *e, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; reg) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 将表达式的src.val赋值给dst(reg) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;discharge2reg&lt;/span&gt;(fs, e, reg);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e-&amp;gt;k == VJMP)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_concat&lt;/span&gt;(fs, &amp;amp;e-&amp;gt;t, e-&amp;gt;u.s.info);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* put this jump in `t&amp;#39; list */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;hasjumps&lt;/span&gt;(e)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; final;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* position after whole expression */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; p_f = NO_JUMP;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* position of an eventual LOAD false */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;p_t&lt;/span&gt; = NO_JUMP;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* position of an eventual LOAD true */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;need_value&lt;/span&gt;(fs, e-&amp;gt;t) || &lt;span style=&#34;color:#c34e00&#34;&gt;need_value&lt;/span&gt;(fs, e-&amp;gt;f)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; fj = (e-&amp;gt;k == VJMP) ? NO_JUMP : &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_jump&lt;/span&gt;(fs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      p_f = &lt;span style=&#34;color:#c34e00&#34;&gt;code_label&lt;/span&gt;(fs, reg, 0, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;p_t&lt;/span&gt; = &lt;span style=&#34;color:#c34e00&#34;&gt;code_label&lt;/span&gt;(fs, reg, 1, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchtohere&lt;/span&gt;(fs, fj);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    final = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_getlabel&lt;/span&gt;(fs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;patchlistaux&lt;/span&gt;(fs, e-&amp;gt;f, final, reg, p_f);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;patchlistaux&lt;/span&gt;(fs, e-&amp;gt;t, final, reg, &lt;span style=&#34;color:#00f&#34;&gt;p_t&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e-&amp;gt;f = e-&amp;gt;t = NO_JUMP;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 经过dst.(reg) = src.val 后，表达式的目标地址已确定,且已在reg中 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e-&amp;gt;u.s.info = reg;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e-&amp;gt;k = VNONRELOC;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** CP_XXX 拷贝指令 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** reg(var) = exp： 将表达式的src.val拷贝给next&amp;#39;free.reg&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2nextreg&lt;/span&gt; (FuncState *fs, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 更新exp的reg或者op信息&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 不能确定exp对应指令的则e-&amp;gt;u.info中填入指令地址，方便回填,同时e-&amp;gt;k:更新为VRELOCABLE，表示需要回填RA?&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_dischargevars&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 释放被临时占用的reg */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 申请一个reg，并将exp赋值到reg上 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_reserveregs&lt;/span&gt;(fs, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;exp2reg&lt;/span&gt;(fs, e, fs-&amp;gt;freereg - 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** LOAD_XXX 加载指令&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 将表达式的值加载到寄存器中(eg:VGLOBAL, VINDEXED)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 已加载到reg中的则无需此步骤(VNONRELOC)),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** RETURNS:寄存器地址 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2anyreg&lt;/span&gt; (FuncState *fs, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 对表达式生成估值指令 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_dischargevars&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e-&amp;gt;k == VNONRELOC) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* e的src.val已在reg中，则直接返回对应的reg */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;hasjumps&lt;/span&gt;(e)) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; e-&amp;gt;u.s.info;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* exp is already in a register */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e-&amp;gt;u.s.info &amp;gt;= fs-&amp;gt;nactvar) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* reg. is not a local? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;exp2reg&lt;/span&gt;(fs, e, e-&amp;gt;u.s.info);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* put value on it */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; e-&amp;gt;u.s.info;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* e的src值还不在reg则将其存入reg */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2nextreg&lt;/span&gt;(fs, e);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* default */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; e-&amp;gt;u.s.info;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 类似 LOAD_XXX 生成表达式的加载指令(！！！！不是CP_XXX拷贝一份e的值到reg的拷贝指令) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2val&lt;/span&gt; (FuncState *fs, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;hasjumps&lt;/span&gt;(e))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2anyreg&lt;/span&gt;(fs, e);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 求解表达式的src.val后，将表达式的值放到下一个free.reg中 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_dischargevars&lt;/span&gt;(fs, e);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 对间接表达式（原值不在reg中或不是直接值的）生成求值指令 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** LOAD_XXX 加载指令 将表达式的值加载到next’free’reg中&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** VNONRELOC这种表达式的值已被加载到reg上的就无需处理了&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** step.1 表达式的值不在reg中的非VNONRELOC,生成对应的加载指令&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** step.2 回填上述加载指令，正式将表达式加载到reg中&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** RETURNS: 加载的reg的地址&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2RK&lt;/span&gt; (FuncState *fs, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 对[间接]表达式e生成求值指令 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2val&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* e是常量表达式，无需生成求值指令，直接返回常量表中对应的索引即可 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (e-&amp;gt;k) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VKNUM:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VTRUE:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VFALSE:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VNIL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (fs-&amp;gt;nk &amp;lt;= MAXINDEXRK) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* constant fit in RK operand? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        e-&amp;gt;u.s.info = (e-&amp;gt;k == VNIL)  ? &lt;span style=&#34;color:#c34e00&#34;&gt;nilK&lt;/span&gt;(fs) :&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      (e-&amp;gt;k == VKNUM) ? &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_numberK&lt;/span&gt;(fs, e-&amp;gt;u.nval) :&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                        &lt;span style=&#34;color:#c34e00&#34;&gt;boolK&lt;/span&gt;(fs, (e-&amp;gt;k == VTRUE));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        e-&amp;gt;k = VK;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;RKASK&lt;/span&gt;(e-&amp;gt;u.s.info);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VK: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e-&amp;gt;u.s.info &amp;lt;= MAXINDEXRK)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* constant fit in argC? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;RKASK&lt;/span&gt;(e-&amp;gt;u.s.info);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* not a constant in the right range: put it in a register &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 间接表达式(非常量表达式)，将其src.val赋值到下一个free.reg中&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2anyreg&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* var = ex&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 先 LOAD_XXX (ex) 后 SET_XXX(var=ex) 的&amp;#34;赋值组合业务&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_storevar&lt;/span&gt; (FuncState *fs, expdesc *var, expdesc *ex) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (var-&amp;gt;k) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VLOCAL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, ex);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;exp2reg&lt;/span&gt;(fs, ex, var-&amp;gt;u.s.info);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* var = ex */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VUPVAL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; e = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2anyreg&lt;/span&gt;(fs, ex);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* var = ex */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_SETUPVAL, e, var-&amp;gt;u.s.info, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VGLOBAL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; e = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2anyreg&lt;/span&gt;(fs, ex);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* var = ex */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABx&lt;/span&gt;(fs, OP_SETGLOBAL, e, var-&amp;gt;u.s.info);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VINDEXED: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; e = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2RK&lt;/span&gt;(fs, ex);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* var = ex */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_SETTABLE, var-&amp;gt;u.s.info, var-&amp;gt;u.s.aux, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(0);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* invalid var kind to store */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, ex);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* OP_SELF A B C R(A+1) := R(B); R(A) := R(B)[RK(C)] */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_self&lt;/span&gt; (FuncState *fs, expdesc *e, expdesc *key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; func;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2anyreg&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  func = fs-&amp;gt;freereg;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_reserveregs&lt;/span&gt;(fs, 2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_SELF, func, e-&amp;gt;u.s.info, &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2RK&lt;/span&gt;(fs, key));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e-&amp;gt;u.s.info = func;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e-&amp;gt;k = VNONRELOC;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* invert:颠倒 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;invertjump&lt;/span&gt; (FuncState *fs, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Instruction *pc = &lt;span style=&#34;color:#c34e00&#34;&gt;getjumpcontrol&lt;/span&gt;(fs, e-&amp;gt;u.s.info);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;testTMode&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(*pc)) &amp;amp;&amp;amp; &lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(*pc) != OP_TESTSET &amp;amp;&amp;amp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                           &lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(*pc) != OP_TEST);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;SETARG_A&lt;/span&gt;(*pc, !(&lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_A&lt;/span&gt;(*pc)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;jumponcond&lt;/span&gt; (FuncState *fs, expdesc *e, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; cond) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e-&amp;gt;k == VRELOCABLE) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Instruction ie = &lt;span style=&#34;color:#c34e00&#34;&gt;getcode&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(ie) == OP_NOT) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      fs-&amp;gt;pc--;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* remove previous OP_NOT */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;condjump&lt;/span&gt;(fs, OP_TEST, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(ie), 0, !cond);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else go through */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;discharge2anyreg&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;condjump&lt;/span&gt;(fs, OP_TESTSET, NO_REG, e-&amp;gt;u.s.info, cond);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* and */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_goiftrue&lt;/span&gt; (FuncState *fs, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; pc;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* pc of last jump */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_dischargevars&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (e-&amp;gt;k) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VK: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VKNUM: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VTRUE: {&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      pc = NO_JUMP;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* always true; do nothing， keep go throught? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VJMP: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;invertjump&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      pc = e-&amp;gt;u.s.info;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      pc = &lt;span style=&#34;color:#c34e00&#34;&gt;jumponcond&lt;/span&gt;(fs, e, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_concat&lt;/span&gt;(fs, &amp;amp;e-&amp;gt;f, pc);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* insert last jump in `f&amp;#39; list */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchtohere&lt;/span&gt;(fs, e-&amp;gt;t);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e-&amp;gt;t = NO_JUMP;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* or */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_goiffalse&lt;/span&gt; (FuncState *fs, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; pc;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* pc of last jump */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_dischargevars&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (e-&amp;gt;k) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VNIL: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VFALSE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      pc = NO_JUMP;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* always false; do nothing */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VJMP: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      pc = e-&amp;gt;u.s.info;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      pc = &lt;span style=&#34;color:#c34e00&#34;&gt;jumponcond&lt;/span&gt;(fs, e, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_concat&lt;/span&gt;(fs, &amp;amp;e-&amp;gt;t, pc);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* insert last jump in `t&amp;#39; list */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchtohere&lt;/span&gt;(fs, e-&amp;gt;f);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e-&amp;gt;f = NO_JUMP;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* not  A B R(A) := not R(B) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** not的stat的左边必须有左值,否则就是语法错误&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;codenot&lt;/span&gt; (FuncState *fs, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_dischargevars&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (e-&amp;gt;k) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VNIL: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VFALSE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      e-&amp;gt;k = VTRUE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VK: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VKNUM: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VTRUE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      e-&amp;gt;k = VFALSE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VJMP: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;invertjump&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VRELOCABLE:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VNONRELOC: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;discharge2anyreg&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      e-&amp;gt;u.s.info = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_NOT, 0, e-&amp;gt;u.s.info, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      e-&amp;gt;k = VRELOCABLE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(0);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* cannot happen */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* interchange true and false lists */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  { &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; temp = e-&amp;gt;f; e-&amp;gt;f = e-&amp;gt;t; e-&amp;gt;t = temp; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;removevalues&lt;/span&gt;(fs, e-&amp;gt;f);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;removevalues&lt;/span&gt;(fs, e-&amp;gt;t);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 索引表达式t.k &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** info = table register; aux = index register (or `k&amp;#39;) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** eg: tbl(info).aux(aux) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_indexed&lt;/span&gt; (FuncState *fs, expdesc *t, expdesc *k) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  t-&amp;gt;u.s.aux = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2RK&lt;/span&gt;(fs, k);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  t-&amp;gt;k = VINDEXED;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 尝试合并二元操作符以及左右两边的表达式(编译优化) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;constfolding&lt;/span&gt; (OpCode op, expdesc *e1, expdesc *e2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lua_Number v1, v2, r;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 两个操作数都得是numeral */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;isnumeral&lt;/span&gt;(e1) || !&lt;span style=&#34;color:#c34e00&#34;&gt;isnumeral&lt;/span&gt;(e2)) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v1 = e1-&amp;gt;u.nval;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v2 = e2-&amp;gt;u.nval;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (op) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_ADD: r = &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numadd&lt;/span&gt;(v1, v2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_SUB: r = &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numsub&lt;/span&gt;(v1, v2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_MUL: r = &lt;span style=&#34;color:#c34e00&#34;&gt;luai_nummul&lt;/span&gt;(v1, v2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_DIV:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (v2 == 0) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* do not attempt to divide by 0 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      r = &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numdiv&lt;/span&gt;(v1, v2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_MOD:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (v2 == 0) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* do not attempt to divide by 0 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      r = &lt;span style=&#34;color:#c34e00&#34;&gt;luai_nummod&lt;/span&gt;(v1, v2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_POW: r = &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numpow&lt;/span&gt;(v1, v2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_UNM: r = &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numunm&lt;/span&gt;(v1); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_LEN: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no constant folding for &amp;#39;len&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(0); r = 0; &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luai_numisnan&lt;/span&gt;(r)) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* do not attempt to produce NaN */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e1-&amp;gt;u.nval = r;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** local a = b + c &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 表达式运行完毕后，b,c占用的临时的reg就可以被释放了，故而这一行编译完成后b,c占用的reg也可以释放了&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;codearith&lt;/span&gt; (FuncState *fs, OpCode op, expdesc *e1, expdesc *e2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;constfolding&lt;/span&gt;(op, e1, e2))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; o2 = (op != OP_UNM &amp;amp;&amp;amp; op != OP_LEN) ? &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2RK&lt;/span&gt;(fs, e2) : 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; o1 = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2RK&lt;/span&gt;(fs, e1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 释放exp的规则是从后往前free */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (o1 &amp;gt; o2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, e1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, e2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, e2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, e1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里R(A)的值尚未确定，e-&amp;gt;=VRELOCABLE:表示需要重定位？ */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    e1-&amp;gt;u.s.info = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, op, 0, o1, o2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    e1-&amp;gt;k = VRELOCABLE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 关系表达式 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;codecomp&lt;/span&gt; (FuncState *fs, OpCode op, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; cond, expdesc *e1,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                          expdesc *e2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; o1 = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2RK&lt;/span&gt;(fs, e1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; o2 = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2RK&lt;/span&gt;(fs, e2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, e2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, e1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (cond == 0 &amp;amp;&amp;amp; op != OP_EQ) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; temp;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* exchange args to replace by `&amp;lt;&amp;#39; or `&amp;lt;=&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    temp = o1; o1 = o2; o2 = temp;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* o1 &amp;lt;==&amp;gt; o2 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cond = 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e1-&amp;gt;u.s.info = &lt;span style=&#34;color:#c34e00&#34;&gt;condjump&lt;/span&gt;(fs, op, cond, o1, o2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e1-&amp;gt;k = VJMP;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_prefix&lt;/span&gt; (FuncState *fs, UnOpr op, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc e2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e2.t = e2.f = NO_JUMP;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e2.k = VKNUM; e2.u.nval = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (op) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_MINUS: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;isnumeral&lt;/span&gt;(e))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2anyreg&lt;/span&gt;(fs, e);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* cannot operate on non-numeric constants */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;codearith&lt;/span&gt;(fs, OP_UNM, e, &amp;amp;e2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_NOT: &lt;span style=&#34;color:#c34e00&#34;&gt;codenot&lt;/span&gt;(fs, e); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_LEN: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2anyreg&lt;/span&gt;(fs, e);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* cannot operate on constants */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;codearith&lt;/span&gt;(fs, OP_LEN, e, &amp;amp;e2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_infix&lt;/span&gt; (FuncState *fs, BinOpr op, expdesc *v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (op) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_AND: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_goiftrue&lt;/span&gt;(fs, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_OR: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_goiffalse&lt;/span&gt;(fs, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_CONCAT: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2nextreg&lt;/span&gt;(fs, v);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* operand must be on the `stack&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_ADD: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_SUB: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_MUL: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_DIV:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_MOD: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_POW: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;isnumeral&lt;/span&gt;(v)) &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2RK&lt;/span&gt;(fs, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2RK&lt;/span&gt;(fs, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_posfix&lt;/span&gt; (FuncState *fs, BinOpr op, expdesc *e1, expdesc *e2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (op) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_AND: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(e1-&amp;gt;t == NO_JUMP);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* list must be closed */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_dischargevars&lt;/span&gt;(fs, e2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_concat&lt;/span&gt;(fs, &amp;amp;e2-&amp;gt;f, e1-&amp;gt;f);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      *e1 = *e2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_OR: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(e1-&amp;gt;f == NO_JUMP);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* list must be closed */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_dischargevars&lt;/span&gt;(fs, e2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_concat&lt;/span&gt;(fs, &amp;amp;e2-&amp;gt;t, e1-&amp;gt;t);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      *e1 = *e2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_CONCAT: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2val&lt;/span&gt;(fs, e2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e2-&amp;gt;k == VRELOCABLE &amp;amp;&amp;amp; &lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getcode&lt;/span&gt;(fs, e2)) == OP_CONCAT) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(e1-&amp;gt;u.s.info == &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getcode&lt;/span&gt;(fs, e2))-1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, e1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;SETARG_B&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getcode&lt;/span&gt;(fs, e2), e1-&amp;gt;u.s.info);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        e1-&amp;gt;k = VRELOCABLE; e1-&amp;gt;u.s.info = e2-&amp;gt;u.s.info;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2nextreg&lt;/span&gt;(fs, e2);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* operand must be on the &amp;#39;stack&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;codearith&lt;/span&gt;(fs, OP_CONCAT, e1, e2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_ADD: &lt;span style=&#34;color:#c34e00&#34;&gt;codearith&lt;/span&gt;(fs, OP_ADD, e1, e2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_SUB: &lt;span style=&#34;color:#c34e00&#34;&gt;codearith&lt;/span&gt;(fs, OP_SUB, e1, e2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_MUL: &lt;span style=&#34;color:#c34e00&#34;&gt;codearith&lt;/span&gt;(fs, OP_MUL, e1, e2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_DIV: &lt;span style=&#34;color:#c34e00&#34;&gt;codearith&lt;/span&gt;(fs, OP_DIV, e1, e2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_MOD: &lt;span style=&#34;color:#c34e00&#34;&gt;codearith&lt;/span&gt;(fs, OP_MOD, e1, e2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_POW: &lt;span style=&#34;color:#c34e00&#34;&gt;codearith&lt;/span&gt;(fs, OP_POW, e1, e2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_EQ: &lt;span style=&#34;color:#c34e00&#34;&gt;codecomp&lt;/span&gt;(fs, OP_EQ, 1, e1, e2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_NE: &lt;span style=&#34;color:#c34e00&#34;&gt;codecomp&lt;/span&gt;(fs, OP_EQ, 0, e1, e2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_LT: &lt;span style=&#34;color:#c34e00&#34;&gt;codecomp&lt;/span&gt;(fs, OP_LT, 1, e1, e2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_LE: &lt;span style=&#34;color:#c34e00&#34;&gt;codecomp&lt;/span&gt;(fs, OP_LE, 1, e1, e2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_GT: &lt;span style=&#34;color:#c34e00&#34;&gt;codecomp&lt;/span&gt;(fs, OP_LT, 0, e1, e2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_GE: &lt;span style=&#34;color:#c34e00&#34;&gt;codecomp&lt;/span&gt;(fs, OP_LE, 0, e1, e2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新上一个生成的pc对应的行信息 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_fixline&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;f-&amp;gt;lineinfo[fs-&amp;gt;pc - 1] = line;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_code&lt;/span&gt; (FuncState *fs, Instruction i, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Proto *f = fs-&amp;gt;f;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;dischargejpc&lt;/span&gt;(fs);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `pc&amp;#39; will change */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* put new instruction in code array */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_growvector&lt;/span&gt;(fs-&amp;gt;L, f-&amp;gt;code, fs-&amp;gt;pc, f-&amp;gt;sizecode, Instruction,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  MAX_INT, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;code size overflow&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;code[fs-&amp;gt;pc] = i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* save corresponding line information */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_growvector&lt;/span&gt;(fs-&amp;gt;L, f-&amp;gt;lineinfo, fs-&amp;gt;pc, f-&amp;gt;sizelineinfo, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  MAX_INT, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;code size overflow&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;lineinfo[fs-&amp;gt;pc] = line;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; fs-&amp;gt;pc++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt; (FuncState *fs, OpCode o, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; b, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; c) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getOpMode&lt;/span&gt;(o) == iABC);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getBMode&lt;/span&gt;(o) != OpArgN || b == 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getCMode&lt;/span&gt;(o) != OpArgN || c == 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_code&lt;/span&gt;(fs, &lt;span style=&#34;color:#c34e00&#34;&gt;CREATE_ABC&lt;/span&gt;(o, a, b, c), fs-&amp;gt;ls-&amp;gt;lastline);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABx&lt;/span&gt; (FuncState *fs, OpCode o, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; bc) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getOpMode&lt;/span&gt;(o) == iABx || &lt;span style=&#34;color:#c34e00&#34;&gt;getOpMode&lt;/span&gt;(o) == iAsBx);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getCMode&lt;/span&gt;(o) == OpArgN);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_code&lt;/span&gt;(fs, &lt;span style=&#34;color:#c34e00&#34;&gt;CREATE_ABx&lt;/span&gt;(o, a, bc), fs-&amp;gt;ls-&amp;gt;lastline);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_setlist&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; base, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nelems, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; tostore) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; c =  (nelems - 1)/LFIELDS_PER_FLUSH + 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; b = (tostore == LUA_MULTRET) ? 0 : tostore;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* tostore中最后一个是变参，则tostore==LUA_MULTRET */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(tostore != 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (c &amp;lt;= MAXARG_C)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_SETLIST, base, b, c);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* c过大，将其放到下一条指令中 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_SETLIST, base, b, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_code&lt;/span&gt;(fs, &lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(Instruction, c), fs-&amp;gt;ls-&amp;gt;lastline);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里可以回收空闲出来的寄存器了，有意思吧 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;freereg = base + 1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* free registers with list values */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>lua源码注释 lparse.c</title>
      <link>http://shanks.link/blog/2021/06/08/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-lparse.c/</link>
      <pubDate>Tue, 08 Jun 2021 23:03:28 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/06/08/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-lparse.c/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 参考的BNF地址 shankusu.me/lua/TheCompleteSyntaxOfLua51/ */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** $Id: lparser.c,v 2.42.1.4 2011/10/21 19:31:42 roberto Exp $&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Lua Parser&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** See Copyright Notice in lua.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define lparser_c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define LUA_CORE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lua.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lcode.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ldebug.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ldo.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lfunc.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;llex.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lmem.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lobject.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lopcodes.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lparser.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lstate.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lstring.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ltable.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 也只有函数调用或变参操作符这两种TOKEN能返回 ... */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define hasmultret(k)&#x9;&#x9;((k) == VCALL || (k) == VVARARG)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* i:当前活跃的locvar的索引 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define getlocvar(fs, i)&#x9;((fs)-&amp;gt;f-&amp;gt;locvars[(fs)-&amp;gt;actvar[i]])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 检查value是否超过了limit限制,超过则报错msg */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define luaY_checklimit(fs,v,l,m)&#x9;if ((v)&amp;gt;(l)) errorlimit(fs,l,m)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** nodes for block list (list of active blocks)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** previous:往前跳(eg:查找变量时从now-block往前一级一级的block找)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; BlockCnt {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; BlockCnt *previous;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* chain */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; breaklist;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* list of jumps out of this loop */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** ！！！！在进入本block的瞬间，外面已经激活的var的数量， ！！！！&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 意味着本块内激活的locvar的reg.idx不会低于整个值，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 用于按照便变量的生存期检索变量 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 退出本block后，将fs-&amp;gt;reg重置到本次即可清掉本block内激活的actvar&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lu_byte nactvar;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* # active locals outside the breakable structure */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lu_byte upval;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* true if some variable in the block is an upvalue(本块中存在某些变量是其它块的upvalues：本块关闭时要做善后处理？) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lu_byte isbreakable;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* true if `block&amp;#39; is a loop, 语法规则：break仅能用于loop的block中 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} BlockCnt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** prototypes for recursive non-terminal functions&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;chunk&lt;/span&gt; (LexState *ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;expr&lt;/span&gt; (LexState *ls, expdesc *v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* anchor:锚 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;anchor_token&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;t.token == TK_NAME || ls-&amp;gt;t.token == TK_STRING) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TString *ts = ls-&amp;gt;t.seminfo.ts;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_newstring&lt;/span&gt;(ls, &lt;span style=&#34;color:#c34e00&#34;&gt;getstr&lt;/span&gt;(ts), ts-&amp;gt;tsv.len);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;error_expected&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_syntaxerror&lt;/span&gt;(ls,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_pushfstring&lt;/span&gt;(ls-&amp;gt;L, LUA_QS &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34; expected&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_token2str&lt;/span&gt;(ls, token)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;errorlimit&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; limit, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *what) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *msg = (fs-&amp;gt;f-&amp;gt;linedefined == 0) ?&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_pushfstring&lt;/span&gt;(fs-&amp;gt;L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;main function has more than %d %s&amp;#34;&lt;/span&gt;, limit, what) :&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_pushfstring&lt;/span&gt;(fs-&amp;gt;L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;function at line %d has more than %d %s&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            fs-&amp;gt;f-&amp;gt;linedefined, limit, what);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lexerror&lt;/span&gt;(fs-&amp;gt;ls, msg, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;testnext&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; c) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;t.token == c) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 检查当前c是否为特定的token&amp;#39;Type */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;check&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; c) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;t.token != c)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;error_expected&lt;/span&gt;(ls, c);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;checknext&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; c) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;check&lt;/span&gt;(ls, c);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define check_condition(ls,c,msg)&#x9;{ if (!(c)) luaX_syntaxerror(ls, msg); }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 在where(line)这里，who(TK.1)需要一个what(TK.2)匹配&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** eg: function 需要一个end来结束函数定义&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;check_match&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; what, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; who, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; where) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;testnext&lt;/span&gt;(ls, what)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (where == ls-&amp;gt;linenumber)&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 当前行，那就不需要打印line信息了？ */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;error_expected&lt;/span&gt;(ls, what);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 输出连带line信息的错误信息 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_syntaxerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_pushfstring&lt;/span&gt;(ls-&amp;gt;L,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             LUA_QS &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34; expected (to close &amp;#34;&lt;/span&gt; LUA_QS &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34; at line %d)&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_token2str&lt;/span&gt;(ls, what), &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_token2str&lt;/span&gt;(ls, who), where));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 强制检查并当前token的type为TK_NAME，返回当前token，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 读取下一个token &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; TString *&lt;span style=&#34;color:#c34e00&#34;&gt;str_checkname&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TString *ts;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;check&lt;/span&gt;(ls, TK_NAME);&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 当前token&amp;#39;type必须是TK_NAME的类型 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ts = ls-&amp;gt;t.seminfo.ts;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 提取token的值 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 继续读下一个token */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ts;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*  KEYCODE: 关键函数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt; (expdesc *e, expkind k, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e-&amp;gt;f = e-&amp;gt;t = NO_JUMP;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ************************************exp对应的reg已定或是一个参数无需reg*********************************&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** VVOID, VKNUM, VNIL, VTRUE, VFALSE,   &#x9;i:0 值直接被包含在表达式expdesc中，无需寄存器&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** VK   &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;    i:常量表中的索引&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** VLOCAL&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;i:locvar占用的reg索引&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** VGLOBAL&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;    i:NO_REG-&amp;gt;全局变量名的NAME在常量表中的索引&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ***********************************需回填指令的RA?**********************************&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** VRELOCABLE&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;i:？对应指令OP在指令数组中的下标（方便回填指令中的RA？)？&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** VCALL, VVARARG&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;i:对应指令OP在指令数组中的下标（方便回填指令中的RA？)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** VNONRELOC&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;i:对应指令OP在指令数组的下标(方便回填指令中的RA?)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e-&amp;gt;k = k;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e-&amp;gt;u.s.info = i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 用字符串(TK_NAME)s初始化expdesc的e表达式 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;codestring&lt;/span&gt; (LexState *ls, expdesc *e, TString *s) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(e, VK, &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_stringK&lt;/span&gt;(ls-&amp;gt;fs, s));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 先检查当前t的类型为NAME，后将其携带的string赋值给expdesc, 内部读取一次luaX_next() */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;checkname&lt;/span&gt;(LexState *ls, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;codestring&lt;/span&gt;(ls, e, &lt;span style=&#34;color:#c34e00&#34;&gt;str_checkname&lt;/span&gt;(ls));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 填充一个全新的 Locvar信息到 Proto.locvars (供调试用)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;registerlocalvar&lt;/span&gt; (LexState *ls, TString *varname) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Proto *f = fs-&amp;gt;f;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; oldsize = f-&amp;gt;sizelocvars;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 原来的总数组f-&amp;gt;sizelocvars空间不足则扩大 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_growvector&lt;/span&gt;(ls-&amp;gt;L, f-&amp;gt;locvars, fs-&amp;gt;nlocvars, f-&amp;gt;sizelocvars,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  LocVar, SHRT_MAX, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;too many local variables&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (oldsize &amp;lt; f-&amp;gt;sizelocvars)&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* locvars数组扩大则将新增的slot填NULL */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;f-&amp;gt;locvars[oldsize++].varname = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新locvar信息, startPC,endPC暂时还不确定 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;locvars[fs-&amp;gt;nlocvars].varname = varname; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* printf(&amp;#34;registerlocalvar: idx(%d), name(%p)\n&amp;#34;, fs-&amp;gt;nlocvars, varname); */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_objbarrier&lt;/span&gt;(ls-&amp;gt;L, f, varname);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; fs-&amp;gt;nlocvars++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 如果v是不变的string则此宏定义可以利用宏处理阶段提高程序速度 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define new_localvarliteral(ls,v,n) \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  new_localvar(ls, luaX_newstring(ls, &amp;#34;&amp;#34; v, (sizeof(v)/sizeof(char))-1), n)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* KEYCODE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 注册一个本地变量信息到 Proto.locvars ,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 填充变量名, startpc,endpc稍后再处理&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvar&lt;/span&gt; (LexState *ls, TString *name, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; n) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaY_checklimit&lt;/span&gt;(fs, fs-&amp;gt;nactvar+n+1, LUAI_MAXVARS, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;local variables&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 设置actvar 到 Proto.nlocvars 的映射 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里仅设置了变量的name, 尚未设置startpc,endpc */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;actvar[fs-&amp;gt;nactvar+n] = &lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;short&lt;/span&gt;, &lt;span style=&#34;color:#c34e00&#34;&gt;registerlocalvar&lt;/span&gt;(ls, name));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;//printf(&amp;#34;......... %d-&amp;gt;%d&amp;#34;, fs-&amp;gt;nactvar+n, fs-&amp;gt;actvar[fs-&amp;gt;nactvar+n]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 更新!!! FunState.nactvar 数量，更新 Proto.locvars.startpc &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 一次性生成多个locvar时，nvars可以告诉本函数方便一次性调整到位&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;adjustlocalvars&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nvars) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新fs中当前激活的locvar数量 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新fs中当前激活的locvar数量 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新fs中当前激活的locvar数量 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;nactvar = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_byte&lt;/span&gt;(fs-&amp;gt;nactvar + nvars);&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新localvar的startpc */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (; nvars; nvars--) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;getlocvar&lt;/span&gt;(fs, fs-&amp;gt;nactvar - nvars).startpc = fs-&amp;gt;pc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 对应的chunk结束时，再更新endpc信息，也只有那个时候才能确切的知道endpc */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 确定一批actvar的endpc &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 仔细看这个函数，很有意思哈（结合 new_localvar adjustlocalvars 一起看 ）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;removevars&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; tolevel) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (fs-&amp;gt;nactvar &amp;gt; tolevel)&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里tolevel是指block结束时对应的pc.idx */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;getlocvar&lt;/span&gt;(fs, --fs-&amp;gt;nactvar).endpc = fs-&amp;gt;pc;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 离开block时,关闭block内actvar */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 查找一个upvalue,返回其在upval数组中的索引，没有则构建 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;indexupvalue&lt;/span&gt; (FuncState *fs, TString *name, expdesc *v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Proto *f = fs-&amp;gt;f;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; oldsize = f-&amp;gt;sizeupvalues;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 当前存在的upvalue中已存在吗? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i=0; i&amp;lt;f-&amp;gt;nups; i++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (fs-&amp;gt;upvalues[i].k == v-&amp;gt;k &amp;amp;&amp;amp;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 类型为VUPVAL */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;fs-&amp;gt;upvalues[i].info == v-&amp;gt;u.s.info) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 在proto中的索引一致 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(f-&amp;gt;upvalues[i] == name);&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 名字就必须一致了 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* new one */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 数组容量不够则扩大 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaY_checklimit&lt;/span&gt;(fs, f-&amp;gt;nups + 1, LUAI_MAXUPVALUES, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;upvalues&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_growvector&lt;/span&gt;(fs-&amp;gt;L, f-&amp;gt;upvalues, f-&amp;gt;nups, f-&amp;gt;sizeupvalues,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  TString *, MAX_INT, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (oldsize &amp;lt; f-&amp;gt;sizeupvalues)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;f-&amp;gt;upvalues[oldsize++] = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;upvalues[f-&amp;gt;nups] = name;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_objbarrier&lt;/span&gt;(fs-&amp;gt;L, f, name);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(v-&amp;gt;k == VLOCAL || v-&amp;gt;k == VUPVAL);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里的v-&amp;gt;k==VLOCAL ? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新到fs */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;upvalues[f-&amp;gt;nups].k = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_byte&lt;/span&gt;(v-&amp;gt;k);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;upvalues[f-&amp;gt;nups].info = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_byte&lt;/span&gt;(v-&amp;gt;u.s.info);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; f-&amp;gt;nups++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 尝试在当前fs中匹配激活状态的locvar */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;searchvar&lt;/span&gt; (FuncState *fs, TString *n) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i=fs-&amp;gt;nactvar-1; i &amp;gt;= 0; i--) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (n == &lt;span style=&#34;color:#c34e00&#34;&gt;getlocvar&lt;/span&gt;(fs, i).varname)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; -1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* not found */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* fs中的locvar在其它函数中被当作upval引用&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 标记fs中对应的block，你有变量是其它fs的upval&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** level:actvar在reg数组中的索引&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;markupval&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; level) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BlockCnt *bl = fs-&amp;gt;bl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这个标记过程的逻辑蛮有意思的 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (bl &amp;amp;&amp;amp; bl-&amp;gt;nactvar &amp;gt; level)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;bl = bl-&amp;gt;previous;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (bl)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;bl-&amp;gt;upval = 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 查找变量名对应的表达式类型的值类型(VLOCAL还是?)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 仔细看这个函数的逻辑，搞明白关于变量的查找过程&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** step1:先在本地fs6激活中的locvar查找，找到则返回VLOCAL&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** step2:往前一个fs5中的激活中的locvar查找，找不到，继续下一步step3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** step3:继续往前一个fs1中的激活的locvar查找，一直到fs1-&amp;gt;pre为空，则&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**     可以确定var是一个VGLOBAL&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** step4:在某一个fs3中的激活中的locvar被找到，则标记此fs3中的bl表示你的某个var被其它fsX当作upval了&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**        往前退，在fs4中的upval中新增一条信息(此upval在父fs3中是VLOCAL,且在fs3的actvar中的索引是多少)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**        再往前退，在fs5中的upval中新增一条信息(此upval在父fs4中是UPVAL，且在fs4的upvalues的索引是多少)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**        再往前退，直到初始的fs6，在fs6中的upval中新增一条信息（此upval在父fs5中是UPVAL,且在fs5的upvalues的索引是多少)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 理论上可以优化下：在本地locvar找不到时，先不要在父fs中找，而是在本fs的upvales中找下&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;singlevaraux&lt;/span&gt; (FuncState *fs, TString *n, expdesc *var, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; base) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (fs == NULL) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no more levels? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* default is global variable, NO_REG:表示此全局变量尚未决定其寄存器的位置&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;** 全局变量对应的NAME在p中常量表的索引由singlevar()函数来处理&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  &#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(var, VGLOBAL, NO_REG);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; VGLOBAL;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 往外一层一层都找不到时，则认为它是全局变量 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 在激活的locvar中找到了，则是本地变量 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; v = &lt;span style=&#34;color:#c34e00&#34;&gt;searchvar&lt;/span&gt;(fs, n);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* look up at current level */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (v &amp;gt;= 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(var, VLOCAL, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!base)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;markupval&lt;/span&gt;(fs, v);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* local will be used as an upval */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; VLOCAL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* not found at current level; try upper one */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;singlevaraux&lt;/span&gt;(fs-&amp;gt;prev, n, var, 0) == VGLOBAL)&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 都没找到，则是全局变量 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; VGLOBAL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 父func中找到，在自己的fun中算upval */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      var-&amp;gt;u.s.info = &lt;span style=&#34;color:#c34e00&#34;&gt;indexupvalue&lt;/span&gt;(fs, n, var);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else was LOCAL or UPVAL */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      var-&amp;gt;k = VUPVAL;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* upvalue in this level */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; VUPVAL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** step1: 检查ls-&amp;gt;t.token的类型为TK_NAME，读取下一个TOKEN&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** step2: 根据上一个token的NAME，确定其变量(VLOCAL,VGLOBAL还是VUPVAL？)类型，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**            后填充expdesc.u.s.info信息&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;singlevar&lt;/span&gt; (LexState *ls, expdesc *var) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TString *varname = &lt;span style=&#34;color:#c34e00&#34;&gt;str_checkname&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** OP_GETGLOBAL A Bx R(A) := Gbl[Kst(Bx)]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** OP_SETGLOBAL A Bx Gbl[Kst(Bx)] := R(A)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 全局变量的指令需要知道表示全局变量的NAME在常量表中的idx，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **     理解这一点就明白了下面var-&amp;gt;u.s.info的赋值的意义&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;singlevaraux&lt;/span&gt;(fs, varname, var, 1) == VGLOBAL) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* VLOCVAR,VUPVAL在singlevaraux中已被init_exp初始化 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    var-&amp;gt;u.s.info = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_stringK&lt;/span&gt;(fs, varname);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* info points to global name */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 针对 nvars = nexps 赋值进行调整&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 如果右边少了则给左边赋NIL&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 如果右边有call,...则确定期待的返回值个数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** ！！！ 如果右边多了，本函数未处理！！！&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;adjust_assign&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nvars, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nexps, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* extra: 右边除掉fun和...外，表达式的数量少于左边的val的数量的情况下，缺失的数量? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; extra = nvars - nexps;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;hasmultret&lt;/span&gt;(e-&amp;gt;k)) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* exp的类型为VARARG或CALL */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    extra++;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* includes call itself：除开VARARG和CALL本身 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 如果右边exp多了，那就不用补偿左边了&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;** OP_VARARG A B R(A), R(A+1), ..., R(A+B-1) = vararg&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;** 看上面的指令的含义，猜测这里是在确定B的值&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (extra &amp;lt; 0) extra = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_setreturns&lt;/span&gt;(fs, e, extra);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* last exp. provides the difference */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (extra &amp;gt; 1) &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_reserveregs&lt;/span&gt;(fs, extra-1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e-&amp;gt;k != VVOID) &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2nextreg&lt;/span&gt;(fs, e);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* close last expression */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (extra &amp;gt; 0) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* nexps：包含右边最后一个exp */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; reg = fs-&amp;gt;freereg;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 为左边多出来的var申请reg,然后填NIL */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_reserveregs&lt;/span&gt;(fs, extra);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_nil&lt;/span&gt;(fs, reg, extra);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 进入一个新的block */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;enterlevel&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (++ls-&amp;gt;L-&amp;gt;nCcalls &amp;gt; LUAI_MAXCCALLS)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lexerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;chunk has too many syntax levels&amp;#34;&lt;/span&gt;, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define leavelevel(ls)&#x9;((ls)-&amp;gt;L-&amp;gt;nCcalls--)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 进入块时，初始化block信息 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;enterblock&lt;/span&gt; (FuncState *fs, BlockCnt *bl, lu_byte isbreakable) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bl-&amp;gt;breaklist = NO_JUMP;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bl-&amp;gt;isbreakable = isbreakable;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bl-&amp;gt;nactvar = fs-&amp;gt;nactvar;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bl-&amp;gt;upval = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里有个印象 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bl-&amp;gt;previous = fs-&amp;gt;bl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;bl = bl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(fs-&amp;gt;freereg == fs-&amp;gt;nactvar);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;leaveblock&lt;/span&gt; (FuncState *fs) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BlockCnt *bl = fs-&amp;gt;bl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;bl = bl-&amp;gt;previous;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 确定本block内激活的var的生存周期的endpc */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;removevars&lt;/span&gt;(fs-&amp;gt;ls, bl-&amp;gt;nactvar);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* OP_CLOSE A close all variables in the stack up to (&amp;gt;=) R(A) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (bl-&amp;gt;upval) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_CLOSE, bl-&amp;gt;nactvar, 0, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* a block either controls scope or breaks (never both) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(!bl-&amp;gt;isbreakable || !bl-&amp;gt;upval);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* TODOLOOK 还不是太理解 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(bl-&amp;gt;nactvar == fs-&amp;gt;nactvar);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这个必须保证 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;freereg = fs-&amp;gt;nactvar;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* free registers */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchtohere&lt;/span&gt;(fs, bl-&amp;gt;breaklist);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;pushclosure&lt;/span&gt; (LexState *ls, FuncState *func, expdesc *v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Proto *f = fs-&amp;gt;f;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; oldsize = f-&amp;gt;sizep;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_growvector&lt;/span&gt;(ls-&amp;gt;L, f-&amp;gt;p, fs-&amp;gt;np, f-&amp;gt;sizep, Proto *,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  MAXARG_Bx, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;constant table overflow&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (oldsize &amp;lt; f-&amp;gt;sizep) f-&amp;gt;p[oldsize++] = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;p[fs-&amp;gt;np++] = func-&amp;gt;f;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_objbarrier&lt;/span&gt;(ls-&amp;gt;L, f, func-&amp;gt;f);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(v, VRELOCABLE, &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABx&lt;/span&gt;(fs, OP_CLOSURE, 0, fs-&amp;gt;np-1));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i=0; i&amp;lt;func-&amp;gt;f-&amp;gt;nups; i++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    OpCode o = (func-&amp;gt;upvalues[i].k == VLOCAL) ? OP_MOVE : OP_GETUPVAL;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* TODOLOOK 这里不是明白 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, o, 0, func-&amp;gt;upvalues[i].info, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 开始编译函数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;open_func&lt;/span&gt; (LexState *ls, FuncState *fs) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lua_State *L = ls-&amp;gt;L;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;L = L;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Proto *f = &lt;span style=&#34;color:#c34e00&#34;&gt;luaF_newproto&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;ls = ls;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;f = f;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* funState 在编译哪个Proto */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ls指向最新的一个FuncState,这里可以猜测，只有先编译完了子函数才有可能编译父函数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;prev = ls-&amp;gt;fs;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* linked list of funcstates */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ls-&amp;gt;fs = fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;pc = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;lasttarget = -1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;jpc = NO_JUMP;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;freereg = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;nk = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;np = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;nlocvars = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;nactvar = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;bl = NULL;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里是NULL */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;source = ls-&amp;gt;source;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;maxstacksize = 2;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* registers 0/1 are always valid */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;h = &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_new&lt;/span&gt;(L, 0, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* anchor table of constants and prototype (to avoid being collected)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 常量和原型的锚表（避免被收集）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;sethvalue2s&lt;/span&gt;(L, L-&amp;gt;top, fs-&amp;gt;h);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;incr_top&lt;/span&gt;(L);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 放到堆栈上可避免被gc,如果编译失败stack回缩，则可自动被gc（没有被其它obj引用的话 ） */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setptvalue2s&lt;/span&gt;(L, L-&amp;gt;top, f);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;incr_top&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;close_func&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lua_State *L = ls-&amp;gt;L;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Proto *f = fs-&amp;gt;f;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 关闭还处于激活状态的actvar(设置endpc) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;removevars&lt;/span&gt;(ls, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 自动补一个 OP_RETURN 指令 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_ret&lt;/span&gt;(fs, 0, 0);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* final return */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 释放多余的mem */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_reallocvector&lt;/span&gt;(L, f-&amp;gt;code, f-&amp;gt;sizecode, fs-&amp;gt;pc, Instruction);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;sizecode = fs-&amp;gt;pc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_reallocvector&lt;/span&gt;(L, f-&amp;gt;lineinfo, f-&amp;gt;sizelineinfo, fs-&amp;gt;pc, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;sizelineinfo = fs-&amp;gt;pc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_reallocvector&lt;/span&gt;(L, f-&amp;gt;k, f-&amp;gt;sizek, fs-&amp;gt;nk, TValue);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;sizek = fs-&amp;gt;nk;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_reallocvector&lt;/span&gt;(L, f-&amp;gt;p, f-&amp;gt;sizep, fs-&amp;gt;np, Proto *);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;sizep = fs-&amp;gt;np;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_reallocvector&lt;/span&gt;(L, f-&amp;gt;locvars, f-&amp;gt;sizelocvars, fs-&amp;gt;nlocvars, LocVar);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;sizelocvars = fs-&amp;gt;nlocvars;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_reallocvector&lt;/span&gt;(L, f-&amp;gt;upvalues, f-&amp;gt;sizeupvalues, f-&amp;gt;nups, TString *);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;sizeupvalues = f-&amp;gt;nups;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaG_checkcode&lt;/span&gt;(f));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 检查生成的字节码是否有明显的问题 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(fs-&amp;gt;bl == NULL);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 本子函数编译完毕，切换到母函数中去 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ls-&amp;gt;fs = fs-&amp;gt;prev;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* last token read was anchored(锚定) in defunct function; must reanchor(锚) it */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (fs) &lt;span style=&#34;color:#c34e00&#34;&gt;anchor_token&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;top -= 2;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* remove table and prototype from the stack */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Proto *&lt;span style=&#34;color:#c34e00&#34;&gt;luaY_parser&lt;/span&gt; (lua_State *L, ZIO *z, Mbuffer *buff, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *name) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; LexState lexstate;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; FuncState funcstate;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* mainFunc */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lexstate.buff = buff;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 设置input信息，但，buff在上面就设置了，有点意思吧，z和buff对于lexState是有点不同的 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_setinput&lt;/span&gt;(L, &amp;amp;lexstate, z, &lt;span style=&#34;color:#c34e00&#34;&gt;luaS_new&lt;/span&gt;(L, name));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 一个lua文件，编译模块将其当做一个函数来看待&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 函数原型 function (...)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **          end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** BNF funcbody ::= `(´ [parlist] `)´ block end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;open_func&lt;/span&gt;(&amp;amp;lexstate, &amp;amp;funcstate);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  funcstate.f-&amp;gt;is_vararg = VARARG_ISVARARG;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* main func. is always vararg，哈哈知道lua文件一般开头的local modName=...的语法支撑了吧 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(&amp;amp;lexstate);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* read first token */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;chunk&lt;/span&gt;(&amp;amp;lexstate);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;check&lt;/span&gt;(&amp;amp;lexstate, TK_EOS);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 直到编译到文件EOF才结束编译流程 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;close_func&lt;/span&gt;(&amp;amp;lexstate);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(lexstate.fs == NULL);&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* lexstate下不应该还有未编译完的funState了 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(funcstate.prev == NULL);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 已编译完的主函数上面还有其它函数，不可能的嘛 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(funcstate.f-&amp;gt;nups == 0);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 编译结束，主函数不应该有nups了 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; funcstate.f;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*============================================================*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* GRAMMAR RULES */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*============================================================*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* A.B, A:B &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 对前缀生成必要的估值指令，放入free&amp;#39;reg(若有必要)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 用上述值作为A,再和B一起生成新的VINDEXED表达式&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;field&lt;/span&gt; (LexState *ls, expdesc *v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* field -&amp;gt; [&amp;#39;.&amp;#39; | &amp;#39;:&amp;#39;] NAME */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc key;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **将前缀(a.b.c中的a.b)加载到reg中&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **若前缀已在寄存器中则无需处理(A=VLOCAL(a))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2anyreg&lt;/span&gt;(fs, v);&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls); &#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip the dot or colon */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;checkname&lt;/span&gt;(ls, &amp;amp;key);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 读取NAME这个域的常量exp并返回给key */&lt;/span&gt;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 生成新的VINDEXED表达式（求值指令，指令的目标寄存器尚未处理） */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_indexed&lt;/span&gt;(fs, v, &amp;amp;key);&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;yindex&lt;/span&gt; (LexState *ls, expdesc *v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* index -&amp;gt; &amp;#39;[&amp;#39; expr &amp;#39;]&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip the &amp;#39;[&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;expr&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2val&lt;/span&gt;(ls-&amp;gt;fs, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;checknext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;]&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** {======================================================================&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Rules for Constructors&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** =======================================================================&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 构造表   tbl {a, b, c=val, d.e} */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; ConsControl {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc *t;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* table descriptor 指代本表的expdesc */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc v;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* last list item read: 指代正在分析到的哪一个元素eg(b),对于c=val用不上v */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nh;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* total number of `record&amp;#39; elements */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; na;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* total number of array elements */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; tostore;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* number of array elements pending to be stored */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 形如 local tbl = { x = y, [a] = b,}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 中的x=1,这种指定tbl[k]=v的表达式&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;recfield&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; ConsControl *cc) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* recfield -&amp;gt; (NAME | `[&amp;#39;exp1`]&amp;#39;) = exp1 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; reg = ls-&amp;gt;fs-&amp;gt;freereg;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc key, val;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; rkkey;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 对key生成加载指令 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;t.token == TK_NAME) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaY_checklimit&lt;/span&gt;(fs, cc-&amp;gt;nh, MAX_INT, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;items in a constructor&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;checkname&lt;/span&gt;(ls, &amp;amp;key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ls-&amp;gt;t.token == &amp;#39;[&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;yindex&lt;/span&gt;(ls, &amp;amp;key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cc-&amp;gt;nh++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;checknext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 回填上述k的加载指令,将表达式的值SET到next&amp;#39;free&amp;#39;reg上 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rkkey = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2RK&lt;/span&gt;(fs, &amp;amp;key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 初始化表达式val */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;expr&lt;/span&gt;(ls, &amp;amp;val);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 先生成对val的LOAD_XXX加载指令，后生成OP_SETTABLE */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_SETTABLE, cc-&amp;gt;t-&amp;gt;u.s.info, rkkey, &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2RK&lt;/span&gt;(fs, &amp;amp;val));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;freereg = reg;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* free registers 释放表达式占用的临时寄存器 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* local tbl = {a,b,c,d}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 解析完毕b,关闭对b的解析&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;closelistfield&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; ConsControl *cc) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (cc-&amp;gt;v.k == VVOID) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* there is no list item */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2nextreg&lt;/span&gt;(fs, &amp;amp;cc-&amp;gt;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cc-&amp;gt;v.k = VVOID;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 释放表达式 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (cc-&amp;gt;tostore == LFIELDS_PER_FLUSH) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_setlist&lt;/span&gt;(fs, cc-&amp;gt;t-&amp;gt;u.s.info, cc-&amp;gt;na, cc-&amp;gt;tostore);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* flush */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cc-&amp;gt;tostore = 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no more items pending */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* local tbl = {a, b, c, d}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 结束d的解析后，调到这里 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 逻辑独立出来是因为函数调用作为表的最后一个元素和非最后一个元素，其期望对其返回值的个数是不一样的&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;lastlistfield&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; ConsControl *cc) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (cc-&amp;gt;tostore == 0) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;hasmultret&lt;/span&gt;(cc-&amp;gt;v.k)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_setmultret&lt;/span&gt;(fs, &amp;amp;cc-&amp;gt;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_setlist&lt;/span&gt;(fs, cc-&amp;gt;t-&amp;gt;u.s.info, cc-&amp;gt;na, LUA_MULTRET);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cc-&amp;gt;na--;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* do not count last expression (unknown number of elements) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (cc-&amp;gt;v.k != VVOID)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2nextreg&lt;/span&gt;(fs, &amp;amp;cc-&amp;gt;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_setlist&lt;/span&gt;(fs, cc-&amp;gt;t-&amp;gt;u.s.info, cc-&amp;gt;na, cc-&amp;gt;tostore);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* tbl = {a,b, c = 100} 数组中单个field eg:a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;listfield&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; ConsControl *cc) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;expr&lt;/span&gt;(ls, &amp;amp;cc-&amp;gt;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaY_checklimit&lt;/span&gt;(ls-&amp;gt;fs, cc-&amp;gt;na, MAX_INT, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;items in a constructor&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cc-&amp;gt;na++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cc-&amp;gt;tostore++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;constructor&lt;/span&gt; (LexState *ls, expdesc *t) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* constructor -&amp;gt; ?? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line = ls-&amp;gt;linenumber;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; pc = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_NEWTABLE, 0, 0, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; ConsControl cc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cc.na = cc.nh = cc.tostore = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cc.t = t;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 初始化table的exp */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(t, VRELOCABLE, pc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(&amp;amp;cc.v, VVOID, 0);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no value (yet) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2nextreg&lt;/span&gt;(ls-&amp;gt;fs, t);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* fix it at stack top (for gc) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;checknext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(cc.v.k == VVOID || cc.tostore &amp;gt; 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;t.token == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 表被遍历完毕 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;closelistfield&lt;/span&gt;(fs, &amp;amp;cc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt;(ls-&amp;gt;t.token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_NAME: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* may be listfields or recfields */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lookahead&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;lookahead.token != &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* expression? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;listfield&lt;/span&gt;(ls, &amp;amp;cc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;recfield&lt;/span&gt;(ls, &amp;amp;cc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt;: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* constructor_item -&amp;gt; recfield */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;recfield&lt;/span&gt;(ls, &amp;amp;cc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* constructor_part -&amp;gt; listfield */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;listfield&lt;/span&gt;(ls, &amp;amp;cc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;testnext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;) || &lt;span style=&#34;color:#c34e00&#34;&gt;testnext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;check_match&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lastlistfield&lt;/span&gt;(fs, &amp;amp;cc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;SETARG_B&lt;/span&gt;(fs-&amp;gt;f-&amp;gt;code[pc], &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_int2fb&lt;/span&gt;(cc.na)); &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* set initial array size */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;SETARG_C&lt;/span&gt;(fs-&amp;gt;f-&amp;gt;code[pc], &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_int2fb&lt;/span&gt;(cc.nh));  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* set initial table size */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* }====================================================================== */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 解析函数的显式形参列表（对于modName:sub(x,y) 这种隐含的第一个self参数，在外面已被解析完毕&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;parlist&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* parlist -&amp;gt; [ param { `,&amp;#39; param } ] */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Proto *f = fs-&amp;gt;f;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nparams = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;is_vararg = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;t.token != &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* is `parlist&amp;#39; not empty? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (ls-&amp;gt;t.token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_NAME: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* param -&amp;gt; NAME */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvar&lt;/span&gt;(ls, &lt;span style=&#34;color:#c34e00&#34;&gt;str_checkname&lt;/span&gt;(ls), nparams++);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* adjustlocalvars 在下面调用：一次性调整到位 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_DOTS: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* param -&amp;gt; `...&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#if defined(LUA_COMPAT_VARARG)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;          &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* use `arg&amp;#39; as default name */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvarliteral&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;arg&amp;#34;&lt;/span&gt;, nparams++);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          f-&amp;gt;is_vararg = VARARG_HASARG | VARARG_NEEDSARG;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;          f-&amp;gt;is_vararg |= VARARG_ISVARARG;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_syntaxerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&amp;lt;name&amp;gt; or &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;LUA_QL&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34; expected&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (!f-&amp;gt;is_vararg &amp;amp;&amp;amp; &lt;span style=&#34;color:#c34e00&#34;&gt;testnext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里看得出来 ... 只能是最后一个形参 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;// function name() body end 显式形参为空&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;adjustlocalvars&lt;/span&gt;(ls, nparams);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;numparams = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_byte&lt;/span&gt;(fs-&amp;gt;nactvar - (f-&amp;gt;is_vararg &amp;amp; VARARG_HASARG));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_reserveregs&lt;/span&gt;(fs, fs-&amp;gt;nactvar);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* reserve register for parameters */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 解析函数形参和函数体 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;body&lt;/span&gt; (LexState *ls, expdesc *e, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; needself, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* body -&amp;gt;  `(&amp;#39; parlist `)&amp;#39; chunk END */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState new_fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新ls中的fs变量，完成编译对象的切换 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;open_func&lt;/span&gt;(ls, &amp;amp;new_fs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 新函数从哪一方开始定义 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  new_fs.f-&amp;gt;linedefined = line;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* local name = function () 或者 local function name() 这两种函数定义格式对应的函数都是从‘(’开始，*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;checknext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里看得出来self将是本fs的第一个locvar，占用一个正常的locvar&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** Proto.numparams 中也包含self&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (needself) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 处理 function modName:sub() body end 这种情况，参考funcname()代码可知 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvarliteral&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;self&amp;#34;&lt;/span&gt;, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;adjustlocalvars&lt;/span&gt;(ls, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 解析显式形参 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;parlist&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;checknext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;chunk&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 函数定义结束于哪一行 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  new_fs.f-&amp;gt;lastlinedefined = ls-&amp;gt;linenumber;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;check_match&lt;/span&gt;(ls, TK_END, TK_FUNCTION, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;close_func&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;pushclosure&lt;/span&gt;(ls, &amp;amp;new_fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 解析表达式，返回表达式中的项的数量 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;explist1&lt;/span&gt; (LexState *ls, expdesc *v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* explist1 -&amp;gt; expr { `,&amp;#39; expr } */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; n = 1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* at least one expression */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;expr&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;testnext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2nextreg&lt;/span&gt;(ls-&amp;gt;fs, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;expr&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    n++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; n;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* funcargs -&amp;gt; `(&amp;#39; [ explist1 ] `)&amp;#39; | constructor | STRING */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;funcargs&lt;/span&gt; (LexState *ls, expdesc *f) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc args;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; base, nparams;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line = ls-&amp;gt;linenumber;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (ls-&amp;gt;t.token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* funcargs -&amp;gt; `(&amp;#39; [ explist1 ] `)&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (line != ls-&amp;gt;lastline)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_syntaxerror&lt;/span&gt;(ls,&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;ambiguous syntax (function call x new statement)&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;t.token == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* arg list is empty? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        args.k = VVOID;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;explist1&lt;/span&gt;(ls, &amp;amp;args);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_setmultret&lt;/span&gt;(fs, &amp;amp;args);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;check_match&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* funcargs -&amp;gt; constructor */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;constructor&lt;/span&gt;(ls, &amp;amp;args);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_STRING: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* funcargs -&amp;gt; STRING */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;codestring&lt;/span&gt;(ls, &amp;amp;args, ls-&amp;gt;t.seminfo.ts);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* must use `seminfo&amp;#39; before `next&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_syntaxerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;function arguments expected&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(f-&amp;gt;k == VNONRELOC);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  base = f-&amp;gt;u.s.info;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* base register for call */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;hasmultret&lt;/span&gt;(args.k))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nparams = LUA_MULTRET;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* open call */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (args.k != VVOID)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2nextreg&lt;/span&gt;(fs, &amp;amp;args);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* close last argument */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nparams = fs-&amp;gt;freereg - (base+1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(f, VCALL, &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_CALL, base, nparams+1, 2));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_fixline&lt;/span&gt;(fs, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;freereg = base+1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* call remove function and arguments and leaves&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;                            (unless changed) one result */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** {======================================================================&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Expression parsing&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** =======================================================================&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;prefixexp&lt;/span&gt; (LexState *ls, expdesc *v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* prefixexp -&amp;gt; NAME | &amp;#39;(&amp;#39; expr &amp;#39;)&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (ls-&amp;gt;t.token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line = ls-&amp;gt;linenumber;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;expr&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;check_match&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_dischargevars&lt;/span&gt;(ls-&amp;gt;fs, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_NAME: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 确定当前ls-&amp;gt;t.token的变量类型(VLOCAL,VGLOBAL还是VUPVAL？)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      **     填充expdesc.u.s.info信息&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      ** 读取下一个Token&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;singlevar&lt;/span&gt;(ls, v); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_syntaxerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;unexpected symbol&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* primary：基本的 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;primaryexp&lt;/span&gt; (LexState *ls, expdesc *v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* primaryexp -&amp;gt; prefixexp { `.&amp;#39; NAME | `[&amp;#39; exp `]&amp;#39; | `:&amp;#39; NAME funcargs | funcargs } */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;prefixexp&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (;;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (ls-&amp;gt;t.token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* field */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;field&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt;: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `[&amp;#39; exp1 `]&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        expdesc key;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2anyreg&lt;/span&gt;(fs, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;yindex&lt;/span&gt;(ls, &amp;amp;key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_indexed&lt;/span&gt;(fs, v, &amp;amp;key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `:&amp;#39; NAME funcargs */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        expdesc key;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;checkname&lt;/span&gt;(ls, &amp;amp;key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_self&lt;/span&gt;(fs, v, &amp;amp;key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;funcargs&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_STRING: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* funcargs 函数调用 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2nextreg&lt;/span&gt;(fs, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;funcargs&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 对表达式进行初始化，间接表达式则生成求src.val的指令, 等待回填dst.reg */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;simpleexp&lt;/span&gt; (LexState *ls, expdesc *v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* simpleexp -&amp;gt; NUMBER | STRING | NIL | true | false | ... |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;                  constructor | FUNCTION body | primaryexp */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (ls-&amp;gt;t.token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_NUMBER: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(v, VKNUM, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      v-&amp;gt;u.nval = ls-&amp;gt;t.seminfo.r;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 直接赋值NUMBER */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_STRING: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;codestring&lt;/span&gt;(ls, v, ls-&amp;gt;t.seminfo.ts);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_NIL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(v, VNIL, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_TRUE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(v, VTRUE, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_FALSE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(v, VFALSE, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_DOTS: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* vararg */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;check_condition&lt;/span&gt;(ls, fs-&amp;gt;f-&amp;gt;is_vararg,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;cannot use &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;LUA_QL&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34; outside a vararg function&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      fs-&amp;gt;f-&amp;gt;is_vararg &amp;amp;= ~VARARG_NEEDSARG;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* don&amp;#39;t need &amp;#39;arg&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(v, VVARARG, &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_VARARG, 0, 1, 0));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* constructor */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;constructor&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_FUNCTION: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;body&lt;/span&gt;(ls, v, 0, ls-&amp;gt;linenumber);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;primaryexp&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 返回TK可能的一元操作符TK */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; UnOpr &lt;span style=&#34;color:#c34e00&#34;&gt;getunopr&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; op) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (op) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_NOT: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_NOT;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_MINUS;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_LEN;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_NOUNOPR;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; BinOpr &lt;span style=&#34;color:#c34e00&#34;&gt;getbinopr&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; op) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (op) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_ADD;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_SUB;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_MUL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_DIV;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;%&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_MOD;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;^&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_POW;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_CONCAT: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_CONCAT;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_NE: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_NE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_EQ: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_EQ;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_LT;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_LE: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_LE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_GT;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_GE: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_GE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_AND: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_AND;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_OR: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_OR;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_NOBINOPR;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 操作符的优先级分左右：用于处理结合性？ */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lu_byte left;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* left priority for each binary operator */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lu_byte right; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* right priority */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} priority[] = {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ORDER OPR */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   {6, 6}, {6, 6}, {7, 7}, {7, 7}, {7, 7},  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `+&amp;#39; `-&amp;#39; `/&amp;#39; `%&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   {10, 9}, {5, 4},                 &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* power and concat (right associative) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   {3, 3}, {3, 3},                  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* equality and inequality */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   {3, 3}, {3, 3}, {3, 3}, {3, 3},  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* order */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   {2, 2}, {1, 1}                   &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* logical (and/or) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define UNARY_PRIORITY&#x9;8  &lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* priority for unary operators,一元操作符的优先级？ */&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** subexpr -&amp;gt; (simpleexp | unop subexpr) { binop subexpr }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** where `binop&amp;#39; is any binary operator with a priority higher than `limit&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 操作符表达式&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; BinOpr &lt;span style=&#34;color:#c34e00&#34;&gt;subexpr&lt;/span&gt; (LexState *ls, expdesc *v, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; limit) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BinOpr op;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UnOpr uop;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;enterlevel&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  uop = &lt;span style=&#34;color:#c34e00&#34;&gt;getunopr&lt;/span&gt;(ls-&amp;gt;t.token);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (uop != OPR_NOUNOPR) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;subexpr&lt;/span&gt;(ls, v, UNARY_PRIORITY);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_prefix&lt;/span&gt;(ls-&amp;gt;fs, uop, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;simpleexp&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* expand while operators have priorities higher than `limit&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  op = &lt;span style=&#34;color:#c34e00&#34;&gt;getbinopr&lt;/span&gt;(ls-&amp;gt;t.token);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (op != OPR_NOBINOPR &amp;amp;&amp;amp; priority[op].left &amp;gt; limit) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    expdesc v2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BinOpr nextop;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_infix&lt;/span&gt;(ls-&amp;gt;fs, op, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* read sub-expression with higher priority */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nextop = &lt;span style=&#34;color:#c34e00&#34;&gt;subexpr&lt;/span&gt;(ls, &amp;amp;v2, priority[op].right);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_posfix&lt;/span&gt;(ls-&amp;gt;fs, op, v, &amp;amp;v2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    op = nextop;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;leavelevel&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; op;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* return first untreated operator */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;expr&lt;/span&gt; (LexState *ls, expdesc *v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;subexpr&lt;/span&gt;(ls, v, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* }==================================================================== */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** {======================================================================&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Rules for Statements&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** =======================================================================&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* repeat&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**   statements&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** until( condition )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;block_follow&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (token) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* END和EOS还没理解 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_ELSE: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_ELSEIF: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_END:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_UNTIL: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_EOS:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;block&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* block -&amp;gt; chunk */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BlockCnt bl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;enterblock&lt;/span&gt;(fs, &amp;amp;bl, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;chunk&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(bl.breaklist == NO_JUMP);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;leaveblock&lt;/span&gt;(fs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** structure to chain all variables in the left-hand side of an&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** assignment&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; LHS_assign {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; LHS_assign *prev;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc v;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* variable (global, local, upvalue, or indexed) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** check whether, in an assignment to a local variable, the local variable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** is needed in a previous assignment (to a table). If so, save original&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** local value in a safe place and use this safe copy in the previous&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** assignment.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;check_conflict&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; LHS_assign *lh, expdesc *v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; extra = fs-&amp;gt;freereg;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* eventual position to save local variable */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; conflict = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (; lh; lh = lh-&amp;gt;prev) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (lh-&amp;gt;v.k == VINDEXED) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (lh-&amp;gt;v.u.s.info == v-&amp;gt;u.s.info) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* conflict? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        conflict = 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        lh-&amp;gt;v.u.s.info = extra;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* previous assignment will use safe copy */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (lh-&amp;gt;v.u.s.aux == v-&amp;gt;u.s.info) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* conflict? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        conflict = 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        lh-&amp;gt;v.u.s.aux = extra;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* previous assignment will use safe copy */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (conflict) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_MOVE, fs-&amp;gt;freereg, v-&amp;gt;u.s.info, 0);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* make copy */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_reserveregs&lt;/span&gt;(fs, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;assignment&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; LHS_assign *lh, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nvars) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc e;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;check_condition&lt;/span&gt;(ls, VLOCAL &amp;lt;= lh-&amp;gt;v.k &amp;amp;&amp;amp; lh-&amp;gt;v.k &amp;lt;= VINDEXED,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;syntax error&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;testnext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* assignment -&amp;gt; `,&amp;#39; primaryexp assignment */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; LHS_assign nv;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nv.prev = lh;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;primaryexp&lt;/span&gt;(ls, &amp;amp;nv.v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (nv.v.k == VLOCAL)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;check_conflict&lt;/span&gt;(ls, lh, &amp;amp;nv.v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaY_checklimit&lt;/span&gt;(ls-&amp;gt;fs, nvars, LUAI_MAXCCALLS - ls-&amp;gt;L-&amp;gt;nCcalls,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;variables in assignment&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;assignment&lt;/span&gt;(ls, &amp;amp;nv, nvars+1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* assignment -&amp;gt; `=&amp;#39; explist1 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nexps;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;checknext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nexps = &lt;span style=&#34;color:#c34e00&#34;&gt;explist1&lt;/span&gt;(ls, &amp;amp;e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (nexps != nvars) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;adjust_assign&lt;/span&gt;(ls, nvars, nexps, &amp;amp;e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (nexps &amp;gt; nvars)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ls-&amp;gt;fs-&amp;gt;freereg -= nexps - nvars;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* remove extra values */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_setoneret&lt;/span&gt;(ls-&amp;gt;fs, &amp;amp;e);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* close last expression */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_storevar&lt;/span&gt;(ls-&amp;gt;fs, &amp;amp;lh-&amp;gt;v, &amp;amp;e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* avoid default */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(&amp;amp;e, VNONRELOC, ls-&amp;gt;fs-&amp;gt;freereg-1);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* default assignment */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_storevar&lt;/span&gt;(ls-&amp;gt;fs, &amp;amp;lh-&amp;gt;v, &amp;amp;e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;cond&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* cond -&amp;gt; exp */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc v;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;expr&lt;/span&gt;(ls, &amp;amp;v);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* read condition */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (v.k == VNIL) v.k = VFALSE;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `falses&amp;#39; are all equal here */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_goiftrue&lt;/span&gt;(ls-&amp;gt;fs, &amp;amp;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; v.f;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;breakstat&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BlockCnt *bl = fs-&amp;gt;bl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; upval = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (bl &amp;amp;&amp;amp; !bl-&amp;gt;isbreakable) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    upval |= bl-&amp;gt;upval;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bl = bl-&amp;gt;previous;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!bl)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_syntaxerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;no loop to break&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (upval)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_CLOSE, bl-&amp;gt;nactvar, 0, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_concat&lt;/span&gt;(fs, &amp;amp;bl-&amp;gt;breaklist, &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_jump&lt;/span&gt;(fs));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;whilestat&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* whilestat -&amp;gt; WHILE cond DO block END */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; whileinit;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; condexit;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BlockCnt bl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip WHILE */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  whileinit = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_getlabel&lt;/span&gt;(fs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  condexit = &lt;span style=&#34;color:#c34e00&#34;&gt;cond&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;enterblock&lt;/span&gt;(fs, &amp;amp;bl, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;checknext&lt;/span&gt;(ls, TK_DO);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;block&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchlist&lt;/span&gt;(fs, &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_jump&lt;/span&gt;(fs), whileinit);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;check_match&lt;/span&gt;(ls, TK_END, TK_WHILE, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;leaveblock&lt;/span&gt;(fs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchtohere&lt;/span&gt;(fs, condexit);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* false conditions finish the loop */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;repeatstat&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* repeatstat -&amp;gt; REPEAT block UNTIL cond */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; condexit;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; repeat_init = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_getlabel&lt;/span&gt;(fs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BlockCnt bl1, bl2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;enterblock&lt;/span&gt;(fs, &amp;amp;bl1, 1);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* loop block */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;enterblock&lt;/span&gt;(fs, &amp;amp;bl2, 0);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* scope block */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip REPEAT */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;chunk&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;check_match&lt;/span&gt;(ls, TK_UNTIL, TK_REPEAT, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  condexit = &lt;span style=&#34;color:#c34e00&#34;&gt;cond&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* read condition (inside scope block) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!bl2.upval) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no upvalues? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;leaveblock&lt;/span&gt;(fs);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* finish scope */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchlist&lt;/span&gt;(ls-&amp;gt;fs, condexit, repeat_init);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* close the loop */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* complete semantics when there are upvalues */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;breakstat&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* if condition then break */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchtohere&lt;/span&gt;(ls-&amp;gt;fs, condexit);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else... */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;leaveblock&lt;/span&gt;(fs);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* finish scope... */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchlist&lt;/span&gt;(ls-&amp;gt;fs, &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_jump&lt;/span&gt;(fs), repeat_init);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* and repeat */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;leaveblock&lt;/span&gt;(fs);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* finish loop */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;exp1&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc e;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; k;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;expr&lt;/span&gt;(ls, &amp;amp;e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  k = e.k;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2nextreg&lt;/span&gt;(ls-&amp;gt;fs, &amp;amp;e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; k;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;forbody&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; base, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nvars, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; isnum) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* forbody -&amp;gt; DO block */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BlockCnt bl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; prep, endfor;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;adjustlocalvars&lt;/span&gt;(ls, 3);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* control variables */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;checknext&lt;/span&gt;(ls, TK_DO);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  prep = isnum ? &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeAsBx&lt;/span&gt;(fs, OP_FORPREP, base, NO_JUMP) : &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_jump&lt;/span&gt;(fs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;enterblock&lt;/span&gt;(fs, &amp;amp;bl, 0);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* scope for declared variables */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;adjustlocalvars&lt;/span&gt;(ls, nvars);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_reserveregs&lt;/span&gt;(fs, nvars);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;block&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;leaveblock&lt;/span&gt;(fs);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* end of scope for declared variables */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchtohere&lt;/span&gt;(fs, prep);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  endfor = (isnum) ? &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeAsBx&lt;/span&gt;(fs, OP_FORLOOP, base, NO_JUMP) :&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_TFORLOOP, base, 0, nvars);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_fixline&lt;/span&gt;(fs, line);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* pretend that `OP_FOR&amp;#39; starts the loop */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchlist&lt;/span&gt;(fs, (isnum ? endfor : &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_jump&lt;/span&gt;(fs)), prep + 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fornum&lt;/span&gt; (LexState *ls, TString *varname, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* fornum -&amp;gt; NAME = exp1,exp1[,exp1] forbody */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; base = fs-&amp;gt;freereg;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvarliteral&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;(for index)&amp;#34;&lt;/span&gt;, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvarliteral&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;(for limit)&amp;#34;&lt;/span&gt;, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvarliteral&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;(for step)&amp;#34;&lt;/span&gt;, 2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvar&lt;/span&gt;(ls, varname, 3);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;checknext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;exp1&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* initial value */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;checknext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;exp1&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* limit */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;testnext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;exp1&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* optional step */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* default step = 1 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABx&lt;/span&gt;(fs, OP_LOADK, fs-&amp;gt;freereg, &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_numberK&lt;/span&gt;(fs, 1));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_reserveregs&lt;/span&gt;(fs, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;forbody&lt;/span&gt;(ls, base, line, 1, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;forlist&lt;/span&gt; (LexState *ls, TString *indexname) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* forlist -&amp;gt; NAME {,NAME} IN explist1 forbody */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc e;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nvars = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; base = fs-&amp;gt;freereg;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* create control variables */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvarliteral&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;(for generator)&amp;#34;&lt;/span&gt;, nvars++);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvarliteral&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;(for state)&amp;#34;&lt;/span&gt;, nvars++);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvarliteral&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;(for control)&amp;#34;&lt;/span&gt;, nvars++);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* create declared variables */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvar&lt;/span&gt;(ls, indexname, nvars++);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;testnext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvar&lt;/span&gt;(ls, &lt;span style=&#34;color:#c34e00&#34;&gt;str_checkname&lt;/span&gt;(ls), nvars++);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;checknext&lt;/span&gt;(ls, TK_IN);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  line = ls-&amp;gt;linenumber;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;adjust_assign&lt;/span&gt;(ls, 3, &lt;span style=&#34;color:#c34e00&#34;&gt;explist1&lt;/span&gt;(ls, &amp;amp;e), &amp;amp;e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_checkstack&lt;/span&gt;(fs, 3);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* extra space to call generator */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;forbody&lt;/span&gt;(ls, base, line, nvars - 3, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;forstat&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* forstat -&amp;gt; FOR (fornum | forlist) END */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TString *varname;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BlockCnt bl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;enterblock&lt;/span&gt;(fs, &amp;amp;bl, 1);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* scope for loop and control variables */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip `for&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  varname = &lt;span style=&#34;color:#c34e00&#34;&gt;str_checkname&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* first variable name */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (ls-&amp;gt;t.token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#c34e00&#34;&gt;fornum&lt;/span&gt;(ls, varname, line); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_IN: &lt;span style=&#34;color:#c34e00&#34;&gt;forlist&lt;/span&gt;(ls, varname); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_syntaxerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#c34e00&#34;&gt;LUA_QL&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34; or &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;LUA_QL&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34; expected&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;check_match&lt;/span&gt;(ls, TK_END, TK_FOR, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;leaveblock&lt;/span&gt;(fs);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* loop scope (`break&amp;#39; jumps to this point) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;test_then_block&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* test_then_block -&amp;gt; [IF | ELSEIF] cond THEN block */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; condexit;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip IF or ELSEIF */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  condexit = &lt;span style=&#34;color:#c34e00&#34;&gt;cond&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;checknext&lt;/span&gt;(ls, TK_THEN);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;block&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `then&amp;#39; part */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; condexit;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;ifstat&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ifstat -&amp;gt; IF cond THEN block {ELSEIF cond THEN block} [ELSE block] END */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; flist;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* false&amp;#39;list */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; escapelist = NO_JUMP;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 块结束的addr */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  flist = &lt;span style=&#34;color:#c34e00&#34;&gt;test_then_block&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* IF cond THEN block */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (ls-&amp;gt;t.token == TK_ELSEIF) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_concat&lt;/span&gt;(fs, &amp;amp;escapelist, &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_jump&lt;/span&gt;(fs));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchtohere&lt;/span&gt;(fs, flist);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flist = &lt;span style=&#34;color:#c34e00&#34;&gt;test_then_block&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ELSEIF cond THEN block */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;t.token == TK_ELSE) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_concat&lt;/span&gt;(fs, &amp;amp;escapelist, &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_jump&lt;/span&gt;(fs));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchtohere&lt;/span&gt;(fs, flist);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip ELSE (after patch, for correct line info) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;block&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `else&amp;#39; part */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_concat&lt;/span&gt;(fs, &amp;amp;escapelist, flist);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchtohere&lt;/span&gt;(fs, escapelist);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;check_match&lt;/span&gt;(ls, TK_END, TK_IF, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;localfunc&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc v, b;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* local function funA(...) end &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 注册locvar(函数名)到Proto.nlocvars,填充name信息，建立fs-&amp;gt;actvar[fs-&amp;gt;nactvars]到p.nlocvars的映射&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvar&lt;/span&gt;(ls, &lt;span style=&#34;color:#c34e00&#34;&gt;str_checkname&lt;/span&gt;(ls), 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 给表达式填个初值先 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(&amp;amp;v, VLOCAL, fs-&amp;gt;freereg);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 上面新增了一个locvar,用掉了一个freereg，这里扩大点maxstacksize, 更新freereg */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_reserveregs&lt;/span&gt;(fs, 1);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* reserve reg:准备寄存器 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新fs-&amp;gt;nactvar, 填充上面新增的p.nlocvars变量的startpc */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;adjustlocalvars&lt;/span&gt;(ls, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;body&lt;/span&gt;(ls, &amp;amp;b, 0, ls-&amp;gt;linenumber);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_storevar&lt;/span&gt;(fs, &amp;amp;v, &amp;amp;b);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* debug information will only see the variable after this point! */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;getlocvar&lt;/span&gt;(fs, fs-&amp;gt;nactvar - 1).startpc = fs-&amp;gt;pc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;localstat&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; LOCAL NAME {`,&amp;#39; NAME} [`=&amp;#39; explist1] */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nvars = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nexps;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc e;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 登记左边的变量名到 Proto.locvars */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvar&lt;/span&gt;(ls, &lt;span style=&#34;color:#c34e00&#34;&gt;str_checkname&lt;/span&gt;(ls), nvars++);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;testnext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;testnext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nexps = &lt;span style=&#34;color:#c34e00&#34;&gt;explist1&lt;/span&gt;(ls, &amp;amp;e);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 解析表达式 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    e.k = VVOID;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nexps = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;adjust_assign&lt;/span&gt;(ls, nvars, nexps, &amp;amp;e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;adjustlocalvars&lt;/span&gt;(ls, nvars);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;funcname&lt;/span&gt; (LexState *ls, expdesc *v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* funcname -&amp;gt; NAME {field} [`:&amp;#39; NAME] */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; needself = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;singlevar&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (ls-&amp;gt;t.token == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;field&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;t.token == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    needself = 1;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 需要给函数添加一个self参数 eg:           function modName:sub () body end */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;field&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; needself;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;funcstat&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* funcstat -&amp;gt; FUNCTION funcname body */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; needself;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc v, b;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip FUNCTION */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  needself = &lt;span style=&#34;color:#c34e00&#34;&gt;funcname&lt;/span&gt;(ls, &amp;amp;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;body&lt;/span&gt;(ls, &amp;amp;b, needself, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_storevar&lt;/span&gt;(ls-&amp;gt;fs, &amp;amp;v, &amp;amp;b);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_fixline&lt;/span&gt;(ls-&amp;gt;fs, line);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* definition `happens&amp;#39; in the first line */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 处理表达式stat */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;exprstat&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; func | assignment */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; LHS_assign v;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;primaryexp&lt;/span&gt;(ls, &amp;amp;v.v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (v.v.k == VCALL)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; func */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;SETARG_C&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getcode&lt;/span&gt;(fs, &amp;amp;v.v), 1);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* call statement uses no results */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; assignment */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    v.prev = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;assignment&lt;/span&gt;(ls, &amp;amp;v, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;retstat&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; RETURN explist */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc e;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; first, nret;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* registers with returned values */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip RETURN */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;block_follow&lt;/span&gt;(ls-&amp;gt;t.token) || ls-&amp;gt;t.token == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    first = nret = 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* return no values */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nret = &lt;span style=&#34;color:#c34e00&#34;&gt;explist1&lt;/span&gt;(ls, &amp;amp;e);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* optional return values */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;hasmultret&lt;/span&gt;(e.k)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_setmultret&lt;/span&gt;(fs, &amp;amp;e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e.k == VCALL &amp;amp;&amp;amp; nret == 1) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* tail call? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;SET_OPCODE&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getcode&lt;/span&gt;(fs,&amp;amp;e), OP_TAILCALL);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_A&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getcode&lt;/span&gt;(fs,&amp;amp;e)) == fs-&amp;gt;nactvar);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      first = fs-&amp;gt;nactvar;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      nret = LUA_MULTRET;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* return all values */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (nret == 1)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* only one single value? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        first = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2anyreg&lt;/span&gt;(fs, &amp;amp;e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2nextreg&lt;/span&gt;(fs, &amp;amp;e);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* values must go to the `stack&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        first = fs-&amp;gt;nactvar;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* return all `active&amp;#39; values */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(nret == fs-&amp;gt;freereg - first);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_ret&lt;/span&gt;(fs, first, nret);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;statement&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line = ls-&amp;gt;linenumber;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* may be needed for error messages */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (ls-&amp;gt;t.token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_IF: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; ifstat */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;ifstat&lt;/span&gt;(ls, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_WHILE: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; whilestat */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;whilestat&lt;/span&gt;(ls, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_DO: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; DO block END */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip DO */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;block&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;check_match&lt;/span&gt;(ls, TK_END, TK_DO, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_FOR: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; forstat */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;forstat&lt;/span&gt;(ls, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_REPEAT: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; repeatstat */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;repeatstat&lt;/span&gt;(ls, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_FUNCTION: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;funcstat&lt;/span&gt;(ls, line);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; funcstat */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_LOCAL: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; localstat */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip LOCAL */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;testnext&lt;/span&gt;(ls, TK_FUNCTION))  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* local function? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;  &#x9;** local function funName()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;  &#x9;** end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;  &#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;localfunc&lt;/span&gt;(ls);&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;localstat&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_RETURN: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; retstat */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;retstat&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* must be last statement */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_BREAK: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; breakstat */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip BREAK */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;breakstat&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* must be last statement */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;exprstat&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* to avoid warnings */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;chunk&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* chunk -&amp;gt; { stat [`;&amp;#39;] } */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; islast = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;enterlevel&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (!islast &amp;amp;&amp;amp; !&lt;span style=&#34;color:#c34e00&#34;&gt;block_follow&lt;/span&gt;(ls-&amp;gt;t.token)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    islast = &lt;span style=&#34;color:#c34e00&#34;&gt;statement&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* statement后面的&amp;#39;;&amp;#39;是可选的 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;testnext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(ls-&amp;gt;fs-&amp;gt;f-&amp;gt;maxstacksize &amp;gt;= ls-&amp;gt;fs-&amp;gt;freereg &amp;amp;&amp;amp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               ls-&amp;gt;fs-&amp;gt;freereg &amp;gt;= ls-&amp;gt;fs-&amp;gt;nactvar);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 释放上一个块占用的临时寄存器 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ls-&amp;gt;fs-&amp;gt;freereg = ls-&amp;gt;fs-&amp;gt;nactvar;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* free registers */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;leavelevel&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* }====================================================================== */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>lua源码注释 lparse.h</title>
      <link>http://shanks.link/blog/2021/06/08/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-lparse.h/</link>
      <pubDate>Tue, 08 Jun 2021 23:01:44 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/06/08/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-lparse.h/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** $Id: lparser.h,v 1.57.1.1 2007/12/27 13:02:25 roberto Exp $&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Lua Parser&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** See Copyright Notice in lua.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#ifndef lparser_h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define lparser_h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;llimits.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lobject.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lzio.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/**************************** 官方的BNF **********************************&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;chunk ::= {stat [`;´]} [laststat [`;´]]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;block ::= chunk&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;stat ::=  varlist `=´ explist | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; functioncall | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; do block end | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; while exp do block end | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; repeat block until exp | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; if exp then block {elseif exp then block} [else block] end | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; for Name `=´ exp `,´ exp [`,´ exp] do block end | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; for namelist in explist do block end | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; function funcname funcbody | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; local function Name funcbody | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; local namelist [`=´ explist] &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;laststat ::= return [explist] | break&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;funcname ::= Name {`.´ Name} [`:´ Name]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;varlist ::= var {`,´ var}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;var ::=  Name | prefixexp `[´ exp `]´ | prefixexp `.´ Name &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;namelist ::= Name {`,´ Name}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;explist ::= {exp `,´} exp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;exp ::=  nil | false | true | Number | String | `...´ | function | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; prefixexp | tableconstructor | exp binop exp | unop exp &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;prefixexp ::= var | functioncall | `(´ exp `)´&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;functioncall ::=  prefixexp args | prefixexp `:´ Name args &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;args ::=  `(´ [explist] `)´ | tableconstructor | String &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;function ::= function funcbody&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;funcbody ::= `(´ [parlist] `)´ block end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;parlist ::= namelist [`,´ `...´] | `...´&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;tableconstructor ::= `{´ [fieldlist] `}´&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;fieldlist ::= field {fieldsep field} [fieldsep]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;field ::= `[´ exp `]´ `=´ exp | Name `=´ exp | exp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;fieldsep ::= `,´ | `;´&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;binop ::= `+´ | `-´ | `*´ | `/´ | `^´ | `%´ | `..´ | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; `&amp;lt;´ | `&amp;lt;=´ | `&amp;gt;´ | `&amp;gt;=´ | `==´ | `~=´ | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; and | or&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;unop ::= `-´ | not | `#´&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**************************************************************************/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/**************************** 自己总结的BNF **********************************&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;chunk ::= {stat [`;´]}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;block ::= chunk&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;stat ::=  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; ifstat | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; whilestat | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; DO block END | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; forstat | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; repeat | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; funcstat | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; localstat |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; retstat |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; breaksat |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; exprstat&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;localstat  &#x9;::= local fun | localstat‘&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;localstat&amp;#39; &#x9;::= LOCAL NAME {`,´ NAME } [`=´ explist1]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;explist1   &#x9;::= expr { `,&amp;#39; expr }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;expr &#x9;&#x9;::= subexpr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;subexpr &#x9;::= (simpleexp | unop subexpr) { binop subexpr }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;simpleexp &#x9;::= NUMBER | STRING | NIL | true | false | ... |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;                  constructor | FUNCTION body | primaryexp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;primaryexp &#x9;::= prefixexp { `.&amp;#39; NAME | `[&amp;#39; expr `]&amp;#39; | `:&amp;#39; NAME funcargs | funcargs }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;prefixexp &#x9;::= NAME | &amp;#39;(&amp;#39; expr &amp;#39;)&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;funcargs &#x9;::= `(&amp;#39; [ explist1 ] `)&amp;#39; | constructor | STRING&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;exprstat    := func | assignment&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;assignment &#x9;::= `,&amp;#39; primaryexp assignment |  `=&amp;#39; explist1 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;ifstat &#x9;&#x9;::= IF cond THEN block {ELSEIF cond THEN block} [ELSE block] END&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;cond &#x9;&#x9;::= expr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;test_then_block :: [IF | ELSEIF] cond THEN block&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;whilestat &#x9;::= WHILE cond DO block END&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;repeatstat &#x9;:: REPEAT block UNTIL cond&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;forstat &#x9;::= FOR (fornum | forlist) END&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;fornum &#x9;&#x9;::= NAME = exp1,exp1[,exp1] forbody&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;forlist &#x9;::= NAME {,NAME} IN explist1 forbody&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;forbody &#x9;::= DO block&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;funcstat &#x9;::= FUNCTION funcname body&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;funcname &#x9;::= NAME {field} [`:&amp;#39; NAME]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;field &#x9;&#x9;::= [&amp;#39;.&amp;#39; | &amp;#39;:&amp;#39;] NAME &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;body &#x9;&#x9;::=  `(&amp;#39; parlist `)&amp;#39; chunk END&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;parlist &#x9;:: [ param { `,&amp;#39; param } ] &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;param &#x9;&#x9;::= NAME | ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;constructor ::= {recfield|listfield}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;recfield &#x9;::= (NAME | `[&amp;#39;exp1`]&amp;#39;) = exp1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;listfield   ::= exp1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;exp1        ::= (exp)   ?&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;retstat ::= RETURN explist&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**************************************************************************/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Expression descriptor&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 表达式的&amp;#34;类型&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** VNONRELOC, VRELOCABLE表示表达式的reg信息(已被安排到指定的reg或可以重定位到任一reg)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 其它的类型：表达式的类型 相关函数 luaK_dischargevars&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;enum&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VVOID,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no value:表示表达式尚未进行评估，也可能表达式就是空 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VNIL,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VTRUE,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* true */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VFALSE,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* fales */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VK,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* info = index of constant in `k&amp;#39; 常量表达式 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VKNUM,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* nval = numerical value */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VLOCAL,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* info = local register */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VUPVAL,   &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* info = index of upvalue in `upvalues&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VGLOBAL,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* info = index of table; aux = index of global name in `k&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 索引表达式 eg: tbl(info).aux(aux) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VINDEXED,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* info = table register; aux = index register (or `k&amp;#39;) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 跳转表达式，常用于关系表达式 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VJMP,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* info = instruction pc */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 表达式尚未加载到reg（目标reg尚未确定，可以放在栈的任意位置，只要能访问到）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** info:本指令在指令数组中的索引，方便后面回填本指令的目标地址寄存器(R(A))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VRELOCABLE,&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* info = instruction pc */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 表达式的值已被加载到reg中了，info:对应寄存器的idx */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VNONRELOC,&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* info = result register */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VCALL,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* info = instruction pc: info表示exp对应的指令在指令f的指令数组中的下标，下同 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VVARARG&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* info = instruction pc   ... 变参操作符 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} expkind;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; expdesc {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expkind k;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 表达式类型，后面会更新为表达式占用寄存器的类型 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;union&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; { &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; info, aux; } s;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 随着k不同,info,aux表示的意义随之变化,具体看expkind的注释 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lua_Number nval;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 数值表达式的数值 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } u;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; t;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* patch list of `exit when true&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; f;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* patch list of `exit when false&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} expdesc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; upvaldesc {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lu_byte k;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lu_byte info;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} upvaldesc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; BlockCnt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* defined in lparser.c */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* state needed to generate code for a given function &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 编译阶段的func状态机，成品则是Proto&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; FuncState {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; lua_State *L;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* copy of the Lua state */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; FuncState *prev;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* enclosing function,先编译完子函数，才能编译父函数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; LexState *ls;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* lexical state */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Proto *f;  &#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* current function header */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; BlockCnt *bl;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* chain of current blocks */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; pc;  &#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 指向:下一个待生成的指令 next position to code (equivalent to `ncode&amp;#39;) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; lasttarget;   &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `pc&amp;#39; of last `jump target&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; jpc;  &#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* list of pending jumps to `pc&amp;#39;：指向下一个待生成的指令的待回填的跳转链表 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 存储常量kvar在对应的 Proto.k 常量数组中的下标的映射表 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** local var= &amp;#34;hello&amp;#34; , 常量 &amp;#34;hello&amp;#34; 存在Proto.k常量数组中的第0个位置处&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** h[&amp;#34;hello&amp;#34;] = 0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 查找常量过程如下 k=&amp;#34;hello&amp;#34;, 进入h表查找,找到v(0), 再用v到Proto.k中取值&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 参考函数 lcode.c addk&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Table *h;  &#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* table to find (and reuse) elements in `k&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nk;  &#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* number of elements in `k&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; np;  &#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* number of elements in `p&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 第一个可用的reg的索引，随着locvar的申请和释放，这个值不断变化&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 随着编译过程中临时占用寄存器的申请和释放，这个值也在不断变化&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **  local a = b + c 计算完b+c的结果要存放到一个临时寄存器中，赋值给a后，这个寄存器要释放&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 由于locvar的存在需要&amp;#34;始终&amp;#34;占用一个reg，所以freereg&amp;gt;=nactvar&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; freereg;  &#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* first free register */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 当前函数已使用的本地变量总和(下面的总和为6)，整个数组大小的定义在 Proto 的sizelocvars域中 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** do&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **   &#x9;local v1, v2, v3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** do&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **&#x9;local v1, v2, v3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** nlocvars:从1-&amp;gt;6, 这样每一个locvar都有一个唯一的 Proto.locvars中对应的信息，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **    至于运行到某一行时，v1到底指代哪一个v1,可以从startpc,endpc中推断出来（调试库也是靠pc推断的哦？）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;short&lt;/span&gt; nlocvars;  &#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* number of elements in `locvars&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** declared-variable stack&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 当前激活的var的idx到f.locvars的映射 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;short&lt;/span&gt; actvar[LUAI_MAXVARS];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* number of active local variables：当前激活中的locvar数量&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 对于上面的nlocvars第二次声明local时，nactvar:从1-&amp;gt;3,因为离开第一个块后，块所属的locvar被释放了（变量的声明周期也结束了）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lu_byte nactvar;  &#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  upvaldesc upvalues[LUAI_MAXUPVALUES];  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* upvalues */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} FuncState;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LUAI_FUNC Proto *&lt;span style=&#34;color:#c34e00&#34;&gt;luaY_parser&lt;/span&gt; (lua_State *L, ZIO *z, Mbuffer *buff,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                            &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *name);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>lua源码分析4的执行</title>
      <link>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%904%E7%9A%84%E6%89%A7%E8%A1%8C/</link>
      <pubDate>Thu, 03 Jun 2021 19:40:49 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%904%E7%9A%84%E6%89%A7%E8%A1%8C/</guid>
      <description>&lt;h1 id=&#34;第3章-lua中函数调用的方法&#34;&gt;第3章 lua中函数调用的方法&lt;/h1&gt;&#xA;&lt;p&gt;前面，以及分析了lua中定义一个函数的方法，现在总结如下：&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;1、  将函数名作为局部变量存在局部变量表里，并在栈上开辟一个寄存器空间，在运行期，将新建一个closure，并存在已保留的寄存器里；&lt;/p&gt;</description>
    </item>
    <item>
      <title>lua源码分析3条件跳转</title>
      <link>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%903%E6%9D%A1%E4%BB%B6%E8%B7%B3%E8%BD%AC/</link>
      <pubDate>Thu, 03 Jun 2021 19:32:57 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%903%E6%9D%A1%E4%BB%B6%E8%B7%B3%E8%BD%AC/</guid>
      <description>&lt;h1 id=&#34;第2章-关于条件编译&#34;&gt;第2章 关于条件编译&lt;/h1&gt;&#xA;&lt;p&gt;​&#x9;&#x9;首先，解释一下，为什么题目叫做：条件编译。其实很简单，现在这一章要分析的是，if、while、repeat、for语句。这些语句有个什么特点呢？那就是，都要有条件判断。根据条件判断的结果，以决定是否执行，该如何执行。我不知道该怎么称呼这样的语句，就一致称其为：条件编译。因为这一章的重点是研究，条件对于中间码的生成造成的影响，以及如何生成中间码以实现这种条件判断。&#xA;​    &#x9;首先分析if then elseif then else then end句型。&#xA;​    &#x9;这个很简单，实际上是lua处理的很简单。&#xA;​    &#x9;当lua遇到了if这个关键字的时候，就开始调用ifstat()，首先，这是进入一个块。这个块这个东西和函数是相同的重要，因为它关系到一个变量的作用域的问题。块由block()函数处理。不过在此之前，要注意一个重要的事情，那就是条件判断语句。lua是怎么处理条件判断的呢？&#xA;​    &#x9;首先，lua会跳过if关键字，然后，会进入一个十分常用的函数：cond()，这个函数还是比较复杂的，我现在要再看一遍这个函数，还是心有余悸的。&#xA;​    &#x9;cond()这个函数比较短，我还是贴出来吧：&lt;/p&gt;</description>
    </item>
    <item>
      <title>lua源码分析2（局部函数的定义）</title>
      <link>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902%E5%B1%80%E9%83%A8%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89/</link>
      <pubDate>Thu, 03 Jun 2021 18:17:39 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902%E5%B1%80%E9%83%A8%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89/</guid>
      <description>&lt;h2 id=&#34;第二节-局部函数的声明&#34;&gt;第二节 局部函数的声明&lt;/h2&gt;&#xA;&lt;p&gt;​&#x9;&#x9;前面研究了局部变量的定义，下面就研究下，lua中局部函数定义的方法。&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;其中局部函数定义的语法是：&#xA;​&#x9;&#x9;local function FuncName (parlist) chunk END&#xA;​&#x9;首先，lua会检测到local function这两个关键字，知道后面是在定义局部函数，lua会跳过这两个关键字，分别用llex_next()和testnext()。testnext()和checknext()这两个函数的区别是，checknext()是期望后面是某个token，是的话就读取，如果不是的话，就会报错，而testnext()是检查后面是不是某个token，如果是就读取，不是的话也不会报错。&#xA;​    当跳过了local function这两个关键字。就到了局部函数函数名的地方了。这时，lua会把这个局部函数当作一个局部变量，为这个函数名字注册一个局部变量名。其中就用到了前面注册局部变量时用到的函数 newlocalvar()。这个函数在局部变量数字里增加一项，记录这个函数名。这里的记录并没有检查是否已经存在了这个局部变量。但是使用的时候，lua会从头开始遍历查找，也就是说第一次注册的这个局部变量会被使用。&#xA;​    如前所说，在语法解析的过程中，有一个数据结构非常重要，那就是expdesc，这个数据结构代表一个表达式。在局部函数定义的时候，会用到2个这样的数据结构，这里分别称为v和b。其中v代表这个函数，b代表body，也就是函数体。当解析到这里的时候，会初始化v，将其类型赋值为VLOCAL，v-&amp;gt;k = VLOCAL，并在里面记录当前空闲寄存器的位置，v-&amp;gt;u.s.info = fs-&amp;gt;freereg。&#xA;​    接下来就是将空闲寄存器指针加一，将局部变量的个数加一。&#xA;​    于是，就进入解析函数体的部分了，body()。&#xA;​    首先，新建了一个FuncState数据结构，通过open_func()函数，这个数据结构就是我们一直看到的ls-&amp;gt;fs这个fs。这个数据结构是在语法解析时用到的，代表一个函数，它有一个函数头，叫Proto，每个函数都以一个这样的头。每个函数记录自己的中间码，它存在于这个函数头Proto里面，具体就是ls-&amp;gt;fs-&amp;gt;f-&amp;gt;code[]数组里。在语法解析的过程中，整个lua程序就当作了一个函数，也就是第一个FuncState，也就是第一个ls-&amp;gt;fs，之后，遇到的每个定义的函数，都会新建一个FuncState，并链在ls-&amp;gt;fs上，也就是，所有的ls-&amp;gt;fs链成一个链表。而ls-&amp;gt;fs就是当前解析到的函数。&#xA;​    新建了这个函数结构FuncState后，便将其及其常量数组压入栈中。&#xA;​    之后便是解析参数列表和函数体了。现在先不管这些，因为先从整体对解析函数有个了解。假设我们的函数是这个样子：&#xA;​    local function FuncName () END；&#xA;​    也就是说，没有参数表，也没有函数体的一个最简单的函数。&#xA;​    当lua解析这个函数的时候，如前所说，FuncName会被注册进局部变量表中，并且会新建一个FuncState数据结构，将其链在ls-&amp;gt;fs上，并当作当前函数。&#xA;​    当lua检测到函数定义的语法都正确，也就是参数表包含在小括号()内，函数体以END结束，通过了检测，就会执行close_func()函数。&#xA;​    这个函数比较有意思，它里面包含了一些比较有趣的函数。其中第一个有趣的函数叫做removevar()，看字面意思是去除变量。是什么意思呢？是这么个意思：函数定义结束后，函数内部的变量是外部不看见的，所以，要从可见的地方去掉。这个函数就是处理这个情况的。它的做法很简单，就是把每个这个函数内的局部变量的endpc标记为当前pc。也就是说，到当前位置，当前代码以后，局部变量是不可见的。这里的可见度，作用域是与指令联系起来的，也就是说，从某条指令开始，局部变量可见，到某条指令结束，局部变量不可见。于是，便从当前可见域里remove了那个函数的局部变量。&#xA;​    然后会通过luaK_ret()函数，生成一条OP_RETURN指令。&#xA;​    最后，将这个函数从ls中踢掉，也就是ls-&amp;gt;fs = fs-&amp;gt;prev。到这里，这个函数算解析完了，但是，这个函数生成的指令码是在这个函数结构fs里面，现在踢掉了，当要调用的时候该怎么调用呢？&#xA;​    这是最后一个疑问，不过， body并没有结束，还有最后一个函数pushclosure()。看了这个函数，我们就会发现，其实，lua并没有把这个函数踢掉，而是把它保存在他的父函数里面。这里是这么回事：每个函数里面都可以定义函数，这个函数名首先会作为局部变量名保存在父函数的局部变量表里，当作其父函数的一个局部变量。然后，这个函数的结构FuncState会被保存在其父函数的内部函数数组里，也就是每个函数结构的头结构里面，fs-&amp;gt;f，都会有一个函数头数组，fs-&amp;gt;f-&amp;gt;p[]，其中包含着在这个函数内部定义的函数。&#xA;​    pushclosure()首先就会做这件事，也就是将函数结构保存在其父函数结构的fs-&amp;gt;f-&amp;gt;p[]里面。&#xA;​    然后，就会生成一条指令，OP_CLOSURE，说明这里定义了一个函数。这条指令是做什么的呢？&#xA;​    别忘了刚开始我们说的，一个局部函数定义，和局部变量定义是同样的，在栈里会保留一个空槽（寄存器），但是，那个寄存器里到底存的是什么呢？这个就要留在运行时回答了。当lua虚拟机运行到OP_CLOSURE的时候，就会新建一个Closure，并用这个Closure初始化那个预留的寄存器，也就是那个局部函数。&#xA;​    而刚开始的那两个expdesc数据结构，其中之一b，也就是那个代表body的，就是用来储存这个OP_CLOSURE指令了。而那个v，其v-&amp;gt;u.s.info存的是这个局部函数所存在的寄存器位置。这里，已经生成了一个OP_CLOSURE指令，但是，这条指令所执行时，生成的Closure存在栈的哪里呢？也就是，应该放在那个局部函数所对应的那个寄存器里。下面就是要完成这个操作的函数：luaK_storevar()。就把当初保存在e里面的寄存器位置保存在了那条指令OP_CLOSURE里面了。&#xA;​&#x9;这就是新建了一个局部函数，其实和局部变量差不多。写到现在，发现文章的架构太乱了，算是草稿吧，以后再改。&#xA;————————————————&#xA;版权声明：本文为CSDN博主「haxixi_keli」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。&#xA;原文链接：https://blog.csdn.net/haxixi_keli/article/details/3210446&lt;/p&gt;</description>
    </item>
    <item>
      <title>lua源码分析1（局部变量的定义）</title>
      <link>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E5%AE%9A%E4%B9%89/</link>
      <pubDate>Thu, 03 Jun 2021 16:51:33 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E5%AE%9A%E4%B9%89/</guid>
      <description>&lt;h1 id=&#34;第0节-一切从这里开始&#34;&gt;第0节 一切从这里开始&lt;/h1&gt;&#xA;&lt;p&gt;​&#x9;&#x9;Lua是边进行语法分析，边词法分析。其中，词法分析的模块是：llex。其对外暴露的接口是：llex_next()。并且，在整个语法分析、词法分析的过程中，只有一个唯一的全局实例：llex_state。在词法分析的过程中，lua会处理以下几种情况：&lt;/p&gt;</description>
    </item>
    <item>
      <title>samba 445 被封 公网访问</title>
      <link>http://shanks.link/blog/2021/06/02/samba-445-%E8%A2%AB%E5%B0%81-%E5%85%AC%E7%BD%91%E8%AE%BF%E9%97%AE/</link>
      <pubDate>Wed, 02 Jun 2021 01:29:24 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/06/02/samba-445-%E8%A2%AB%E5%B0%81-%E5%85%AC%E7%BD%91%E8%AE%BF%E9%97%AE/</guid>
      <description>&lt;h3 id=&#34;原因&#34;&gt;原因&lt;/h3&gt;&#xA;&lt;p&gt;​&#x9;由于安全原因，tcp的445端口被网络运营商封闭，造成无法访问公网的samba服务，即使打开了腾讯的安全组策略中的端口也无济于事&lt;/p&gt;&#xA;&lt;h3 id=&#34;解决思路&#34;&gt;解决思路&lt;/h3&gt;&#xA;&lt;p&gt;​&#x9;修改访问端口&lt;/p&gt;</description>
    </item>
    <item>
      <title>lua源码注释-llex.c</title>
      <link>http://shanks.link/blog/2021/05/31/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-llex.c/</link>
      <pubDate>Mon, 31 May 2021 16:14:08 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/05/31/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-llex.c/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** $Id: llex.c,v 2.20.1.2 2009/11/23 14:58:22 roberto Exp $&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Lexical Analyzer&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** See Copyright Notice in lua.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;ctype.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;locale.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define llex_c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define LUA_CORE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lua.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ldo.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;llex.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lobject.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lparser.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lstate.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lstring.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ltable.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lzio.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define next(ls) (ls-&amp;gt;current = zgetc(ls-&amp;gt;z))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define currIsNewline(ls)&#x9;(ls-&amp;gt;current == &amp;#39;\n&amp;#39; || ls-&amp;gt;current == &amp;#39;\r&amp;#39;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ORDER RESERVED */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; luaX_tokens [] = {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;and&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;break&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;do&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;else&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;elseif&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;for&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;function&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;if&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;local&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;nil&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;not&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;or&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;repeat&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;return&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;then&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;until&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;while&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;..&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;==&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&amp;gt;=&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&amp;lt;=&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;~=&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&amp;lt;number&amp;gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&amp;lt;name&amp;gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&amp;lt;string&amp;gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&amp;lt;eof&amp;gt;&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NULL&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define save_and_next(ls) (save(ls, ls-&amp;gt;current), next(ls))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 将c存到ls-&amp;gt;buff中 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;save&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; c) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Mbuffer *b = ls-&amp;gt;buff;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (b-&amp;gt;n + 1 &amp;gt; b-&amp;gt;buffsize) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; newsize;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (b-&amp;gt;buffsize &amp;gt;= MAX_SIZET/2)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lexerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;lexical element too long&amp;#34;&lt;/span&gt;, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    newsize = b-&amp;gt;buffsize * 2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_resizebuffer&lt;/span&gt;(ls-&amp;gt;L, b, newsize);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  b-&amp;gt;buffer[b-&amp;gt;n++] = &lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt;, c);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 构建出关键字 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_init&lt;/span&gt; (lua_State *L) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i=0; i&amp;lt;NUM_RESERVED; i++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TString *ts = &lt;span style=&#34;color:#c34e00&#34;&gt;luaS_new&lt;/span&gt;(L, luaX_tokens[i]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaS_fix&lt;/span&gt;(ts);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* reserved words are never collected */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;strlen&lt;/span&gt;(luaX_tokens[i])+1 &amp;lt;= TOKEN_LEN);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ts-&amp;gt;tsv.reserved = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_byte&lt;/span&gt;(i+1);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* reserved word */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define MAXSRC          80&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *&lt;span style=&#34;color:#c34e00&#34;&gt;luaX_token2str&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (token &amp;lt; FIRST_RESERVED) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(token == &lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt;, token));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;iscntrl&lt;/span&gt;(token)) ? &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_pushfstring&lt;/span&gt;(ls-&amp;gt;L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;char(%d)&amp;#34;&lt;/span&gt;, token) :&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                              &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_pushfstring&lt;/span&gt;(ls-&amp;gt;L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;%c&amp;#34;&lt;/span&gt;, token);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; luaX_tokens[token-FIRST_RESERVED];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *&lt;span style=&#34;color:#c34e00&#34;&gt;txtToken&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_NAME:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_STRING:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_NUMBER:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;save&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_buffer&lt;/span&gt;(ls-&amp;gt;buff);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_token2str&lt;/span&gt;(ls, token);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lexerror&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *msg, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; buff[MAXSRC];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_chunkid&lt;/span&gt;(buff, &lt;span style=&#34;color:#c34e00&#34;&gt;getstr&lt;/span&gt;(ls-&amp;gt;source), MAXSRC);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  msg = &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_pushfstring&lt;/span&gt;(ls-&amp;gt;L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;%s:%d: %s&amp;#34;&lt;/span&gt;, buff, ls-&amp;gt;linenumber, msg);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (token)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_pushfstring&lt;/span&gt;(ls-&amp;gt;L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;%s near &amp;#34;&lt;/span&gt; LUA_QS, msg, &lt;span style=&#34;color:#c34e00&#34;&gt;txtToken&lt;/span&gt;(ls, token));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_throw&lt;/span&gt;(ls-&amp;gt;L, LUA_ERRSYNTAX);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_syntaxerror&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *msg) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lexerror&lt;/span&gt;(ls, msg, ls-&amp;gt;t.token);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TString *&lt;span style=&#34;color:#c34e00&#34;&gt;luaX_newstring&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *str, &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; l) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lua_State *L = ls-&amp;gt;L;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TString *ts = &lt;span style=&#34;color:#c34e00&#34;&gt;luaS_newlstr&lt;/span&gt;(L, str, l);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TValue *o = &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_setstr&lt;/span&gt;(L, ls-&amp;gt;fs-&amp;gt;h, ts);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* entry for `str&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(o)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setbvalue&lt;/span&gt;(o, 1);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* make sure `str&amp;#39; will not be collected */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_checkGC&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ts;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 读到单个换行符\n，\r，再多读一个字符，看是否是双字符的换行\n\r,\r\n */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;inclinenumber&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; old = ls-&amp;gt;current;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;currIsNewline&lt;/span&gt;(ls));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 当前是换行符 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 往后再读一个字符，看看不是不是\n\r和\r\n这种双字符的换行符（仅算一次换行） */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip `\n&amp;#39; or `\r&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;currIsNewline&lt;/span&gt;(ls) &amp;amp;&amp;amp; ls-&amp;gt;current != old)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip `\n\r&amp;#39; or `\r\n&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (++ls-&amp;gt;linenumber &amp;gt;= MAX_INT)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_syntaxerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;chunk has too many lines&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 初始化LexState，初始化ls-&amp;gt;buf,从ZIO读取第一个字符 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_setinput&lt;/span&gt; (lua_State *L, LexState *ls, ZIO *z, TString *source) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ls-&amp;gt;decpoint = &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ls-&amp;gt;L = L;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ls-&amp;gt;lookahead.token = TK_EOS;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no look-ahead token */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ls-&amp;gt;z = z;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ls-&amp;gt;fs = NULL;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 尚未开始编译函数，这里置NULL */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ls-&amp;gt;linenumber = 1;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 当前在第一行，亲 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ls-&amp;gt;lastline = 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ls-&amp;gt;source = source;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 申请属于ls-&amp;gt;buff的私有buff */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_resizebuffer&lt;/span&gt;(ls-&amp;gt;L, ls-&amp;gt;buff, LUA_MINBUFFER);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* initialize buffer */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* read first char */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** =======================================================&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** LEXICAL ANALYZER&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** =======================================================&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ls-&amp;gt;current和set字符集中的某个字符匹配吗 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;check_next&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *set) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;strchr&lt;/span&gt;(set, ls-&amp;gt;current))&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 将ls-&amp;gt;buff中的from字符替换层to字符 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;buffreplace&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; from, &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; to) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; n = &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_bufflen&lt;/span&gt;(ls-&amp;gt;buff);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *p = &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_buffer&lt;/span&gt;(ls-&amp;gt;buff);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (n--)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (p[n] == from) p[n] = to;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 数字字符串转换为数字时失败，尝试更换成本地区的数字字符小数点后再次尝试转换 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;trydecpoint&lt;/span&gt; (LexState *ls, SemInfo *seminfo) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* format error: try to update decimal point separator */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; lconv *cv = &lt;span style=&#34;color:#c34e00&#34;&gt;localeconv&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; old = ls-&amp;gt;decpoint;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ls-&amp;gt;decpoint = (cv ? cv-&amp;gt;decimal_point[0] : &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;buffreplace&lt;/span&gt;(ls, old, ls-&amp;gt;decpoint);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* try updated decimal separator */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;luaO_str2d&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_buffer&lt;/span&gt;(ls-&amp;gt;buff), &amp;amp;seminfo-&amp;gt;r)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* format error with correct decimal point: no more options */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;buffreplace&lt;/span&gt;(ls, ls-&amp;gt;decpoint, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* undo change (for error message) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lexerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;malformed number&amp;#34;&lt;/span&gt;, TK_NUMBER);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* LUA_NUMBER &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** .123这种  123或者科学计数法形式(1.99714E+13)的数字&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;read_numeral&lt;/span&gt; (LexState *ls, SemInfo *seminfo) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;isdigit&lt;/span&gt;(ls-&amp;gt;current));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 属于 [0,9] 集合？*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 读取第一部分 1.99714 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;isdigit&lt;/span&gt;(ls-&amp;gt;current) || ls-&amp;gt;current == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 读取第二部分 E+ */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;check_next&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;Ee&amp;#34;&lt;/span&gt;))  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `E&amp;#39;? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;check_next&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;+-&amp;#34;&lt;/span&gt;);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* optional exponent sign */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 读取第三部分 13 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;isalnum&lt;/span&gt;(ls-&amp;gt;current) || ls-&amp;gt;current == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;)&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里的_不太明白其含义 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 主动补\0,关闭字符串 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;save&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 不同国家不同的小数点 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;buffreplace&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, ls-&amp;gt;decpoint);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* follow locale for decimal point */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;luaO_str2d&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_buffer&lt;/span&gt;(ls-&amp;gt;buff), &amp;amp;seminfo-&amp;gt;r))  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* format error? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;trydecpoint&lt;/span&gt;(ls, seminfo); &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* try to update decimal point separator */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 尝试读取多行字符串的开头或结尾 --[{=}[ 或者 ]{=}] */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;skip_sep&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; count = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; s = ls-&amp;gt;current;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(s == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt; || s == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;]&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (ls-&amp;gt;current == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    count++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; (ls-&amp;gt;current == s) ? count : (-count) - 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 读取一个长字符串和&amp;#34;结尾控制符&amp;#34;(长注释或String的token)(同时更新linenumber) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;read_long_string&lt;/span&gt; (LexState *ls, SemInfo *seminfo, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; sep) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; cont = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt;)(cont);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* avoid warnings when `cont&amp;#39; is not used */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);  &#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip 2nd `[&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;currIsNewline&lt;/span&gt;(ls))  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* string starts with a newline? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;inclinenumber&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip it */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (;;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (ls-&amp;gt;current) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; EOZ:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lexerror&lt;/span&gt;(ls, (seminfo) ? &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;unfinished long string&amp;#34;&lt;/span&gt; :&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                   &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;unfinished long comment&amp;#34;&lt;/span&gt;, TK_EOS);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* to avoid warnings */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#if defined(LUA_COMPAT_LSTR)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;skip_sep&lt;/span&gt;(ls) == sep) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip 2nd `[&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          cont++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#if LUA_COMPAT_LSTR == 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (sep == 0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lexerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;nesting of [[...]] is deprecated&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;]&amp;#39;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;skip_sep&lt;/span&gt;(ls) == sep) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip 2nd `]&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#if defined(LUA_COMPAT_LSTR) &amp;amp;&amp;amp; LUA_COMPAT_LSTR == 2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;          cont--;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (sep == 0 &amp;amp;&amp;amp; cont &amp;gt;= 0) &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;goto&lt;/span&gt; endloop;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\r&amp;#39;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;save&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;);&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;inclinenumber&lt;/span&gt;(ls);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 注释的业务中也不能忘了linenumber */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!seminfo) &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_resetbuffer&lt;/span&gt;(ls-&amp;gt;buff);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* avoid wasting space */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (seminfo) &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } endloop:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* seminfo为null是注释逻辑，注释不用管里面的具体String，否则是一个正常的String的token，需将String保存 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (seminfo) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 2+sep:[{=}[ */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    seminfo-&amp;gt;ts = &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_newstring&lt;/span&gt;(ls, &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_buffer&lt;/span&gt;(ls-&amp;gt;buff) + (2 + sep),&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                     &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_bufflen&lt;/span&gt;(ls-&amp;gt;buff) - 2*(2 + sep));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 读一个&amp;#34;字符串&amp;#34;或&amp;#39;字符串&amp;#39;格式的字符串 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;read_string&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; del, SemInfo *seminfo) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (ls-&amp;gt;current != del) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (ls-&amp;gt;current) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; EOZ:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lexerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;unfinished string&amp;#34;&lt;/span&gt;, TK_EOS);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* to avoid warnings */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\r&amp;#39;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lexerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;unfinished string&amp;#34;&lt;/span&gt;, TK_STRING);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* to avoid warnings */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\\&amp;#39;&lt;/span&gt;: {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 可能的转移序列 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; c;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* do not save the `\&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (ls-&amp;gt;current) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;: c = &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\a&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;: c = &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\b&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;: c = &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\f&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;n&amp;#39;&lt;/span&gt;: c = &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;: c = &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\r&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;: c = &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\t&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;v&amp;#39;&lt;/span&gt;: c = &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\v&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 本身就是一个换行符 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;:  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* go through */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\r&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#c34e00&#34;&gt;save&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#c34e00&#34;&gt;inclinenumber&lt;/span&gt;(ls); &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; EOZ: &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* will raise an error next loop */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;isdigit&lt;/span&gt;(ls-&amp;gt;current))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* handles \\, \&amp;#34;, \&amp;#39;, and \? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* \xxx */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              c = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                c = 10*c + (ls-&amp;gt;current-&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              } &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (++i&amp;lt;3 &amp;amp;&amp;amp; &lt;span style=&#34;color:#c34e00&#34;&gt;isdigit&lt;/span&gt;(ls-&amp;gt;current));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (c &amp;gt; UCHAR_MAX)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lexerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;escape sequence too large&amp;#34;&lt;/span&gt;, TK_STRING);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#c34e00&#34;&gt;save&lt;/span&gt;(ls, c);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;save&lt;/span&gt;(ls, c);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip delimiter(分隔符) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  seminfo-&amp;gt;ts = &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_newstring&lt;/span&gt;(ls, &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_buffer&lt;/span&gt;(ls-&amp;gt;buff) + 1,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                   &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_bufflen&lt;/span&gt;(ls-&amp;gt;buff) - 2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 从读取下一个字符token &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 从ZIO读取下一个token到seminfo,并返回TokenType(中途可能用到lx-&amp;gt;buff)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;llex&lt;/span&gt; (LexState *ls, SemInfo *seminfo) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_resetbuffer&lt;/span&gt;(ls-&amp;gt;buff);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (;;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (ls-&amp;gt;current) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\r&amp;#39;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;inclinenumber&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 单独的 - */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;current != &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else is a comment */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 单行OR多行注释? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;current == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; sep = &lt;span style=&#34;color:#c34e00&#34;&gt;skip_sep&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_resetbuffer&lt;/span&gt;(ls-&amp;gt;buff);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `skip_sep&amp;#39; may dirty the buffer */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (sep &amp;gt;= 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;read_long_string&lt;/span&gt;(ls, NULL, sep);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* long comment */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_resetbuffer&lt;/span&gt;(ls-&amp;gt;buff);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else short comment */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;currIsNewline&lt;/span&gt;(ls) &amp;amp;&amp;amp; ls-&amp;gt;current != EOZ)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt;: {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 长字符串: [{=}[ String ]{=}] */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; sep = &lt;span style=&#34;color:#c34e00&#34;&gt;skip_sep&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (sep &amp;gt;= 0) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 多行字符串开头 [{=}[ */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;read_long_string&lt;/span&gt;(ls, seminfo, sep);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; TK_STRING;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (sep == -1) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt;;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* [,others这样的开头 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lexerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;invalid long string delimiter&amp;#34;&lt;/span&gt;, TK_STRING);&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* [={=},others这样的开头 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;current != &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; { &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls); &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; TK_EQ; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;current != &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; { &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls); &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; TK_LE; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;current != &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; { &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls); &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; TK_GE; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;~&amp;#39;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;current != &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;~&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; { &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls); &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; TK_NE; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 短字符串 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;read_string&lt;/span&gt;(ls, ls-&amp;gt;current, seminfo);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; TK_STRING;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 看这个符号的解析，是一个深度优先的解析示例 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;check_next&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;check_next&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; TK_DOTS;   &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ... */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; TK_CONCAT;   &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* .. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;isdigit&lt;/span&gt;(ls-&amp;gt;current)) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;read_numeral&lt;/span&gt;(ls, seminfo);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; TK_NUMBER;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; EOZ: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; TK_EOS;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;isspace&lt;/span&gt;(ls-&amp;gt;current)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(!&lt;span style=&#34;color:#c34e00&#34;&gt;currIsNewline&lt;/span&gt;(ls));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 换行符在前面就被解析掉了，这里不能再是换行符了,否则就重复了 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;isdigit&lt;/span&gt;(ls-&amp;gt;current)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;read_numeral&lt;/span&gt;(ls, seminfo);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; TK_NUMBER;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;isalpha&lt;/span&gt;(ls-&amp;gt;current) || ls-&amp;gt;current == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 标识符 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* identifier or reserved word */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          TString *ts;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          } &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;isalnum&lt;/span&gt;(ls-&amp;gt;current) || ls-&amp;gt;current == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里和上面的有一点差别 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          ts = &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_newstring&lt;/span&gt;(ls, &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_buffer&lt;/span&gt;(ls-&amp;gt;buff),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                  &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_bufflen&lt;/span&gt;(ls-&amp;gt;buff));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 关键或保留字符串 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ts-&amp;gt;tsv.reserved &amp;gt; 0)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* reserved word? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ts-&amp;gt;tsv.reserved - 1 + FIRST_RESERVED;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            seminfo-&amp;gt;ts = ts;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; TK_NAME;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; c = ls-&amp;gt;current;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; c;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* single-char tokens (+ - / ...) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ls-&amp;gt;lastline = ls-&amp;gt;linenumber&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 已有一个准备好的lookhead&amp;#39;token,则取出来用 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;lookahead.token != TK_EOS) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* is there a look-ahead token? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ls-&amp;gt;t = ls-&amp;gt;lookahead;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* use this one */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ls-&amp;gt;lookahead.token = TK_EOS;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* and discharge it */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 读取一个token */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ls-&amp;gt;t.token = &lt;span style=&#34;color:#c34e00&#34;&gt;llex&lt;/span&gt;(ls, &amp;amp;ls-&amp;gt;t.seminfo);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* read next token */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 当前lookhead&amp;#39;token已过期，重新准备lookhead&amp;#39;token */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lookahead&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(ls-&amp;gt;lookahead.token == TK_EOS);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ls-&amp;gt;lookahead.token = &lt;span style=&#34;color:#c34e00&#34;&gt;llex&lt;/span&gt;(ls, &amp;amp;ls-&amp;gt;lookahead.seminfo);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>lua源码注释-ldo.c</title>
      <link>http://shanks.link/blog/2021/05/28/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-ldo.c/</link>
      <pubDate>Fri, 28 May 2021 23:17:07 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/05/28/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-ldo.c/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** $Id: ldo.c,v 2.38.1.4 2012/01/18 02:27:10 roberto Exp $&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Stack and Call structure of Lua&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** See Copyright Notice in lua.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;setjmp.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define ldo_c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define LUA_CORE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lua.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ldebug.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ldo.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lfunc.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lgc.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lmem.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lobject.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lopcodes.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lparser.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lstate.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lstring.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ltable.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ltm.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lundump.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lvm.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lzio.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** {======================================================&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Error-recovery functions&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** =======================================================&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* chain list of long jump buffers */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; lua_longjmp {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; lua_longjmp *previous;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  luai_jmpbuf b;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;volatile&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; status;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* error code */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_seterrorobj&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; errcode, StkId oldtop) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (errcode) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_ERRMEM: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setsvalue2s&lt;/span&gt;(L, oldtop, &lt;span style=&#34;color:#c34e00&#34;&gt;luaS_newliteral&lt;/span&gt;(L, MEMERRMSG));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_ERRERR: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setsvalue2s&lt;/span&gt;(L, oldtop, &lt;span style=&#34;color:#c34e00&#34;&gt;luaS_newliteral&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;error in error handling&amp;#34;&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_ERRSYNTAX:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_ERRRUN: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, oldtop, L-&amp;gt;top - 1);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* error message on current top */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里结合 luaD_pcall 来一起来看 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;top = oldtop + 1;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* correct top */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 空闲的callInfo过多时，尝试压缩其空间 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;restore_stack_limit&lt;/span&gt; (lua_State *L) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(L-&amp;gt;stack_last - L-&amp;gt;stack == L-&amp;gt;stacksize - EXTRA_STACK - 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;size_ci &amp;gt; LUAI_MAXCALLS) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* there was an overflow? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; inuse = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_int&lt;/span&gt;(L-&amp;gt;ci - L-&amp;gt;base_ci);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (inuse + 1 &amp;lt; LUAI_MAXCALLS)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* can `undo&amp;#39; overflow? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_reallocCI&lt;/span&gt;(L, LUAI_MAXCALLS);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 回滚stack到初始状态！！！！ */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;resetstack&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; status) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这一下彻底回滚了 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;ci = L-&amp;gt;base_ci;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;base = L-&amp;gt;ci-&amp;gt;base;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaF_close&lt;/span&gt;(L, L-&amp;gt;base);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* close eventual pending closures */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_seterrorobj&lt;/span&gt;(L, status, L-&amp;gt;base);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;nCcalls = L-&amp;gt;baseCcalls;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;allowhook = 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;restore_stack_limit&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;errfunc = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;errorJmp = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 尝试调用异常处理函数 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 主要在luaG_errormsg中被间接调用&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_throw&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; errcode) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;errorJmp) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;errorJmp-&amp;gt;status = errcode;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* !!! 跳出去之前设置status */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;LUAI_THROW&lt;/span&gt;(L, L-&amp;gt;errorJmp); &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 正式跳出 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 没有设置errHdl，调用panic后退出进程 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;status = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_byte&lt;/span&gt;(errcode);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 无jump点了，在这里设置L的状态，有则由上层业务处理 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;G&lt;/span&gt;(L)-&amp;gt;panic) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;resetstack&lt;/span&gt;(L, errcode);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里对stack进行收尾 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;lua_unlock&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;G&lt;/span&gt;(L)-&amp;gt;&lt;span style=&#34;color:#c34e00&#34;&gt;panic&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;exit&lt;/span&gt;(EXIT_FAILURE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 保护模式下(longjump)调用C函数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 但发生错误，则调用了L-&amp;gt;errfunc后(若设置了)，后走到这里而不是直接退出进程&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** RETURN：执行流的执行结果，没有同步到L-&amp;gt;status中(由上层调用决定是否同步)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_rawrunprotected&lt;/span&gt; (lua_State *L, Pfunc f, &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *ud) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; lua_longjmp lj;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lj.status = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lj.previous = L-&amp;gt;errorJmp;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* chain new error handler */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;errorJmp = &amp;amp;lj;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;LUAI_TRY&lt;/span&gt;(L, &amp;amp;lj,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (*f)(L, ud);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  );&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;errorJmp = lj.previous;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* restore old error handler */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; lj.status;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* luaD_throw()中更新了status */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* }====================================================== */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stack移动后更新upvalues,ci-list和L-&amp;gt;base */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;correctstack&lt;/span&gt; (lua_State *L, TValue *oldstack) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  CallInfo *ci;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  GCObject *up;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;top = (L-&amp;gt;top - oldstack) + L-&amp;gt;stack;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (up = L-&amp;gt;openupval; up != NULL; up = up-&amp;gt;gch.next)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;gco2uv&lt;/span&gt;(up)-&amp;gt;v = (&lt;span style=&#34;color:#c34e00&#34;&gt;gco2uv&lt;/span&gt;(up)-&amp;gt;v - oldstack) + L-&amp;gt;stack;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (ci = L-&amp;gt;base_ci; ci &amp;lt;= L-&amp;gt;ci; ci++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ci-&amp;gt;top = (ci-&amp;gt;top - oldstack) + L-&amp;gt;stack;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ci-&amp;gt;base = (ci-&amp;gt;base - oldstack) + L-&amp;gt;stack;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ci-&amp;gt;func = (ci-&amp;gt;func - oldstack) + L-&amp;gt;stack;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* L-&amp;gt;ci不用调整哈 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;base = (L-&amp;gt;base - oldstack) + L-&amp;gt;stack;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 重新调整stack的大小 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_reallocstack&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; newsize) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TValue *oldstack = L-&amp;gt;stack;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; realsize = newsize + 1 + EXTRA_STACK;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(L-&amp;gt;stack_last - L-&amp;gt;stack == L-&amp;gt;stacksize - EXTRA_STACK - 1);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 和stack_init()函数对应 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_reallocvector&lt;/span&gt;(L, L-&amp;gt;stack, L-&amp;gt;stacksize, realsize, TValue);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;stacksize = realsize;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;stack_last = L-&amp;gt;stack+newsize;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;correctstack&lt;/span&gt;(L, oldstack);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 调整callInfo链的大小 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_reallocCI&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; newsize) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  CallInfo *oldci = L-&amp;gt;base_ci;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_reallocvector&lt;/span&gt;(L, L-&amp;gt;base_ci, L-&amp;gt;size_ci, newsize, CallInfo);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;size_ci = newsize;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;ci = (L-&amp;gt;ci - oldci) + L-&amp;gt;base_ci;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;end_ci = L-&amp;gt;base_ci + L-&amp;gt;size_ci - 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_growstack&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; n) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (n &amp;lt;= L-&amp;gt;stacksize)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* double size is enough? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_reallocstack&lt;/span&gt;(L, 2*L-&amp;gt;stacksize);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_reallocstack&lt;/span&gt;(L, L-&amp;gt;stacksize + n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; CallInfo *&lt;span style=&#34;color:#c34e00&#34;&gt;growCI&lt;/span&gt; (lua_State *L) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;size_ci &amp;gt; LUAI_MAXCALLS)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* overflow while handling overflow? 嵌套调用层次太深了，直接报错，方便用户检查调用情况 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_throw&lt;/span&gt;(L, LUA_ERRERR);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_reallocCI&lt;/span&gt;(L, 2*L-&amp;gt;size_ci);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 简单粗暴，直接扩大一倍 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;size_ci &amp;gt; LUAI_MAXCALLS)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_runerror&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;stack overflow&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ++L-&amp;gt;ci;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; StkId &lt;span style=&#34;color:#c34e00&#34;&gt;callrethooks&lt;/span&gt; (lua_State *L, StkId firstResult) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ptrdiff_t&lt;/span&gt; fr = &lt;span style=&#34;color:#c34e00&#34;&gt;savestack&lt;/span&gt;(L, firstResult);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* next call may change stack */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_callhook&lt;/span&gt;(L, LUA_HOOKRET, -1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;f_isLua&lt;/span&gt;(L-&amp;gt;ci)) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Lua function? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; ((L-&amp;gt;hookmask &amp;amp; LUA_MASKRET) &amp;amp;&amp;amp; L-&amp;gt;ci-&amp;gt;tailcalls--) &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* tail calls */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_callhook&lt;/span&gt;(L, LUA_HOOKTAILRET, -1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;restorestack&lt;/span&gt;(L, fr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 调用钩子函数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_callhook&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; event, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lua_Hook hook = L-&amp;gt;hook;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (hook &amp;amp;&amp;amp; L-&amp;gt;allowhook) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;ptrdiff_t&lt;/span&gt; top = &lt;span style=&#34;color:#c34e00&#34;&gt;savestack&lt;/span&gt;(L, L-&amp;gt;top);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;ptrdiff_t&lt;/span&gt; ci_top = &lt;span style=&#34;color:#c34e00&#34;&gt;savestack&lt;/span&gt;(L, L-&amp;gt;ci-&amp;gt;top);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lua_Debug ar;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ar.event = event;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ar.currentline = line;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (event == LUA_HOOKTAILRET)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ar.i_ci = 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* tail call; no debug information about it */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ar.i_ci = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_int&lt;/span&gt;(L-&amp;gt;ci - L-&amp;gt;base_ci);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_checkstack&lt;/span&gt;(L, LUA_MINSTACK);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ensure minimum stack size */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;ci-&amp;gt;top = L-&amp;gt;top + LUA_MINSTACK;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(L-&amp;gt;ci-&amp;gt;top &amp;lt;= L-&amp;gt;stack_last);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;allowhook = 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* cannot call hooks inside a hook */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_unlock&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (*hook)(L, &amp;amp;ar);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 正式调用钩子函数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_lock&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(!L-&amp;gt;allowhook);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* !!!! 现场需恢复，别忘了，亲 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;allowhook = 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;ci-&amp;gt;top = &lt;span style=&#34;color:#c34e00&#34;&gt;restorestack&lt;/span&gt;(L, ci_top);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;top = &lt;span style=&#34;color:#c34e00&#34;&gt;restorestack&lt;/span&gt;(L, top);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**补齐固定形参(若实际传入的参数不够)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**将传给固定形参的值mv到top之上且纠正top&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**将剩下(若还有剩下)的参数留给变参...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; StkId &lt;span style=&#34;color:#c34e00&#34;&gt;adjust_varargs&lt;/span&gt; (lua_State *L, Proto *p, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; actual) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nfixargs = p-&amp;gt;numparams;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Table *htab = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  StkId base, fixed;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 传入的参数数量不够填补fixed参数的，直接补nil：至少得把fixed形参需要的个数补齐 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (; actual &amp;lt; nfixargs; ++actual)&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setnilvalue&lt;/span&gt;(L-&amp;gt;top++);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#if defined(LUA_COMPAT_VARARG)&#x9;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 将留给...的参数信息打包到额外的arg表中 */&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (p-&amp;gt;is_vararg &amp;amp; VARARG_NEEDSARG) { &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* compat. with old-style vararg? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nvar = actual - nfixargs;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* number of extra arguments */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(p-&amp;gt;is_vararg &amp;amp; VARARG_HASARG);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_checkGC&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_checkstack&lt;/span&gt;(L, p-&amp;gt;maxstacksize);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    htab = &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_new&lt;/span&gt;(L, nvar, 1);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* create `arg&amp;#39; table */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i=0; i&amp;lt;nvar; i++)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* put extra arguments into `arg&amp;#39; table */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2n&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_setnum&lt;/span&gt;(L, htab, i+1), L-&amp;gt;top - nvar + i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* store counter in field `n&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaH_setstr&lt;/span&gt;(L, htab, &lt;span style=&#34;color:#c34e00&#34;&gt;luaS_newliteral&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt;)), &lt;span style=&#34;color:#c34e00&#34;&gt;cast_num&lt;/span&gt;(nvar));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* move fixed parameters to final position */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fixed = L-&amp;gt;top - actual;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* first fixed argument */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  base = L-&amp;gt;top;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* final position of first argument */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 从第一个参数开始移动其值到被调函数的fixed‘arg域,直到给所有的fixed&amp;#39;arg赋值为止&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 如果还剩下多余的参数，则直接保留下来(留给变参...)，无需移动&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i=0; i&amp;lt;nfixargs; i++) {&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, L-&amp;gt;top++, fixed+i);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* !!!!这里移动了top指针 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setnilvalue&lt;/span&gt;(fixed+i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* add `arg&amp;#39; parameter */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (htab) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;sethvalue&lt;/span&gt;(L, L-&amp;gt;top++, htab);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;iswhite&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;obj2gco&lt;/span&gt;(htab)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; base;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 直接看代码 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; StkId &lt;span style=&#34;color:#c34e00&#34;&gt;tryfuncTM&lt;/span&gt; (lua_State *L, StkId func) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *tm = &lt;span style=&#34;color:#c34e00&#34;&gt;luaT_gettmbyobj&lt;/span&gt;(L, func, TM_CALL);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  StkId p;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ptrdiff_t&lt;/span&gt; funcr = &lt;span style=&#34;color:#c34e00&#34;&gt;savestack&lt;/span&gt;(L, func);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisfunction&lt;/span&gt;(tm))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_typeerror&lt;/span&gt;(L, func, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;call&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Open a hole inside the stack at `func&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (p = L-&amp;gt;top; p &amp;gt; func; p--) &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, p, p-1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;incr_top&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  func = &lt;span style=&#34;color:#c34e00&#34;&gt;restorestack&lt;/span&gt;(L, funcr);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* previous call may change stack */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, func, tm);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* tag method is the new function to be called */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; func;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define inc_ci(L) \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ((L-&amp;gt;ci == L-&amp;gt;end_ci) ? growCI(L) : \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;   (condhardstacktests(luaD_reallocCI(L, L-&amp;gt;size_ci)), ++L-&amp;gt;ci))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 先做调用前的准备工作，后进入函数调用(for C,not Lua)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** nresults:-1返回所有的返回值&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 0：不要返回值&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 1：期待一个返回值&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_precall&lt;/span&gt; (lua_State *L, StkId func, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nresults) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  LClosure *cl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ptrdiff_t&lt;/span&gt; funcr;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 当前调用函数的pc距离stack栈底的偏移量 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisfunction&lt;/span&gt;(func)) &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `func&amp;#39; is not a function? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    func = &lt;span style=&#34;color:#c34e00&#34;&gt;tryfuncTM&lt;/span&gt;(L, func);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* check the `function&amp;#39; tag method */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 随着新的调用产生,ci链/stack可能因为增长而移动位置&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 故不能记住绝地位置而记住相对位置，后面根据此值最终确定ci-&amp;gt;func &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  funcr = &lt;span style=&#34;color:#c34e00&#34;&gt;savestack&lt;/span&gt;(L, func);&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cl = &amp;amp;&lt;span style=&#34;color:#c34e00&#34;&gt;clvalue&lt;/span&gt;(func)-&amp;gt;l;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;ci-&amp;gt;savedpc = L-&amp;gt;savedpc;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 正式调用前，存档L-&amp;gt;savedpc至L-&amp;gt;ci-&amp;gt;savedpc */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!cl-&amp;gt;isC) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Lua function? prepare its call */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CallInfo *ci;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    StkId st, base;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Proto *p = cl-&amp;gt;p;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_checkstack&lt;/span&gt;(L, p-&amp;gt;maxstacksize);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    func = &lt;span style=&#34;color:#c34e00&#34;&gt;restorestack&lt;/span&gt;(L, funcr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!p-&amp;gt;is_vararg) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no varargs?(不是变参函数?即函数参数数量固定) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      base = func + 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;top &amp;gt; base + p-&amp;gt;numparams)&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 删除栈上多余的传入参数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        L-&amp;gt;top = base + p-&amp;gt;numparams;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* vararg function */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nargs = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_int&lt;/span&gt;(L-&amp;gt;top - func) - 1;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 计算实际传入的参数个数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      base = &lt;span style=&#34;color:#c34e00&#34;&gt;adjust_varargs&lt;/span&gt;(L, p, nargs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      func = &lt;span style=&#34;color:#c34e00&#34;&gt;restorestack&lt;/span&gt;(L, funcr);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* previous call may change the stack */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ci = &lt;span style=&#34;color:#c34e00&#34;&gt;inc_ci&lt;/span&gt;(L);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* now `enter&amp;#39; new function */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ci-&amp;gt;func = func;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;base = ci-&amp;gt;base = base;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里可以推导出L-&amp;gt;base----&amp;gt;L-&amp;gt;top之间的区域都是ci的私有栈空间(lua,c均如此) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ci-&amp;gt;top = L-&amp;gt;base + p-&amp;gt;maxstacksize;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(ci-&amp;gt;top &amp;lt;= L-&amp;gt;stack_last);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;savedpc = p-&amp;gt;code;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* starting point */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ci-&amp;gt;tailcalls = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ci-&amp;gt;nresults = nresults;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 新的函数的私有栈空间直接补nil(参数的区域除外) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (st = L-&amp;gt;top; st &amp;lt; ci-&amp;gt;top; st++)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setnilvalue&lt;/span&gt;(st);&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 最后调整L-&amp;gt;top使其指向本次ci的栈顶,对于Lua函数而言L-&amp;gt;Base----&amp;gt;(L-&amp;gt;Base+L-&amp;gt;maxstacksize)之间都是我私有的了，且是有效的&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;** C由于L-&amp;gt;top是动态变化的，故而L-&amp;gt;top的值被设置为传入参数后栈顶的位置，后面会因为push等函数而动态变化-&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;top = ci-&amp;gt;top;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;hookmask &amp;amp; LUA_MASKCALL) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      L-&amp;gt;savedpc++;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* hooks assume &amp;#39;pc&amp;#39; is already incremented */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_callhook&lt;/span&gt;(L, LUA_HOOKCALL, -1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      L-&amp;gt;savedpc--;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* correct &amp;#39;pc&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; PCRLUA;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* if is a C function, call it */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CallInfo *ci;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; n;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_checkstack&lt;/span&gt;(L, LUA_MINSTACK);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ensure minimum stack size */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 填充新的CallInfo */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ci = &lt;span style=&#34;color:#c34e00&#34;&gt;inc_ci&lt;/span&gt;(L);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* now `enter&amp;#39; new function */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ci-&amp;gt;func = &lt;span style=&#34;color:#c34e00&#34;&gt;restorestack&lt;/span&gt;(L, funcr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;base = ci-&amp;gt;base = ci-&amp;gt;func + 1;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* C函数没有Lua函数的变参问题，所以这里无需adjust_varargs() */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &amp;#34;OP_CALL指令&amp;#34;已经将L-&amp;gt;top指向了最后一个传入参数的上方 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ci-&amp;gt;top = L-&amp;gt;top + LUA_MINSTACK;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里和上面luaD_checkstack呼应 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(ci-&amp;gt;top &amp;lt;= L-&amp;gt;stack_last);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ci-&amp;gt;nresults = nresults;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;hookmask &amp;amp; LUA_MASKCALL)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_callhook&lt;/span&gt;(L, LUA_HOOKCALL, -1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_unlock&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;// L-&amp;gt;top已经在lvm中准备好了(call和vararg指令)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    n = (*&lt;span style=&#34;color:#c34e00&#34;&gt;curr_func&lt;/span&gt;(L)-&amp;gt;c.f)(L);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* do the actual call */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_lock&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (n &amp;lt; 0)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* yielding, co调用yield，co.yeild运行完毕了,co.yeild还不能释放ci-list信息，需等到母thread调用resume，将控制权转移到co，再在co.resume中luaD_poscall()才释放 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; PCRYIELD;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_poscall&lt;/span&gt;(L, L-&amp;gt;top - n);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 调整子C函数的返回值到指定位置并适配母函数的wanted(results) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; PCRC;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 函数调用结束后，处理实际返回值和期待返回值的匹配问题&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 也处理ci链的嵌套逻辑（本层ci结束往后退一层)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 即处理C函数调用,也处理Lua函数执行结束即将返回这两种情况&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 没有检测C函数说返回了n个参数，当实际上没有返回那么多参数的情况&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** RETURNS: wanted.cnt: 0:返回多个参数，1：返回0个，2：返回1个。。。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_poscall&lt;/span&gt; (lua_State *L, StkId firstResult) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  StkId res;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; wanted, i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  CallInfo *ci;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;hookmask &amp;amp; LUA_MASKRET)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    firstResult = &lt;span style=&#34;color:#c34e00&#34;&gt;callrethooks&lt;/span&gt;(L, firstResult);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ci = L-&amp;gt;ci--;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  res = ci-&amp;gt;func;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* res == final position of 1st result */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  wanted = ci-&amp;gt;nresults;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;base = (ci - 1)-&amp;gt;base;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* restore base */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;savedpc = (ci - 1)-&amp;gt;savedpc;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* restore savedpc */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* move results to correct place */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i = wanted; i != 0 &amp;amp;&amp;amp; firstResult &amp;lt; L-&amp;gt;top; i--)&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这个判断即处理非尾调用，又处理了尾调用 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, res++, firstResult++);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* wanted根据实际返回数量赋值 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (i-- &amp;gt; 0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setnilvalue&lt;/span&gt;(res++);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* local a, b, c = funcA(...), 针对 funcA的返回值不够则补nil */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** L-&amp;gt;top恢复到最后一个返回参数在stack的位置，这里和调用函数之前，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 将L-&amp;gt;top设置到最后一个传入参数在stack的位置相呼应了！！！&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 最终将L-&amp;gt;top恢复到ci-&amp;gt;top是由“OP_CALL”指令负责&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;top = res;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; (wanted - LUA_MULTRET);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 0 iff wanted == LUA_MULTRET */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Call a function (C or Lua). The function to be called is at *func.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** The arguments are on the stack, right after the function.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** When returns, all the results are on the stack, starting at the original&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** function position.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_call&lt;/span&gt; (lua_State *L, StkId func, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nResults) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (++L-&amp;gt;nCcalls &amp;gt;= LUAI_MAXCCALLS) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 调用层次太深，进入抛出异常 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;nCcalls == LUAI_MAXCCALLS)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_runerror&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;C stack overflow&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;nCcalls &amp;gt;= (LUAI_MAXCCALLS + (LUAI_MAXCCALLS&amp;gt;&amp;gt;3)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_throw&lt;/span&gt;(L, LUA_ERRERR);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* error while handing stack error */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luaD_precall&lt;/span&gt;(L, func, nResults) == PCRLUA)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* is a Lua function? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaV_execute&lt;/span&gt;(L, 1);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* call it, 这里的1是真的妙啊 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;nCcalls--;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_checkGC&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 协程co开始执行co.resume 母thread在lbaselib.auxresume()中交出CPU，等待子co返回 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;resume&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *ud) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  StkId firstArg = &lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(StkId, ud);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 没有传参时firstArg指向top,下面的firstArg&amp;gt;L-&amp;gt;base还是成立 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  CallInfo *ci = L-&amp;gt;ci;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;status == 0) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* start coroutine? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(ci == L-&amp;gt;base_ci);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 尚未有任何调用链ci生成(或co已运行完毕) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(firstArg &amp;gt; L-&amp;gt;base);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 至少还有个参数(是co.fun),意味着不是co运行完毕的状态，运行完毕后不能调用本函数了，co.fun都没有了，ci也是空的，ro不知道该怎么运行了不是 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 若是崭新的co第一次开始运行resume,则会生成相应的ci（co.initFun),再运行起来和普通的c.main中构建一个thread后第一次运行是一样的 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luaD_precall&lt;/span&gt;(L, firstArg - 1, LUA_MULTRET) != PCRLUA)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* resuming from previous yield */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(L-&amp;gt;status == LUA_YIELD);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 非YEILD状态，不能调用resume */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;status = 0;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* switch back status */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;f_isLua&lt;/span&gt;(ci)) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `common&amp;#39; yield? ci这里指向的是baselib.yield */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* finish interrupted execution of `OP_CALL&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(*((ci-1)-&amp;gt;savedpc - 1)) == OP_CALL ||&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(*((ci-1)-&amp;gt;savedpc - 1)) == OP_TAILCALL);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luaD_poscall&lt;/span&gt;(L, firstArg))  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* complete it... 结束上述说的baselib.yield的调用流程 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        L-&amp;gt;top = L-&amp;gt;ci-&amp;gt;top;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* and correct top if not multiple results,如果是 multiple results则由跟在后面的vararg或者setlist来调整L-&amp;gt;top(他们还需要用到L-&amp;gt;top来确定传入参数的个数呢,所以这里不能将其恢复到L-&amp;gt;ci-&amp;gt;top，) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* yielded inside a hook: just continue its execution */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      L-&amp;gt;base = L-&amp;gt;ci-&amp;gt;base;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaV_execute&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;cast_int&lt;/span&gt;(L-&amp;gt;ci - L-&amp;gt;base_ci));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里的nexeccalls值得好好推导一下 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;resume_error&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *msg) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;top = L-&amp;gt;ci-&amp;gt;base;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setsvalue2s&lt;/span&gt;(L, L-&amp;gt;top, &lt;span style=&#34;color:#c34e00&#34;&gt;luaS_new&lt;/span&gt;(L, msg));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;incr_top&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_unlock&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; LUA_ERRRUN;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LUA_API &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;lua_resume&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nargs) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; status;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_lock&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;status != LUA_YIELD &amp;amp;&amp;amp; (L-&amp;gt;status != 0 || L-&amp;gt;ci != L-&amp;gt;base_ci))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;resume_error&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;cannot resume non-suspended coroutine&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;nCcalls &amp;gt;= LUAI_MAXCCALLS)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;resume_error&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;C stack overflow&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luai_userstateresume&lt;/span&gt;(L, nargs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(L-&amp;gt;errfunc == 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;baseCcalls = ++L-&amp;gt;nCcalls;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 必须protected状态下call，不然协程出错，整个进程都会被关闭 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 本函数还没有为co生成ci链,resume中会生成co的ci调用链（如果是第一次resume）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  status = &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_rawrunprotected&lt;/span&gt;(L, resume, L-&amp;gt;top - nargs);&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (status != 0) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* error? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;status = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_byte&lt;/span&gt;(status);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* mark thread as `dead&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_seterrorobj&lt;/span&gt;(L, status, L-&amp;gt;top);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;ci-&amp;gt;top = L-&amp;gt;top;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 上面压入了errMsg这里更新下top */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(L-&amp;gt;nCcalls == L-&amp;gt;baseCcalls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    status = L-&amp;gt;status;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* coroutinue运行中出让则为 LUA_YIELD */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --L-&amp;gt;nCcalls;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_unlock&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; status;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LUA_API &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;lua_yield&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nresults) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luai_userstateyield&lt;/span&gt;(L, nresults);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_lock&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;nCcalls &amp;gt; L-&amp;gt;baseCcalls)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_runerror&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;attempt to yield across metamethod/C-call boundary&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;base = L-&amp;gt;top - nresults;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* protect stack slots below */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;status = LUA_YIELD;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_unlock&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; -1;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* note:这是一个特殊的值，用于标识从yield返回 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* old_top 指向被调用函数slot &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** KEYCODE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_pcall&lt;/span&gt; (lua_State *L, Pfunc func, &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *u,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#00f&#34;&gt;ptrdiff_t&lt;/span&gt; old_top, &lt;span style=&#34;color:#00f&#34;&gt;ptrdiff_t&lt;/span&gt; ef) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; status;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;short&lt;/span&gt; oldnCcalls = L-&amp;gt;nCcalls;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 存档当前的ci,以便发生错误恢复时使用 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ptrdiff_t&lt;/span&gt; old_ci = &lt;span style=&#34;color:#c34e00&#34;&gt;saveci&lt;/span&gt;(L, L-&amp;gt;ci);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里只能记住offset而不是绝对地址(call过程中ci可能会调整!) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lu_byte old_allowhooks = L-&amp;gt;allowhook;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ptrdiff_t&lt;/span&gt; old_errfunc = L-&amp;gt;errfunc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;errfunc = ef;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  status = &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_rawrunprotected&lt;/span&gt;(L, func, u);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 发生了错误，回滚到存档时刻 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (status != 0) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* an error occurred? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    StkId oldtop = &lt;span style=&#34;color:#c34e00&#34;&gt;restorestack&lt;/span&gt;(L, old_top);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaF_close&lt;/span&gt;(L, oldtop);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* close eventual pending closures */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_seterrorobj&lt;/span&gt;(L, status, oldtop);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 顺带correct了top */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;nCcalls = oldnCcalls;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;ci = &lt;span style=&#34;color:#c34e00&#34;&gt;restoreci&lt;/span&gt;(L, old_ci);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;base = L-&amp;gt;ci-&amp;gt;base;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;savedpc = L-&amp;gt;ci-&amp;gt;savedpc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;allowhook = old_allowhooks;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;restore_stack_limit&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;errfunc = old_errfunc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; status;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Execute a protected parser.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; SParser {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* data to `f_parser&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ZIO *z;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Mbuffer buff;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* buffer to be used by the scanner */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *name;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;f_parser&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *ud) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Proto *tf;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Closure *cl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; SParser *p = &lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; SParser *, ud);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; c = &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_lookahead&lt;/span&gt;(p-&amp;gt;z);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_checkGC&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tf = ((c == LUA_SIGNATURE[0]) ? luaU_undump : luaY_parser)(L, p-&amp;gt;z,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                             &amp;amp;p-&amp;gt;buff, p-&amp;gt;name);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cl = &lt;span style=&#34;color:#c34e00&#34;&gt;luaF_newLclosure&lt;/span&gt;(L, tf-&amp;gt;nups, &lt;span style=&#34;color:#c34e00&#34;&gt;hvalue&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gt&lt;/span&gt;(L)));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 新生成的clouse的env直接来自gobal&amp;#39;table而不是上层函数的env */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cl-&amp;gt;l.p = tf;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i = 0; i &amp;lt; tf-&amp;gt;nups; i++)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* initialize eventual upvalues */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cl-&amp;gt;l.upvals[i] = &lt;span style=&#34;color:#c34e00&#34;&gt;luaF_newupval&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setclvalue&lt;/span&gt;(L, L-&amp;gt;top, cl);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;incr_top&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_protectedparser&lt;/span&gt; (lua_State *L, ZIO *z, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *name) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; SParser p;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; status;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  p.z = z; p.name = name;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_initbuffer&lt;/span&gt;(L, &amp;amp;p.buff);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  status = &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_pcall&lt;/span&gt;(L, f_parser, &amp;amp;p, &lt;span style=&#34;color:#c34e00&#34;&gt;savestack&lt;/span&gt;(L, L-&amp;gt;top), L-&amp;gt;errfunc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_freebuffer&lt;/span&gt;(L, &amp;amp;p.buff);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; status;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Lua 5.1 Reference Manual</title>
      <link>http://shanks.link/blog/2021/05/26/lua-5.1-reference-manual/</link>
      <pubDate>Wed, 26 May 2021 15:31:07 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/05/26/lua-5.1-reference-manual/</guid>
      <description>&lt;p&gt;Lua 5.1 Reference Manual&#xA;by Roberto Ierusalimschy, Luiz Henrique de Figueiredo, Waldemar Celes&lt;/p&gt;&#xA;&lt;p&gt;Copyright © 2006–2012 Lua.org, PUC-Rio. Freely available under the terms of the Lua license.&lt;/p&gt;&#xA;&lt;p&gt;contents · index · other versions · english · português · español · deutsch&#xA;1 – Introduction&#xA;Lua is an extension programming language designed to support general procedural programming with data description facilities. It also offers good support for object-oriented programming, functional programming, and data-driven programming. Lua is intended to be used as a powerful, light-weight scripting language for any program that needs one. Lua is implemented as a library, written in clean C (that is, in the common subset of ANSI C and C++).&lt;/p&gt;</description>
    </item>
    <item>
      <title>lua源码注释-lvm.c</title>
      <link>http://shanks.link/blog/2021/05/23/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-lvm.c/</link>
      <pubDate>Sun, 23 May 2021 23:07:16 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/05/23/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-lvm.c/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/shankusu2017/lua&#34;&gt;github链接&lt;/a&gt; lua515子域&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** $Id: lvm.c,v 2.63.1.5 2011/08/17 20:43:11 roberto Exp $&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Lua virtual machine&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** See Copyright Notice in lua.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define lvm_c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define LUA_CORE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lua.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ldebug.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ldo.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lfunc.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lgc.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lobject.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lopcodes.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lstate.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lstring.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ltable.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ltm.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lvm.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* limit for table tag-method chains (to avoid loops) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define MAXTAGLOOP&#x9;100&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* number,string--&amp;gt;number */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *&lt;span style=&#34;color:#c34e00&#34;&gt;luaV_tonumber&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *obj, TValue *n) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lua_Number num;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnumber&lt;/span&gt;(obj)) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; obj;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisstring&lt;/span&gt;(obj) &amp;amp;&amp;amp; &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_str2d&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;svalue&lt;/span&gt;(obj), &amp;amp;num)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(n, num);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; n;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* number-&amp;gt;string */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaV_tostring&lt;/span&gt; (lua_State *L, StkId obj) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnumber&lt;/span&gt;(obj))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; s[LUAI_MAXNUMBER2STR];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lua_Number n = &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(obj);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_number2str&lt;/span&gt;(s, n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setsvalue2s&lt;/span&gt;(L, obj, &lt;span style=&#34;color:#c34e00&#34;&gt;luaS_new&lt;/span&gt;(L, s));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 判断调试MASK是否设置，以及相关条件是否已满足，满足则进入钩子函数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;traceexec&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; Instruction *pc) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lu_byte mask = L-&amp;gt;hookmask;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; Instruction *oldpc = L-&amp;gt;savedpc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;savedpc = pc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; ((mask &amp;amp; LUA_MASKCOUNT) &amp;amp;&amp;amp; L-&amp;gt;hookcount == 0) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 执行了指定数量的pc，调用指定的钩子函数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;resethookcount&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_callhook&lt;/span&gt;(L, LUA_HOOKCOUNT, -1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (mask &amp;amp; LUA_MASKLINE) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* LUA_MASKLINE不是说执行到了某一行，具体的意思看下面的代码 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Proto *p = &lt;span style=&#34;color:#c34e00&#34;&gt;ci_func&lt;/span&gt;(L-&amp;gt;ci)-&amp;gt;l.p;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; npc = &lt;span style=&#34;color:#c34e00&#34;&gt;pcRel&lt;/span&gt;(pc, p);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; newline = &lt;span style=&#34;color:#c34e00&#34;&gt;getline&lt;/span&gt;(p, npc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* call linehook when enter a new function, when jump back (loop),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;       or when enter a new line */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (npc == 0 || pc &amp;lt;= oldpc || newline != &lt;span style=&#34;color:#c34e00&#34;&gt;getline&lt;/span&gt;(p, &lt;span style=&#34;color:#c34e00&#34;&gt;pcRel&lt;/span&gt;(oldpc, p)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_callhook&lt;/span&gt;(L, LUA_HOOKLINE, newline);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 调用元方法，将结果返回给res */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;callTMres&lt;/span&gt; (lua_State *L, StkId res, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *f,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *p1, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *p2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ptrdiff_t&lt;/span&gt; result = &lt;span style=&#34;color:#c34e00&#34;&gt;savestack&lt;/span&gt;(L, res);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, L-&amp;gt;top, f);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* push function */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, L-&amp;gt;top+1, p1);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 1st argument */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, L-&amp;gt;top+2, p2);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 2nd argument */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_checkstack&lt;/span&gt;(L, 3);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;top += 3;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_call&lt;/span&gt;(L, L-&amp;gt;top - 3, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  res = &lt;span style=&#34;color:#c34e00&#34;&gt;restorestack&lt;/span&gt;(L, result);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;top--;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, res, L-&amp;gt;top);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;callTM&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *f, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *p1,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *p2, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *p3) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, L-&amp;gt;top, f);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* push function */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, L-&amp;gt;top+1, p1);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 1st argument */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, L-&amp;gt;top+2, p2);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 2nd argument */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, L-&amp;gt;top+3, p3);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 3th argument */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_checkstack&lt;/span&gt;(L, 4);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;top += 4;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_call&lt;/span&gt;(L, L-&amp;gt;top - 4, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaV_gettable&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *t, TValue *key, StkId val) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; loop;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (loop = 0; loop &amp;lt; MAXTAGLOOP; loop++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *tm;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttistable&lt;/span&gt;(t)) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `t&amp;#39; is a table? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Table *h = &lt;span style=&#34;color:#c34e00&#34;&gt;hvalue&lt;/span&gt;(t);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *res = &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_get&lt;/span&gt;(h, key); &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* do a primitive get */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(res) ||  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* result is no nil? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (tm = &lt;span style=&#34;color:#c34e00&#34;&gt;fasttm&lt;/span&gt;(L, h-&amp;gt;metatable, TM_INDEX)) == NULL) { &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* or no TM? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, val, res);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else will try the tag method */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(tm = &lt;span style=&#34;color:#c34e00&#34;&gt;luaT_gettmbyobj&lt;/span&gt;(L, t, TM_INDEX)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_typeerror&lt;/span&gt;(L, t, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisfunction&lt;/span&gt;(tm)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;callTMres&lt;/span&gt;(L, val, tm, t, key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    t = tm;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else repeat with `tm&amp;#39; */&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_runerror&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;loop in gettable&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaV_settable&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *t, TValue *key, StkId val) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; loop;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TValue temp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (loop = 0; loop &amp;lt; MAXTAGLOOP; loop++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *tm;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttistable&lt;/span&gt;(t)) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `t&amp;#39; is a table? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Table *h = &lt;span style=&#34;color:#c34e00&#34;&gt;hvalue&lt;/span&gt;(t);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      TValue *oldval = &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_set&lt;/span&gt;(L, h, key); &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* do a primitive set */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(oldval) ||  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* result is no nil? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (tm = &lt;span style=&#34;color:#c34e00&#34;&gt;fasttm&lt;/span&gt;(L, h-&amp;gt;metatable, TM_NEWINDEX)) == NULL) { &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* or no TM? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2t&lt;/span&gt;(L, oldval, val);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        h-&amp;gt;flags = 0;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新flags:假设所有的tm都存在 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_barriert&lt;/span&gt;(L, h, val);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else will try the tag method */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(tm = &lt;span style=&#34;color:#c34e00&#34;&gt;luaT_gettmbyobj&lt;/span&gt;(L, t, TM_NEWINDEX)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_typeerror&lt;/span&gt;(L, t, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisfunction&lt;/span&gt;(tm)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;callTM&lt;/span&gt;(L, tm, t, key, val);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else repeat with `tm&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setobj&lt;/span&gt;(L, &amp;amp;temp, tm);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* avoid pointing inside table (may rehash) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    t = &amp;amp;temp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_runerror&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;loop in settable&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 同上callTM，针对tblA+tblB这种两个操作数的，尝试调用特定元方法 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;call_binTM&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *p1, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *p2,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       StkId res, TMS event) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *tm = &lt;span style=&#34;color:#c34e00&#34;&gt;luaT_gettmbyobj&lt;/span&gt;(L, p1, event);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* try first operand */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(tm))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tm = &lt;span style=&#34;color:#c34e00&#34;&gt;luaT_gettmbyobj&lt;/span&gt;(L, p2, event);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* try second operand */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(tm)) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;callTMres&lt;/span&gt;(L, res, tm, p1, p2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* only for userdata */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *&lt;span style=&#34;color:#c34e00&#34;&gt;get_compTM&lt;/span&gt; (lua_State *L, Table *mt1, Table *mt2,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                  TMS event) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *tm1 = &lt;span style=&#34;color:#c34e00&#34;&gt;fasttm&lt;/span&gt;(L, mt1, event);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *tm2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (tm1 == NULL) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; NULL;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no metamethod */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (mt1 == mt2) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; tm1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* same metatables =&amp;gt; same metamethods */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tm2 = &lt;span style=&#34;color:#c34e00&#34;&gt;fasttm&lt;/span&gt;(L, mt2, event);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (tm2 == NULL) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; NULL;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no metamethod */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luaO_rawequalObj&lt;/span&gt;(tm1, tm2))  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* same metamethods? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; tm1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 元方法：比较操作 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;call_orderTM&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *p1, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *p2,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         TMS event) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *tm1 = &lt;span style=&#34;color:#c34e00&#34;&gt;luaT_gettmbyobj&lt;/span&gt;(L, p1, event);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *tm2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(tm1)) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; -1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no metamethod? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tm2 = &lt;span style=&#34;color:#c34e00&#34;&gt;luaT_gettmbyobj&lt;/span&gt;(L, p2, event);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;luaO_rawequalObj&lt;/span&gt;(tm1, tm2))  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* different metamethods? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; -1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;callTMres&lt;/span&gt;(L, L-&amp;gt;top, tm1, p1, p2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; !&lt;span style=&#34;color:#c34e00&#34;&gt;l_isfalse&lt;/span&gt;(L-&amp;gt;top);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;l_strcmp&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TString *ls, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TString *rs) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *l = &lt;span style=&#34;color:#c34e00&#34;&gt;getstr&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; ll = ls-&amp;gt;tsv.len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *r = &lt;span style=&#34;color:#c34e00&#34;&gt;getstr&lt;/span&gt;(rs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; lr = rs-&amp;gt;tsv.len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (;;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; temp = &lt;span style=&#34;color:#c34e00&#34;&gt;strcoll&lt;/span&gt;(l, r);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 依环境变量 LC_COLLATE 所指定的文字排列次序来比较 s1 和 s2 字符串 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (temp != 0) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; temp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* strings are equal up to a `\0&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; len = &lt;span style=&#34;color:#c34e00&#34;&gt;strlen&lt;/span&gt;(l);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* index of first `\0&amp;#39; in both strings */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (len == lr)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* r is finished? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; (len == ll) ? 0 : 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (len == ll)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* l is finished? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; -1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* l is smaller than r (because r is not finished) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* both strings longer than `len&amp;#39;; go on comparing (after the `\0&amp;#39;) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      len++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      l += len; ll -= len; r += len; lr -= len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 比较指令 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaV_lessthan&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *l, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *r) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; res;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttype&lt;/span&gt;(l) != &lt;span style=&#34;color:#c34e00&#34;&gt;ttype&lt;/span&gt;(r))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_ordererror&lt;/span&gt;(L, l, r);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnumber&lt;/span&gt;(l))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numlt&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(l), &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(r));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisstring&lt;/span&gt;(l))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;l_strcmp&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;rawtsvalue&lt;/span&gt;(l), &lt;span style=&#34;color:#c34e00&#34;&gt;rawtsvalue&lt;/span&gt;(r)) &amp;lt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; ((res = &lt;span style=&#34;color:#c34e00&#34;&gt;call_orderTM&lt;/span&gt;(L, l, r, TM_LT)) != -1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; res;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_ordererror&lt;/span&gt;(L, l, r);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;lessequal&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *l, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *r) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; res;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttype&lt;/span&gt;(l) != &lt;span style=&#34;color:#c34e00&#34;&gt;ttype&lt;/span&gt;(r))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_ordererror&lt;/span&gt;(L, l, r);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnumber&lt;/span&gt;(l))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numle&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(l), &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(r));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisstring&lt;/span&gt;(l))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;l_strcmp&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;rawtsvalue&lt;/span&gt;(l), &lt;span style=&#34;color:#c34e00&#34;&gt;rawtsvalue&lt;/span&gt;(r)) &amp;lt;= 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; ((res = &lt;span style=&#34;color:#c34e00&#34;&gt;call_orderTM&lt;/span&gt;(L, l, r, TM_LE)) != -1)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* first try `le&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; res;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; ((res = &lt;span style=&#34;color:#c34e00&#34;&gt;call_orderTM&lt;/span&gt;(L, r, l, TM_LT)) != -1)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else try `lt&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; !res;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_ordererror&lt;/span&gt;(L, l, r);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaV_equalval&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *t1, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *t2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *tm;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;ttype&lt;/span&gt;(t1) == &lt;span style=&#34;color:#c34e00&#34;&gt;ttype&lt;/span&gt;(t2));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttype&lt;/span&gt;(t1)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TNIL: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TNUMBER: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numeq&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(t1), &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(t2));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TBOOLEAN: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;bvalue&lt;/span&gt;(t1) == &lt;span style=&#34;color:#c34e00&#34;&gt;bvalue&lt;/span&gt;(t2);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* true must be 1 !! */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TLIGHTUSERDATA: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;pvalue&lt;/span&gt;(t1) == &lt;span style=&#34;color:#c34e00&#34;&gt;pvalue&lt;/span&gt;(t2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TUSERDATA: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;uvalue&lt;/span&gt;(t1) == &lt;span style=&#34;color:#c34e00&#34;&gt;uvalue&lt;/span&gt;(t2)) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      tm = &lt;span style=&#34;color:#c34e00&#34;&gt;get_compTM&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;uvalue&lt;/span&gt;(t1)-&amp;gt;metatable, &lt;span style=&#34;color:#c34e00&#34;&gt;uvalue&lt;/span&gt;(t2)-&amp;gt;metatable,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         TM_EQ);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* will try TM */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TTABLE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;hvalue&lt;/span&gt;(t1) == &lt;span style=&#34;color:#c34e00&#34;&gt;hvalue&lt;/span&gt;(t2)) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      tm = &lt;span style=&#34;color:#c34e00&#34;&gt;get_compTM&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;hvalue&lt;/span&gt;(t1)-&amp;gt;metatable, &lt;span style=&#34;color:#c34e00&#34;&gt;hvalue&lt;/span&gt;(t2)-&amp;gt;metatable, TM_EQ);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* will try TM */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;gcvalue&lt;/span&gt;(t1) == &lt;span style=&#34;color:#c34e00&#34;&gt;gcvalue&lt;/span&gt;(t2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (tm == NULL) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no TM? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;callTMres&lt;/span&gt;(L, L-&amp;gt;top, tm, t1, t2);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* call TM */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; !&lt;span style=&#34;color:#c34e00&#34;&gt;l_isfalse&lt;/span&gt;(L-&amp;gt;top);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 从last开始，一共链接total个slot          */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaV_concat&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; total, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; last) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    StkId top = L-&amp;gt;base + last + 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; n = 2;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* number of elements handled in this pass (at least 2) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!(&lt;span style=&#34;color:#c34e00&#34;&gt;ttisstring&lt;/span&gt;(top-2) || &lt;span style=&#34;color:#c34e00&#34;&gt;ttisnumber&lt;/span&gt;(top-2)) || !&lt;span style=&#34;color:#c34e00&#34;&gt;tostring&lt;/span&gt;(L, top-1)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;call_binTM&lt;/span&gt;(L, top-2, top-1, top-2, TM_CONCAT))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_concaterror&lt;/span&gt;(L, top-2, top-1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;tsvalue&lt;/span&gt;(top-1)-&amp;gt;len == 0)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* second op is empty? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt;)&lt;span style=&#34;color:#c34e00&#34;&gt;tostring&lt;/span&gt;(L, top - 2);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* result is first op (as string) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* at least two string values; get as many as possible */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; tl = &lt;span style=&#34;color:#c34e00&#34;&gt;tsvalue&lt;/span&gt;(top-1)-&amp;gt;len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *buffer;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* collect total length */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (n = 1; n &amp;lt; total &amp;amp;&amp;amp; &lt;span style=&#34;color:#c34e00&#34;&gt;tostring&lt;/span&gt;(L, top-n-1); n++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; l = &lt;span style=&#34;color:#c34e00&#34;&gt;tsvalue&lt;/span&gt;(top-n-1)-&amp;gt;len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (l &amp;gt;= MAX_SIZET - tl) &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_runerror&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;string length overflow&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        tl += l;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      buffer = &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_openspace&lt;/span&gt;(L, &amp;amp;&lt;span style=&#34;color:#c34e00&#34;&gt;G&lt;/span&gt;(L)-&amp;gt;buff, tl);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      tl = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i=n; i&amp;gt;0; i--) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* concat all strings */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; l = &lt;span style=&#34;color:#c34e00&#34;&gt;tsvalue&lt;/span&gt;(top-i)-&amp;gt;len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;memcpy&lt;/span&gt;(buffer+tl, &lt;span style=&#34;color:#c34e00&#34;&gt;svalue&lt;/span&gt;(top-i), l);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        tl += l;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setsvalue2s&lt;/span&gt;(L, top-n, &lt;span style=&#34;color:#c34e00&#34;&gt;luaS_newlstr&lt;/span&gt;(L, buffer, tl));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    total -= n-1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* got `n&amp;#39; strings to create 1 new */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    last -= n-1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (total &amp;gt; 1);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* repeat until only 1 result left */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;Arith&lt;/span&gt; (lua_State *L, StkId ra, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *rb,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *rc, TMS op) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TValue tempb, tempc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *b, *c;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; ((b = &lt;span style=&#34;color:#c34e00&#34;&gt;luaV_tonumber&lt;/span&gt;(rb, &amp;amp;tempb)) != NULL &amp;amp;&amp;amp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (c = &lt;span style=&#34;color:#c34e00&#34;&gt;luaV_tonumber&lt;/span&gt;(rc, &amp;amp;tempc)) != NULL) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lua_Number nb = &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(b), nc = &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(c);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (op) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TM_ADD: &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(ra, &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numadd&lt;/span&gt;(nb, nc)); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TM_SUB: &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(ra, &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numsub&lt;/span&gt;(nb, nc)); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TM_MUL: &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(ra, &lt;span style=&#34;color:#c34e00&#34;&gt;luai_nummul&lt;/span&gt;(nb, nc)); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TM_DIV: &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(ra, &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numdiv&lt;/span&gt;(nb, nc)); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TM_MOD: &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(ra, &lt;span style=&#34;color:#c34e00&#34;&gt;luai_nummod&lt;/span&gt;(nb, nc)); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TM_POW: &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(ra, &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numpow&lt;/span&gt;(nb, nc)); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TM_UNM: &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(ra, &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numunm&lt;/span&gt;(nb)); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(0); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;call_binTM&lt;/span&gt;(L, rb, rc, ra, op))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_aritherror&lt;/span&gt;(L, rb, rc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** some macros for common tasks in `luaV_execute&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define runtime_check(L, c)&#x9;{ if (!(c)) break; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 提取指令中A,B,C的值 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define RA(i)&#x9;(base+GETARG_A(i))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* to be used after possible stack reallocation */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define RB(i)&#x9;check_exp(getBMode(GET_OPCODE(i)) == OpArgR, base+GETARG_B(i))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define RC(i)&#x9;check_exp(getCMode(GET_OPCODE(i)) == OpArgR, base+GETARG_C(i))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define RKB(i)&#x9;check_exp(getBMode(GET_OPCODE(i)) == OpArgK, \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;ISK(GETARG_B(i)) ? k+INDEXK(GETARG_B(i)) : base+GETARG_B(i))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define RKC(i)&#x9;check_exp(getCMode(GET_OPCODE(i)) == OpArgK, \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;ISK(GETARG_C(i)) ? k+INDEXK(GETARG_C(i)) : base+GETARG_C(i))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define KBx(i)&#x9;check_exp(getBMode(GET_OPCODE(i)) == OpArgK, k+GETARG_Bx(i))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define dojump(L,pc,i)&#x9;{(pc) += (i); luai_threadyield(L);}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* x可能触发新的frame，这里保存和恢复“部分现场”配合下面的execute一起看 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** pc:为何要存档呢？这是一个局部变量，且是相对frame有效，若切换execute则pc作为上一个execute的局部变量保存起来了，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**    所以为啥要保存这个变量呢？&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** base: {x}可能修改stack,造成base记录的本frame的base失效，故而这里要刷新base&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define Protect(x)&#x9;{ L-&amp;gt;savedpc = pc; {x;}; base = L-&amp;gt;base; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这个宏有意思哈 */&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define arith_op(op,tm) { \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;        TValue *rb = RKB(i); \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;        TValue *rc = RKC(i); \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;        if (ttisnumber(rb) &amp;amp;&amp;amp; ttisnumber(rc)) { \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;          lua_Number nb = nvalue(rb), nc = nvalue(rc); \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;          setnvalue(ra, op(nb, nc)); \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;        } \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;        else \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;          Protect(Arith(L, ra, rb, rc, tm)); \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** KEYCODE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** nexeccalls:Lua连续调用的层次&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** eg: c(0)-&amp;gt;Lua(1)-&amp;gt;Lua(2)-&amp;gt;c()-&amp;gt;Lua(1)-&amp;gt;Lua(2)-&amp;gt;Lua(3)-&amp;gt;c(0)-&amp;gt;Lua(1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 某次Lua调用结束，--nexeccalls，如果nexeccalls==0，表示当前lua调用链结束了，需要跳出luaV_execute函数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 大于0表示本Lua调用结束后，上一层必然还是Lua函数，需要进入reentry点&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaV_execute&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nexeccalls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  LClosure *cl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  StkId base;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TValue *k;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; Instruction *pc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; reentry:  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* entry point for new (callInfo,frame) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;isLua&lt;/span&gt;(L-&amp;gt;ci));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* C函数frame的执行不在这里，亲! */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* KEYCODE vm执行的关键参数:base,top,pc,savedpc, closure,k, L-&amp;gt;ci,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 后续因为call和return等切换调用栈时，必须正确处理上述参数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** !!!!!!!! L-&amp;gt;top没有在这里更新，这点要有印象，resason:类似funA(funB())一个函数(frame)运行完毕时的某些状态eg:L-&amp;gt;top&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 对上下文的frame可能有影响，所以这里没有更新L-&amp;gt;top，而是让有关业务(return,call...)自行处理&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  pc = L-&amp;gt;savedpc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cl = &amp;amp;&lt;span style=&#34;color:#c34e00&#34;&gt;clvalue&lt;/span&gt;(L-&amp;gt;ci-&amp;gt;func)-&amp;gt;l;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  base = L-&amp;gt;base;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  k = cl-&amp;gt;p-&amp;gt;k;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* locvars 仅在编译阶段/调试库中有效，虚拟机运行阶段无效(已编码到pc中) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* main loop of interpreter */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (;;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; Instruction i = *pc++;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 等效：*(pc++) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    StkId ra;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 运行钩子逻辑 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; ((L-&amp;gt;hookmask &amp;amp; (LUA_MASKLINE | LUA_MASKCOUNT)) &amp;amp;&amp;amp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (--L-&amp;gt;hookcount == 0 || L-&amp;gt;hookmask &amp;amp; LUA_MASKLINE)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;traceexec&lt;/span&gt;(L, pc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;status == LUA_YIELD) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* did hook yield? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        L-&amp;gt;savedpc = pc - 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      base = L-&amp;gt;base;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* warning!! several(某些) calls may realloc the stack and invalidate `ra&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ra = &lt;span style=&#34;color:#c34e00&#34;&gt;RA&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(base == L-&amp;gt;base &amp;amp;&amp;amp; L-&amp;gt;base == L-&amp;gt;ci-&amp;gt;base);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(base &amp;lt;= L-&amp;gt;top &amp;amp;&amp;amp; L-&amp;gt;top &amp;lt;= L-&amp;gt;stack + L-&amp;gt;stacksize);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* luaG_checkopenop的用途对照上面L-&amp;gt;top的注释看就明白了 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(L-&amp;gt;top == L-&amp;gt;ci-&amp;gt;top || &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_checkopenop&lt;/span&gt;(i));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(i)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_MOVE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, ra, &lt;span style=&#34;color:#c34e00&#34;&gt;RB&lt;/span&gt;(i));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_LOADK: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, ra, &lt;span style=&#34;color:#c34e00&#34;&gt;KBx&lt;/span&gt;(i));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_LOADBOOL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setbvalue&lt;/span&gt;(ra, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(i));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_C&lt;/span&gt;(i)) pc++;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip next instruction (if C) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_LOADNIL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TValue *rb = &lt;span style=&#34;color:#c34e00&#34;&gt;RB&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;setnilvalue&lt;/span&gt;(rb--);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (rb &amp;gt;= ra);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_GETUPVAL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; b = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, ra, cl-&amp;gt;upvals[b]-&amp;gt;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_GETGLOBAL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TValue g;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TValue *rb = &lt;span style=&#34;color:#c34e00&#34;&gt;KBx&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;sethvalue&lt;/span&gt;(L, &amp;amp;g, cl-&amp;gt;env);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;ttisstring&lt;/span&gt;(rb));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 全局变量名类型必须是TString */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaV_gettable&lt;/span&gt;(L, &amp;amp;g, rb, ra));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_GETTABLE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaV_gettable&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;RB&lt;/span&gt;(i), &lt;span style=&#34;color:#c34e00&#34;&gt;RKC&lt;/span&gt;(i), ra));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_SETGLOBAL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TValue g;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;sethvalue&lt;/span&gt;(L, &amp;amp;g, cl-&amp;gt;env);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;ttisstring&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;KBx&lt;/span&gt;(i)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaV_settable&lt;/span&gt;(L, &amp;amp;g, &lt;span style=&#34;color:#c34e00&#34;&gt;KBx&lt;/span&gt;(i), ra));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_SETUPVAL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        UpVal *uv = cl-&amp;gt;upvals[&lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(i)];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setobj&lt;/span&gt;(L, uv-&amp;gt;v, ra);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_barrier&lt;/span&gt;(L, uv, ra);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_SETTABLE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaV_settable&lt;/span&gt;(L, ra, &lt;span style=&#34;color:#c34e00&#34;&gt;RKB&lt;/span&gt;(i), &lt;span style=&#34;color:#c34e00&#34;&gt;RKC&lt;/span&gt;(i)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_NEWTABLE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; b = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; c = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_C&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;sethvalue&lt;/span&gt;(L, ra, &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_new&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_fb2int&lt;/span&gt;(b), &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_fb2int&lt;/span&gt;(c)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaC_checkGC&lt;/span&gt;(L));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_SELF: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        StkId rb = &lt;span style=&#34;color:#c34e00&#34;&gt;RB&lt;/span&gt;(i);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 拿到self.sub中的self指代的表 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, ra+1, rb);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 将上述表self存起来 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaV_gettable&lt;/span&gt;(L, rb, &lt;span style=&#34;color:#c34e00&#34;&gt;RKC&lt;/span&gt;(i), ra)); &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 计算self.sub的值 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_ADD: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;arith_op&lt;/span&gt;(luai_numadd, TM_ADD);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_SUB: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;arith_op&lt;/span&gt;(luai_numsub, TM_SUB);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_MUL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;arith_op&lt;/span&gt;(luai_nummul, TM_MUL);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_DIV: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;arith_op&lt;/span&gt;(luai_numdiv, TM_DIV);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_MOD: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;arith_op&lt;/span&gt;(luai_nummod, TM_MOD);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_POW: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;arith_op&lt;/span&gt;(luai_numpow, TM_POW);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_UNM: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TValue *rb = &lt;span style=&#34;color:#c34e00&#34;&gt;RB&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnumber&lt;/span&gt;(rb)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          lua_Number nb = &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(rb);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(ra, &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numunm&lt;/span&gt;(nb));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;Arith&lt;/span&gt;(L, ra, rb, rb, TM_UNM));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_NOT: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; res = &lt;span style=&#34;color:#c34e00&#34;&gt;l_isfalse&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;RB&lt;/span&gt;(i));  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* next assignment may change this value */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setbvalue&lt;/span&gt;(ra, res);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_LEN: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *rb = &lt;span style=&#34;color:#c34e00&#34;&gt;RB&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttype&lt;/span&gt;(rb)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TTABLE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(ra, &lt;span style=&#34;color:#c34e00&#34;&gt;cast_num&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaH_getn&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;hvalue&lt;/span&gt;(rb))));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TSTRING: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(ra, &lt;span style=&#34;color:#c34e00&#34;&gt;cast_num&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;tsvalue&lt;/span&gt;(rb)-&amp;gt;len));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* try metamethod */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;call_binTM&lt;/span&gt;(L, rb, luaO_nilobject, ra, TM_LEN))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_typeerror&lt;/span&gt;(L, rb, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;get length of&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_CONCAT: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; b = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; c = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_C&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaV_concat&lt;/span&gt;(L, c-b+1, c); &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_checkGC&lt;/span&gt;(L));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;RA&lt;/span&gt;(i), base+b);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_JMP: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;dojump&lt;/span&gt;(L, pc, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_sBx&lt;/span&gt;(i));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* KEYCODE 重点，难点，代表性的指令 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;  &#x9;** if ((RK(B) == RK(C)) ~= A) then pc++&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;  &#x9;** OP_EQ后面紧跟着是跳转指令，这里猜测，跳转的值Bx应该短1，因为后面又进行了pc++&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;  &#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_EQ: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TValue *rb = &lt;span style=&#34;color:#c34e00&#34;&gt;RKB&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TValue *rc = &lt;span style=&#34;color:#c34e00&#34;&gt;RKC&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;equalobj&lt;/span&gt;(L, rb, rc) == &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_A&lt;/span&gt;(i))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;dojump&lt;/span&gt;(L, pc, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_sBx&lt;/span&gt;(*pc));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pc++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_LT: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luaV_lessthan&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;RKB&lt;/span&gt;(i), &lt;span style=&#34;color:#c34e00&#34;&gt;RKC&lt;/span&gt;(i)) == &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_A&lt;/span&gt;(i))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;dojump&lt;/span&gt;(L, pc, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_sBx&lt;/span&gt;(*pc));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pc++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_LE: {&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;lessequal&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;RKB&lt;/span&gt;(i), &lt;span style=&#34;color:#c34e00&#34;&gt;RKC&lt;/span&gt;(i)) == &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_A&lt;/span&gt;(i))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;dojump&lt;/span&gt;(L, pc, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_sBx&lt;/span&gt;(*pc));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pc++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_TEST: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;l_isfalse&lt;/span&gt;(ra) != &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_C&lt;/span&gt;(i))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;dojump&lt;/span&gt;(L, pc, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_sBx&lt;/span&gt;(*pc));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pc++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_TESTSET: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TValue *rb = &lt;span style=&#34;color:#c34e00&#34;&gt;RB&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;l_isfalse&lt;/span&gt;(rb) != &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_C&lt;/span&gt;(i)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, ra, rb);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;dojump&lt;/span&gt;(L, pc, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_sBx&lt;/span&gt;(*pc));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pc++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_CALL: {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1)) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; b = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(i);&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 传入参数个数，          B:0：...  1：0个，2：1个，3：2个依次类推 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nresults = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_C&lt;/span&gt;(i) - 1;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 期待的返回值个数 C:0(...), 1:(期待返回0个)，2:(期待返回1个) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 注解99: 当传入的参数数量明确时，设置L-&amp;gt;top告知被调用函数确切的传入参数数量,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;        ** 不明确时，OP_VARARG(fun(...))/&#x9;RETURN.B(funA(funB())等指令中已确定了top的位置，这里不能也不用再更改设置(否则L-&amp;gt;top!=实际传入的参数位置)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;        ** &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;        ** L-&amp;gt;top都是指向了最后一个参数的&amp;#34;位置&amp;#34;,也是告知被调用函数，我已经准备好了你要的参数且top指针已指到相应的位置了&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;        */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (b != 0) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;L-&amp;gt;top = ra+b;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else previous instruction set top */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        L-&amp;gt;savedpc = pc;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 记下原本接下来要执行的下一条指令，等待new&amp;#39;frame运行结束后，继续运行本frame */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luaD_precall&lt;/span&gt;(L, ra, nresults)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; PCRLUA: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            nexeccalls++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 若子函数(frame)是Lua，这里continue才真正开始执行子函数(frame)的opcode */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;goto&lt;/span&gt; reentry;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* restart luaV_execute over new Lua function */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; PCRC: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* it was a C function (`precall&amp;#39; called it); adjust results */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 注解100: C调用结束时luaD_poscall已经将所有的返回值填充到RA开头的addr上,L-&amp;gt;top指向最后一个返回值&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;    ** 期待返回值个数确定时eg:local a,b = fun()，luaD_poscall函数自动赋值了a,b，L-&amp;gt;top已经完成了使命&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;    **     故而这里将其复原。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;    ** 期待返回个数不确定时eg:local t = {fun()}或funA(funB())，这种情况下L-&amp;gt;top指向的最后一个返回值地址，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;    **     将被下一条指令setlist(B=0)或callA(B=0)用于计算传入参数的个数，所以不能复原(下一条指令要用到)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;    */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (nresults &amp;gt;= 0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;L-&amp;gt;top = L-&amp;gt;ci-&amp;gt;top;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            base = L-&amp;gt;base;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 调用过程中stack可能变化而移动，故而重新获取最新的(L-&amp;gt;ci-&amp;gt;base==L-&amp;gt;base)的base，下同 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 子函数(frame)为c,luaD_precall的返回意味着子函数(frame)已运行完毕，相关参数也调整完毕&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;&#x9;** 这里接着运行母函数(frame)的紧跟着OP_CALL后面的下一条指令 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* yield,交出lua的执行权 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_TAILCALL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* A B C return R(A)(R(A+1), ... ,R(A+B-1)) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; b = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (b != 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;L-&amp;gt;top = ra+b;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else previous instruction set top */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* return fun(...) 前面的OP_VARARG指令设置好了L-&amp;gt;top */&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        L-&amp;gt;savedpc = pc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_C&lt;/span&gt;(i) - 1 == LUA_MULTRET);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 尾调用的定义中：必须返回其调用返回的所有值，所以这里C必须为0 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luaD_precall&lt;/span&gt;(L, ra, LUA_MULTRET)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; PCRLUA: {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 画图，代码不难，看懂它们 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* tail call: put new frame in place of previous one */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            CallInfo *ci = L-&amp;gt;ci - 1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* previous frame */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; aux;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            StkId func = ci-&amp;gt;func;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            StkId pfunc = (ci+1)-&amp;gt;func;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* previous function index */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;openupval) &lt;span style=&#34;color:#c34e00&#34;&gt;luaF_close&lt;/span&gt;(L, ci-&amp;gt;base);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            L-&amp;gt;base = ci-&amp;gt;base = ci-&amp;gt;func + ((ci+1)-&amp;gt;base - pfunc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ！！！！移动后func指向的地址不变，但值改变了（由母函数变成了被尾调用的子函数) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (aux = 0; pfunc+aux &amp;lt; L-&amp;gt;top; aux++)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* move frame down */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, func+aux, pfunc+aux);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ci-&amp;gt;top = L-&amp;gt;top = func+aux;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* correct top */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(L-&amp;gt;top == L-&amp;gt;base + &lt;span style=&#34;color:#c34e00&#34;&gt;clvalue&lt;/span&gt;(func)-&amp;gt;l.p-&amp;gt;maxstacksize);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ci-&amp;gt;savedpc = L-&amp;gt;savedpc;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里也要更新 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ci-&amp;gt;tailcalls++;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* one more call lost */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            L-&amp;gt;ci--;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* remove new frame */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;goto&lt;/span&gt; reentry;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; PCRC: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* it was a C function (`precall&amp;#39; called it) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            base = L-&amp;gt;base;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* restore base */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* yield */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_RETURN: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* return R(A), ... ,R(A+B-2) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; b = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(i);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 0：返回所有值，1：返回0个值，2：返回1个值 ... */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (b != 0) &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* b==0其它的指令argvar等已处理好top,eg:(return ...)或者return(a, fun()) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;L-&amp;gt;top = ra+b-1;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 以便确定返回值的确切个数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;openupval) &lt;span style=&#34;color:#c34e00&#34;&gt;luaF_close&lt;/span&gt;(L, base);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        L-&amp;gt;savedpc = pc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        b = &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_poscall&lt;/span&gt;(L, ra);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 将子函数的返回值移到指定地方，并适配母函数的result要求 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* lua调用结束，返回值已经按照移动到指定的位置(本fun的addr)，且L-&amp;gt;top指向了最后一个返回值的位置(可以用来计算返回值的个数)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;   这里直接return，将CPU交换到母C函数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (--nexeccalls == 0)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* was previous function running `here&amp;#39;? Lua层面的调用结束了，结束lua的execute的执行，返回到C */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no: return */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* yes: continue its execution */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (b) &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 同上注解100，请往上翻阅 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;  &#x9;L-&amp;gt;top = L-&amp;gt;ci-&amp;gt;top;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;isLua&lt;/span&gt;(L-&amp;gt;ci)); &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* return后，lua连续调用链还没结束，那么上一层必然是个lua函数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(*((L-&amp;gt;ci)-&amp;gt;savedpc - 1)) == OP_CALL);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 上一个指令必然是call */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;goto&lt;/span&gt; reentry;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 切回到母lua的execute的frame */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_FORLOOP: {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 先看 OP_FORPREP 指令 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        lua_Number step = &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(ra+2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        lua_Number idx = &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numadd&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(ra), step); &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* increment index */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        lua_Number limit = &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(ra+1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luai_numlt&lt;/span&gt;(0, step) ? &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numle&lt;/span&gt;(idx, limit)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                : &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numle&lt;/span&gt;(limit, idx)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;dojump&lt;/span&gt;(L, pc, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_sBx&lt;/span&gt;(i));  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* jump back */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(ra, idx);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* update internal index... */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(ra+3, idx);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ...and external index 这个idx才是暴露给for循环里面的i(for i = 0; 10; 1) */&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_FORPREP: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *init = ra;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *plimit = ra+1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *pstep = ra+2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        L-&amp;gt;savedpc = pc;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* next steps may throw errors */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;tonumber&lt;/span&gt;(init, ra))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_runerror&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;LUA_QL&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;for&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34; initial value must be a number&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;tonumber&lt;/span&gt;(plimit, ra+1))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_runerror&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;LUA_QL&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;for&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34; limit must be a number&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;tonumber&lt;/span&gt;(pstep, ra+2))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_runerror&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;LUA_QL&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;for&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34; step must be a number&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(ra, &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numsub&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(ra), &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(pstep)));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里提前-=step */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;dojump&lt;/span&gt;(L, pc, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_sBx&lt;/span&gt;(i));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 跳到cond判断那里 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_TFORLOOP: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 编译模块保证了ra+3是个有意义的参数 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;  &#x9;** next函数会吃掉传入的参数，所以这里CP了一份&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;    */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 结合 http://shankusu.me/lua/ANo-FrillsIntroductiontoLua51VMInstructions/ 文档来看，更容易理解 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        StkId cb = ra + 3;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* call base */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, cb+2, ra+2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, cb+1, ra+1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, cb, ra);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        L-&amp;gt;top = cb+3;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* func. + 2 args (state and index) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaD_call&lt;/span&gt;(L, cb, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_C&lt;/span&gt;(i)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        L-&amp;gt;top = L-&amp;gt;ci-&amp;gt;top;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cb = &lt;span style=&#34;color:#c34e00&#34;&gt;RA&lt;/span&gt;(i) + 3;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* previous call may change the stack */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(cb)) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* continue loop? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, cb-1, cb);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* save control variable */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;dojump&lt;/span&gt;(L, pc, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_sBx&lt;/span&gt;(*pc));  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* jump back */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pc++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_SETLIST: {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* local t = {...} 本指令之前可能会有一条vararg或local t2={fun(...)}产生的OP_CALL，所以结合vararg来理解本block的代码 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* A B C&#x9;R(A)[(C-1)*FPF+i] := R(A+i), 1 &amp;lt;= i &amp;lt;= B */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; n = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; c = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_C&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; last;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Table *h;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (n == 0) {&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          n = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_int&lt;/span&gt;(L-&amp;gt;top - ra) - 1;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 计算确切的参数个数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          L-&amp;gt;top = L-&amp;gt;ci-&amp;gt;top;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* OP_VARARG指令L-&amp;gt;top已经指向了{...}不定参数的最后一个slot的位置以便求n,这里将其复原 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (c == 0) c = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_int&lt;/span&gt;(*pc++);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这行代码最好有个印象 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;runtime_check&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;ttistable&lt;/span&gt;(ra));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 编译模块出错了 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        h = &lt;span style=&#34;color:#c34e00&#34;&gt;hvalue&lt;/span&gt;(ra);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        last = ((c-1)*LFIELDS_PER_FLUSH) + n;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 计算当前能确定的数组下标的最大值 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (last &amp;gt; h-&amp;gt;sizearray)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* needs more space?  数组区域大小不够，需扩展*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_resizearray&lt;/span&gt;(L, h, last);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* pre-alloc it at once */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (; n &amp;gt; 0; n--) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          TValue *val = ra+n;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2t&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_setnum&lt;/span&gt;(L, h, last--), val);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_barriert&lt;/span&gt;(L, h, val);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_CLOSE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* close all variables in the stack up to (&amp;gt;=) R(A) 编译模块如何确定参数A？*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaF_close&lt;/span&gt;(L, ra);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_CLOSURE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* A Bx&#x9;R(A) := closure(KPROTO[Bx], R(A), ... ,R(A+n)) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Proto *p;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Closure *ncl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nup, j;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        p = cl-&amp;gt;p-&amp;gt;p[&lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_Bx&lt;/span&gt;(i)];&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 找到对应的proto */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        nup = p-&amp;gt;nups;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ncl = &lt;span style=&#34;color:#c34e00&#34;&gt;luaF_newLclosure&lt;/span&gt;(L, nup, cl-&amp;gt;env);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ncl-&amp;gt;l.p = p;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 下面的block尚未完全看懂 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (j=0; j&amp;lt;nup; j++, pc++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(*pc) == OP_GETUPVAL)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ncl-&amp;gt;l.upvals[j] = cl-&amp;gt;upvals[&lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(*pc)];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(*pc) == OP_MOVE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ncl-&amp;gt;l.upvals[j] = &lt;span style=&#34;color:#c34e00&#34;&gt;luaF_findupval&lt;/span&gt;(L, base + &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(*pc));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setclvalue&lt;/span&gt;(L, ra, ncl);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaC_checkGC&lt;/span&gt;(L));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_VARARG: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* A B&#x9;R(A), R(A+1), ..., R(A+B-1) = vararg */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; b = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(i) - 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; j;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        CallInfo *ci = L-&amp;gt;ci;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; n = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_int&lt;/span&gt;(ci-&amp;gt;base - ci-&amp;gt;func) - cl-&amp;gt;p-&amp;gt;numparams - 1;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 本次函数调用传入的不定参数的个数eg: funA(a,b, ...) funA */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (b == LUA_MULTRET) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaD_checkstack&lt;/span&gt;(L, n));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          ra = &lt;span style=&#34;color:#c34e00&#34;&gt;RA&lt;/span&gt;(i);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* previous call may change the stack */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          b = n;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 出现在 local tbl = {...} 或者 funA(...) 需要拷贝所有的不定参数的地方 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 为可能即将到来的C/lua函数调用做准备，(L-&amp;gt;top-func可知即将发生的函数调用实际上有多少个传入参数) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;  ** &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;  ** local tbl={...} OP_SETLIST指令也用到了L-&amp;gt;top，故而可以推断出，这里L-&amp;gt;top标记了实际上...携带的参数个数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;  ** 以便其它指令能准确的执行(主要是获取..参数个数)，这里将实际传入的参数个数通过L-&amp;gt;top计算好，避免其它指令再去计算一遍&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;  ** 其它指令用完L-&amp;gt;top后需将其复原&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          L-&amp;gt;top = ra + n; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 将不定参数赋值给指定的对象？？？&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;** local a, b = ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;** 不定参数数量不足则补nil&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (j = 0; j &amp;lt; b; j++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (j &amp;lt; n) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 本函数的不定参数的个数还能满足ra+j代表的dst寄存器 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, ra + j, ci-&amp;gt;base - n + j);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;setnilvalue&lt;/span&gt;(ra + j);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* local a, b = ... 本函数实际上只收到了一个不定参数，那么不足的部分(b)就要补nil值了 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>lua源码注释-ltable.c</title>
      <link>http://shanks.link/blog/2021/05/20/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-ltable.c/</link>
      <pubDate>Thu, 20 May 2021 23:44:58 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/05/20/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-ltable.c/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/shankusu2017/lua&#34;&gt;github链接&lt;/a&gt; lua515子域&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** $Id: ltable.c,v 2.32.1.2 2007/12/28 15:32:23 roberto Exp $&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Lua tables (hash)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** See Copyright Notice in lua.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Implementation of tables (aka(又名) arrays, objects, or hash tables).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Tables keep its elements in two parts: an array part and a hash part.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Non-negative integer keys are all candidates(考虑) to be kept in the array&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** part. The actual size of the array is the largest `n&amp;#39; such that at&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** least half the slots between 0 and n are in use.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Hash uses a mix of chained scatter（分散） table with Brent&amp;#39;s variation.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** A main invariant(不变的) of these tables is that, if an element is not&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** in its main position (i.e. the `original&amp;#39; position that its hash gives&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** to it), then the colliding(碰撞的) element is in its own main position.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Hence even when the load factor reaches 100%, performance remains good.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 和lstring的闭散列不同，这里采用的是开散列算法                    https://blog.csdn.net/Boring_Wednesday/article/details/80316884&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 结合gc流程和table&amp;#39;insert的流程来看&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** tbl[k]=nil,若k仅被此表引用,则此k会被gc回收,for中进行tbl[k]=nil的操作，并不会修改影响表遍历的完整性&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** next函数有对此进行了专门的处理(deadkey)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** tbl[k]=nil后，node经过gc后被标记为deadkey,在此之前resize之前，此node是个&amp;#34;正常的node&amp;#34;，可以被复用&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** gc被标记为deadkey后，进入了dead流程，是一个deadkey了。没作用了&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define ltable_c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define LUA_CORE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lua.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ldebug.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ldo.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lgc.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lmem.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lobject.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lstate.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ltable.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** max size of array part is 2^MAXBITS&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#if LUAI_BITSINT &amp;gt; 26&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define MAXBITS&#x9;&#x9;26&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#else&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define MAXBITS&#x9;&#x9;(LUAI_BITSINT-2)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define MAXASIZE&#x9;(1 &amp;lt;&amp;lt; MAXBITS)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define hashpow2(t,n)      (gnode(t, lmod((n), sizenode(t))))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define hashstr(t,str)  hashpow2(t, (str)-&amp;gt;tsv.hash)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define hashboolean(t,p)        hashpow2(t, p)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** for some types, it is better to avoid modulus by power of 2, as&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** they tend to have many 2 factors.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define hashmod(t,n)&#x9;(gnode(t, ((n) % ((sizenode(t)-1)|1))))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define hashpointer(t,p)&#x9;hashmod(t, IntPoint(p))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** number of ints inside a lua_Number&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define numints&#x9;&#x9;cast_int(sizeof(lua_Number)/sizeof(int))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define dummynode&#x9;&#x9;(&amp;amp;dummynode_)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; Node dummynode_ = {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {{NULL}, LUA_TNIL},  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* value */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {{{NULL}, LUA_TNIL, NULL}}  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* key */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** hash for lua_Numbers&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; Node *&lt;span style=&#34;color:#c34e00&#34;&gt;hashnum&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; Table *t, lua_Number n) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; a[numints];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luai_numeq&lt;/span&gt;(n, 0))  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* avoid problems with -0 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;gnode&lt;/span&gt;(t, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;memcpy&lt;/span&gt;(a, &amp;amp;n, &lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(a));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i = 1; i &amp;lt; numints; i++) a[0] += a[i];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;hashmod&lt;/span&gt;(t, a[0]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** returns the `main&amp;#39; position of an element in a table (that is, the index&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** of its hash value)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; Node *&lt;span style=&#34;color:#c34e00&#34;&gt;mainposition&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; Table *t, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttype&lt;/span&gt;(key)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TNUMBER:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;hashnum&lt;/span&gt;(t, &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(key));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TSTRING:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;hashstr&lt;/span&gt;(t, &lt;span style=&#34;color:#c34e00&#34;&gt;rawtsvalue&lt;/span&gt;(key));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TBOOLEAN:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;hashboolean&lt;/span&gt;(t, &lt;span style=&#34;color:#c34e00&#34;&gt;bvalue&lt;/span&gt;(key));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TLIGHTUSERDATA:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;hashpointer&lt;/span&gt;(t, &lt;span style=&#34;color:#c34e00&#34;&gt;pvalue&lt;/span&gt;(key));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;hashpointer&lt;/span&gt;(t, &lt;span style=&#34;color:#c34e00&#34;&gt;gcvalue&lt;/span&gt;(key));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** returns the index for `key&amp;#39; if `key&amp;#39; is an appropriate(合适的) key to live in&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** the array part of the table, -1 otherwise.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;arrayindex&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnumber&lt;/span&gt;(key)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lua_Number n = &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; k;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_number2int&lt;/span&gt;(k, n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luai_numeq&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;cast_num&lt;/span&gt;(k), n))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; k;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; -1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `key&amp;#39; did not match some condition */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** returns the index of a `key&amp;#39; for table traversals(遍历). First goes all&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** elements in the array part, then elements in the hash part. The&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** beginning of a traversal is signalled by -1.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;findindex&lt;/span&gt; (lua_State *L, Table *t, StkId key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(key)) { &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 下面i++后，开始从数组的第一个slot开始匹配 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; -1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* first iteration */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  i = &lt;span style=&#34;color:#c34e00&#34;&gt;arrayindex&lt;/span&gt;(key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (0 &amp;lt; i &amp;amp;&amp;amp; i &amp;lt;= t-&amp;gt;sizearray)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* is `key&amp;#39; inside array part? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; i-1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* yes; that&amp;#39;s the index (corrected to C) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Node *n = &lt;span style=&#34;color:#c34e00&#34;&gt;mainposition&lt;/span&gt;(t, key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* check whether `key&amp;#39; is somewhere in the chain */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* key may be dead already, but it is ok to use it in `next&amp;#39; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      **&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      ** for k,v pair(tbl) do&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      **      tbl[k] = nil&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      **      可能的gc导致出现DEADKEY&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      ** end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      **&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      ** LUA_TDEADKEY的key对应的mem可能被释放了，所以这里可能gcvalue(gkey(n) == gcvalue(key)) 这个判断不准确，要使其准确的前提是mem不释放，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      ** 上面for循环中k保持了对其引用所以不会导致mem释放，其它环境下调用tbl.next(deadKey)因为不确定mem是否被释放所以结果是未定义的，我的妈妈咪耶，搞明白了吗&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      ** &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      ** 不管是lua还是C调用,tbl[k]=nil导致deadkey，但k的存在使key对应的gc内存不被释放(k还引用着它呢)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      ** C中调用tbl[k]=nil导致死键后，top-=2,key也被抛弃，如果stack还有其它的slot引用key则key对应的内存&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      ** 不会被释放，也可以再次利用key调用next,如果statck中没有其它的slot引用该key，则对应的内存可能会被释放&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      ** 但key也不存在了，故而gcvalue(gkey(n)==gcvalue(key))中的key也不存在了，该判断就不可能成立了&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luaO_rawequalObj&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;key2tval&lt;/span&gt;(n), key) ||&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 支持lua中的在next中tbl[k]=nil的操作后，k-&amp;gt;k.next */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            (&lt;span style=&#34;color:#c34e00&#34;&gt;ttype&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gkey&lt;/span&gt;(n)) == LUA_TDEADKEY &amp;amp;&amp;amp; &lt;span style=&#34;color:#c34e00&#34;&gt;iscollectable&lt;/span&gt;(key) &amp;amp;&amp;amp; &lt;span style=&#34;color:#c34e00&#34;&gt;gcvalue&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gkey&lt;/span&gt;(n)) == &lt;span style=&#34;color:#c34e00&#34;&gt;gcvalue&lt;/span&gt;(key))) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        i = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_int&lt;/span&gt;(n - &lt;span style=&#34;color:#c34e00&#34;&gt;gnode&lt;/span&gt;(t, 0));  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* key index in hash table */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* hash elements are numbered after array ones */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; i + t-&amp;gt;sizearray;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; n = &lt;span style=&#34;color:#c34e00&#34;&gt;gnext&lt;/span&gt;(n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_runerror&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;invalid key to &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;LUA_QL&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;next&amp;#34;&lt;/span&gt;));  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* key not found */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* to avoid warnings */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_next&lt;/span&gt; (lua_State *L, Table *t, StkId key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#c34e00&#34;&gt;findindex&lt;/span&gt;(L, t, key);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* find original element */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里先来个i++,配合着上面的findindex，就形成了如果传入的是nil，则从数组第一个slot开始查找&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 如果传入的是前面找到的oldKey，则在oldKey的下一个slot开始匹配,符合next函数定义&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i++; i &amp;lt; t-&amp;gt;sizearray; i++) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* try first array part */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&amp;amp;t-&amp;gt;array[i])) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* a non-nil value? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(key, &lt;span style=&#34;color:#c34e00&#34;&gt;cast_num&lt;/span&gt;(i+1));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* c下表从0开始，lua从1开始，所以这里要补1 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, key+1, &amp;amp;t-&amp;gt;array[i]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i -= t-&amp;gt;sizearray; i &amp;lt; &lt;span style=&#34;color:#c34e00&#34;&gt;sizenode&lt;/span&gt;(t); i++) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* then hash part */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gval&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gnode&lt;/span&gt;(t, i)))) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* a non-nil value? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, key, &lt;span style=&#34;color:#c34e00&#34;&gt;key2tval&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gnode&lt;/span&gt;(t, i)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, key+1, &lt;span style=&#34;color:#c34e00&#34;&gt;gval&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gnode&lt;/span&gt;(t, i)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no more elements */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** {=============================================================&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Rehash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** ==============================================================&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;computesizes&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nums[], &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; *narray) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; twotoi;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 2^i */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; a = 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* number of elements smaller than 2^i */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; na = 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* number of elements to go to array part */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; n = 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* optimal size for array part */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i = 0, twotoi = 1; twotoi/2 &amp;lt; *narray; i++, twotoi *= 2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (nums[i] &amp;gt; 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      a += nums[i];&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 加上当前区间 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 截至到当前区间.left，利用率超过了1/2，存个档 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (a &amp;gt; twotoi/2) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* more than half elements present? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        n = twotoi;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* optimal size (till now) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        na = a;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* all elements smaller than n will go to array part */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 所有已存在的元素都已统计完毕，无需再往后面统计了(nums[i+]及后面都是0了)，这里提前跳出 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (a == *narray) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* all elements already counted */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  *narray = n;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(*narray/2 &amp;lt;= na &amp;amp;&amp;amp; na &amp;lt;= *narray);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; na;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;countint&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *key, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; *nums) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; k = &lt;span style=&#34;color:#c34e00&#34;&gt;arrayindex&lt;/span&gt;(key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (0 &amp;lt; k &amp;amp;&amp;amp; k &amp;lt;= MAXASIZE) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* is `key&amp;#39; an appropriate array index? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nums[&lt;span style=&#34;color:#c34e00&#34;&gt;ceillog2&lt;/span&gt;(k)]++;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* count as such */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;numusearray&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; Table *t, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; *nums) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; lg;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; ttlg;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 2^lg */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; ause = 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* summation of `nums&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i = 1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* count to traverse all array keys */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (lg=0, ttlg=1; lg&amp;lt;=MAXBITS; lg++, ttlg*=2) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* for each slice */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; lc = 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* counter */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; lim = ttlg;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (lim &amp;gt; t-&amp;gt;sizearray) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      lim = t-&amp;gt;sizearray;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* adjust upper limit */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (i &amp;gt; lim)&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 下面的for循环中i提前++了。所以这里要对其评估 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no more elements to count */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* count elements in range (2^(lg-1), 2^lg] */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (; i &amp;lt;= lim; i++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&amp;amp;t-&amp;gt;array[i-1]))&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里要-1,因为C的下标从0开始 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        lc++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nums[lg] += lc;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新区间内used的数量 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ause += lc;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新总的used数量 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ause;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 返回 array中used的总数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新node中int的key到nums和pnasize中，返回node中key的总数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;numusehash&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; Table *t, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; *nums, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; *pnasize) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; totaluse = 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* total number of elements */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; ause = 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* summation of `nums&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#c34e00&#34;&gt;sizenode&lt;/span&gt;(t);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (i--) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Node *n = &amp;amp;t-&amp;gt;node[i];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gval&lt;/span&gt;(n))) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里没有判断gkey而是gval!!! */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ause += &lt;span style=&#34;color:#c34e00&#34;&gt;countint&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;key2tval&lt;/span&gt;(n), nums);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      totaluse++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  *pnasize += ause;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; totaluse;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;setarrayvector&lt;/span&gt; (lua_State *L, Table *t, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; size) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_reallocvector&lt;/span&gt;(L, t-&amp;gt;array, t-&amp;gt;sizearray, size, TValue);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i=t-&amp;gt;sizearray; i&amp;lt;size; i++)&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 多出来的数组部分填nil */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#c34e00&#34;&gt;setnilvalue&lt;/span&gt;(&amp;amp;t-&amp;gt;array[i]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  t-&amp;gt;sizearray = size;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 按照新的node区大小size，申请新内存且将其全部set-nil */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;setnodevector&lt;/span&gt; (lua_State *L, Table *t, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; size) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; lsize;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (size == 0) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no elements to hash part? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    t-&amp;gt;node = &lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(Node *, dummynode);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* use common `dummynode&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lsize = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lsize = &lt;span style=&#34;color:#c34e00&#34;&gt;ceillog2&lt;/span&gt;(size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (lsize &amp;gt; MAXBITS)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_runerror&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;table overflow&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    size = &lt;span style=&#34;color:#c34e00&#34;&gt;twoto&lt;/span&gt;(lsize);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    t-&amp;gt;node = &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_newvector&lt;/span&gt;(L, size, Node);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i=0; i&amp;lt;size; i++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Node *n = &lt;span style=&#34;color:#c34e00&#34;&gt;gnode&lt;/span&gt;(t, i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;gnext&lt;/span&gt;(n) = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setnilvalue&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gkey&lt;/span&gt;(n));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setnilvalue&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gval&lt;/span&gt;(n));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  t-&amp;gt;lsizenode = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_byte&lt;/span&gt;(lsize);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  t-&amp;gt;lastfree = &lt;span style=&#34;color:#c34e00&#34;&gt;gnode&lt;/span&gt;(t, size);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* all positions are free */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* nasize:调整后的数组大小&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** nhsize:调整后node部分的元素个数 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;resize&lt;/span&gt; (lua_State *L, Table *t, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nasize, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nhsize) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; oldasize = t-&amp;gt;sizearray;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; oldhsize = t-&amp;gt;lsizenode;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Node *nold = t-&amp;gt;node;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* save old hash ... */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (nasize &amp;gt; oldasize)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* array part must grow? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setarrayvector&lt;/span&gt;(L, t, nasize);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* create new hash part with appropriate size &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 准备好全新的node，以便下面调整array时，接收array中溢出的slot&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setnodevector&lt;/span&gt;(L, t, nhsize);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (nasize &amp;lt; oldasize) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* array part must shrink? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    t-&amp;gt;sizearray = nasize;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* re-insert elements from vanishing slice */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i=nasize; i&amp;lt;oldasize; i++) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* new的array-size下将数组溢出的slot移动到node区域去 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&amp;amp;t-&amp;gt;array[i]))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setobjt2t&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_setnum&lt;/span&gt;(L, t, i+1), &amp;amp;t-&amp;gt;array[i]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* shrink array */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_reallocvector&lt;/span&gt;(L, t-&amp;gt;array, oldasize, nasize, TValue);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* re-insert elements from hash part */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i = &lt;span style=&#34;color:#c34e00&#34;&gt;twoto&lt;/span&gt;(oldhsize) - 1; i &amp;gt;= 0; i--) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Node *old = nold+i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gval&lt;/span&gt;(old)))&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里没拿gkey判断!!       */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setobjt2t&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_set&lt;/span&gt;(L, t, &lt;span style=&#34;color:#c34e00&#34;&gt;key2tval&lt;/span&gt;(old)), &lt;span style=&#34;color:#c34e00&#34;&gt;gval&lt;/span&gt;(old));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (nold != dummynode)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_freearray&lt;/span&gt;(L, nold, &lt;span style=&#34;color:#c34e00&#34;&gt;twoto&lt;/span&gt;(oldhsize), Node);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* free old array */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 供lvm调用，一次到位申请对应的array区域的内存 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_resizearray&lt;/span&gt; (lua_State *L, Table *t, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nasize) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nsize = (t-&amp;gt;node == dummynode) ? 0 : &lt;span style=&#34;color:#c34e00&#34;&gt;sizenode&lt;/span&gt;(t);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;resize&lt;/span&gt;(L, t, nasize, nsize);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 尝试插入新的key(ek时发现空间不足，从而rehash) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;rehash&lt;/span&gt; (lua_State *L, Table *t, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *ek) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nasize, na;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nums[MAXBITS+1];  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* nums[i] = number of keys between 2^(i-1) and 2^i */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; totaluse;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 所有元素总和 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i=0; i&amp;lt;=MAXBITS; i++) nums[i] = 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* reset counts */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  nasize = &lt;span style=&#34;color:#c34e00&#34;&gt;numusearray&lt;/span&gt;(t, nums);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* count keys in array part */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  totaluse = nasize;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* all those keys are integer keys */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  totaluse += &lt;span style=&#34;color:#c34e00&#34;&gt;numusehash&lt;/span&gt;(t, nums, &amp;amp;nasize);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* count keys in hash part */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* count extra key */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  nasize += &lt;span style=&#34;color:#c34e00&#34;&gt;countint&lt;/span&gt;(ek, nums);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  totaluse++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* compute new size for array part */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  na = &lt;span style=&#34;color:#c34e00&#34;&gt;computesizes&lt;/span&gt;(nums, &amp;amp;nasize);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 计算下最优解下的nasize，以及即将落在array中的数量(na) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* resize the table to new computed sizes */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;resize&lt;/span&gt;(L, t, nasize, totaluse - na);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** }=============================================================&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Table *&lt;span style=&#34;color:#c34e00&#34;&gt;luaH_new&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; narray, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nhash) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Table *t = &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_new&lt;/span&gt;(L, Table);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_link&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;obj2gco&lt;/span&gt;(t), LUA_TTABLE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  t-&amp;gt;metatable = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  t-&amp;gt;flags = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_byte&lt;/span&gt;(~0);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 新表，tag&amp;#39;method都不存在 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* temporary values (kept only if some malloc fails) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  t-&amp;gt;array = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  t-&amp;gt;sizearray = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* n的0次幂==1，这里不能简单的t-&amp;gt;node==NULL */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  t-&amp;gt;lsizenode = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  t-&amp;gt;node = &lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(Node *, dummynode);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setarrayvector&lt;/span&gt;(L, t, narray);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setnodevector&lt;/span&gt;(L, t, nhash);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; t;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_free&lt;/span&gt; (lua_State *L, Table *t) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (t-&amp;gt;node != dummynode)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_freearray&lt;/span&gt;(L, t-&amp;gt;node, &lt;span style=&#34;color:#c34e00&#34;&gt;sizenode&lt;/span&gt;(t), Node);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_freearray&lt;/span&gt;(L, t-&amp;gt;array, t-&amp;gt;sizearray, TValue);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_free&lt;/span&gt;(L, t);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; Node *&lt;span style=&#34;color:#c34e00&#34;&gt;getfreepos&lt;/span&gt; (Table *t) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (t-&amp;gt;lastfree-- &amp;gt; t-&amp;gt;node) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gkey&lt;/span&gt;(t-&amp;gt;lastfree)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; t-&amp;gt;lastfree;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; NULL;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* could not find a free place */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** inserts a new key into a hash table; first, check whether key&amp;#39;s main &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** position is free. If not, check whether colliding node is in its main &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** position or not: if it is not, move colliding node to an empty place and &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** put new key in its main position; otherwise (colliding node is in its main &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** position), new key goes to an empty position. &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; TValue *&lt;span style=&#34;color:#c34e00&#34;&gt;newkey&lt;/span&gt; (lua_State *L, Table *t, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Node *mp = &lt;span style=&#34;color:#c34e00&#34;&gt;mainposition&lt;/span&gt;(t, key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gval&lt;/span&gt;(mp)) || mp == dummynode) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Node *othern;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Node *n = &lt;span style=&#34;color:#c34e00&#34;&gt;getfreepos&lt;/span&gt;(t);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* get a free place */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (n == NULL) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* cannot find a free place? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;rehash&lt;/span&gt;(L, t, key);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* grow table */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_set&lt;/span&gt;(L, t, key);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* re-insert key into grown table */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(n != dummynode);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* mp==dummynode时，getfreepos必然返回NULL,不应该走到这里 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    othern = &lt;span style=&#34;color:#c34e00&#34;&gt;mainposition&lt;/span&gt;(t, &lt;span style=&#34;color:#c34e00&#34;&gt;key2tval&lt;/span&gt;(mp));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (othern != mp) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* is colliding node out of its main position? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* yes; move colliding node into free position */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;gnext&lt;/span&gt;(othern) != mp) othern = &lt;span style=&#34;color:#c34e00&#34;&gt;gnext&lt;/span&gt;(othern);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* find previous */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新下链表 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;gnext&lt;/span&gt;(othern) = n;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* redo the chain with `n&amp;#39; in place of `mp&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      *n = *mp;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* copy colliding node into free pos. (mp-&amp;gt;next also goes) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;gnext&lt;/span&gt;(mp) = NULL;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* now `mp&amp;#39; is free */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setnilvalue&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gval&lt;/span&gt;(mp));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* key在下面设置 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* colliding node is in its own main position */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* new node will go into free position */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;gnext&lt;/span&gt;(n) = &lt;span style=&#34;color:#c34e00&#34;&gt;gnext&lt;/span&gt;(mp);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* chain new position */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;gnext&lt;/span&gt;(mp) = n;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      mp = n;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;gkey&lt;/span&gt;(mp)-&amp;gt;value = key-&amp;gt;value; &lt;span style=&#34;color:#c34e00&#34;&gt;gkey&lt;/span&gt;(mp)-&amp;gt;tt = key-&amp;gt;tt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_barriert&lt;/span&gt;(L, t, key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gval&lt;/span&gt;(mp)));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* new的node，其val必然是一个崭新的，必须为nil */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;gval&lt;/span&gt;(mp);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** search function for integers&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *&lt;span style=&#34;color:#c34e00&#34;&gt;luaH_getnum&lt;/span&gt; (Table *t, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* (1 &amp;lt;= key &amp;amp;&amp;amp; key &amp;lt;= t-&amp;gt;sizearray) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 如果key为负数，按照C的int-&amp;gt;uint规则，转换的结果将是一个巨大的数，故而下面判断为false */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt;, key-1) &amp;lt; &lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt;, t-&amp;gt;sizearray))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &amp;amp;t-&amp;gt;array[key-1];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lua_Number nk = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_num&lt;/span&gt;(key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Node *n = &lt;span style=&#34;color:#c34e00&#34;&gt;hashnum&lt;/span&gt;(t, nk);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* check whether `key&amp;#39; is somewhere in the chain */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 由于Value是union,故而可能n=nk但！！！！！ n对应的value的type和nk.对应的value不相等的情况&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;   ** 所以这里必须要有个ttisnumber的判断 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;   */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnumber&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gkey&lt;/span&gt;(n)) &amp;amp;&amp;amp; &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numeq&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gkey&lt;/span&gt;(n)), nk))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;gval&lt;/span&gt;(n);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* that&amp;#39;s it */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 如果key已存在于tbl，则必然在mp&amp;#39;link上，故而这里可以遍历列表来查找，下同 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &#x9;n = &lt;span style=&#34;color:#c34e00&#34;&gt;gnext&lt;/span&gt;(n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; luaO_nilobject;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** search function for strings&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *&lt;span style=&#34;color:#c34e00&#34;&gt;luaH_getstr&lt;/span&gt; (Table *t, TString *key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Node *n = &lt;span style=&#34;color:#c34e00&#34;&gt;hashstr&lt;/span&gt;(t, key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* check whether `key&amp;#39; is somewhere in the chain */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里ttisstring(gkey(n))的判断排除掉已经被gc标记为deadkey的key,和上面的value相等但type不相等的情况&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  &#x9;** 如果运行了tbl[key]=nil，再到调用本函数之前，gc还没来得及将其node标记为deadkey,且还没调用resize&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  &#x9;** 则是复用该node&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  &#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisstring&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gkey&lt;/span&gt;(n)) &amp;amp;&amp;amp; &lt;span style=&#34;color:#c34e00&#34;&gt;rawtsvalue&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gkey&lt;/span&gt;(n)) == key)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;gval&lt;/span&gt;(n);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* that&amp;#39;s it */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;n = &lt;span style=&#34;color:#c34e00&#34;&gt;gnext&lt;/span&gt;(n);&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; luaO_nilobject;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** main search function&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *&lt;span style=&#34;color:#c34e00&#34;&gt;luaH_get&lt;/span&gt; (Table *t, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttype&lt;/span&gt;(key)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TNIL: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; luaO_nilobject;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TSTRING: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_getstr&lt;/span&gt;(t, &lt;span style=&#34;color:#c34e00&#34;&gt;rawtsvalue&lt;/span&gt;(key));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TNUMBER: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; k;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      lua_Number n = &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;lua_number2int&lt;/span&gt;(k, n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luai_numeq&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;cast_num&lt;/span&gt;(k), &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(key))) &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* index is int? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_getnum&lt;/span&gt;(t, k);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* use specialized version */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else go through */&lt;/span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 所以这里没有break,看懂了吗？ 非int的，走到default分支去了 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Node *n = &lt;span style=&#34;color:#c34e00&#34;&gt;mainposition&lt;/span&gt;(t, key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* check whether `key&amp;#39; is somewhere in the chain */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luaO_rawequalObj&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;key2tval&lt;/span&gt;(n), key))&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里必须rawequlObj进行type==type的判断，以忽略掉deadKey的Node,以及union带来的影响 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;gval&lt;/span&gt;(n);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* that&amp;#39;s it */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; n = &lt;span style=&#34;color:#c34e00&#34;&gt;gnext&lt;/span&gt;(n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; luaO_nilobject;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TValue *&lt;span style=&#34;color:#c34e00&#34;&gt;luaH_set&lt;/span&gt; (lua_State *L, Table *t, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *p = &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_get&lt;/span&gt;(t, key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  t-&amp;gt;flags = 0;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 如果本tbl当作meta，那么set后可能其tag有更新，这里索性假设所有的tag&amp;#39;methods都更新了，假设所有的tag&amp;#39;methaod都有了 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (p != luaO_nilobject)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(TValue *, p);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(key)) &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_runerror&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;table index is nil&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnumber&lt;/span&gt;(key) &amp;amp;&amp;amp; &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numisnan&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(key)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_runerror&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;table index is NaN&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;newkey&lt;/span&gt;(L, t, key);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 构造新的slot */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TValue *&lt;span style=&#34;color:#c34e00&#34;&gt;luaH_setnum&lt;/span&gt; (lua_State *L, Table *t, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *p = &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_getnum&lt;/span&gt;(t, key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (p != luaO_nilobject)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(TValue *, p);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TValue k;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(&amp;amp;k, &lt;span style=&#34;color:#c34e00&#34;&gt;cast_num&lt;/span&gt;(key));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;newkey&lt;/span&gt;(L, t, &amp;amp;k);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TValue *&lt;span style=&#34;color:#c34e00&#34;&gt;luaH_setstr&lt;/span&gt; (lua_State *L, Table *t, TString *key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *p = &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_getstr&lt;/span&gt;(t, key);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* key现存，则直接返回node&amp;#39;key */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (p != luaO_nilobject)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(TValue *, p);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TValue k;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setsvalue&lt;/span&gt;(L, &amp;amp;k, key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;newkey&lt;/span&gt;(L, t, &amp;amp;k);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 没有则构造一个new&amp;#39;node出来，其中node.key=key,并返回其node.val */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;unbound_search&lt;/span&gt; (Table *t, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; j) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i = j;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* i is zero or a present index */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  j++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* find `i&amp;#39; and `j&amp;#39; such that i is present and j is not */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaH_getnum&lt;/span&gt;(t, j))) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    i = j;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    j *= 2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (j &amp;gt; &lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt;, MAX_INT)) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* overflow? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* table was built with bad purposes: resort to linear search */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      i = 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaH_getnum&lt;/span&gt;(t, i))) i++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; i - 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* now do a binary search between them */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (j - i &amp;gt; 1) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; m = (i+j)/2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaH_getnum&lt;/span&gt;(t, m))) j = m;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; i = m;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Try to find a boundary in table `t&amp;#39;. A `boundary&amp;#39; is an integer index&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** such that t[i] is non-nil and t[i+1] is nil (and 0 if t[1] is nil).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_getn&lt;/span&gt; (Table *t) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; j = t-&amp;gt;sizearray;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (j &amp;gt; 0 &amp;amp;&amp;amp; &lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&amp;amp;t-&amp;gt;array[j - 1])) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* there is a boundary in the array part: (binary) search for it */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (j - i &amp;gt; 1) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; m = (i+j)/2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&amp;amp;t-&amp;gt;array[m - 1])) j = m;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; i = m;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else must find a boundary in hash part */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (t-&amp;gt;node == dummynode)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* hash part is empty? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; j;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* that is easy... */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;unbound_search&lt;/span&gt;(t, j);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#if defined(LUA_DEBUG)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Node *&lt;span style=&#34;color:#c34e00&#34;&gt;luaH_mainposition&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; Table *t, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;mainposition&lt;/span&gt;(t, key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_isdummy&lt;/span&gt; (Node *n) { &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; n == dummynode; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>too many open files</title>
      <link>http://shanks.link/blog/2021/05/19/too-many-open-files/</link>
      <pubDate>Wed, 19 May 2021 15:05:20 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/05/19/too-many-open-files/</guid>
      <description>&lt;h2 id=&#34;原因&#34;&gt;原因&lt;/h2&gt;&#xA;&lt;p&gt;​&#x9;程序打开的文件/socket 数量超过系统设定值。&lt;/p&gt;&#xA;&lt;h2 id=&#34;查看程序已打开的fd&#34;&gt;查看程序已打开的fd&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ls -l /proc/pid/fd     详情&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lsof -p pid | wc -l    数量&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lsof -n | awk &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;{print $2}&amp;#39;&lt;/span&gt; | sort | uniq -c | sort -nr | more &#x9;&#x9;&#x9;输出fd数量和进程ID&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;限制级别&#34;&gt;限制级别&lt;/h2&gt;&#xA;&lt;p&gt;最大文件描述符数的限制可以分为3种：&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Complete Syntax of Lua51</title>
      <link>http://shanks.link/blog/2021/05/19/the-complete-syntax-of-lua51/</link>
      <pubDate>Wed, 19 May 2021 12:27:54 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/05/19/the-complete-syntax-of-lua51/</guid>
      <description>&lt;p&gt;Here is the complete syntax of Lua in extended BNF. (It does not describe operator precedences.)&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bnf&#34; data-lang=&#34;bnf&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;chunk ::= {stat [`;´]} [laststat [`;´]]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;block ::= chunk&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;stat ::=  varlist `=´ explist | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9; functioncall | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9; do block end | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9; while exp do block end | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9; repeat block until exp | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9; if exp then block {elseif exp then block} [else block] end | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9; for Name `=´ exp `,´ exp [`,´ exp] do block end | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9; for namelist in explist do block end | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9; function funcname funcbody | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9; local function Name funcbody | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9; local namelist [`=´ explist] &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;laststat ::= return [explist] | break&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;funcname ::= Name {`.´ Name} [`:´ Name]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;varlist ::= var {`,´ var}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;var ::=  Name | prefixexp `[´ exp `]´ | prefixexp `.´ Name &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;namelist ::= Name {`,´ Name}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;explist ::= {exp `,´} exp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;exp ::=  nil | false | true | Number | String | `...´ | function | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9; prefixexp | tableconstructor | exp binop exp | unop exp &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;prefixexp ::= var | functioncall | `(´ exp `)´&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;functioncall ::=  prefixexp args | prefixexp `:´ Name args &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;args ::=  `(´ [explist] `)´ | tableconstructor | String &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;function ::= function funcbody&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;funcbody ::= `(´ [parlist] `)´ block end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;parlist ::= namelist [`,´ `...´] | `...´&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;tableconstructor ::= `{´ [fieldlist] `}´&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;fieldlist ::= field {fieldsep field} [fieldsep]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;field ::= `[´ exp `]´ `=´ exp | Name `=´ exp | exp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;fieldsep ::= `,´ | `;´&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;binop ::= `+´ | `-´ | `*´ | `/´ | `^´ | `%´ | `..´ | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9; `&amp;lt;´ | `&amp;lt;=´ | `&amp;gt;´ | `&amp;gt;=´ | `==´ | `~=´ | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9; and | or&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;unop ::= `-´ | not | `#´&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>A No-Frills Introduction to Lua 5.1 VM Instructions</title>
      <link>http://shanks.link/blog/2021/05/19/a-no-frills-introduction-to-lua-5.1-vm-instructions/</link>
      <pubDate>Wed, 19 May 2021 11:58:46 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/05/19/a-no-frills-introduction-to-lua-5.1-vm-instructions/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h2 id=&#34;a-no-frills-introduction-to-lua-51-vm-instructions&#34;&gt;A No-Frills Introduction to Lua 5.1 VM Instructions&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;by Kein-Hong Man, esq. &amp;lt;khman AT users.sf.net&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Version 0.1, 20060313&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;&#x9;为了检索指令描述，本人额外做了添加特定的前缀OP_处理，eg: MOVE&amp;mdash;-&amp;gt;OP_MOVE，以便在阅读lvm.c中的源码时能快速在本文档中找到相关注解。&lt;/p&gt;</description>
    </item>
    <item>
      <title>lua源码阅读之旅-具体排期</title>
      <link>http://shanks.link/blog/2021/05/17/lua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E6%97%85-%E5%85%B7%E4%BD%93%E6%8E%92%E6%9C%9F/</link>
      <pubDate>Mon, 17 May 2021 12:39:24 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/05/17/lua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E6%97%85-%E5%85%B7%E4%BD%93%E6%8E%92%E6%9C%9F/</guid>
      <description>&lt;p&gt;​&#x9;&#x9;开篇规划了整理思路，跨度比较大，不利于把控进度，这篇做一个以week为单位的周期安排，以便有效的利用时间和及时复盘自己的学习计划。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;资料&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;5.10-16 《A No-Frills Introduction to Lua 5.1 VM Instructions.pdf》&lt;/li&gt;&#xA;&lt;li&gt;5.17-23《计算机程序的构造和解释》&lt;/li&gt;&#xA;&lt;li&gt;5.24-30 本网站上面的lua相关文章&lt;/li&gt;&#xA;&lt;/ol&gt;&lt;/blockquote&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;源码&lt;/p&gt;</description>
    </item>
    <item>
      <title>github 慢 github.io 访问不了</title>
      <link>http://shanks.link/blog/2021/05/13/github-%E6%85%A2-github.io-%E8%AE%BF%E9%97%AE%E4%B8%8D%E4%BA%86/</link>
      <pubDate>Thu, 13 May 2021 19:04:18 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/05/13/github-%E6%85%A2-github.io-%E8%AE%BF%E9%97%AE%E4%B8%8D%E4%BA%86/</guid>
      <description>&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;使用国内镜像&lt;/p&gt;&#xA;&lt;p&gt;​    目前已知Github国内镜像网站有 &lt;a href=&#34;github.com.cnpmjs.org&#34;&gt;github.com.cnpmjs.org&lt;/a&gt; 和 &lt;a href=&#34;git.sdut.me/&#34;&gt;git.sdut.me/&lt;/a&gt; 。速度根据各地情况而定，在clone某个项目的时候将 &lt;code&gt;github.com&lt;/code&gt; 替换为 &lt;code&gt;github.com.cnpmjs.org&lt;/code&gt; 即可。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;使用国外的dns查询最新的github的ip地址后修改hosts&lt;/p&gt;</description>
    </item>
    <item>
      <title>lua源码阅读之旅-再次启航</title>
      <link>http://shanks.link/blog/2021/05/10/lua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E6%97%85-%E5%86%8D%E6%AC%A1%E5%90%AF%E8%88%AA/</link>
      <pubDate>Mon, 10 May 2021 15:45:22 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/05/10/lua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E6%97%85-%E5%86%8D%E6%AC%A1%E5%90%AF%E8%88%AA/</guid>
      <description>&lt;p&gt;​&#x9;&#x9;第一次阅读lua源码从2019元旦，哪一年阅读计划失败，去年又心血来潮，尝试阅读，结果又是失败，今年再次重拾这个计划。&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;&#x9;作为本系列文章的开篇，这里回顾下上两次阅读的经历和本次的一些想法，所谓前事不忘后事之师。&lt;/p&gt;</description>
    </item>
    <item>
      <title>漫画 | 一台Linux服务器最多能支撑多少个TCP连接？</title>
      <link>http://shanks.link/blog/2021/05/06/%E6%BC%AB%E7%94%BB-%E4%B8%80%E5%8F%B0linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%80%E5%A4%9A%E8%83%BD%E6%94%AF%E6%92%91%E5%A4%9A%E5%B0%91%E4%B8%AAtcp%E8%BF%9E%E6%8E%A5/</link>
      <pubDate>Thu, 06 May 2021 18:03:28 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/05/06/%E6%BC%AB%E7%94%BB-%E4%B8%80%E5%8F%B0linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%80%E5%A4%9A%E8%83%BD%E6%94%AF%E6%92%91%E5%A4%9A%E5%B0%91%E4%B8%AAtcp%E8%BF%9E%E6%8E%A5/</guid>
      <description>&lt;h2 id=&#34;漫画--一台linux服务器最多能支撑多少个tcp连接&#34;&gt;漫画 | 一台Linux服务器最多能支撑多少个TCP连接？&lt;/h2&gt;&#xA;&lt;p&gt;编者荐语：&lt;/p&gt;&#xA;&lt;p&gt;这篇文章作者用通俗易懂的语言，图文并茂的为大家深入讲解了一台Linux服务器究竟能支撑多少个TCP，相信绝大多数读者对这个概念都或多或少有一定了解，但这篇文章会深入细节的每一个本质，非常值得大家一读。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go内存分配器的核心思想</title>
      <link>http://shanks.link/blog/2021/05/06/go%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8%E7%9A%84%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3/</link>
      <pubDate>Thu, 06 May 2021 17:45:50 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/05/06/go%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8%E7%9A%84%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3/</guid>
      <description>&lt;h3 id=&#34;1内存分配器的核心思想&#34;&gt;1、内存分配器的核心思想&lt;/h3&gt;&#xA;&lt;p&gt;Go 的内存分配器核心思想是将内存使用多级管理，降低锁的粒度。每个线程都有自己的本地内存，使用时先从线程本地的内存池进行分配，当内存池不足时，才会从全局内存池中进行申请。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go工具之generate</title>
      <link>http://shanks.link/blog/2021/05/06/go%E5%B7%A5%E5%85%B7%E4%B9%8Bgenerate/</link>
      <pubDate>Thu, 06 May 2021 17:13:09 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/05/06/go%E5%B7%A5%E5%85%B7%E4%B9%8Bgenerate/</guid>
      <description>&lt;p&gt;Go语言提供了一系列强大的工具，灵活使用这些工具，能够让我们的项目开发更加容易，工具集包含如下。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bug         start a bug report&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;build       compile packages and dependencies&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clean       remove object files and cached files&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doc         show documentation &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; package or symbol&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;env         print Go environment information&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fix         update packages to use new APIs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fmt         gofmt (reformat) package sources&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;generate    generate Go files by processing source&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get         add dependencies to current module and install them&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;install     compile and install packages and dependencies&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;list        list packages or modules&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mod         module maintenance&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;run         compile and run Go program&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test        test packages&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;tool&lt;/span&gt;        run specified go &lt;span style=&#34;color:#00f&#34;&gt;tool&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;version     print Go version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vet         report likely mistakes in packages&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;工具的源码位于$GOPATH/src/cmd/internal，本篇文章主要讨论Go工具generate。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go是如何设计Map的</title>
      <link>http://shanks.link/blog/2021/05/06/go%E6%98%AF%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1map%E7%9A%84/</link>
      <pubDate>Thu, 06 May 2021 15:36:51 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/05/06/go%E6%98%AF%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1map%E7%9A%84/</guid>
      <description>&lt;h2 id=&#34;由于本文篇幅较长故将目录整理如下&#34;&gt;由于本文篇幅较长，故将目录整理如下&lt;/h2&gt;&#xA;&lt;p&gt;**&#xA;**&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/Go%E4%B9%8BMap%E7%9A%84%E8%AE%BE%E8%AE%A1/2.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;什么是Map&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/Go%E4%B9%8BMap%E7%9A%84%E8%AE%BE%E8%AE%A1/1.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;维基百科的定义&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;em&gt;In computer science, an associative array, map, symbol table, or dictionary is an abstract data type composed of a collection of (key, value) pairs, such that each possible key appears at most once in the collection.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;说明：在计算机科学中，包含键值对（key-value）集合的抽象数据结构（关联数组、符号表或字典），其每个可能的键在该集合中最多出现一次，这样的数据结构就是一种Map。&lt;/p&gt;</description>
    </item>
    <item>
      <title>详解内联优化</title>
      <link>http://shanks.link/blog/2021/04/30/%E8%AF%A6%E8%A7%A3%E5%86%85%E8%81%94%E4%BC%98%E5%8C%96/</link>
      <pubDate>Fri, 30 Apr 2021 17:54:15 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/30/%E8%AF%A6%E8%A7%A3%E5%86%85%E8%81%94%E4%BC%98%E5%8C%96/</guid>
      <description>&lt;h2 id=&#34;详解内联优化&#34;&gt;详解内联优化&lt;/h2&gt;&#xA;&lt;p&gt;为了保证程序的执行高效与安全，现代编译器并不会将程序员的代码直接翻译成相应地机器码，它需要做一系列的检查与优化。Go编译器默认做了很多相关工作，例如&lt;strong&gt;未使用的引用包检查、未使用的声明变量检查、有效的括号检查、逃逸分析、内联优化、删除无用代码&lt;/strong&gt;等。本文重点讨论内联优化相关内容。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go精妙的互斥锁设计</title>
      <link>http://shanks.link/blog/2021/04/30/go%E7%B2%BE%E5%A6%99%E7%9A%84%E4%BA%92%E6%96%A5%E9%94%81%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Fri, 30 Apr 2021 16:46:29 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/30/go%E7%B2%BE%E5%A6%99%E7%9A%84%E4%BA%92%E6%96%A5%E9%94%81%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;p&gt;*&lt;strong&gt;Some people, when confronted with a problem, think, “I know, I’ll use threads,” and then two they hav erpoblesms.*&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;1. 竞争条件&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;多线程程序在多核CPU机器上访问共享资源时，难免会遇到问题。我们可以来看一个例子&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go中看似简单的WaitGroup源码设计，竟然暗含这么多知识？</title>
      <link>http://shanks.link/blog/2021/04/30/go%E4%B8%AD%E7%9C%8B%E4%BC%BC%E7%AE%80%E5%8D%95%E7%9A%84waitgroup%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E7%AB%9F%E7%84%B6%E6%9A%97%E5%90%AB%E8%BF%99%E4%B9%88%E5%A4%9A%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Fri, 30 Apr 2021 16:30:32 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/30/go%E4%B8%AD%E7%9C%8B%E4%BC%BC%E7%AE%80%E5%8D%95%E7%9A%84waitgroup%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E7%AB%9F%E7%84%B6%E6%9A%97%E5%90%AB%E8%BF%99%E4%B9%88%E5%A4%9A%E7%9F%A5%E8%AF%86/</guid>
      <description>&lt;h2 id=&#34;go中看似简单的waitgroup源码设计竟然暗含这么多知识&#34;&gt;Go中看似简单的WaitGroup源码设计，竟然暗含这么多知识？&lt;/h2&gt;&#xA;&lt;p&gt;Go语言提供的协程goroutine可以让我们很容易地写出多线程程序，但是，如何让这些并发执行的goroutine得到有效地控制，这是我们需要探讨的问题。正如小菜刀在&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzkyMzIyNjIxMQ==&amp;amp;mid=2247484551&amp;amp;idx=1&amp;amp;sn=8e9e48659b06aa510ef935183e0e2d98&amp;amp;chksm=c1e91d8bf69e949d3e8de373d341a9c880d07076804f491f60acba691071dd8a542df643c20c&amp;amp;scene=21#wechat_redirect&#34;&gt;《Golang并发控制简述》&lt;/a&gt;中所述，Go标准库为我们提供的同步原语中，锁与原子操作注重控制goroutine之间的数据安全，WaitGroup、channel与Context控制的是它们的并发行为。关于&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzkyMzIyNjIxMQ==&amp;amp;mid=2247484581&amp;amp;idx=1&amp;amp;sn=90aa7d00490fa9e3dd3f8d061e927bba&amp;amp;chksm=c1e91da9f69e94bfb46c76d9d8b587a837425fd7fcae3773ed5b573d5e856373210ac9011e45&amp;amp;scene=21#wechat_redirect&#34;&gt;锁&lt;/a&gt;、&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzkyMzIyNjIxMQ==&amp;amp;mid=2247484580&amp;amp;idx=1&amp;amp;sn=08c7add8b5cc005bc796ab807168293a&amp;amp;chksm=c1e91da8f69e94be310035348b358e0319a99a1fba0e680f779e860676d355f4780f436b9181&amp;amp;scene=21#wechat_redirect&#34;&gt;原子操作&lt;/a&gt;、&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzkyMzIyNjIxMQ==&amp;amp;mid=2247484573&amp;amp;idx=1&amp;amp;sn=805f9cd855fc55b53ddb8500a93a401f&amp;amp;chksm=c1e91d91f69e94872a0525a35c36ace458ce907796b4bdc91944e87594e7a18c1075a2225a57&amp;amp;scene=21#wechat_redirect&#34;&gt;channel&lt;/a&gt; 的实现原理小菜刀均有详细地解析过。因此本文，我们将重点放在WaitGroup上。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何有效地测试Go代码</title>
      <link>http://shanks.link/blog/2021/04/30/%E5%A6%82%E4%BD%95%E6%9C%89%E6%95%88%E5%9C%B0%E6%B5%8B%E8%AF%95go%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Fri, 30 Apr 2021 16:21:08 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/30/%E5%A6%82%E4%BD%95%E6%9C%89%E6%95%88%E5%9C%B0%E6%B5%8B%E8%AF%95go%E4%BB%A3%E7%A0%81/</guid>
      <description>&lt;h2 id=&#34;如何有效地测试go代码&#34;&gt;如何有效地测试Go代码&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;单元测试&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;如果把开发程序比作盖房子，那么我们必须确保所有的用料都是合格的，否则盖起来的房子就会存在问题。对于程序而言，我们可以将盖房子的砖头、钢筋、水泥等当做一个个功能单元，如果每个单元是合格的，我们将有信心认为程序是健壮的。单元测试（Unit Test,UT）就是检验功能单元是否合格的工具。&lt;/p&gt;</description>
    </item>
    <item>
      <title>同步原理的基石</title>
      <link>http://shanks.link/blog/2021/04/30/%E5%90%8C%E6%AD%A5%E5%8E%9F%E7%90%86%E7%9A%84%E5%9F%BA%E7%9F%B3/</link>
      <pubDate>Fri, 30 Apr 2021 15:56:17 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/30/%E5%90%8C%E6%AD%A5%E5%8E%9F%E7%90%86%E7%9A%84%E5%9F%BA%E7%9F%B3/</guid>
      <description>&lt;h2 id=&#34;同步原语的基石&#34;&gt;同步原语的基石&lt;/h2&gt;&#xA;&lt;p&gt;Go是一门以并发编程见长的语言，它提供了一系列的同步原语方便开发者使用，例如&lt;code&gt;sync&lt;/code&gt;包下的&lt;code&gt;Mutex&lt;/code&gt;、&lt;code&gt;RWMutex&lt;/code&gt;、&lt;code&gt;WaitGroup&lt;/code&gt;、&lt;code&gt;Once&lt;/code&gt;、&lt;code&gt;Cond&lt;/code&gt;，以及抽象层级更高的&lt;code&gt;Channel&lt;/code&gt;。但是，它们的实现基石是原子操作。需要记住的是：&lt;strong&gt;软件原子操作离不开硬件指令的支持&lt;/strong&gt;。本文拟通过探讨原子操作——**比较并交换(compare and swap, CAS)**的实现，来理解Go是如何借助硬件指令来实现这一过程的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang append扩容机制</title>
      <link>http://shanks.link/blog/2021/04/30/golang-append%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Fri, 30 Apr 2021 11:37:56 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/30/golang-append%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;h2 id=&#34;append扩容机制&#34;&gt;append扩容机制&lt;/h2&gt;&#xA;&lt;p&gt;在&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzIwNTA4MDAwMQ==&amp;amp;mid=2247484382&amp;amp;idx=1&amp;amp;sn=5140908b6ab1bf176cc4e7fa9b167de9&amp;amp;chksm=97371770a0409e6633202e6bbc1193cdfd8aa57dbdf7bb2aa493a2a6ab55ff464c8eadc0068a&amp;amp;scene=21#wechat_redirect&#34;&gt;《切片传递的隐藏危机》&lt;/a&gt;一文，小菜刀有简单地提及到切片扩容的问题。在读者讨论群，有人举了以下例子，并想得到一个合理的回答。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1package main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3&lt;span style=&#34;color:#00f&#34;&gt;func&lt;/span&gt; main() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4    s := []int{1,2}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5    s = append(s, 3,4,5)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;6    println(cap(s))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;7}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;8&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;9// output: 6&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为什么结果不是5，不是8，而是6呢？由于小菜刀在该文中关于扩容的描述不够准确，让读者产生了疑惑。因此本文想借此机会细致分析一下&lt;code&gt;append&lt;/code&gt;函数及其背后的扩容机制。&lt;/p&gt;</description>
    </item>
    <item>
      <title>浅谈逃逸分析</title>
      <link>http://shanks.link/blog/2021/04/30/%E6%B5%85%E8%B0%88%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 30 Apr 2021 11:31:37 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/30/%E6%B5%85%E8%B0%88%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h2 id=&#34;详解逃逸分析&#34;&gt;详解逃逸分析&lt;/h2&gt;&#xA;&lt;p&gt;Go是一门带有垃圾回收的现代语言，它抛弃了传统C/C++的开发者需要手动管理内存的方式，实现了内存的主动申请和释放的管理。Go的垃圾回收，让堆和栈的概念对程序员保持透明，它增加的逃逸分析与GC，使得程序员的双手真正地得到了解放，给了开发者更多的精力去关注软件设计本身。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Once函数单次调用</title>
      <link>http://shanks.link/blog/2021/04/29/once%E5%87%BD%E6%95%B0%E5%8D%95%E6%AC%A1%E8%B0%83%E7%94%A8/</link>
      <pubDate>Thu, 29 Apr 2021 17:59:10 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/29/once%E5%87%BD%E6%95%B0%E5%8D%95%E6%AC%A1%E8%B0%83%E7%94%A8/</guid>
      <description>&lt;p&gt;&lt;strong&gt;认识单例&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;超超：您好，面试官~&lt;/p&gt;&#xA;&lt;p&gt;面试官：你好，你平时开发是用 windows 还是 linux 居多？&lt;/p&gt;&#xA;&lt;p&gt;超超：￣□￣｜｜我平时都是用windows开发的。&lt;/p&gt;&#xA;&lt;p&gt;面试官：那你知道 windows 的资源管理器只能单开，但是cmd命令行可以开很多个，有想过这是为什么吗？&lt;/p&gt;</description>
    </item>
    <item>
      <title>面试题型系列:滑动窗口技巧</title>
      <link>http://shanks.link/blog/2021/04/29/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%9E%8B%E7%B3%BB%E5%88%97%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Thu, 29 Apr 2021 17:52:09 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/29/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%9E%8B%E7%B3%BB%E5%88%97%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%8A%80%E5%B7%A7/</guid>
      <description>&lt;h2 id=&#34;面试题型系列滑动窗口技巧&#34;&gt;面试题型系列：滑动窗口技巧&lt;/h2&gt;&#xA;&lt;p&gt;本文是公众号读者上山打老虎的第二篇原创投稿，主要内容是讲解算法技巧之滑动窗口。上山兄一直保持着刷题的习惯，并形成了自己的一套做题心得，当然他也是无情的offer收割机。同时上山兄会持续给本号投稿算法类文章，代码示例均采用Go语言，希望该算法系列文章有助读者更好地备战面试。&lt;/p&gt;</description>
    </item>
    <item>
      <title>切片传递的隐藏危机</title>
      <link>http://shanks.link/blog/2021/04/29/%E5%88%87%E7%89%87%E4%BC%A0%E9%80%92%E7%9A%84%E9%9A%90%E8%97%8F%E5%8D%B1%E6%9C%BA/</link>
      <pubDate>Thu, 29 Apr 2021 11:47:34 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/29/%E5%88%87%E7%89%87%E4%BC%A0%E9%80%92%E7%9A%84%E9%9A%90%E8%97%8F%E5%8D%B1%E6%9C%BA/</guid>
      <description>&lt;h2 id=&#34;切片传递的隐藏危机&#34;&gt;切片传递的隐藏危机&lt;/h2&gt;&#xA;&lt;p&gt;在Go的源码库或者其他开源项目中，会发现有些函数在需要用到切片入参时，它采用是指向切片类型的指针，而非切片类型。这里未免会产生疑问：&lt;strong&gt;切片底层不就是指针指向底层数组数据吗，为何不直接传递切片，两者有什么区别&lt;/strong&gt;？&lt;/p&gt;</description>
    </item>
    <item>
      <title>一文读懂channel设计</title>
      <link>http://shanks.link/blog/2021/04/29/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82channel%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Thu, 29 Apr 2021 11:30:12 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/29/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82channel%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;p&gt;在Go中，要理解channel，首先需要认识goroutine。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/Go%E4%B9%8BChannel%E8%AE%BE%E8%AE%A1/1.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;为什么会有goroutine&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;现代操作系统中为我们提供了三种基本的构造并发程序的方法：多进程、I/O多路复用和多线程。其中最简单的构造方式当属多进程，但是多进程的并发程序，由于对进程控制和进程间通信开销巨大，这样的并发方式往往会很慢。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go函数调用惯例</title>
      <link>http://shanks.link/blog/2021/04/28/go%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%83%AF%E4%BE%8B/</link>
      <pubDate>Wed, 28 Apr 2021 11:59:41 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/28/go%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%83%AF%E4%BE%8B/</guid>
      <description>&lt;h2 id=&#34;go函数调用惯例&#34;&gt;Go函数调用惯例&lt;/h2&gt;&#xA;&lt;p&gt;本文旨在探讨Go函数中的一个问题：**为什么Go函数能支持多参数返回，而C/C++、java不行？**这其实牵涉到了一个叫做函数调用惯例的问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CPU缓存体系对程序的影响</title>
      <link>http://shanks.link/blog/2021/04/28/cpu%E7%BC%93%E5%AD%98%E4%BD%93%E7%B3%BB%E5%AF%B9%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%BD%B1%E5%93%8D/</link>
      <pubDate>Wed, 28 Apr 2021 11:36:26 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/28/cpu%E7%BC%93%E5%AD%98%E4%BD%93%E7%B3%BB%E5%AF%B9%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%BD%B1%E5%93%8D/</guid>
      <description>&lt;h2 id=&#34;cpu缓存体系对go程序的影响&#34;&gt;CPU缓存体系对Go程序的影响&lt;/h2&gt;&#xA;&lt;p&gt;小菜刀最近在medium上阅读了一篇高赞文章《Go and CPU Caches》，其地址为&lt;em&gt;&lt;a href=&#34;https://teivah.medium.com/go-and-cpu-caches-af5d32cc5592&#34;&gt;https://teivah.medium.com/go-and-cpu-caches-af5d32cc5592&lt;/a&gt;&lt;/em&gt;，感觉收获颇多。小菜刀在该文章的基础上做了些修改和扩展，整理出来分享给读者朋友们。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;CPU缓存体系&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;现代计算机处理器架构多数采用对称多处理系统（Symmetric multiprocessing system，SMS）。在这个系统中，每一个核心都当成是独立的处理器，多处理器被连接到同一个共享的主存上，并由单一操作系统来控制。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go的string与[]byte转换原理</title>
      <link>http://shanks.link/blog/2021/04/27/go%E7%9A%84string%E4%B8%8Ebyte%E8%BD%AC%E6%8D%A2%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 27 Apr 2021 15:13:15 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/27/go%E7%9A%84string%E4%B8%8Ebyte%E8%BD%AC%E6%8D%A2%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;p&gt;string类型和[]byte类型是我们编程时最常使用到的数据结构。本文将探讨两者之间的转换方式，通过分析它们之间的内在联系来拨开迷雾。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;两种转换方式&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go工具之vet静态诊断器</title>
      <link>http://shanks.link/blog/2021/04/27/go%E5%B7%A5%E5%85%B7%E4%B9%8Bvet%E9%9D%99%E6%80%81%E8%AF%8A%E6%96%AD%E5%99%A8/</link>
      <pubDate>Tue, 27 Apr 2021 15:06:32 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/27/go%E5%B7%A5%E5%85%B7%E4%B9%8Bvet%E9%9D%99%E6%80%81%E8%AF%8A%E6%96%AD%E5%99%A8/</guid>
      <description>&lt;h2 id=&#34;go工具之vet静态诊断器&#34;&gt;Go工具之vet——静态诊断器&lt;/h2&gt;&#xA;&lt;p&gt;go的vet工具是go代码静态诊断器，可以用以检查go项目中可通过编译但仍可能存在错误的代码，例如无法访问的代码、错误的锁使用、不必要的赋值、布尔运算错误等。&lt;/p&gt;</description>
    </item>
    <item>
      <title>不能忽略GoRoutinue的启动时间</title>
      <link>http://shanks.link/blog/2021/04/27/%E4%B8%8D%E8%83%BD%E5%BF%BD%E7%95%A5goroutinue%E7%9A%84%E5%90%AF%E5%8A%A8%E6%97%B6%E9%97%B4/</link>
      <pubDate>Tue, 27 Apr 2021 14:48:35 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/27/%E4%B8%8D%E8%83%BD%E5%BF%BD%E7%95%A5goroutinue%E7%9A%84%E5%90%AF%E5%8A%A8%E6%97%B6%E9%97%B4/</guid>
      <description>&lt;h2 id=&#34;不要忽略goroutine的启动时间&#34;&gt;不要忽略goroutine的启动时间&lt;/h2&gt;&#xA;&lt;p&gt;项目中需要将数据推给多个服务器，大致如下&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#00f&#34;&gt;package&lt;/span&gt; main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#00f&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;sync&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#00f&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;mockSendToServer&lt;/span&gt;(url &lt;span style=&#34;color:#00f&#34;&gt;string&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     fmt.&lt;span style=&#34;color:#c34e00&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;server url: %s\n&amp;#34;&lt;/span&gt;, url)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    urls := []&lt;span style=&#34;color:#00f&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;0.0.0.0:5000&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;0.0.0.0:6000&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;0.0.0.0:7000&amp;#34;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wg := sync.WaitGroup{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; _, url := &lt;span style=&#34;color:#00f&#34;&gt;range&lt;/span&gt; urls {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        wg.&lt;span style=&#34;color:#c34e00&#34;&gt;Add&lt;/span&gt;(1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;func&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;defer&lt;/span&gt; wg.&lt;span style=&#34;color:#c34e00&#34;&gt;Done&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;mockSendToServer&lt;/span&gt;(url)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wg.&lt;span style=&#34;color:#c34e00&#34;&gt;Wait&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请读者停来下思考一下，以上代码会得到什么样的输出。&lt;/p&gt;</description>
    </item>
    <item>
      <title>深入理解sync.Once</title>
      <link>http://shanks.link/blog/2021/04/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3sync.once/</link>
      <pubDate>Tue, 27 Apr 2021 11:43:13 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3sync.once/</guid>
      <description>&lt;h2 id=&#34;深入理解synconce&#34;&gt;深入理解sync.Once&lt;/h2&gt;&#xA;&lt;p&gt;sync.Once是让函数方法只被调用执行一次的实现，其最常应用于单例模式之下，例如初始化系统配置、保持数据库唯一连接等。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;sync.Once的单例模式示例&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据库连接池</title>
      <link>http://shanks.link/blog/2021/04/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</link>
      <pubDate>Tue, 27 Apr 2021 11:18:05 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</guid>
      <description>&lt;h2 id=&#34;数据库连接池&#34;&gt;数据库连接池&lt;/h2&gt;&#xA;&lt;p&gt;池（Pool）是指某类资源的容器，它是一种用于提高程序效率和降低系统开销的技术，比如线程池、连接池、内存池、对象池。但它们的核心理念一致：&lt;strong&gt;资源&lt;strong&gt;&lt;strong&gt;复用&lt;/strong&gt;&lt;/strong&gt;。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go no copy 机制</title>
      <link>http://shanks.link/blog/2021/04/27/go-no-copy-%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 27 Apr 2021 11:11:13 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/27/go-no-copy-%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;h2 id=&#34;no-copy机制&#34;&gt;no copy机制&lt;/h2&gt;&#xA;&lt;p&gt;小菜刀读Go源码时，发现一个高频注释语句“&lt;strong&gt;XXX must not be copied after first use&lt;/strong&gt;“。例如sync包下的Pool、Cond、WaitGroup、Mutex、Map和atomoic.Vaule、strings.Builder等，都有该句注释。&lt;/p&gt;</description>
    </item>
    <item>
      <title>万能钥匙中间层</title>
      <link>http://shanks.link/blog/2021/04/26/%E4%B8%87%E8%83%BD%E9%92%A5%E5%8C%99%E4%B8%AD%E9%97%B4%E5%B1%82/</link>
      <pubDate>Mon, 26 Apr 2021 19:13:05 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/26/%E4%B8%87%E8%83%BD%E9%92%A5%E5%8C%99%E4%B8%AD%E9%97%B4%E5%B1%82/</guid>
      <description>&lt;h2 id=&#34;万能钥匙-中间层&#34;&gt;万能钥匙-中间层&lt;/h2&gt;&#xA;&lt;p&gt;最近小菜刀重读《程序员的自我修养》，里面提到过一句名言：&lt;strong&gt;计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;上述名言概括了计算机系统软件体系结构的设计要点，整个体系结构从上到下都是按照严格的层次结构设计的。不仅是计算机系统软件整个体系是这样的，体系里面的每个组件比如操作系统本身，应用程序、软件系统甚至很多硬件结构都是按照这种层次的结构组织和设计的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>信号处理与Go程序的优雅退出</title>
      <link>http://shanks.link/blog/2021/04/26/%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E4%B8%8Ego%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%BC%98%E9%9B%85%E9%80%80%E5%87%BA/</link>
      <pubDate>Mon, 26 Apr 2021 19:00:14 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/26/%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E4%B8%8Ego%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%BC%98%E9%9B%85%E9%80%80%E5%87%BA/</guid>
      <description>&lt;h2 id=&#34;信号处理与go程序的优雅退出&#34;&gt;信号处理与Go程序的优雅退出&lt;/h2&gt;&#xA;&lt;p&gt;学过计算机系统的人，应该知道异常控制流（ECF）。异常控制流发生在计算机系统的各个层次。比如，在硬件层，硬件检测到的事件会触发控制突然转移到异常处理程序。在操作系统层，内核通过上下文切换将控制从一个用户进程转移到另一个用户进程。在应用层，一个进程可以发送信号到另一个进程，而接收者会将控制突然转移到它的一个信号处理程序。&lt;/p&gt;</description>
    </item>
    <item>
      <title>深入理解syncMap</title>
      <link>http://shanks.link/blog/2021/04/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3syncmap/</link>
      <pubDate>Mon, 26 Apr 2021 18:45:00 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3syncmap/</guid>
      <description>&lt;h2 id=&#34;深入理解syncmap&#34;&gt;深入理解sync.Map&lt;/h2&gt;&#xA;&lt;p&gt;golang中内置了map关键字，但是它是非线程安全的。从go 1.9开始，标准库加入了sync.Map，提供用于并发安全的map。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;普通map的并发问题&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>高并发系统之限流技术</title>
      <link>http://shanks.link/blog/2021/04/26/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E4%B9%8B%E9%99%90%E6%B5%81%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Mon, 26 Apr 2021 18:19:51 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/26/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E4%B9%8B%E9%99%90%E6%B5%81%E6%8A%80%E6%9C%AF/</guid>
      <description>&lt;h2 id=&#34;高并发系统之限流技术&#34;&gt;高并发系统之限流技术&lt;/h2&gt;&#xA;&lt;p&gt;在开发高并发系统时，有三把利器用来保护系统：缓存、降级和限流。限流是指通过对并发访问/请求进行限速或者对一个时间内的的请求进行限量来保护系统，一旦达到限制条件则可以拒绝服务。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang开发者学习图鉴</title>
      <link>http://shanks.link/blog/2021/04/26/golang%E5%BC%80%E5%8F%91%E8%80%85%E5%AD%A6%E4%B9%A0%E5%9B%BE%E9%89%B4/</link>
      <pubDate>Mon, 26 Apr 2021 18:08:01 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/26/golang%E5%BC%80%E5%8F%91%E8%80%85%E5%AD%A6%E4%B9%A0%E5%9B%BE%E9%89%B4/</guid>
      <description>&lt;h2 id=&#34;golang开发者学习图鉴&#34;&gt;Golang开发者学习图鉴&lt;/h2&gt;&#xA;&lt;p&gt;想成为一名优秀的Golang开发者，你知道需要掌握哪些技能吗？为了帮助你更好的上🚗，本文为你提供了2020版Go开发者成长路线图。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/Go%E5%AD%A6%E4%B9%A0%E5%9B%BE%E9%89%B4/1.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;1. 先决条件&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go并发控制</title>
      <link>http://shanks.link/blog/2021/04/26/go%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Mon, 26 Apr 2021 17:54:51 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/26/go%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</guid>
      <description>&lt;h2 id=&#34;golang并发控制简述&#34;&gt;Golang并发控制简述&lt;/h2&gt;&#xA;&lt;h3 id=&#34;引言&#34;&gt;&lt;strong&gt;引言&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Golang中通过go关键字就可开启一个goroutine，因此，在Go中可以轻松写出并发代码。但是，如何对这些并发执行的groutines有效地控制？&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go之Sort排序</title>
      <link>http://shanks.link/blog/2021/04/26/go%E4%B9%8Bsort%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Mon, 26 Apr 2021 17:43:34 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/26/go%E4%B9%8Bsort%E6%8E%92%E5%BA%8F/</guid>
      <description>&lt;h2 id=&#34;golang之sort包&#34;&gt;Golang之sort包&lt;/h2&gt;&#xA;&lt;p&gt;Go语言是一门非常简单优雅的语言，其源码更是其风格标杆。看源码，不仅能学习Go的设计哲学，了解如何调用库函数，同时帮助我们写出更优雅的go代码。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go交叉编译</title>
      <link>http://shanks.link/blog/2021/04/26/go%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</link>
      <pubDate>Mon, 26 Apr 2021 17:32:23 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/26/go%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</guid>
      <description>&lt;h2 id=&#34;go交叉编译&#34;&gt;Go交叉编译&lt;/h2&gt;&#xA;&lt;p&gt;交叉编译是指在一个硬件平台生成另一个硬件平台的可执行文件。而Go提供了非常方便的交叉编译方式。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;如何编译&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Go交叉编译，涉及到几个环境变量的设置: GOARCH、GOOS和CGO_ENABLED。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go语言内部包--控制包成员的对外暴露</title>
      <link>http://shanks.link/blog/2021/04/26/go%E8%AF%AD%E8%A8%80%E5%86%85%E9%83%A8%E5%8C%85--%E6%8E%A7%E5%88%B6%E5%8C%85%E6%88%90%E5%91%98%E7%9A%84%E5%AF%B9%E5%A4%96%E6%9A%B4%E9%9C%B2/</link>
      <pubDate>Mon, 26 Apr 2021 11:21:21 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/26/go%E8%AF%AD%E8%A8%80%E5%86%85%E9%83%A8%E5%8C%85--%E6%8E%A7%E5%88%B6%E5%8C%85%E6%88%90%E5%91%98%E7%9A%84%E5%AF%B9%E5%A4%96%E6%9A%B4%E9%9C%B2/</guid>
      <description>&lt;h2 id=&#34;go语言内部包控制包成员的对外暴露&#34;&gt;Go语言内部包&amp;ndash;控制包成员的对外暴露&lt;/h2&gt;&#xA;&lt;p&gt;Go 语言中的软件包推荐按照：&lt;strong&gt;组织名/项目名&lt;/strong&gt; 的形式安排软件包的文件目录结构，一般「项目名」文件目录下还会按照功能、抽象约定、具体实现等维度再划分一些子目录。在 Go 语言里包的导入路径不同则被判定为不同的包，所以同一个软件包项目下的「功能一」包依赖「功能二」包里的成员时，那么成员必须是导出成员才能被「功能一」包引用。但是这样一来，其他项目或者其他组织的代码也就都可以使用这个导出的成员了，&lt;strong&gt;假如包里的一些成员我们只想在指定的包之间共享而不想对外暴露该怎么办呢？&lt;/strong&gt; Go 语言内部包这个特性可以让我们实现这个目标。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何管理自己的时间资产</title>
      <link>http://shanks.link/blog/2021/04/26/%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86%E8%87%AA%E5%B7%B1%E7%9A%84%E6%97%B6%E9%97%B4%E8%B5%84%E4%BA%A7/</link>
      <pubDate>Mon, 26 Apr 2021 17:10:39 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/04/26/%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86%E8%87%AA%E5%B7%B1%E7%9A%84%E6%97%B6%E9%97%B4%E8%B5%84%E4%BA%A7/</guid>
      <description>&lt;p&gt;时间是我们最重要的资产，对时间的使用和管理决定了我们的个人成长。人的注意力是有限的，我们不能将同一份时间投入到不同的事情中，一旦选择花费时间做一些事情，就不得不放弃做其他事情的可能性。如果我们能够静下心来思考应该如何使用自己的最重要资产，一定能获得更大的个人成长和回报。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 面试官：什么是协程，协程和线程的区别和联系？</title>
      <link>http://shanks.link/blog/2021/04/25/go-%E9%9D%A2%E8%AF%95%E5%AE%98%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%8F%E7%A8%8B%E5%8D%8F%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB/</link>
      <pubDate>Sun, 25 Apr 2021 11:17:04 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/25/go-%E9%9D%A2%E8%AF%95%E5%AE%98%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%8F%E7%A8%8B%E5%8D%8F%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB/</guid>
      <description>&lt;p&gt;既要理解线程，还要讲解协程，并且诠释两者间的区别，但是由于提到线程，就必然涉及进程，因此本文将会同时梳理介绍 “进程、协程、协程” 三者的随笔知识，希望能引发大家的一些思考。&lt;/p&gt;</description>
    </item>
    <item>
      <title>从底层到应用，想深入Map这篇文章千万不要错过！</title>
      <link>http://shanks.link/blog/2021/04/20/%E4%BB%8E%E5%BA%95%E5%B1%82%E5%88%B0%E5%BA%94%E7%94%A8%E6%83%B3%E6%B7%B1%E5%85%A5map%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E5%8D%83%E4%B8%87%E4%B8%8D%E8%A6%81%E9%94%99%E8%BF%87/</link>
      <pubDate>Tue, 20 Apr 2021 15:25:11 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/20/%E4%BB%8E%E5%BA%95%E5%B1%82%E5%88%B0%E5%BA%94%E7%94%A8%E6%83%B3%E6%B7%B1%E5%85%A5map%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E5%8D%83%E4%B8%87%E4%B8%8D%E8%A6%81%E9%94%99%E8%BF%87/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/nZWGvE8CMRg9rX6m0GUYSQ&#34;&gt;转载自上山打老虎的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;超超经过了一番磨难通过了面试官单例的灵魂拷问，面试官貌似想通过一道场景应用题来考验超超对Golang的容器是否足够熟悉。下面来看看超超是如何解答的吧！&lt;/p&gt;</description>
    </item>
    <item>
      <title>嗯，你觉得 Go 在什么时候会抢占 P？</title>
      <link>http://shanks.link/blog/2021/04/19/%E5%97%AF%E4%BD%A0%E8%A7%89%E5%BE%97-go-%E5%9C%A8%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%8A%A2%E5%8D%A0-p/</link>
      <pubDate>Mon, 19 Apr 2021 20:13:34 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/19/%E5%97%AF%E4%BD%A0%E8%A7%89%E5%BE%97-go-%E5%9C%A8%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%8A%A2%E5%8D%A0-p/</guid>
      <description>&lt;h2 id=&#34;嗯你觉得-go-在什么时候会抢占-p&#34;&gt;嗯，你觉得 Go 在什么时候会抢占 P？&lt;/h2&gt;&#xA;&lt;p&gt;前几天我们有聊到《&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&amp;amp;mid=2247487643&amp;amp;idx=1&amp;amp;sn=f81b18a12ab156feebb9fc9329e1c8f4&amp;amp;chksm=f90405c6ce738cd0763e5687508d3f09c7fe30e0da582ec0290c26b84cf2867698423c5a341b&amp;amp;scene=21#wechat_redirect&#34;&gt;单核 CPU，开两个 Goroutine，其中一个死循环，会怎么样？&lt;/a&gt;》的问题，我们在一个细节部分有提到：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/Go%E6%8A%A2%E5%8D%A0P/1.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;有新的小伙伴会产生更多的疑问，那就是在 Go 语言中，是如何抢占 P 的呢，这里面是怎么做的？&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Go runtime scheduler&#39;s clever way of dealing with system calls</title>
      <link>http://shanks.link/blog/2021/04/19/the-go-runtime-schedulers-clever-way-of-dealing-with-system-calls/</link>
      <pubDate>Mon, 19 Apr 2021 17:53:16 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/19/the-go-runtime-schedulers-clever-way-of-dealing-with-system-calls/</guid>
      <description>&lt;h2 id=&#34;the-go-runtime-schedulers-clever-way-of-dealing-with-system-calls&#34;&gt;The Go runtime scheduler&amp;rsquo;s clever way of dealing with system calls&lt;/h2&gt;&#xA;&lt;p&gt;One of Go&amp;rsquo;s signature features is &lt;a href=&#34;https://tour.golang.org/concurrency/1&#34;&gt;goroutines&lt;/a&gt;, which are lightweight threads that are managed by the Go runtime. The Go runtime implements goroutines using &lt;a href=&#34;https://rakyll.org/scheduler/&#34;&gt;a M:N work stealing scheduler&lt;/a&gt; to multiplex goroutines on to operating system threads. The scheduler has special terminology for three important entities; a G is a goroutine, an M is an OS thread (a &amp;lsquo;machine&amp;rsquo;), and a P is a &amp;lsquo;processor&amp;rsquo;, which at its core is a limited resource that must be claimed by an M in order to run Go code. Having a limited supply of Ps is how Go limits how many things it will do at once, so as to not overload the overall system; generally there is one P per actual CPU that the OS reports (the number of Ps is &lt;a href=&#34;https://golang.org/pkg/runtime/&#34;&gt;&lt;code&gt;GOMAXPROCS&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;</description>
    </item>
    <item>
      <title>用 Go struct 不能犯的一个低级错误！</title>
      <link>http://shanks.link/blog/2021/04/18/%E7%94%A8-go-struct-%E4%B8%8D%E8%83%BD%E7%8A%AF%E7%9A%84%E4%B8%80%E4%B8%AA%E4%BD%8E%E7%BA%A7%E9%94%99%E8%AF%AF/</link>
      <pubDate>Sun, 18 Apr 2021 00:42:39 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/18/%E7%94%A8-go-struct-%E4%B8%8D%E8%83%BD%E7%8A%AF%E7%9A%84%E4%B8%80%E4%B8%AA%E4%BD%8E%E7%BA%A7%E9%94%99%E8%AF%AF/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/K5B2ItkzOb4eCFLxZI5Wvw&#34;&gt;转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;用-go-struct-不能犯的一个低级错误&#34;&gt;用 Go struct 不能犯的一个低级错误！&lt;/h2&gt;&#xA;&lt;p&gt;原创 陈煎鱼 &lt;a href=&#34;javascript:void(0);&#34;&gt;脑子进煎鱼了&lt;/a&gt; &lt;em&gt;3天前&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;收录于话题&lt;/p&gt;&#xA;&lt;p&gt;#Go45&lt;/p&gt;&#xA;&lt;p&gt;#面试题13&lt;/p&gt;&#xA;&lt;p&gt;大家好，我是煎鱼。&lt;/p&gt;&#xA;&lt;p&gt;前段时间我分享了 《&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&amp;amp;mid=2247487631&amp;amp;idx=1&amp;amp;sn=0c6d3e548573197e8281f622d8d5b0d7&amp;amp;chksm=f90405d2ce738cc401029885459b1ef29095a429ac7d71667e94750966b3dae1044e09fbdc77&amp;amp;scene=21#wechat_redirect&#34;&gt;手撕 Go 面试官：Go 结构体是否可以比较，为什么？&lt;/a&gt;》的文章，把基本 Go struct 的比较依据研究了一番。这不，最近有一位读者，遇到了一个关于 struct 的新问题，踩到了雷区。不得解。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goroutine 泄露的 N 种方法，真刺激！</title>
      <link>http://shanks.link/blog/2021/04/18/goroutine-%E6%B3%84%E9%9C%B2%E7%9A%84-n-%E7%A7%8D%E6%96%B9%E6%B3%95%E7%9C%9F%E5%88%BA%E6%BF%80/</link>
      <pubDate>Sun, 18 Apr 2021 00:10:42 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/18/goroutine-%E6%B3%84%E9%9C%B2%E7%9A%84-n-%E7%A7%8D%E6%96%B9%E6%B3%95%E7%9C%9F%E5%88%BA%E6%BF%80/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/ql01K1nOnEZpdbp--6EDYw&#34;&gt;转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;大家好，我是煎鱼。&lt;/p&gt;&#xA;&lt;p&gt;前几天分享 Go 群友提问的文章时，有读者在朋友圈下提到，希望我能够针对 Goroutine 泄露这块进行讲解，他在面试的时候经常被问到。&lt;/p&gt;&#xA;&lt;p&gt;另外我也相信很多小伙伴，在做救火队长时排查过 Goroutine 泄露的问题，因为 Goroutine 作为一个载体，基本跑不了干系。&lt;/p&gt;</description>
    </item>
    <item>
      <title>你知道 Go 结构体和结构体指针调用有什么区别吗？</title>
      <link>http://shanks.link/blog/2021/04/17/%E4%BD%A0%E7%9F%A5%E9%81%93-go-%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E7%BB%93%E6%9E%84%E4%BD%93%E6%8C%87%E9%92%88%E8%B0%83%E7%94%A8%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%E5%90%97/</link>
      <pubDate>Sat, 17 Apr 2021 23:59:23 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/17/%E4%BD%A0%E7%9F%A5%E9%81%93-go-%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E7%BB%93%E6%9E%84%E4%BD%93%E6%8C%87%E9%92%88%E8%B0%83%E7%94%A8%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%E5%90%97/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/g-D_eVh-8JaIoRne09bJ3Q&#34;&gt;转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;本期的男主角是《&lt;strong&gt;Go 结构体和结构体指针调用有什么区别&lt;/strong&gt;》，希望对大家有所帮助，带来一些思考。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;请在此处默念自己心目中的答案&lt;/strong&gt;，再和煎鱼一同研讨一波 Go 的技术哲学。&lt;/p&gt;</description>
    </item>
    <item>
      <title>再见 Go 面试官：单核 CPU，开两个 Goroutine，其中一个死循环，会怎么样</title>
      <link>http://shanks.link/blog/2021/04/17/%E5%86%8D%E8%A7%81-go-%E9%9D%A2%E8%AF%95%E5%AE%98%E5%8D%95%E6%A0%B8-cpu%E5%BC%80%E4%B8%A4%E4%B8%AA-goroutine%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%AD%BB%E5%BE%AA%E7%8E%AF%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7/</link>
      <pubDate>Sat, 17 Apr 2021 23:45:39 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/17/%E5%86%8D%E8%A7%81-go-%E9%9D%A2%E8%AF%95%E5%AE%98%E5%8D%95%E6%A0%B8-cpu%E5%BC%80%E4%B8%A4%E4%B8%AA-goroutine%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%AD%BB%E5%BE%AA%E7%8E%AF%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/h27GXmfGYVLHRG3Mu_8axw&#34;&gt;以下转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;最近金三银四，是面试的季节。在我的 Go 读者交流群里出现了许多小伙伴在讨论自己面试过程中所遇到的一些 Go 面试题。若大家有兴趣，欢迎加我的微信进群一同交流。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 内存泄露之痛，这篇把 Go timer.After 问题根因讲透了！</title>
      <link>http://shanks.link/blog/2021/04/17/go-%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%B9%8B%E7%97%9B%E8%BF%99%E7%AF%87%E6%8A%8A-go-timer.after-%E9%97%AE%E9%A2%98%E6%A0%B9%E5%9B%A0%E8%AE%B2%E9%80%8F%E4%BA%86/</link>
      <pubDate>Sat, 17 Apr 2021 23:33:30 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/17/go-%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%B9%8B%E7%97%9B%E8%BF%99%E7%AF%87%E6%8A%8A-go-timer.after-%E9%97%AE%E9%A2%98%E6%A0%B9%E5%9B%A0%E8%AE%B2%E9%80%8F%E4%BA%86/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/KSBdPkkvonSES9Z9iggElg&#34;&gt;转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;前几天在公众号分享了一篇 Go timer 源码解析的文章《难以驾驭的 Go timer，一文带你参透计时器的奥秘》。&lt;/p&gt;&#xA;&lt;p&gt;如果大家也有兴趣共同交流，欢迎关注煎鱼的公众号，加我微信后拉你进群。&lt;/p&gt;</description>
    </item>
    <item>
      <title>手撕 Go 面试官：Go 结构体是否可以比较，为什么？</title>
      <link>http://shanks.link/blog/2021/04/16/%E6%89%8B%E6%92%95-go-%E9%9D%A2%E8%AF%95%E5%AE%98go-%E7%BB%93%E6%9E%84%E4%BD%93%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E6%AF%94%E8%BE%83%E4%B8%BA%E4%BB%80%E4%B9%88/</link>
      <pubDate>Fri, 16 Apr 2021 18:58:13 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/16/%E6%89%8B%E6%92%95-go-%E9%9D%A2%E8%AF%95%E5%AE%98go-%E7%BB%93%E6%9E%84%E4%BD%93%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E6%AF%94%E8%BE%83%E4%B8%BA%E4%BB%80%E4%B9%88/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/HScH6nm3xf4POXVk774jUA&#34;&gt;转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;今天的男主角，是 Go 工程师的必修技能，也是极容易踩坑的地方，就是 “&lt;strong&gt;Go 面试题：Go 结构体（struct）是否可以比较？&lt;/strong&gt;”&lt;/p&gt;&#xA;&lt;p&gt;如果可以比较，是为什么？如果不可以比较，又是为什么？&lt;/p&gt;</description>
    </item>
    <item>
      <title>难以驾驭的 Go timer，一文带你参透计时器的奥秘</title>
      <link>http://shanks.link/blog/2021/04/16/%E9%9A%BE%E4%BB%A5%E9%A9%BE%E9%A9%AD%E7%9A%84-go-timer%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E5%8F%82%E9%80%8F%E8%AE%A1%E6%97%B6%E5%99%A8%E7%9A%84%E5%A5%A5%E7%A7%98/</link>
      <pubDate>Fri, 16 Apr 2021 18:40:40 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/16/%E9%9A%BE%E4%BB%A5%E9%A9%BE%E9%A9%AD%E7%9A%84-go-timer%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E5%8F%82%E9%80%8F%E8%AE%A1%E6%97%B6%E5%99%A8%E7%9A%84%E5%A5%A5%E7%A7%98/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/gxX-q2EvgWZEWe-deRITSw&#34;&gt;转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;#Go进阶之旅1&lt;/p&gt;&#xA;&lt;p&gt;大家好，我是煎鱼。久违的源码剖析系列，让我们一起努力，看看谁能坚持到最后，因为学习一定是给能够坚持重复啃和热衷于&lt;strong&gt;三连&lt;/strong&gt;的人。&lt;/p&gt;&#xA;&lt;p&gt;接下来正式开始今天的内容讲解，今天的男主角是计时器 timer。&lt;/p&gt;</description>
    </item>
    <item>
      <title>再见 Go 面试官：GMP 模型，为什么要有 P？</title>
      <link>http://shanks.link/blog/2021/04/16/%E5%86%8D%E8%A7%81-go-%E9%9D%A2%E8%AF%95%E5%AE%98gmp-%E6%A8%A1%E5%9E%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89-p/</link>
      <pubDate>Fri, 16 Apr 2021 18:20:16 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/16/%E5%86%8D%E8%A7%81-go-%E9%9D%A2%E8%AF%95%E5%AE%98gmp-%E6%A8%A1%E5%9E%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89-p/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/an7dml9NLOhqOZjEGLdEEw&#34;&gt;转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;最近金三银四，是面试的季节。在我的 Go 读者交流群里出现了许多小伙伴在讨论自己面试过程中所遇到的一些 Go 面试题。&lt;/p&gt;&#xA;&lt;p&gt;今天的主角，是 Go 面试的万能题 GMP 模型的延伸题（疑问），那就是 ”&lt;strong&gt;GMP 模型，为什么要有 P&lt;/strong&gt;？“&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 群友提问：进程、线程都有 ID，为什么 Goroutine 没有 ID？</title>
      <link>http://shanks.link/blog/2021/04/16/go-%E7%BE%A4%E5%8F%8B%E6%8F%90%E9%97%AE%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E9%83%BD%E6%9C%89-id%E4%B8%BA%E4%BB%80%E4%B9%88-goroutine-%E6%B2%A1%E6%9C%89-id/</link>
      <pubDate>Fri, 16 Apr 2021 17:32:55 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/16/go-%E7%BE%A4%E5%8F%8B%E6%8F%90%E9%97%AE%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E9%83%BD%E6%9C%89-id%E4%B8%BA%E4%BB%80%E4%B9%88-goroutine-%E6%B2%A1%E6%9C%89-id/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/qFAtgpbAsHSPVLuo3PYIhg&#34;&gt;转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;今天的主角，是大家在既有语言基础的情况下，学 Goroutine 时会容易纠结的一点。就是 “&lt;strong&gt;进程、线程都有 ID，为什么 Goroutine 没有 GoroutineID？&lt;/strong&gt;”。&lt;/p&gt;&#xA;&lt;p&gt;这是为什么呢，怎么做那些跨协程处理呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 语言中的一等公民：看似普通的函数，凭什么？</title>
      <link>http://shanks.link/blog/2021/04/16/go-%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E4%B8%80%E7%AD%89%E5%85%AC%E6%B0%91%E7%9C%8B%E4%BC%BC%E6%99%AE%E9%80%9A%E7%9A%84%E5%87%BD%E6%95%B0%E5%87%AD%E4%BB%80%E4%B9%88/</link>
      <pubDate>Fri, 16 Apr 2021 17:19:05 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/16/go-%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E4%B8%80%E7%AD%89%E5%85%AC%E6%B0%91%E7%9C%8B%E4%BC%BC%E6%99%AE%E9%80%9A%E7%9A%84%E5%87%BD%E6%95%B0%E5%87%AD%E4%BB%80%E4%B9%88/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/NPPzcfp7I50XcDMnR5bU9w&#34;&gt;转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;在 Go 语言中，一提函数，大家提的最多的就是 “Go 语言的函数是一等公民”。这个定义来的非常突然，我们先了解一下什么是一等公民，他又凭什么？&lt;/p&gt;&#xA;&lt;p&gt;根据维基百科的一等公民（First-class citizen）的定义：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 面试题：Go interface 的一个 坑 及原理分析</title>
      <link>http://shanks.link/blog/2021/04/16/go-%E9%9D%A2%E8%AF%95%E9%A2%98go-interface-%E7%9A%84%E4%B8%80%E4%B8%AA-%E5%9D%91-%E5%8F%8A%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 16 Apr 2021 17:10:27 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/16/go-%E9%9D%A2%E8%AF%95%E9%A2%98go-interface-%E7%9A%84%E4%B8%80%E4%B8%AA-%E5%9D%91-%E5%8F%8A%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/vNACbdSDxC9S0LOAr7ngLQ&#34;&gt;以下内容转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;go-面试题go-interface-的一个-坑-及原理分析&#34;&gt;Go 面试题：Go interface 的一个 “坑” 及原理分析&lt;/h2&gt;&#xA;&lt;p&gt;原创 陈煎鱼 &lt;a href=&#34;javascript:void(0);&#34;&gt;脑子进煎鱼了&lt;/a&gt; &lt;em&gt;3月16日&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;收录于话题&lt;/p&gt;&#xA;&lt;p&gt;#Go45&lt;/p&gt;&#xA;&lt;p&gt;#面试题13&lt;/p&gt;&#xA;&lt;p&gt;大家好，我是煎鱼。&lt;/p&gt;&#xA;&lt;p&gt;前几天在读者交流群里看到一位小伙伴，针对 interface 的使用有了比较大的疑惑。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 群友提问：学习 defer 时很懵逼，这道不会做！</title>
      <link>http://shanks.link/blog/2021/04/16/go-%E7%BE%A4%E5%8F%8B%E6%8F%90%E9%97%AE%E5%AD%A6%E4%B9%A0-defer-%E6%97%B6%E5%BE%88%E6%87%B5%E9%80%BC%E8%BF%99%E9%81%93%E4%B8%8D%E4%BC%9A%E5%81%9A/</link>
      <pubDate>Fri, 16 Apr 2021 17:00:42 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/16/go-%E7%BE%A4%E5%8F%8B%E6%8F%90%E9%97%AE%E5%AD%A6%E4%B9%A0-defer-%E6%97%B6%E5%BE%88%E6%87%B5%E9%80%BC%E8%BF%99%E9%81%93%E4%B8%8D%E4%BC%9A%E5%81%9A/</guid>
      <description>&lt;h2 id=&#34;go-群友提问学习-defer-时很懵逼这道不会做&#34;&gt;Go 群友提问：学习 defer 时很懵逼，这道不会做！&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/lELMqKho003h0gfKkZxhHQ&#34;&gt;转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;前几天在读者交流群里看到一位小伙伴，在向大家咨询 Go 相关的技术问题。疑问是：“&lt;strong&gt;各位大佬，我在学习 defer 遇到闭包的时候很懵逼，谁比较明白，能指点？&lt;/strong&gt;”&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 群友提问：Goroutine 数量控制在多少合适，会影响 GC 和调度？</title>
      <link>http://shanks.link/blog/2021/04/16/go-%E7%BE%A4%E5%8F%8B%E6%8F%90%E9%97%AEgoroutine-%E6%95%B0%E9%87%8F%E6%8E%A7%E5%88%B6%E5%9C%A8%E5%A4%9A%E5%B0%91%E5%90%88%E9%80%82%E4%BC%9A%E5%BD%B1%E5%93%8D-gc-%E5%92%8C%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Fri, 16 Apr 2021 15:53:17 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/16/go-%E7%BE%A4%E5%8F%8B%E6%8F%90%E9%97%AEgoroutine-%E6%95%B0%E9%87%8F%E6%8E%A7%E5%88%B6%E5%9C%A8%E5%A4%9A%E5%B0%91%E5%90%88%E9%80%82%E4%BC%9A%E5%BD%B1%E5%93%8D-gc-%E5%92%8C%E8%B0%83%E5%BA%A6/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/uWP2X6iFu7BtwjIv5H55vw&#34;&gt;以下内容转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;前几天在读者交流群里看到一位小伙伴，发出了一个致命提问，那就是：“&lt;strong&gt;单机的 goroutine 数量控制在多少比较合适？&lt;/strong&gt;”。&lt;/p&gt;&#xA;&lt;p&gt;也许你和群内小伙伴第一反应一样，会答复 “控制多少，我觉得没有定论”。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 面试题： new 和 make 是什么，差异在哪？</title>
      <link>http://shanks.link/blog/2021/04/16/go-%E9%9D%A2%E8%AF%95%E9%A2%98-new-%E5%92%8C-make-%E6%98%AF%E4%BB%80%E4%B9%88%E5%B7%AE%E5%BC%82%E5%9C%A8%E5%93%AA/</link>
      <pubDate>Fri, 16 Apr 2021 14:49:39 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/16/go-%E9%9D%A2%E8%AF%95%E9%A2%98-new-%E5%92%8C-make-%E6%98%AF%E4%BB%80%E4%B9%88%E5%B7%AE%E5%BC%82%E5%9C%A8%E5%93%AA/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/tZg3zmESlLmefAWdTR96Tg&#34;&gt;转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;go-面试题-new-和-make-是什么差异在哪&#34;&gt;Go 面试题： new 和 make 是什么，差异在哪？&lt;/h2&gt;&#xA;&lt;p&gt;在 Go 语言中，有两个比较雷同的内置函数，分别是 &lt;code&gt;new&lt;/code&gt; 和 &lt;code&gt;make&lt;/code&gt; 方法，其主要用途都是用于分配相应类型的内存空间。&lt;/p&gt;&#xA;&lt;p&gt;看上去 &lt;code&gt;new&lt;/code&gt; 和 &lt;code&gt;make&lt;/code&gt; 都是分配内存的，那他们有什么区别呢？这个细节点也成为了不少 Go 语言工程师的面试题之一，值得大家一看。&lt;/p&gt;</description>
    </item>
    <item>
      <title>灵魂拷问 Go 语言：这个变量到底分配到哪里了？</title>
      <link>http://shanks.link/blog/2021/04/16/%E7%81%B5%E9%AD%82%E6%8B%B7%E9%97%AE-go-%E8%AF%AD%E8%A8%80%E8%BF%99%E4%B8%AA%E5%8F%98%E9%87%8F%E5%88%B0%E5%BA%95%E5%88%86%E9%85%8D%E5%88%B0%E5%93%AA%E9%87%8C%E4%BA%86/</link>
      <pubDate>Fri, 16 Apr 2021 11:18:05 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/16/%E7%81%B5%E9%AD%82%E6%8B%B7%E9%97%AE-go-%E8%AF%AD%E8%A8%80%E8%BF%99%E4%B8%AA%E5%8F%98%E9%87%8F%E5%88%B0%E5%BA%95%E5%88%86%E9%85%8D%E5%88%B0%E5%93%AA%E9%87%8C%E4%BA%86/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/mFfza7DayFqsiS93Ep15BA&#34;&gt;以下内容转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;我们在写代码的时候，有时候会想这个变量到底分配到哪里了？这时候可能会有人说，在栈上，在堆上。信我准没错&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/%E5%8F%98%E9%87%8F%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/1.jpg&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;但从结果上来讲你还是一知半解，这可不行，万一被人懵了呢。今天我们一起来深挖下 Go 在这块的奥妙，自己动手丰衣足食！&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go1.16 新特性：Go mod 的后悔药，仅需这一招</title>
      <link>http://shanks.link/blog/2021/04/16/go1.16-%E6%96%B0%E7%89%B9%E6%80%A7go-mod-%E7%9A%84%E5%90%8E%E6%82%94%E8%8D%AF%E4%BB%85%E9%9C%80%E8%BF%99%E4%B8%80%E6%8B%9B/</link>
      <pubDate>Fri, 16 Apr 2021 11:07:00 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/16/go1.16-%E6%96%B0%E7%89%B9%E6%80%A7go-mod-%E7%9A%84%E5%90%8E%E6%82%94%E8%8D%AF%E4%BB%85%E9%9C%80%E8%BF%99%E4%B8%80%E6%8B%9B/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/0g89yj9sc1oIz9kS9ZIAEA&#34;&gt;以下内容转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;前几天 Go 官方正式发布了 1.16 版本。&lt;strong&gt;从这个版本起，环境变量 GO111MODULE 的默认值正式修改为 on&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/Go116%E6%96%B0%E7%89%B9%E6%80%A7Gomod%E7%9A%84%E5%90%8E%E6%82%94%E8%8D%AF/1.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这也意味着 Go modules 将更进一步推进其业务覆盖面，有新老项目共存的小伙伴建议手动将 GO111MODULE 调整为 auto。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go1.16 新特性：详解内存管理机制的变更</title>
      <link>http://shanks.link/blog/2021/04/16/go1.16-%E6%96%B0%E7%89%B9%E6%80%A7%E8%AF%A6%E8%A7%A3%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6%E7%9A%84%E5%8F%98%E6%9B%B4/</link>
      <pubDate>Fri, 16 Apr 2021 10:55:29 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/16/go1.16-%E6%96%B0%E7%89%B9%E6%80%A7%E8%AF%A6%E8%A7%A3%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6%E7%9A%84%E5%8F%98%E6%9B%B4/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/l4oEJdskbWpff1E3tTNUxQ&#34;&gt;以下内容转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;在上一篇 Go1.16 特性介绍的文章中我们有提到，从 v1.16 起，Go 在 Linux 下的默认内存管理策略会从&lt;code&gt;MADV_FREE&lt;/code&gt; 改回 &lt;code&gt;MADV_DONTNEED&lt;/code&gt; 策略。&lt;/p&gt;&#xA;&lt;p&gt;这时候可能至少分两拨小伙伴，分别是：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go116新特性Goembed</title>
      <link>http://shanks.link/blog/2021/04/15/go116%E6%96%B0%E7%89%B9%E6%80%A7goembed/</link>
      <pubDate>Thu, 15 Apr 2021 19:32:27 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/15/go116%E6%96%B0%E7%89%B9%E6%80%A7goembed/</guid>
      <description>&lt;p&gt;Go1.16 新特性：一文快速上手 Go embed&#xA;&lt;a href=&#34;https://mp.weixin.qq.com/s/aBPrBHl9BpbvbJyatB3Vww&#34;&gt;以下内容转载自煎鱼的blog&lt;/a&gt;&#xA;大家好，我是正在沉迷学习煎鱼的煎鱼。&#xA;在以前，很多从其他语言转过来 Go 语言的同学会问到，或是踩到一个坑。就是以为 Go 语言所打包的二进制文件中会包含配置文件的联同编译和打包。&#xA;&lt;img src=&#34;1.png&#34; alt=&#34;&#34;&gt;&#xA;结果往往一把二进制文件挪来挪去，就无法把应用程序运行起来了。因为无法读取到静态文件的资源。&#xA;无法将静态资源编译打包进二进制文件的话，通常会有两种解决方法：&#xA;第一种是识别这类静态资源，是否需要跟着程序走。&#xA;第二种就是考虑将其打包进二进制文件中。&#xA;第二种情况的话，Go 以前是不支持的，大家就会去借助各种花式的开源库，例如：go-bindata/go-bindata 来实现。&#xA;但从在 Go1.16 起，Go 语言自身正式支持了该项特性，今天我们将通过这篇文章快速了解和学习这项特性。&#xA;基本使用&lt;/p&gt;</description>
    </item>
    <item>
      <title>上下文Context</title>
      <link>http://shanks.link/blog/2021/04/15/%E4%B8%8A%E4%B8%8B%E6%96%87context/</link>
      <pubDate>Thu, 15 Apr 2021 18:19:18 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/15/%E4%B8%8A%E4%B8%8B%E6%96%87context/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-context/&#34;&gt;以下内容转载自面向信仰编程&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;61-上下文-context-&#34;&gt;6.1 上下文 Context #&lt;/h1&gt;&#xA;&lt;p&gt;上下文 context.Context Go 语言中用来设置截止日期、同步信号，传递请求相关值的结构体。上下文与 Goroutine 有比较密切的关系，是 Go 语言中独特的设计，在其他编程语言中我们很少见到类似的概念。&lt;/p&gt;</description>
    </item>
    <item>
      <title>一文吃透 Go 语言解密之上下文 context</title>
      <link>http://shanks.link/blog/2021/04/15/%E4%B8%80%E6%96%87%E5%90%83%E9%80%8F-go-%E8%AF%AD%E8%A8%80%E8%A7%A3%E5%AF%86%E4%B9%8B%E4%B8%8A%E4%B8%8B%E6%96%87-context/</link>
      <pubDate>Thu, 15 Apr 2021 16:08:31 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/15/%E4%B8%80%E6%96%87%E5%90%83%E9%80%8F-go-%E8%AF%AD%E8%A8%80%E8%A7%A3%E5%AF%86%E4%B9%8B%E4%B8%8A%E4%B8%8B%E6%96%87-context/</guid>
      <description>&lt;h2 id=&#34;一文吃透-go-语言解密之上下文-context&#34;&gt;一文吃透 Go 语言解密之上下文 context&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/A03G3_kCvVFN3TxB-92GVw&#34;&gt;转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;上下文（Context）是 Go 语言中非常有特色的一个特性， 在 Go 1.7 版本中正式引入新标准库 context。&lt;/p&gt;&#xA;&lt;p&gt;其主要的作用是在 goroutine 中进行上下文的传递，而在传递信息中又包含了 goroutine 的运行控制、上下文信息传递等功能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>一文吃透 Go 语言解密之接口 interface</title>
      <link>http://shanks.link/blog/2021/04/15/%E4%B8%80%E6%96%87%E5%90%83%E9%80%8F-go-%E8%AF%AD%E8%A8%80%E8%A7%A3%E5%AF%86%E4%B9%8B%E6%8E%A5%E5%8F%A3-interface/</link>
      <pubDate>Thu, 15 Apr 2021 15:34:27 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/15/%E4%B8%80%E6%96%87%E5%90%83%E9%80%8F-go-%E8%AF%AD%E8%A8%80%E8%A7%A3%E5%AF%86%E4%B9%8B%E6%8E%A5%E5%8F%A3-interface/</guid>
      <description>&lt;h2 id=&#34;一文吃透-go-语言解密之接口-interface&#34;&gt;一文吃透 Go 语言解密之接口 interface&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/vSgV_9bfoifnh2LEX0Y7cQ&#34;&gt;转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;自古流传着一个传言&amp;hellip;在 Go 语言面试的时候必有人会问接口（interface）的实现原理。这又是为什么？为何对接口如此执着？&lt;/p&gt;</description>
    </item>
    <item>
      <title>一文带你解密 Go 语言之通道 channel</title>
      <link>http://shanks.link/blog/2021/04/15/%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E8%A7%A3%E5%AF%86-go-%E8%AF%AD%E8%A8%80%E4%B9%8B%E9%80%9A%E9%81%93-channel/</link>
      <pubDate>Thu, 15 Apr 2021 11:42:26 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/15/%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E8%A7%A3%E5%AF%86-go-%E8%AF%AD%E8%A8%80%E4%B9%8B%E9%80%9A%E9%81%93-channel/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/ZXYpfLNGyej0df2zXqfnHQ&#34;&gt;转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;今天这篇文章主要是针对 Go channel 的重点分析，一开始写的时候以为范围不会太大，但洋洋洒洒还是写破了万字，成为了一篇覆盖面较广和有一定深度的长文分析。&lt;/p&gt;</description>
    </item>
    <item>
      <title>解密 Go 语言之反射 reflect</title>
      <link>http://shanks.link/blog/2021/04/15/%E8%A7%A3%E5%AF%86-go-%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%8F%8D%E5%B0%84-reflect/</link>
      <pubDate>Thu, 15 Apr 2021 11:32:37 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/15/%E8%A7%A3%E5%AF%86-go-%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%8F%8D%E5%B0%84-reflect/</guid>
      <description>&lt;h2 id=&#34;解密-go-语言之反射-reflect&#34;&gt;解密 Go 语言之反射 reflect&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/onl3sBCSNs8l42uihi_p4A&#34;&gt;转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;大家好，我是煎鱼。今天是 2020 年的最后一天，让我们一起继续愉快的学习吧 ：）。&lt;/p&gt;&#xA;&lt;p&gt;在所有的语言中，反射这一功能基本属于必不可少的模块。&lt;/p&gt;&#xA;&lt;p&gt;虽说 “反射” 这个词让人根深蒂固，但更多的还是 WHY。反射到底是什么，反射又是基于什么法则实现的？&lt;/p&gt;</description>
    </item>
    <item>
      <title>干货满满的 Go Modules 知识分享</title>
      <link>http://shanks.link/blog/2021/04/14/%E5%B9%B2%E8%B4%A7%E6%BB%A1%E6%BB%A1%E7%9A%84-go-modules-%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/</link>
      <pubDate>Wed, 14 Apr 2021 23:57:17 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/14/%E5%B9%B2%E8%B4%A7%E6%BB%A1%E6%BB%A1%E7%9A%84-go-modules-%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/uUNTH06_s6yzy5urtjPMsg&#34;&gt;转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;大家好，我是煎鱼。&lt;/p&gt;&#xA;&lt;p&gt;马上 2021 年了，Go 也即将在明年发布 Go1.16。但 Go Modules 仍然是大家关注的话题之一。早期汇总过傲飞分享的 《Go Modules、Go Module Proxy 和 goproxy.cn》。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 错误处理：用 panic 取代 err != nil 的模式</title>
      <link>http://shanks.link/blog/2021/04/14/go-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E7%94%A8-panic-%E5%8F%96%E4%BB%A3-err-nil-%E7%9A%84%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 14 Apr 2021 14:33:59 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/14/go-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E7%94%A8-panic-%E5%8F%96%E4%BB%A3-err-nil-%E7%9A%84%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;go-错误处理用-panic-取代-err--nil-的模式&#34;&gt;Go 错误处理：用 panic 取代 err != nil 的模式&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/p77V3_LkREuXPVLdebmmmQ&#34;&gt;转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;前段时间我分享了文章 《先睹为快，Go2 Error 的挣扎之路》后，和一位朋友进行了一次深度交流，他给我分享了他们项目组对于 Go 错误处理的方式调整。&lt;/p&gt;</description>
    </item>
    <item>
      <title>先睹为快，Go2 Error 的挣扎之路</title>
      <link>http://shanks.link/blog/2021/04/14/%E5%85%88%E7%9D%B9%E4%B8%BA%E5%BF%ABgo2-error-%E7%9A%84%E6%8C%A3%E6%89%8E%E4%B9%8B%E8%B7%AF/</link>
      <pubDate>Wed, 14 Apr 2021 11:42:13 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/14/%E5%85%88%E7%9D%B9%E4%B8%BA%E5%BF%ABgo2-error-%E7%9A%84%E6%8C%A3%E6%89%8E%E4%B9%8B%E8%B7%AF/</guid>
      <description>&lt;h2 id=&#34;先睹为快go2-error-的挣扎之路&#34;&gt;先睹为快，Go2 Error 的挣扎之路&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/XILveKzh07BOQnqxYDKQsA&#34;&gt;转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;自从 Go 语言在国内火热以来，除去泛型，其次最具槽点的就是 Go 对错误的处理方式，一句经典的 &lt;code&gt;if err != nil&lt;/code&gt; 暗号就能认出你是一个 Go 语言爱好者。&lt;/p&gt;</description>
    </item>
    <item>
      <title>setjmp和longjmp函数使用详解</title>
      <link>http://shanks.link/blog/2021/04/14/setjmp%E5%92%8Clongjmp%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 14 Apr 2021 00:08:43 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/14/setjmp%E5%92%8Clongjmp%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/chenyiming_1990/article/details/8683413&#34;&gt;转载自大米粒的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;在网上看到的，觉得很有用，copy过来的。&lt;/p&gt;&#xA;&lt;p&gt;非局部跳转语句&amp;mdash;setjmp和longjmp函数。非局部指的是，这不是由普通C语言goto，语句在一个函数内实施的跳转，而是在栈上跳过若干调用帧，返回到当前函数调用路径上的某一个函数中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>万字长文 | 从实践到原理，带你参透 gRPC</title>
      <link>http://shanks.link/blog/2021/04/13/%E4%B8%87%E5%AD%97%E9%95%BF%E6%96%87-%E4%BB%8E%E5%AE%9E%E8%B7%B5%E5%88%B0%E5%8E%9F%E7%90%86%E5%B8%A6%E4%BD%A0%E5%8F%82%E9%80%8F-grpc/</link>
      <pubDate>Tue, 13 Apr 2021 18:51:13 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/13/%E4%B8%87%E5%AD%97%E9%95%BF%E6%96%87-%E4%BB%8E%E5%AE%9E%E8%B7%B5%E5%88%B0%E5%8E%9F%E7%90%86%E5%B8%A6%E4%BD%A0%E5%8F%82%E9%80%8F-grpc/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/o-K7G9ywCdmW7et6Q4WMeA&#34;&gt;转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;万字长文--从实践到原理带你参透-grpc&#34;&gt;万字长文 | 从实践到原理，带你参透 gRPC&lt;/h2&gt;&#xA;&lt;p&gt;原创 陈煎鱼 &lt;a href=&#34;javascript:void(0);&#34;&gt;脑子进煎鱼了&lt;/a&gt; &lt;em&gt;2020-12-14&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;大家好，我是煎鱼。&lt;/p&gt;&#xA;&lt;p&gt;gRPC 在 Go 语言中大放异彩，越来越多的小伙伴在使用，最近也在公司安利了一波，希望这一篇文章能带你一览 gRPC 的巧妙之处，本文篇幅比较长，请做好阅读准备。&lt;/p&gt;</description>
    </item>
    <item>
      <title>必须要学的 Go 进程诊断工具 gops</title>
      <link>http://shanks.link/blog/2021/04/13/%E5%BF%85%E9%A1%BB%E8%A6%81%E5%AD%A6%E7%9A%84-go-%E8%BF%9B%E7%A8%8B%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7-gops/</link>
      <pubDate>Tue, 13 Apr 2021 18:27:04 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/13/%E5%BF%85%E9%A1%BB%E8%A6%81%E5%AD%A6%E7%9A%84-go-%E8%BF%9B%E7%A8%8B%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7-gops/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&amp;amp;mid=2247484471&amp;amp;idx=1&amp;amp;sn=f61bd753ddc80e475b71a846bba799fa&amp;amp;chksm=f904116ace73987c48312fe6c01dfab3c7705d8e3b172986ccf1efe00d4bff630a366cfb766f&amp;amp;scene=178&amp;amp;cur_album_id=1515516076481101825#rd&#34;&gt;转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;必须要学的-go-进程诊断工具-gops&#34;&gt;必须要学的 Go 进程诊断工具 gops&lt;/h2&gt;&#xA;&lt;p&gt;在类 Unix 系统中，我们常常会使用 ps 命令来查看系统当前所运行的进程信息，该命令为我们提供了较大的帮助，能够快速的定位到某些进程的运行情况和状态。&lt;/p&gt;</description>
    </item>
    <item>
      <title>为什么 Go 占用那么多的虚拟内存？</title>
      <link>http://shanks.link/blog/2021/04/13/%E4%B8%BA%E4%BB%80%E4%B9%88-go-%E5%8D%A0%E7%94%A8%E9%82%A3%E4%B9%88%E5%A4%9A%E7%9A%84%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</link>
      <pubDate>Tue, 13 Apr 2021 17:48:57 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/13/%E4%B8%BA%E4%BB%80%E4%B9%88-go-%E5%8D%A0%E7%94%A8%E9%82%A3%E4%B9%88%E5%A4%9A%E7%9A%84%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&amp;amp;mid=2247484139&amp;amp;idx=1&amp;amp;sn=f1bd1793d2ae3d9ead1277807596b0b9&amp;amp;chksm=f90417b6ce739ea0e3d6bbb969708e92e2e958b721908791706c452fccd119c4add3c44292d4&amp;amp;scene=178&amp;amp;cur_album_id=1515516076481101825#rd&#34;&gt;转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;前段时间，某同学说某服务的容器因为超出内存限制，不断地重启，问我们是不是有内存泄露，赶紧排查，然后解决掉，省的出问题。&lt;/p&gt;&#xA;&lt;p&gt;我们大为震惊，赶紧查看监控+报警系统和性能分析，发现应用指标压根就不高，不像有泄露的样子。&lt;/p&gt;</description>
    </item>
    <item>
      <title>详解 Go 程序的启动流程，你知道 g0，m0 是什么吗？</title>
      <link>http://shanks.link/blog/2021/04/13/%E8%AF%A6%E8%A7%A3-go-%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E4%BD%A0%E7%9F%A5%E9%81%93-g0m0-%E6%98%AF%E4%BB%80%E4%B9%88%E5%90%97/</link>
      <pubDate>Tue, 13 Apr 2021 16:52:04 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/13/%E8%AF%A6%E8%A7%A3-go-%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E4%BD%A0%E7%9F%A5%E9%81%93-g0m0-%E6%98%AF%E4%BB%80%E4%B9%88%E5%90%97/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/YK-TD3bZGEgqC0j-8U6VkQ&#34;&gt;转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;详解-go-程序的启动流程你知道-g0m0-是什么吗&#34;&gt;详解 Go 程序的启动流程，你知道 g0，m0 是什么吗？&lt;/h2&gt;&#xA;&lt;p&gt;大家好，我是煎鱼。&lt;/p&gt;&#xA;&lt;p&gt;自古应用程序均从 Hello World 开始，你我所写的 Go 语言亦然：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;import &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;func&lt;/span&gt; main() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; fmt.Println(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;hello world.&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段程序的输出结果为 &lt;code&gt;hello world.&lt;/code&gt;，就是这么的简单又直接。但这时候又不禁思考了起来，这个 &lt;code&gt;hello world.&lt;/code&gt; 是怎么输出来，经历了什么过程。&lt;/p&gt;</description>
    </item>
    <item>
      <title>supervisor常用命令</title>
      <link>http://shanks.link/blog/2021/04/12/supervisor%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 12 Apr 2021 17:16:19 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/12/supervisor%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/f8735b039c67&#34;&gt;转载自博客&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h5 id=&#34;查看任务状态&#34;&gt;查看任务状态&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# supervisorctl status&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SmartCoin                        RUNNING   pid 13203, uptime 0:04:05&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;coin                             RUNNING   pid 30744, uptime 17 days, 20:45:18&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deepwellserver                   RUNNING   pid 30257, uptime 30 days, 4:13:01&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jingtumassetapi                  RUNNING   pid 14536, uptime 45 days, 19:18:08&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;moac                             RUNNING   pid 20015, uptime 15 days, 5:15:11&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new                              RUNNING   pid 10041, uptime 43 days, 22:41:56&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nginx                            RUNNING   pid 18752, uptime 22:59:40&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;redis                            RUNNING   pid 14542, uptime 45 days, 19:18:08&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sonyflakeserver                  FATAL     can&amp;#39;t find command &amp;#39;&lt;span style=&#34;color:#00f&#34;&gt;go&lt;/span&gt;&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sparkportal                      RUNNING   pid 26073, uptime 1 day, 23:11:17&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sparkportal2                     RUNNING   pid 25732, uptime 1 day, 23:11:21&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sparkportal3                     RUNNING   pid 25834, uptime 1 day, 23:11:20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sparkportal4                     RUNNING   pid 25974, uptime 1 day, 23:11:18&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sparkuser                        RUNNING   pid 26957, uptime 9 days, 23:07:21&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sparkwallet                      RUNNING   pid 29045, uptime 5 days, 15:11:58&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;summaryservice                   RUNNING   pid 14535, uptime 45 days, 19:18:08&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第一列是服务名；第二列是运行状态，RUNNING表示运行中，FATAL 表示运行失败，STARTING表示正在启动,STOPED表示任务已停止；　第三/四列是进程号,最后是任务已经运行的时间。&lt;/p&gt;</description>
    </item>
    <item>
      <title>必须长期坚持的习惯</title>
      <link>http://shanks.link/blog/2021/04/12/%E5%BF%85%E9%A1%BB%E9%95%BF%E6%9C%9F%E5%9D%9A%E6%8C%81%E7%9A%84%E4%B9%A0%E6%83%AF/</link>
      <pubDate>Mon, 12 Apr 2021 19:56:51 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/04/12/%E5%BF%85%E9%A1%BB%E9%95%BF%E6%9C%9F%E5%9D%9A%E6%8C%81%E7%9A%84%E4%B9%A0%E6%83%AF/</guid>
      <description>&lt;h3 id=&#34;长期坚持的好习惯&#34;&gt;长期坚持的好习惯&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;不在生气时做决定&lt;/li&gt;&#xA;&lt;li&gt;定期反省和复盘&lt;/li&gt;&#xA;&lt;li&gt;每天学习至少30分钟&lt;/li&gt;&#xA;&lt;li&gt;保持谦虚和低调&lt;/li&gt;&#xA;&lt;li&gt;聚会时少玩手机&lt;/li&gt;&#xA;&lt;li&gt;不轻易说出秘密&lt;/li&gt;&#xA;&lt;li&gt;吃饭时细嚼慢咽&lt;/li&gt;&#xA;&lt;li&gt;不耀自己的钱财&lt;/li&gt;&#xA;&lt;li&gt;每天运动半小时&lt;/li&gt;&#xA;&lt;li&gt;经常保持微笑&lt;/li&gt;&#xA;&lt;li&gt;请字在前，谢字在后&lt;/li&gt;&#xA;&lt;li&gt;递接东西时用双手&lt;/li&gt;&#xA;&lt;li&gt;重要节日记得送礼物&lt;/li&gt;&#xA;&lt;li&gt;不强求或强迫他人&lt;/li&gt;&#xA;&lt;li&gt;不背后评论议论人&lt;/li&gt;&#xA;&lt;li&gt;站有站相坐有坐相&lt;/li&gt;&#xA;&lt;li&gt;记下重要亲友的生日&lt;/li&gt;&#xA;&lt;li&gt;定时清理手机和电脑&lt;/li&gt;&#xA;&lt;li&gt;重要文件记得备份&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>哔哩哔哩（B站）语言类学习视频大汇总！</title>
      <link>http://shanks.link/blog/2021/04/12/%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9b%E7%AB%99%E8%AF%AD%E8%A8%80%E7%B1%BB%E5%AD%A6%E4%B9%A0%E8%A7%86%E9%A2%91%E5%A4%A7%E6%B1%87%E6%80%BB/</link>
      <pubDate>Mon, 12 Apr 2021 19:53:31 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/04/12/%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9b%E7%AB%99%E8%AF%AD%E8%A8%80%E7%B1%BB%E5%AD%A6%E4%B9%A0%E8%A7%86%E9%A2%91%E5%A4%A7%E6%B1%87%E6%80%BB/</guid>
      <description>&lt;p&gt;以下内容转载自 &lt;a href=&#34;https://www.toutiao.com/w/a1657382084896772/&#34;&gt;https://www.toutiao.com/w/a1657382084896772/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;哔哩哔哩（B站）语言类学习视频大汇总！&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/d2027cac5b36c8e9df3fb3ceafc56a96.png&#34; alt=&#34;img&#34;&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/21b55d02faac794506073f85e596037f.png&#34; alt=&#34;img&#34;&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/f7a2da53d0e3a0f57bf0a548540177c1.png&#34; alt=&#34;img&#34;&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/8235fb907b4a38ce01da7703099050a6.png&#34; alt=&#34;img&#34;&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/7424e38bc523581affcf5f99b9b936d1.png&#34; alt=&#34;img&#34;&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/92a553a1239b561eda58a37156c53cb0.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>7部史诗级自然纪录片，孩子14岁前要看完！</title>
      <link>http://shanks.link/blog/2021/04/12/7%E9%83%A8%E5%8F%B2%E8%AF%97%E7%BA%A7%E8%87%AA%E7%84%B6%E7%BA%AA%E5%BD%95%E7%89%87%E5%AD%A9%E5%AD%9014%E5%B2%81%E5%89%8D%E8%A6%81%E7%9C%8B%E5%AE%8C/</link>
      <pubDate>Mon, 12 Apr 2021 19:50:38 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/04/12/7%E9%83%A8%E5%8F%B2%E8%AF%97%E7%BA%A7%E8%87%AA%E7%84%B6%E7%BA%AA%E5%BD%95%E7%89%87%E5%AD%A9%E5%AD%9014%E5%B2%81%E5%89%8D%E8%A6%81%E7%9C%8B%E5%AE%8C/</guid>
      <description>&lt;h1 id=&#34;7部史诗级自然纪录片孩子14岁前要看完&#34;&gt;7部史诗级自然纪录片，孩子14岁前要看完！&lt;/h1&gt;&#xA;&lt;p&gt;以下内容转载自 &lt;a href=&#34;https://www.toutiao.com/i6636908732494119437/&#34;&gt;https://www.toutiao.com/i6636908732494119437/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;原创布谷学习2018-12-21 12:01:00&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/45cca0c4afff53a9ff334c14bd6eb94f.gif&#34; alt=&#34;7部史诗级自然纪录片，孩子14岁前要看完！&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;文、编辑 | 云雀儿&lt;/p&gt;&#xA;&lt;p&gt;来源 | 布谷听听（iBookgood）&lt;/p&gt;&#xA;&lt;p&gt;世界那么大，你想去看看吗？&lt;/p&gt;&#xA;&lt;p&gt;似乎穷极一生，我们也看不完这个世界，不过纪录片却可以帮我们做到。&lt;/p&gt;</description>
    </item>
    <item>
      <title>世界最美的街景</title>
      <link>http://shanks.link/blog/2021/04/12/%E4%B8%96%E7%95%8C%E6%9C%80%E7%BE%8E%E7%9A%84%E8%A1%97%E6%99%AF/</link>
      <pubDate>Mon, 12 Apr 2021 19:48:24 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/04/12/%E4%B8%96%E7%95%8C%E6%9C%80%E7%BE%8E%E7%9A%84%E8%A1%97%E6%99%AF/</guid>
      <description>&lt;p&gt;以下内容转载自 &lt;a href=&#34;https://www.toutiao.com/i6719284510678073870/&#34;&gt;https://www.toutiao.com/i6719284510678073870/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;鲁稚的阳台2019-07-30 10:55:37&lt;/p&gt;&#xA;&lt;p&gt;虽然我们没有翅膀，无法像天上的鸟儿飞得那样高去欣赏世界，但是，我们有智慧、有能力借助能飞上天空的相机去俯瞰美丽的世界，欣赏美丽的风光……&lt;/p&gt;</description>
    </item>
    <item>
      <title>著名建筑师的作品」那些年，那些令人震撼的现代建筑！</title>
      <link>http://shanks.link/blog/2021/04/12/%E8%91%97%E5%90%8D%E5%BB%BA%E7%AD%91%E5%B8%88%E7%9A%84%E4%BD%9C%E5%93%81%E9%82%A3%E4%BA%9B%E5%B9%B4%E9%82%A3%E4%BA%9B%E4%BB%A4%E4%BA%BA%E9%9C%87%E6%92%BC%E7%9A%84%E7%8E%B0%E4%BB%A3%E5%BB%BA%E7%AD%91/</link>
      <pubDate>Mon, 12 Apr 2021 19:45:24 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/04/12/%E8%91%97%E5%90%8D%E5%BB%BA%E7%AD%91%E5%B8%88%E7%9A%84%E4%BD%9C%E5%93%81%E9%82%A3%E4%BA%9B%E5%B9%B4%E9%82%A3%E4%BA%9B%E4%BB%A4%E4%BA%BA%E9%9C%87%E6%92%BC%E7%9A%84%E7%8E%B0%E4%BB%A3%E5%BB%BA%E7%AD%91/</guid>
      <description>&lt;p&gt;以下内容转载自 &lt;a href=&#34;https://www.toutiao.com/i6695523214673576452/&#34;&gt;https://www.toutiao.com/i6695523214673576452/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;所谓“震撼”一定是内心受到了强烈的冲击，从而引起精神或情绪的剧烈起伏。这种感受远比“惊讶”、“感动”等来的强烈。&lt;/p&gt;&#xA;&lt;p&gt;能让人感觉“震撼”的建筑一定是因为某些方面做到了当时的极致，让人完全意想不到，如无比的宏伟、奢华、令人脑洞大开、引领时代、……。脱离了“集权”的现代建筑一般不会靠宏伟来取胜，更多的是靠别出心裁、引领时代的理念。&lt;/p&gt;</description>
    </item>
    <item>
      <title>史上最完整的《指环王》魔戒战争大事记（编年体长文）</title>
      <link>http://shanks.link/blog/2021/04/09/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%AE%8C%E6%95%B4%E7%9A%84%E6%8C%87%E7%8E%AF%E7%8E%8B%E9%AD%94%E6%88%92%E6%88%98%E4%BA%89%E5%A4%A7%E4%BA%8B%E8%AE%B0%E7%BC%96%E5%B9%B4%E4%BD%93%E9%95%BF%E6%96%87/</link>
      <pubDate>Fri, 09 Apr 2021 11:27:51 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/04/09/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%AE%8C%E6%95%B4%E7%9A%84%E6%8C%87%E7%8E%AF%E7%8E%8B%E9%AD%94%E6%88%92%E6%88%98%E4%BA%89%E5%A4%A7%E4%BA%8B%E8%AE%B0%E7%BC%96%E5%B9%B4%E4%BD%93%E9%95%BF%E6%96%87/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.toutiao.com/i6872919198092231179/&#34;&gt;转载自&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;史上最完整的指环王魔戒战争大事记编年体长文&#34;&gt;史上最完整的《指环王》魔戒战争大事记（编年体长文）&lt;/h1&gt;&#xA;&lt;p&gt;原创跃马酒馆小招待2020-09-16 13:33:12&lt;/p&gt;&#xA;&lt;p&gt;大家好，本文承接上一篇文章对**《指环王》**历史的梳理，这次从更加激动人心的第二纪元开始将整个魔戒故事以编年体的方式进行叙述。&lt;/p&gt;</description>
    </item>
    <item>
      <title>史上最完整的《指环王》上古时期大事记（编年体长文）</title>
      <link>http://shanks.link/blog/2021/04/09/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%AE%8C%E6%95%B4%E7%9A%84%E6%8C%87%E7%8E%AF%E7%8E%8B%E4%B8%8A%E5%8F%A4%E6%97%B6%E6%9C%9F%E5%A4%A7%E4%BA%8B%E8%AE%B0%E7%BC%96%E5%B9%B4%E4%BD%93%E9%95%BF%E6%96%87/</link>
      <pubDate>Fri, 09 Apr 2021 11:05:09 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/04/09/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%AE%8C%E6%95%B4%E7%9A%84%E6%8C%87%E7%8E%AF%E7%8E%8B%E4%B8%8A%E5%8F%A4%E6%97%B6%E6%9C%9F%E5%A4%A7%E4%BA%8B%E8%AE%B0%E7%BC%96%E5%B9%B4%E4%BD%93%E9%95%BF%E6%96%87/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.toutiao.com/i6870476899894690315/?group_id=6870476899894690315&#34;&gt;转载自&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;史上最完整的指环王上古时期大事记编年体长文&#34;&gt;史上最完整的《指环王》上古时期大事记（编年体长文）&lt;/h1&gt;&#xA;&lt;p&gt;原创跃马酒馆小招待2020-09-10 11:48:07&lt;/p&gt;&#xA;&lt;p&gt;许多朋友反应对于整个**《指环王》&lt;strong&gt;的历史脉络不太熟悉，导致对我的文章看得云里雾里，那么今天我就尝试梳理一下从&lt;/strong&gt;伊露维塔&lt;strong&gt;创世纪开始，到&lt;/strong&gt;《精灵宝钻》&lt;strong&gt;故事的完整时间线，方便那些对&lt;/strong&gt;《指环王》历史**感兴趣的小伙伴查阅。&lt;/p&gt;</description>
    </item>
    <item>
      <title>云风的Blog-Lua GC的源码解剖6</title>
      <link>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%966/</link>
      <pubDate>Fri, 09 Apr 2021 01:12:23 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%966/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.codingnow.com/2011/04/lua_gc_6.html&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;lua-gc-的源码剖析-6-完结&#34;&gt;Lua GC 的源码剖析 (6) 完结&lt;/h3&gt;&#xA;&lt;p&gt;GC 中最繁杂的 mark 部分已经谈完了。剩下的东西很简单。今天一次可以写完。&lt;/p&gt;&#xA;&lt;p&gt;sweep 分两个步骤，一个是清理字符串，另一个是清理其它对象。看代码，lgc.c 573 行：&lt;/p&gt;</description>
    </item>
    <item>
      <title>云风的Blog-Lua GC的源码解剖5</title>
      <link>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%965/</link>
      <pubDate>Fri, 09 Apr 2021 01:10:11 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%965/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.codingnow.com/2011/03/lua_gc_5.html&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;lua-gc-的源码剖析-5&#34;&gt;Lua GC 的源码剖析 (5)&lt;/h3&gt;&#xA;&lt;p&gt;今天来说说 write barrier 。&lt;/p&gt;&#xA;&lt;p&gt;在 GC 的扫描过程中，由于分步执行，难免会出现少描了一半时，那些已经被置黑的对象又被修改，需要重新标记的情况。这就需要在改写对象时，建立 write barrier 。在扫描过程中触发 write barrier 的操作影响的对象被正确染色，或是把需要再染色的对象记录下来，留到 mark 的最后阶段 atomic 完成。&lt;/p&gt;</description>
    </item>
    <item>
      <title>云风的Blog-Lua GC的源码解剖4</title>
      <link>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%964/</link>
      <pubDate>Fri, 09 Apr 2021 01:08:59 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%964/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.codingnow.com/2011/03/lua_gc_4.html&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;lua-gc-的源码剖析-4&#34;&gt;Lua GC 的源码剖析 (4)&lt;/h3&gt;&#xA;&lt;p&gt;今天来看一下 mark 过程是怎样实现的。&lt;/p&gt;&#xA;&lt;p&gt;所有的 GC 流程，都从 singlestep 函数开始。singlestep 就是一个最简单的状态机。GC 状态简单的从一个状态切换到下一个状态，循环不止。状态标识放在 global state 的 gcstate 域中。这一点前面谈过。&lt;/p&gt;</description>
    </item>
    <item>
      <title>云风的Blog-Lua GC的源码解剖3</title>
      <link>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%963/</link>
      <pubDate>Fri, 09 Apr 2021 01:07:31 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%963/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.codingnow.com/2011/03/lua_gc_3.html&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;lua-gc-的源码剖析-3&#34;&gt;Lua GC 的源码剖析 (3)&lt;/h3&gt;&#xA;&lt;p&gt;有了前几天的基础，我们可以从顶向下来读 lua gc 部分的代码了。&lt;/p&gt;&#xA;&lt;p&gt;我们知道，lua 对外的 API 中，一切个 gc 打交道的都通过 &lt;code&gt;lua_gc&lt;/code&gt; 。C 语言构建系统时，一般不讲设计模式。但模式还是存在的。若要按《设计模式》中的分类，这应该归于 Facade 模式。代码在 lapi.c 的 895 行：&lt;/p&gt;</description>
    </item>
    <item>
      <title>云风的Blog-Lua GC的源码解剖2</title>
      <link>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%962/</link>
      <pubDate>Fri, 09 Apr 2021 01:05:52 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%962/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.codingnow.com/2011/03/lua_gc_2.html&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;lua-gc-的源码剖析-2&#34;&gt;Lua GC 的源码剖析 (2)&lt;/h3&gt;&#xA;&lt;p&gt;早期的 Lua GC 采用的是 stop the world 的实现。一旦发生 gc 就需要等待整个 gc 流程走完。如果你用 lua 处理较少量数据，或是数据增删不频繁，这样做不是问题。但当处理的数据量变大时，对于实时性要求较高的应用，比如网络游戏服务器，这个代价则是不可忽略的。lua 本身是个很精简的系统，但不代表处理的数据量也一定很小。&lt;/p&gt;</description>
    </item>
    <item>
      <title>云风的Blog-Lua GC的源码解剖1</title>
      <link>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%961/</link>
      <pubDate>Fri, 09 Apr 2021 01:03:52 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%961/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.codingnow.com/2011/03/lua_gc_1.html&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;lua-gc-的源码剖析-1&#34;&gt;Lua GC 的源码剖析 (1)&lt;/h3&gt;&#xA;&lt;p&gt;最近发现在大数据量的 lua 环境中，GC 占据了很多的 CPU 。差不多是整个 CPU 时间的 20% 左右。希望着手改进。这样，必须先对 lua 的 gc 算法极其实现有一个详尽的理解。我之前读过 lua 的源代码，由于 lua 源码版本变迁，这个工作还需要再做一次。这次我重新阅读了 lua 5.1.4 的源代码。从今天起，做一个笔记，详细分析一下 lua 的 gc 是如何实现的。阅读代码整整花掉了我一天时间。但写出来恐怕比阅读时间更长。我会分几天写在 blog 上。&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建Lua解释器Part11：Upvalue</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part11upvalue/</link>
      <pubDate>Thu, 08 Apr 2021 23:31:51 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part11upvalue/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://manistein.club/&#34;&gt;本文转载自Manistein&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;构建lua解释器part11upvalue&#34;&gt;构建Lua解释器Part11：Upvalue&lt;/h1&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;​    本章，我将深入探讨lua的upvalue机制。在写这篇博客之前，我已经自己动手实现了这个机制，并且将其提交到了github仓库&lt;a href=&#34;https://github.com/Manistein/dummylua-tutorial&#34;&gt;dummylua&lt;/a&gt;上了。为了专注于upvalue机制本身的讨论，本章不会展示大量的代码细节，尽量在抽象层面来论述。&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建Lua解释器Part10：userdata</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part10userdata/</link>
      <pubDate>Thu, 08 Apr 2021 23:30:06 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part10userdata/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://manistein.club/&#34;&gt;本文转载自Manistein&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;构建lua解释器part10userdata&#34;&gt;构建Lua解释器Part10：userdata&lt;/h1&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;​    本章节，我开始对&lt;a href=&#34;https://github.com/Manistein/dummylua-tutorial&#34;&gt;dummylua&lt;/a&gt;的userdata的设计与实现，进行论述。它的大体设计与实现，仍然是仿照了lua5.3的标准，由于，所有的内容，都是我自己理解后，重新实现，因此在一些实现细节上略有不同，但是整体设计思路遵循了lua的设计思想。本章的篇幅不会很长，因为userdata这个部分并不是非常复杂，因此我这里也会速战速决，将userdata的一些核心思想论述清楚，就将本章完结。&lt;/p&gt;&#xA;&lt;h1 id=&#34;userdata的数据结构&#34;&gt;userdata的数据结构&lt;/h1&gt;&#xA;&lt;p&gt;​    userdata是用来存放，用户自定义的数据结构实例的，userdata的种类有两种，一种是lightuserdata，还有一种则是full userdata。light userdata是Value结构中的一个变量类型，本质是一个void* 指针&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建Lua解释器Part9：metatable</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part9metatable/</link>
      <pubDate>Thu, 08 Apr 2021 23:27:50 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part9metatable/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://manistein.club/&#34;&gt;本文转载自Manistein&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;构建lua解释器part9metatable&#34;&gt;构建Lua解释器Part9：metatable&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;Posted on December 8, 2020&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;​    本章，我们将进入到metatable的探索之中。由于这块本身比较简单，而且我也不打算罗列代码细节，因此本章的篇幅不会很大。只是对一些我认为比较关键的部分，进行说明。首先，本章的主要任务，首先是简要介绍metatable是做什么的，然后简要说明一下，它如何被设置，接着介绍metatable的访问域，双目运算操作域、单目运算操作域等。最后会告诉读者，本章的实现逻辑位于dummylua工程的哪些部位。&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建Lua解释器Part8：构建完整的语法分析器(下)</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part8%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4%E7%9A%84%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E4%B8%8B/</link>
      <pubDate>Thu, 08 Apr 2021 23:20:30 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part8%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4%E7%9A%84%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E4%B8%8B/</guid>
      <description>&lt;h1 id=&#34;构建lua解释器part8构建完整的语法分析器下&#34;&gt;构建Lua解释器Part8：构建完整的语法分析器(下)&lt;/h1&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;​    前面，我已经用3篇blog的巨大篇幅，详细论述了Lua编译模块的一些基本知识。其中，Part5通过一个简单的打印hello world的例子，论述了编译出来的虚拟机指令，如何存到Proto结构中，最后再通过虚拟机执行的流程。Part6详细论述了，词法分析器的设计与实现。而Part7则论述了，expression的编译流程。本章，将作为Lua内置编译器论述的最后一个部分。往后的部分，将不再涉及编译相关的内容。当然，经历这篇，相信读者能够完全理解Lua内置编译器的设计与实现，个人认为完整度还是比较高的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建Lua解释器Part7：构建完整的语法分析器(上)</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part7%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4%E7%9A%84%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E4%B8%8A/</link>
      <pubDate>Thu, 08 Apr 2021 22:58:42 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part7%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4%E7%9A%84%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E4%B8%8A/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://manistein.club/&#34;&gt;本文转载自Manistein&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;构建lua解释器part7构建完整的语法分析器上&#34;&gt;构建Lua解释器Part7：构建完整的语法分析器(上)&lt;/h1&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;​    在上一章里，我完成了词法分析器的设计与实现的论述，接下来我要继续论述语法分析器的设计与实现。限于篇幅，我将会把语法分析器分为两个部分来论述，本章为上部，下一章为下部。本章将会重新复习编译器的构造，并且论述编译流程，以及lua的parser所涉及的编译相关的内容，最后通过阐述虚拟机相关指令的实现，作为结尾。本章所涉及的代码，全部在&lt;a href=&#34;https://github.com/Manistein/dummylua-tutorial&#34;&gt;dummylua&lt;/a&gt;工程里，欢迎star。另外，如果你喜欢我写的文章，喜欢讨论技术，欢迎加入我创建的群：QQ185017593&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建Lua解释器Part6：脚本运行基础架构的设计与实现</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part6%E8%84%9A%E6%9C%AC%E8%BF%90%E8%A1%8C%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 08 Apr 2021 14:43:42 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part6%E8%84%9A%E6%9C%AC%E8%BF%90%E8%A1%8C%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://manistein.club/post/program/let-us-build-a-lua-interpreter/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part6/&#34;&gt;本文转载自Manistein&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;​    构建Lua解释器Part5，对Lua解释器进行了整体介绍，并且以一个hello world程序为例子，给读者一个初步的概念。通过那一篇，我们知道了编译器至少要包括词法分析其和语法分析器，而本篇，我将集中时间和精力，用来介绍和讲解Lua词法分析器的设计与实现，实际上，它是对Part5词法分析器部分的一个补充。本文所指的词法分析器，是参照Lua-5.3这个版本的源码，并且亲自动手实现和测试过，它也已经被整合到&lt;a href=&#34;https://github.com/Manistein/dummylua-tutorial&#34;&gt;dummylua&lt;/a&gt;这个工程中，欢迎大家star。由于整个词法分析是我自己重新实现，因此不会在所有的细节上和官方lua保持一致，最后由于本人水平有限，如有写的不正确的地方，欢迎大家批评指正。此外，我已经建了一个qq群(QQ:185017593)，有兴趣参与技术讨论的同学可以加进来。&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建Lua解释器Part5：脚本运行基础架构的设计与实现</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part5%E8%84%9A%E6%9C%AC%E8%BF%90%E8%A1%8C%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 08 Apr 2021 13:02:42 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part5%E8%84%9A%E6%9C%AC%E8%BF%90%E8%A1%8C%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://manistein.club/post/program/let-us-build-a-lua-interpreter/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part5/&#34;&gt;本文转载自Manistein&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;在经过漫长的准备，我终于完成了《构建Lua解释器》系列的第五部分的代码编写，并且通过了预定的测试。本篇我将对&lt;a href=&#34;https://github.com/Manistein/dummylua-tutorial&#34;&gt;dummylua&lt;/a&gt;项目中的脚本运行基础架构的设计与实现进行介绍和解析，它包括了lua编译器基础架构以及虚拟机基础架构。过去4个部分的开发，为本部分提供了坚实且必要的基础，本篇将为编译与运行lua脚本搭建最基础的架构，后续内容将在此架构上继续填充与丰富，本部分，我们的目标是编译并运行如下所示的一段脚本代码：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-- lua script&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-- test file is in scripts/part05_test.lua&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;图 1&#xA;尽管这是一段简单的脚本代码，但是我们要达到目标，需要设计与实现虚拟机基础架构，编译器基础架构以及标准库加载机制等，本身所涉及的工作内容并不轻松，我们需要在原有C语言的工程里实现这些内容，而最终我们的测试用例的C语言代码将像如下所示那样：&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建Lua解释器Part4：Table设计与实现</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part4table%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 08 Apr 2021 12:42:31 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part4table%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://manistein.club/post/program/let-us-build-a-lua-interpreter/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part4/&#34;&gt;本文转载自Manistein&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;本篇我将对dummylua中Table的设计和实现进行介绍和说明。本文的目的旨在梳理清dummylua项目Table的数据结构和运作流程，该部分深度参考了lua-5.3.4的Table设计与实现，由于所有的细节是我自己根据理解重新实现，因此不会在所有的设计细节上和官方lua保持一致，但是遵循了基本的设计思路。&#xA;Table是Lua语言中举足轻重的组成部分，掌握和理解它具有战略意义，这也是实现Lua虚拟机的基础所在，本文首先介绍dummylua项目Table的数据结构，然后在概念上介绍一些基本的操作流程，如创建、resize、查询、插入和迭代等操作。&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建Lua解释器Part3：String设计与实现</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part3string%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 08 Apr 2021 12:28:49 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part3string%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://manistein.club/post/program/let-us-build-a-lua-interpreter/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part3/&#34;&gt;本文转载自Manistein&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;上一章节我介绍了dummylua项目的gc的设计原理和实现方式，该部分我基本是仿造了官方lua-5.3.4的做法。本章节，我将为大家带来dummylua项目TString的设计实现讲解。和以往任何一篇一样，本篇我也是基本遵循lua-5.3的设计思想，但由于实现是我凭理解自己手动实现，因此不会在所有的细节上和官方lua保持一致。&#xA;任何一门语言都要支持字符串，lua也一样，本章将从lua string的数据结构开始阐述，然后深入其他细节进行阐述，并试图揭露这些设计的历史背景和原因，由于本人能力有限，如有不当之处想要指明，或是想和我一起讨论，欢迎加Q群与我讨论(QQ185017593)，我是群主，欢迎大家的到来。&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建Lua解释器Part2：Garbage Collection基础架构</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part2garbage-collection%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Thu, 08 Apr 2021 11:18:57 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part2garbage-collection%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://manistein.club/post/program/let-us-build-a-lua-interpreter/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part2/&#34;&gt;本文转载自Manistein&amp;rsquo;s Blog&#xA;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;上一篇我已经设计和实现了Lua解释器最基础的基本数据结构，实现了纯C函数在栈中的调用流程，以及保护模式调用函数等内容，今天要介绍的则是Lua解释器的GC基础架构。Garbage Collection机制，可能是让人们听之不寒而栗的机制，都说GC很复杂，需要花费大量时间去消化和理解，那为什么要在本系列的第2篇就早早引入？做这个决定并非一时冲动之举，而是经过思考后而决定的。之前在阅读了云风大神翻译的《编程之魂》第7章[1]，这篇关于对Lua设计者的访谈记录中，作者有这么说过：&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建Lua解释器Part1：虚拟机的基础--Lua基本数据结构、栈和基于栈的C函数调用的设计与实现</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part1%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%9F%BA%E7%A1%80--lua%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A0%88%E5%92%8C%E5%9F%BA%E4%BA%8E%E6%A0%88%E7%9A%84c%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 08 Apr 2021 10:44:15 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part1%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%9F%BA%E7%A1%80--lua%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A0%88%E5%92%8C%E5%9F%BA%E4%BA%8E%E6%A0%88%E7%9A%84c%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://manistein.club/post/program/let-us-build-a-lua-interpreter/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part1/&#34;&gt;本文转载自Manistein&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;从本篇开始，我们正式进入到Lua解释器的开发阶段（这是一个遵循Lua5.3标准的项目）。本篇并不直接接入到设计和实现语法分析器和词法分析器的阶段，而是先设计和实现Lua虚拟机的基础数据结构（包括Lua最基本的数据结构，如基本数据类型，表示虚拟机状态的global_State和lua_State结构，在函数调用中扮演重要角色的CallInfo结构等）以及设计和实现基于栈的C函数调用流程。这些都是理解后面虚拟机运作的基础。由于这是一个仿制项目，为了和官方版本做区分，就称之为dummylua，后面要称呼本项目时，一律用dummylua来表示。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C4：4个函数，528行代码实现可自举的 C语言编译器</title>
      <link>http://shanks.link/blog/2021/04/06/c44%E4%B8%AA%E5%87%BD%E6%95%B0528%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8F%AF%E8%87%AA%E4%B8%BE%E7%9A%84-c%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E5%99%A8/</link>
      <pubDate>Tue, 06 Apr 2021 23:10:47 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/06/c44%E4%B8%AA%E5%87%BD%E6%95%B0528%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8F%AF%E8%87%AA%E4%B8%BE%E7%9A%84-c%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E5%99%A8/</guid>
      <description></description>
    </item>
    <item>
      <title>lua源码阅读顺序-建议</title>
      <link>http://shanks.link/blog/2021/04/06/lua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E9%A1%BA%E5%BA%8F-%E5%BB%BA%E8%AE%AE/</link>
      <pubDate>Tue, 06 Apr 2021 22:51:18 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/06/lua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E9%A1%BA%E5%BA%8F-%E5%BB%BA%E8%AE%AE/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.reddit.com/comments/63hth/ask_reddit_which_oss_codebases_out_there_are_so/c02pxbp&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;recommended-reading-order&#34;&gt;Recommended reading order:&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;lmathlib.c, lstrlib.c: get familiar with the external C API. Don&amp;rsquo;t bother with the pattern matcher though. Just the easy functions.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;lapi.c: Check how the API is implemented internally. Only skim this to get a feeling for the code. Cross-reference to lua.h and luaconf.h as needed.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;lobject.h: tagged values and object representation. skim through this first. you&amp;rsquo;ll want to keep a window with this file open all the time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lua虚拟机指令介绍</title>
      <link>http://shanks.link/blog/2021/04/06/lua%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A4%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Tue, 06 Apr 2021 22:51:17 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/06/lua%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A4%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;p&gt;作者：nicochen，腾讯 IEG 游戏开发工程师&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;本文从一个简单示例入手，详细讲解 Lua 字节码文件的存储结构及各字段含义，进而引出 Lua 虚拟机指令集和运行时的核心数据结构 Lua State，最后解释 Lua 虚拟机的 47 条指令如何在 Lua State 上运作的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua52内部实现:GC3</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0gc3/</link>
      <pubDate>Tue, 06 Apr 2021 12:57:07 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0gc3/</guid>
      <description>&lt;h1 id=&#34;gc步骤&#34;&gt;GC步骤&lt;/h1&gt;&#xA;&lt;p&gt;global_State中的gcstate记录了当前incremental gc的执行状态。根据执行状态，整个gc过程被分为很多步执行。&lt;/p&gt;&#xA;&lt;h1 id=&#34;gcspause&#34;&gt;GCSpause&lt;/h1&gt;&#xA;&lt;p&gt;GCSpause状态标志着当前没有开始gc。gc一旦开始，第一步要做的就是标识所有的root对象。root对象包括global_State引用的mainthread对象，registry table，全局的metatable和上次gc所产生的还没有进行finalize的垃圾对象。标识工作就是将white对象设置成gray，是通过函数reallymarkobject进行的。reallymarkobject会根据不同的对象作不同的处理。&#xA;对于string对象，本身没有对其它对象的引用，就可以立即设置成black，无需等待后面的遍历。对于userdata对象，只会引用到一个metatable和env，所以直接mark后也可以立即设置成black。对于upvalue对象，直接mark引用的对象。所有root对象会被设置成gray状态，等待下一步的propagate。第一步完成后，gc状态会切换成GCSpropagate。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua52内部实现:GC2</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0gc2/</link>
      <pubDate>Tue, 06 Apr 2021 12:51:11 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0gc2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yuanlin2008/article/details/8684869&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;gcobject&#34;&gt;GCObject&lt;/h1&gt;&#xA;&lt;p&gt;Lua使用union GCObject来表示所有的垃圾回收对象：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;182 &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;183 ** Union of all collectable objects&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;184 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;185 &lt;span style=&#34;color:#00f&#34;&gt;union&lt;/span&gt; GCObject {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;186   GCheader gch;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* common header */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;187   &lt;span style=&#34;color:#00f&#34;&gt;union&lt;/span&gt; TString ts;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;188   &lt;span style=&#34;color:#00f&#34;&gt;union&lt;/span&gt; Udata u;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;189   &lt;span style=&#34;color:#00f&#34;&gt;union&lt;/span&gt; Closure cl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;190   &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; Table h;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;191   &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; Proto p;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;192   &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; UpVal uv;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;193   &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; lua_State th;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* thread */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;194 };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这就相当于在C++中，将所有的GC对象从GCheader派生，他们都共享GCheader。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua5.2内部实现:Garbage Collection(1) 原理</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0garbage-collection1-%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 06 Apr 2021 12:45:04 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0garbage-collection1-%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yuanlin2008/article/details/8558103&#34;&gt;原文链接&lt;/a&gt;&#xA;Lua5.2采用垃圾回收机制对所有的lua对象(GCObject)进行管理。Lua虚拟机会定期运行GC，释放掉已经不再被被引用到的lua对象。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua52内部实现-Function</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-function/</link>
      <pubDate>Tue, 06 Apr 2021 12:42:56 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-function/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yuanlin2008/article/details/8313434&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;基本概念&#xA;Lua函数引入了很多functional programming的概念，这些概念使得Lua函数在使用上可谓“功能强大，简洁统一”，非常符合程序员的“审美观”。&#xA;函数在Lua中属于“带有词法范围的一类值”(first-class values with proper lexical scoping)。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua52内部实现:TString</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0tstring/</link>
      <pubDate>Tue, 06 Apr 2021 12:41:56 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0tstring/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/yuanlin2008/article/details/8423923&#34;&gt;原文链接&lt;/a&gt;&#xA;Lua使用TString结构体代表一个字符串对象。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Header for string value; string bytes follow the end of this structure&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;union&lt;/span&gt; TString {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L_Umaxalign dummy;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ensures maximum alignment for strings */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CommonHeader;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lu_byte extra;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* reserved words for short strings; &amp;#34;has hash&amp;#34; for longs */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; hash;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; len;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* number of characters in string */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } tsv;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} TString;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;hash用来记录字符串对应的哈希值，len用来记录字符串长度。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua52内部实现-编译系统4-表达式分类</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F4-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%86%E7%B1%BB/</link>
      <pubDate>Tue, 06 Apr 2021 11:59:59 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F4-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%86%E7%B1%BB/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yuanlin2008/article/details/8534583&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;常量表达式&#34;&gt;常量表达式&lt;/h1&gt;&#xA;&lt;p&gt;常量表达式在Lua用来表示&amp;quot;nil&amp;quot;，“true”，“false”，字符串和数字的值。在BNF中常量表达式属于终结符，也就是语法解析的最底端，在simpleexp函数中被解析出来，并创建对应类型的expdesc对象。VNIL，VTRUE和VFALSE这三个类型本身就对应3个固定的值，没有什么额外的数据。VKNUM类型代表数字常量，需要在nval中存放从词法分析中得到的lua_Number。VK类型用来表示一个通常意义上的常量表达式，使用info来存储他所代表的常量值在常量表中的id。字符串常量就被直接创建成VK类型，然后将其对应的字符串值保存到常量表中，并将id保存到info中。&#xA;由于常量表达式的值是一个常量，所以本身不需要生成任何用于估值计算的指令，完全为高层语义的指令生成提供服务。当高层语义要将常量装入一个寄存器时，比如local a＝&amp;ldquo;foo&amp;rdquo;，会调用discharge2reg函数，生成OP_LOADK指令。Lua中的很多指令都可以直接使用常量作为操作数，比如算数指令。当高层语义要将常量当作其他指令的参数时，会调用luaK_exp2RK函数，返回这个常量对应的id。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua52内部实现-编译系统3-表达式</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F3-%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Tue, 06 Apr 2021 11:51:50 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F3-%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>&lt;p&gt;​&#x9;&#x9;表达式(expression)在编程语言中代表一个可以返回值的语法单位，比如常量表达式，变量表达式，函数调用表达式，算术、关系和逻辑表达式等等。对于函数式编程语言来说，几乎所有的语句都是表达式，可以被估值。而对于命令式语言，一般会将语句分成表达式和陈述语句(statement)。表达式可以被估值，而普通的陈述语句用来执行命令。根据具体的语法，这两种类型不一定会有明确的界限。比如在C中，a = b既是一个用来赋值的陈述语句，又是一个表达式，而作为表达式的结果是最终的a值。所以，像c = a = b这样的语句是成立的，意思是将a = b作为表达式，并将值赋给c。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua52内部实现-编译系统2-跳转的处理</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F2-%E8%B7%B3%E8%BD%AC%E7%9A%84%E5%A4%84%E7%90%86/</link>
      <pubDate>Tue, 06 Apr 2021 11:45:14 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F2-%E8%B7%B3%E8%BD%AC%E7%9A%84%E5%A4%84%E7%90%86/</guid>
      <description>&lt;p&gt;​&#x9;跳转用来控制程序的指令流程。Lua使用OP_JMP指令来执行一个跳转，有关OP_JMP的详细介绍，可以参见《虚拟机指令》。跳转可以分为条件跳转和非条件跳转。非条件跳转比较简单，我们可以先从这里入手。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua52内部实现-编译系统1-概述</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F1-%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Tue, 06 Apr 2021 11:35:26 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F1-%E6%A6%82%E8%BF%B0/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yuanlin2008/article/details/8486463&#34;&gt;原文链接&lt;/a&gt;&#xA;Lua是一个轻量级高效率的语言。这种轻量级和高效率不仅体现在它本身虚拟机的运行效率上，而且也体现在他整个的编译系统的实现上。因为绝大多数的lua脚本需要运行期动态的加载编译，如果编译过程本身非常耗时，或者占用很多的内存，也同样会影响到整体的运行效率，使你感觉这个语言不够“动态”。正是因为编译系统实现的非常出色，我们在实际使用lua时基本感觉不到这个过程的存在。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(8) LOOP</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A48-loop/</link>
      <pubDate>Tue, 06 Apr 2021 00:04:49 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A48-loop/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/yuanlin2008/article/details/8505183&#34;&gt;原文链接&lt;/a&gt;&#xA;Lua5.2种除了for循环之外，其他的各种循环都使用关系和逻辑指令，配合JMP指令来完成。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;local&lt;/span&gt; a = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt;(a &amp;lt; 10) &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a = a + 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        1       [1]     LOADK           0 -1    ; 0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        2       [2]     LT              0 0 -2  ; - 10&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        3       [2]     JMP             0 2     ; to 6&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        4       [3]     ADD             0 0 -3  ; - 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        5       [3]     JMP             0 -4    ; to 2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        6       [4]     RETURN          0 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第二行使用LT对寄存器0和敞亮10进行比较，如果小于成立，跳过第三行的JMP，运行第四行的ADD指令，将a加1，然后运行第五行的JMP，跳转回第二行，重新判断条件。如果小于不成立，则直接运行下一个JMP指令，跳转到第六行结束。&#xA;对于for循环，Lua5.2使用了两套专门的指令，分别对应numeric for loop和generic for loop。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(7) 关系和逻辑指令</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A47-%E5%85%B3%E7%B3%BB%E5%92%8C%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Mon, 05 Apr 2021 23:57:32 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A47-%E5%85%B3%E7%B3%BB%E5%92%8C%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yuanlin2008/article/details/8504200&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name&#x9;args&#x9;desc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_JMP&#x9;A sBx&#x9;pc+=sBx; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (A) close all upvalues &amp;gt;= R(A) + 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;JMP执行一个跳转，sBx表示跳转的偏移位置，被加到当前指向下一指令的指令指针上。如果sBx为0，表示没有任何跳转；1表示跳过下一个指令；-1表示重新执行当前指令。如果A&amp;gt;0，表示需要关闭所有从寄存器A+1开始的所有local变量。实际执行的关闭操作只对upvalue有效。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(6）FUNCTION</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A46function/</link>
      <pubDate>Mon, 05 Apr 2021 23:49:45 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A46function/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yuanlin2008/article/details/8494636&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;name    args    desc&#xA;OP_CALL    A B C    A B C   R(A), &amp;hellip; ,R(A+C-2) := R(A)(R(A+1), &amp;hellip; ,R(A+B-1))&#xA;CALL执行一个函数调用。寄存器A中存放函数对象，所有参数按顺序放置在A后面的寄存器中。B－1表示参数个数 。如果参数列表的最后一个表达式是变长的，则B会设置为0，表示使用A＋1到当前栈顶作为参数。函数调用的返回值会按顺序存放在从寄存器A开始的C-1个寄存器中。如果C为0,表示返回值的个数由函数决定。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(5）Arithmetic</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A45arithmetic/</link>
      <pubDate>Mon, 05 Apr 2021 23:16:09 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A45arithmetic/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/pyf09/article/details/92852103&#34;&gt;原文链接&lt;/a&gt;&#xA;name    args    desc&#xA;OP_ADD    A B C    R(A) := RK(B) + RK(C)&#xA;OP_SUB    A B C    R(A) := RK(B) - RK(C)&#xA;OP_MUL    A B C    R(A) := RK(B) * RK(C)&#xA;OP_DIV    A B C    R(A) := RK(B) / RK(C)&#xA;OP_MOD    A B C    R(A) := RK(B) % RK(C)&#xA;OP_POW    A B C    R(A) := RK(B) ^ RK(C)&#xA;上表中的指令都是与lua本身的二元操作符一一对应的标准3地址指令。B和C两个操作数计算的结果存入A中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(4) Table</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A44-table/</link>
      <pubDate>Mon, 05 Apr 2021 22:22:31 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A44-table/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yuanlin2008/article/details/8493104&#34;&gt;原文链接&lt;/a&gt;&#xA;name&#x9;args&#x9;desc&#xA;OP_NEWTABLE&#x9;A B C&#x9;R(A) := {} (size = B,C)&#xA;NEWTABLE在寄存器A处创建一个table对象。B和C分别用来存储这个table数组部分和hash部分的初始大小。初始大小是在编译期计算出来并生成到这个指令中的，目的是使接下来对table的初始化填充不会造成rehash而影响效率。B和C使用“floating point byte”的方法来表示成(eeeeexxx)的二进制形式，其实际值为(1xxx) * 2^(eeeee-1)。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(3) Upvalues &amp; Globals</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A43-upvalues-globals/</link>
      <pubDate>Mon, 05 Apr 2021 22:20:15 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A43-upvalues-globals/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yuanlin2008/article/details/8491144&#34;&gt;原文链接&lt;/a&gt;&#xA;在编译期，如果要访问变量a时，会依照以下的顺序决定变量a的类型：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;a是当前函数的local变量&lt;/li&gt;&#xA;&lt;li&gt;a是外层函数的local变量，那么a是当前函数的upvalue&lt;/li&gt;&#xA;&lt;li&gt;a是全局变量&#xA;local变量本身就存在于当前的register中，所有的指令都可以直接使用它的id来访问。而对于upvalue，lua则有专门的指令负责获取和设置。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;全局变量在lua5.1中也是使用专门的指令，而5.2对这一点做了改变。Lua5.2种没有专门针对全局变量的指令，而是把全局表放到最外层函数的名字为&amp;quot;_ENV&amp;quot;的upvalue中。对于全局变量a，相当于编译期帮你改成了_ENV.a来进行访问。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(2) MOVE &amp; LOAD</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A42-move-load/</link>
      <pubDate>Mon, 05 Apr 2021 22:07:13 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A42-move-load/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yuanlin2008/article/details/8491112&#34;&gt;原文链接&lt;/a&gt;&#xA;| name&#x9;  | args&#x9;| desc        |&#xA;| OP_MOVE |&#x9;A B&#x9;    | R(A) := R(B) |&#xA;OP_MOVE用来将寄存器B中的值拷贝到寄存器A中。由于Lua是register based vm，大部分的指令都是直接对寄存器进行操作，而不需要对数据进行压栈和弹栈，所以需要OP_MOVE指令的地方并不多。最直接的使用之处就是将一个local变量复制给另一个local变量时:&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua52内部实现-虚拟机指令1概述</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A41%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Mon, 05 Apr 2021 21:38:47 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A41%E6%A6%82%E8%BF%B0/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yuanlin2008/article/details/8423951&#34;&gt;原文链接&lt;/a&gt;&#xA;Lua一直把虚拟机执行代码的效率作为一个非常重要的设计目标。而采用什么样的指令系统的对于虚拟机的执行效率来说至关重要。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Stack based vs Register based VM&lt;/strong&gt;&#xA;根据指令获取操作数方式的不同，我们可以把虚拟机的实现分为stack based和register based。&lt;/p&gt;</description>
    </item>
    <item>
      <title>lua的历史与演进</title>
      <link>http://shanks.link/blog/2021/04/05/lua%E7%9A%84%E5%8E%86%E5%8F%B2%E4%B8%8E%E6%BC%94%E8%BF%9B/</link>
      <pubDate>Mon, 05 Apr 2021 20:08:32 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/05/lua%E7%9A%84%E5%8E%86%E5%8F%B2%E4%B8%8E%E6%BC%94%E8%BF%9B/</guid>
      <description>&lt;p&gt;lua的优点：&lt;/p&gt;&#xA;&lt;p&gt;可移植性&#xA;容易嵌入&#xA;体积小&#xA;高效率&#xA;这些优点都来自于lua的设计目标：简洁。从Scheme获得了很多灵感，包括匿名函数，合理的语义域概念&lt;/p&gt;&#xA;&lt;h1 id=&#34;3-lua前身&#34;&gt;3 lua前身&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;巴西被商贸限制，引入计算机软件和硬件受限，巴西人有强烈的民族情绪去创造自己的软件。三名作者都是同一个实验室Tecgraf的，这个实验室与很多工业实体有合作关系。成立的头十年，重点是创造交互性的图形软件，帮助合作伙伴进行设计。巴西石油公司是其中一个重要伙伴。有大量的遗留数据需要处理。于是诞生了DEL，一个领域专用语言，主要用来描述数据流图的数据的。后来人们对DEL需求越来越多，不止是一门简单的数据描述语言可以解决的了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go单例模式</title>
      <link>http://shanks.link/blog/2021/04/05/go%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 05 Apr 2021 12:09:42 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/05/go%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/JAlt0JQt8hkPCxYbmOMFJw&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Go语言中的单例模式&lt;/strong&gt;&#xA;在过去的几年中，Go语言的发展是惊人的，并且吸引了很多由其他语言（Python、PHP、Ruby）转向Go语言的跨语言学习者。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang 切片与函数参数陷阱</title>
      <link>http://shanks.link/blog/2021/04/05/golang-%E5%88%87%E7%89%87%E4%B8%8E%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E9%99%B7%E9%98%B1/</link>
      <pubDate>Mon, 05 Apr 2021 12:03:39 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/05/golang-%E5%88%87%E7%89%87%E4%B8%8E%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E9%99%B7%E9%98%B1/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://studygolang.com/articles/9876&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;线性结构是计算机最常用的数据结构之一。无论是数组（arrary）还是链表（list），在编程中不可或缺。golang也有数组，不同于别的语言，golang还提供了切片（slice）。切片比数组有更好的灵活性，具有某些动态特性。然而切片又不像动态语言的列表（Python list）。不明白切片的基本实现，写程序的时候容易掉“坑”里。&#xA;&lt;strong&gt;slice参数&lt;/strong&gt;&#xA;本来写一个堆排序，使用了golang的slice来做堆，可是发现在pop数据的时候，切片不改变。进而引发了golang函数切片的参数，是传值还是传引用呢？我们知道slice相比array是引用类型。那么直觉上告诉我们如果函数修改了参数的切片，那么外层的切片变量也会变啦。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go 汇编入门 如何学习Golang？万字详文教你Go语言入门</title>
      <link>http://shanks.link/blog/2021/04/04/go-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8-%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0golang%E4%B8%87%E5%AD%97%E8%AF%A6%E6%96%87%E6%95%99%E4%BD%A0go%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/</link>
      <pubDate>Sun, 04 Apr 2021 21:15:18 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/04/go-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8-%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0golang%E4%B8%87%E5%AD%97%E8%AF%A6%E6%96%87%E6%95%99%E4%BD%A0go%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/</guid>
      <description>&lt;p&gt;作者：&lt;a href=&#34;https://www.toutiao.com/i6882641627349778955/&#34;&gt;ivansli&lt;/a&gt;，腾讯开发工程师&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;在深入学习 Golang 的 runtime 和标准库实现的时候发现，如果对 Golang 汇编没有一定了解的话，很难深入了解其底层实现机制。在这里整理总结了一份基础的 Golang 汇编入门知识，通过学习之后能够对其底层实现有一定的认识。&lt;/p&gt;</description>
    </item>
    <item>
      <title>深入浅出Go Runtime</title>
      <link>http://shanks.link/blog/2021/04/04/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAgo-runtime/</link>
      <pubDate>Sun, 04 Apr 2021 20:53:10 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/04/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAgo-runtime/</guid>
      <description>&lt;p&gt;以下内容转载自 &lt;a href=&#34;https://mp.weixin.qq.com/s/ivO-USpxiyrL-9BzgE8Vcg&#34;&gt;yifhao&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;介绍&lt;/p&gt;&#xA;&lt;p&gt;基于2019.02发布的go 1.12 linux amd64版本, 主要介绍了Runtime一些原理和实现的一些细节, 对大家容易不容易理解或者网络上很多错误的地方做一些梳理:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goroutine 的切换过程涉及了什么</title>
      <link>http://shanks.link/blog/2021/04/04/goroutine-%E7%9A%84%E5%88%87%E6%8D%A2%E8%BF%87%E7%A8%8B%E6%B6%89%E5%8F%8A%E4%BA%86%E4%BB%80%E4%B9%88/</link>
      <pubDate>Sun, 04 Apr 2021 17:56:52 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/04/goroutine-%E7%9A%84%E5%88%87%E6%8D%A2%E8%BF%87%E7%A8%8B%E6%B6%89%E5%8F%8A%E4%BA%86%E4%BB%80%E4%B9%88/</guid>
      <description>&lt;p&gt;GCTT:anxk Go语言中文网 &lt;a href=&#34;https://mp.weixin.qq.com/s/r0y4Fweq-YGo1FZrsNsl3A&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;点击上方蓝色“Go语言中文网”关注，每天一起学 Go&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/e0dda0b377c4e8f6c613e523208ae875.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Illustration created for “A Journey With Go”, made from the original Go Gopher, created by Renee French.&lt;/p&gt;&#xA;&lt;p&gt;本文基于 Go 1.13 版本。&lt;/p&gt;&#xA;&lt;p&gt;Goroutine 很轻，它只需要 2Kb 的内存堆栈即可运行。另外，它们运行起来也很廉价，将一个 Goroutine 切换到另一个的过程不牵涉到很多的操作。在深入 Goroutine 切换过程之前，让我们回顾一下 Goroutine 的切换在更高的层次上是如何进行的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go：Goroutine, OS线程 以及 CPU管理</title>
      <link>http://shanks.link/blog/2021/04/04/gogoroutine-os%E7%BA%BF%E7%A8%8B-%E4%BB%A5%E5%8F%8A-cpu%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sun, 04 Apr 2021 17:22:55 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/04/gogoroutine-os%E7%BA%BF%E7%A8%8B-%E4%BB%A5%E5%8F%8A-cpu%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://studygolang.com/articles/24986?fr=sidebar&#34;&gt;中文翻译&lt;/a&gt; &lt;a href=&#34;https://medium.com/a-journey-with-go/go-goroutine-os-thread-and-cpu-management-2f5a5eaf518a&#34;&gt;英文原文&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/ee06766dac7ef695b03463d38ad1b32f.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;操作系统的线程创建以及切换是需要开销的，会影响程序的性能。Go致力于尽可能地从内核中获取优势，所以从最开始的时候设计就考虑到了并发性。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;M，P，G 编排&lt;/strong&gt;&#xA;为了解决这个问题，Go有他自己的调度者，负责在线程上分配goroutines。这个协调者由3个概念组成，如下：&lt;/p&gt;</description>
    </item>
    <item>
      <title>go g0,特殊的Goroutinue</title>
      <link>http://shanks.link/blog/2021/04/04/go-g0%E7%89%B9%E6%AE%8A%E7%9A%84goroutinue/</link>
      <pubDate>Sun, 04 Apr 2021 17:14:06 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/04/go-g0%E7%89%B9%E6%AE%8A%E7%9A%84goroutinue/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://studygolang.com/articles/28443&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;ℹ️ 这篇文章基于 Go 1.13。&lt;/p&gt;&#xA;&lt;p&gt;在 Go 中创建的所有 Goroutine 都会被一个内部的调度器所管理。Go 调度器尝试为所有的 Goroutine 分配运行时间，并且在当前的 Goroutine 阻塞或者终止的时候，Go 调度器会通过运行 Goroutine 的方式使所有 CPU 保持忙碌状态。这个调度器实际上是作为一个特殊的 Goroutine 运行的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goroutine 数量控制在多少合适，会影响 GC 和调度？</title>
      <link>http://shanks.link/blog/2021/04/04/goroutine-%E6%95%B0%E9%87%8F%E6%8E%A7%E5%88%B6%E5%9C%A8%E5%A4%9A%E5%B0%91%E5%90%88%E9%80%82%E4%BC%9A%E5%BD%B1%E5%93%8D-gc-%E5%92%8C%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Sun, 04 Apr 2021 17:02:42 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/04/goroutine-%E6%95%B0%E9%87%8F%E6%8E%A7%E5%88%B6%E5%9C%A8%E5%A4%9A%E5%B0%91%E5%90%88%E9%80%82%E4%BC%9A%E5%BD%B1%E5%93%8D-gc-%E5%92%8C%E8%B0%83%E5%BA%A6/</guid>
      <description>&lt;p&gt;大家好，我是煎鱼&lt;a href=&#34;https://mp.weixin.qq.com/s/uWP2X6iFu7BtwjIv5H55vw&#34;&gt;&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;前几天在读者交流群里看到一位小伙伴，发出了一个致命提问，那就是：“单机的 goroutine 数量控制在多少比较合适？”。&lt;/p&gt;&#xA;&lt;p&gt;也许你和群内小伙伴第一反应一样，会答复 “控制多少，我觉得没有定论”。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go高效内存分配</title>
      <link>http://shanks.link/blog/2021/04/04/go%E9%AB%98%E6%95%88%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</link>
      <pubDate>Sun, 04 Apr 2021 16:38:51 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/04/go%E9%AB%98%E6%95%88%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://segment.com/blog/allocation-efficiency-in-high-performance-go-services/&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;手动内存管理真的很坑爹(如C C++)，好在我们有强大的自动化系统能够管理内存分配和生命周期，从而解放我们的双手。&lt;/p&gt;&#xA;&lt;p&gt;但是呢，如果你想通过调整JVM垃圾回收器参数或者是优化go代码的内存分配模式话来解决问题的话，这是远远不够的。自动化的内存管理帮我们规避了大部分的错误，但这只是故事的一半。我们必须要合理有效构建我们的软件，这样垃圾回收系统可以有效工作。&lt;/p&gt;</description>
    </item>
    <item>
      <title>垃圾回收GC浅谈</title>
      <link>http://shanks.link/blog/2021/04/04/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6gc%E6%B5%85%E8%B0%88/</link>
      <pubDate>Sun, 04 Apr 2021 16:30:16 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/04/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6gc%E6%B5%85%E8%B0%88/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844903857609244685&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;关于内存&lt;/strong&gt;&#xA;计算机通过两个机制，去实现内存的高效使用。&lt;/p&gt;&#xA;&lt;p&gt;第一种机制是虚拟内存。硬盘的容量其实是远远大于内存的(RAM)，虚拟内存会在内存不足的时候，把不经常访问的内存的数据写到硬盘里。虽然说硬盘容量比较大，但是它的访问速度却很慢。如果内存和硬盘交换数据过于频繁，处理速度就会下降，计算机就会看上去像卡死了一样，这种现象被叫做抖动(Thrushing)。造成电脑蓝屏的主要原因之一就是抖动。&lt;/p&gt;</description>
    </item>
    <item>
      <title>详解Go逃逸分析</title>
      <link>http://shanks.link/blog/2021/04/04/%E8%AF%A6%E8%A7%A3go%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 04 Apr 2021 16:15:00 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/04/%E8%AF%A6%E8%A7%A3go%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;原文链接&lt;a href=&#34;https://juejin.cn/post/6917201712029630478&#34;&gt;机器铃砍菜刀&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Go是一门带有垃圾回收的现代语言，它抛弃了传统C/C++的开发者需要手动管理内存的方式，实现了内存的主动申请和释放的管理。Go的垃圾回收，让堆和栈的概念对程序员保持透明，它增加的逃逸分析与GC，使得程序员的双手真正地得到了解放，给了开发者更多的精力去关注软件设计本身。&lt;/p&gt;</description>
    </item>
    <item>
      <title>理解golang调度之三：并发</title>
      <link>http://shanks.link/blog/2021/04/04/%E7%90%86%E8%A7%A3golang%E8%B0%83%E5%BA%A6%E4%B9%8B%E4%B8%89%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Sun, 04 Apr 2021 00:42:03 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/04/%E7%90%86%E8%A7%A3golang%E8%B0%83%E5%BA%A6%E4%B9%8B%E4%B8%89%E5%B9%B6%E5%8F%91/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;&lt;strong&gt;简介&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;当我在解决一个问题尤其是新问题的时候，我开始不会去考虑并发(concurrency)是否合适。我首先会去找一系列的解决方式然后确保它有效。然后在可读性和技术方案评估之后，我会开始去考虑并发是否实际合理。有些时候并发的好处是显而易见的，但是有时候并不是很明显。&#xA;第一篇文章，我解释了OS调度器的相关内容，我觉得这部分对于你写多线程代码很重要。第二篇里，我讲解了一些Go调度器的一些内容，这部分对于你理解和写go的并发代码很有帮助。在这篇文章里，我会在OS和Go调度器层面让你去深层次的理解并发到底是什么。&#xA;这部分内容的目标是：&lt;/p&gt;</description>
    </item>
    <item>
      <title>理解golang调度之二 ：Go调度器</title>
      <link>http://shanks.link/blog/2021/04/04/%E7%90%86%E8%A7%A3golang%E8%B0%83%E5%BA%A6%E4%B9%8B%E4%BA%8C-go%E8%B0%83%E5%BA%A6%E5%99%A8/</link>
      <pubDate>Sun, 04 Apr 2021 00:32:10 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/04/%E7%90%86%E8%A7%A3golang%E8%B0%83%E5%BA%A6%E4%B9%8B%E4%BA%8C-go%E8%B0%83%E5%BA%A6%E5%99%A8/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;&lt;a href=&#34;https://juejin.cn/post/6844903846825705485&#34;&gt;原文链接&lt;/a&gt;&#xA;&lt;strong&gt;简介&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;从一个程序开始&#34;&gt;第一篇文章解释了关于操作系统层级的调度，这对于理解Go的调度是很重要的。这一部分我会在语义层级解释Go调度器是如何工作的，并且着重关注它的一些高级特性。Go 调度器是一个十分复杂的系统，特别细节的地方不重要，重要的是对于它的工作模式有一个好的理解，这会让你做出更好的工程方面的决定。&#xA;&lt;strong&gt;从一个程序开始&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;当你的go程序启动，主机上定义的每一个虚拟内核都会为它分配一个逻辑处理器(P)，如果你的处理器上每个物理内核有多个硬件线程（超线程），每个硬件线程对于你的go程序来说就是一个虚拟内核。为了理解这个事情，看一下我的MacBook Pro的系统配置。&#xA;图2.1&#xA;&lt;img src=&#34;https://user-gold-cdn.xitu.io/2019/5/19/16acf54c9af604f8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&#34; alt=&#34;&#34;&gt;&#xA;你可以看到一个单独处理器有4个物理核心。配置表上没说每个物理核心有多少个硬件线程。Intel Core i7 处理器有自己的超线程，也就是每个物理内核上有两个硬件线程。因此Go程序知道并行执行操作系统线程的时候，会有8个虚拟内核可以用&#xA;验证一下，看一下下面的程序&#xA;&lt;strong&gt;L1&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>理解golang调度之一 ：操作系统调度</title>
      <link>http://shanks.link/blog/2021/04/04/%E7%90%86%E8%A7%A3golang%E8%B0%83%E5%BA%A6%E4%B9%8B%E4%B8%80-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Sun, 04 Apr 2021 00:23:24 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/04/%E7%90%86%E8%A7%A3golang%E8%B0%83%E5%BA%A6%E4%B9%8B%E4%B8%80-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%B0%83%E5%BA%A6/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;&lt;a href=&#34;https://juejin.im/post/6844903846284787719&#34;&gt;原文链接&lt;/a&gt;&#xA;&lt;strong&gt;简介&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;操作系统调度器&#34;&gt;golang调度器的设计行为能够使你的多线程go程序更有效率、性能更好，这要归功于golang调度器对于操作系统调度器的支持。对于一个golang开发者来说，同时深刻理解操作系统调度和golang调度器工作原理，能够让你的golang程序设计和开发走到正确道路上。&#xA;&lt;strong&gt;操作系统调度器&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;执行指令&#34;&gt;操作系统调度器十分复杂，它必须要考虑到底层的硬件结构，包括但不限于处理器数和内核数，cpu cache和NUMA。如果没有这些东西，调度器就没办法尽可能有效的工作。&#xA;程序其实就是一系列按顺序执行的机器指令。为了能让其正常干活，操作系统使用了线程的概念。线程会处理和执行分配给它的一系列的机器指令。线程会一直执行这些机器指令，直到没有指令再去执行了。这也是为什么把线程称作&amp;quot;a path of execution&amp;quot;。&#xA;每个运行程序都会创建一个进程，每个进程都会有一个初始线程。线程能够创建更多的线程。这些不同的线程独立运行并且调度行为是线程级别决定的，而不是在进程级别。线程能够并发的执行(单独内核上每个线程会轮询占用一段cpu时间),而不是并行执行(在不同内核上同时执行)。线程同时会维持它自己的状态，并且能够在本地安全、独立地执行他自己的指令。这也说明了为什么线程是cpu调度的最小单位。&#xA;操作系统调度器，它负责确保在有线程能够运行的时候内核不会空闲下来。它会制造一种假象——所有能够跑的线程此时都在同时执行。为此，调度器需要优先执行高优先级的线程，但是它也必须保证低优先级的线程不会饿死。调度器也必须尽可能将调度延时压倒最少，。&#xA;好在许多算法的应用使得调度器更加高效。下面解释一些重要的概念。&#xA;&lt;strong&gt;执行指令&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;程序计数器(PC)，有时候也叫做指令指针(IP)，能够让你找到下一个要执行的指令。大部分的处理器里，PC指向下一个指令。&#xA;&lt;img src=&#34;https://user-gold-cdn.xitu.io/2019/5/17/16ac61a45164982f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&#34; alt=&#34;&#34;&gt;&#xA;如果你曾经注意到go程序的追踪栈，你会注意到这些每一行末尾的16进制数字。例如Listing 1里的+0x39和+0x72&#xA;Listing 1&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang 中的垃圾回收（一）</title>
      <link>http://shanks.link/blog/2021/04/03/golang-%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%80/</link>
      <pubDate>Sat, 03 Apr 2021 23:41:35 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/golang-%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%80/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844903888177332237&#34;&gt;原文链接&lt;/a&gt;&#xA;垃圾回收器负责追踪堆内存的分配，释放掉不需要的空间，追踪那些还在使用的分配空间。不同编程语言对这个机制的实现都很复杂，但是开发人员开发软件时候并不需要了解垃圾回收太细节的东西就能进行构建。另外，不同发布版本编程语言的VM和runtime也总是在改变和进化。对于应用开发人员来说，重要的是保持一个良好的work模型，了解编程语言里垃圾回收器的行为并且它们是怎么样支持这种行为的。&#xA;对于go 1.12版本来说，go语言使用了非分代，并发的三色标记和清扫的回收器。如果想了解如何进行标记和清扫的工作，请参考这篇文章。golang的垃圾回收器的实现每个版本都在更新和进化。因此一旦下个版本发布，讲任何细节的实现都不再准确。&#xA;总而言之，这篇文章不会去讲实际的实现细节。我会为你分享回收器的一些行为并且去解释怎样面对这些行为，不考虑实现细节以及未来的改变。这将会使你成为一个更好的golang开发者&#xA;&lt;strong&gt;堆不是一个容器&lt;/strong&gt;&#xA;我不会把堆看做是一个可以存储或者是释放值的容器。理解这件事情很重要，内存里并没有明确定义了“堆”的一个分界线。任何应用程序预留的内存空间，在堆内存分配上是可用的。给定任何堆内存分配空间，它实际在虚拟内存还是物理内存上的存储位置和我们的模型并没有关联。理解这件事情会帮助你更好的理解垃圾回收模型的工作方式。&#xA;&lt;strong&gt;回收器行为&lt;/strong&gt;&#xA;当回收开始，回收器会完成三个阶段的工作。这其中两个阶段会产生Stop The World(STW) 延迟，并且另一个阶段也会产生延迟，并且会导致降低应用程序的吞吐量。这三个阶段是：&lt;/p&gt;</description>
    </item>
    <item>
      <title>go 垃圾回收：三色算法</title>
      <link>http://shanks.link/blog/2021/04/03/go-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%89%E8%89%B2%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 03 Apr 2021 23:36:19 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/go-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%89%E8%89%B2%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844903897253806088&#34;&gt;原文链接&lt;/a&gt;&#xA;三色算法&#xA;go垃圾回收器的操作都是基于三色算法，这篇文章主要来说明此算法。&lt;/p&gt;&#xA;&lt;p&gt;注意：三色算法并不是go独有的，它也会在其它编程语言中使用到&lt;/p&gt;&#xA;&lt;p&gt;严格来说，在Go中这个算法的官方名称是叫做&lt;strong&gt;三色标记清除算法&lt;/strong&gt;（tricolor mark-and-sweep algorithm）。它可以和程序一起并发工作并且使用&lt;strong&gt;写屏障&lt;/strong&gt;（write barrier）。这就意味着，当Go程序员运行起来，go调度器去负责应用程序的调度，而垃圾回收器会像调度器处理常规应用程序一样，去使用多个goroutines去进行工作。&lt;/p&gt;</description>
    </item>
    <item>
      <title>深入 Go Golang 内存分配超级棒的文章：Go 内存分配器可视化指南</title>
      <link>http://shanks.link/blog/2021/04/03/%E6%B7%B1%E5%85%A5-go-golang-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E8%B6%85%E7%BA%A7%E6%A3%92%E7%9A%84%E6%96%87%E7%AB%A0go-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8%E5%8F%AF%E8%A7%86%E5%8C%96%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sat, 03 Apr 2021 23:18:12 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/%E6%B7%B1%E5%85%A5-go-golang-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E8%B6%85%E7%BA%A7%E6%A3%92%E7%9A%84%E6%96%87%E7%AB%A0go-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8%E5%8F%AF%E8%A7%86%E5%8C%96%E6%8C%87%E5%8D%97/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.toutiao.com/i6777555732402274830/&#34;&gt;翻译地址&lt;/a&gt; &lt;a href=&#34;https://github.com/coldnight/go-memory-allocator-visual-guide&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;当我第一次开始尝试理解 Go 语言的内存分配器时，整个过程让我抓狂。一切看起来都像一个神秘的黑盒子。因为几乎所有技术魔法（technical wizardry）都隐藏在抽象之下，所以你需要一层一层的剥离才能去理解它。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go 定时器 ticker和timer</title>
      <link>http://shanks.link/blog/2021/04/03/go-%E5%AE%9A%E6%97%B6%E5%99%A8-ticker%E5%92%8Ctimer/</link>
      <pubDate>Sat, 03 Apr 2021 23:13:19 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/go-%E5%AE%9A%E6%97%B6%E5%99%A8-ticker%E5%92%8Ctimer/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/lanyang123456/article/details/79794183&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;两种类型的定时器：ticker和timer。两者有什么区别呢？请看如下代码：&lt;/p&gt;&#xA;&lt;p&gt;ticker&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;package&lt;/span&gt; main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        d := time.&lt;span style=&#34;color:#c34e00&#34;&gt;Duration&lt;/span&gt;(time.Second*2)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        t := time.&lt;span style=&#34;color:#c34e00&#34;&gt;NewTicker&lt;/span&gt;(d)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;defer&lt;/span&gt; t.&lt;span style=&#34;color:#c34e00&#34;&gt;Stop&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;- t.C&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                fmt.&lt;span style=&#34;color:#c34e00&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;timeout...&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;timeout…&#xA;timeout…&#xA;timeout…&lt;/p&gt;</description>
    </item>
    <item>
      <title>go 使用protobuf</title>
      <link>http://shanks.link/blog/2021/04/03/go-%E4%BD%BF%E7%94%A8protobuf/</link>
      <pubDate>Sat, 03 Apr 2021 23:03:31 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/go-%E4%BD%BF%E7%94%A8protobuf/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000009277748&#34;&gt;原文链接&lt;/a&gt;发布于 2017-05-03&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;为什么要使用protobuf&lt;/strong&gt;&#xA;最近的项目中，一直使用Json做数据传输。Json用起来的确很方便。但相对于protobuf数据量更大些。做一个移动端应用，为用户省点流量还是很有必要的。正好也可以学习一下protobuf的使用&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Use Websockets in go</title>
      <link>http://shanks.link/blog/2021/04/03/how-to-use-websockets-in-go/</link>
      <pubDate>Sat, 03 Apr 2021 22:54:19 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/how-to-use-websockets-in-go/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://yalantis.com/blog/how-to-build-websockets-in-go/&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Sending a message and getting an instant response without refreshing the page is something we take for granted. But in the past, enabling real-time functionality was a real challenge for developers. The developer community has come a long way from HTTP long polling and AJAX and has finally found a solution for building truly real-time apps.&lt;/p&gt;&#xA;&lt;p&gt;This solution comes in the form of WebSockets, which make it possible to open an interactive session between a user’s browser and a server. WebSockets allow a browser to send messages to a server and receive event-driven responses without having to poll the server for a reply.&lt;/p&gt;</description>
    </item>
    <item>
      <title>go系统学习推荐书籍</title>
      <link>http://shanks.link/blog/2021/04/03/go%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E6%8E%A8%E8%8D%90%E4%B9%A6%E7%B1%8D/</link>
      <pubDate>Sat, 03 Apr 2021 22:36:26 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/go%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E6%8E%A8%E8%8D%90%E4%B9%A6%E7%B1%8D/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://tonybai.com/2020/11/04/the-recommend-books-list-for-learning-go/&#34;&gt;Tony Bai&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;一个程序员的心路历程&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Go语言的发展现状&#xA;如果从2007年9月20日那个下午三个“程序员大佬”在谷歌总部的一间办公室里进行的一次有关设计一门新编程语言的讨论算起，那么Go语言已经度过了自己的13个年头了。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/2d81729a32d793d6a63a5a0ed77b953f.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>go post请求常用的几种方式</title>
      <link>http://shanks.link/blog/2021/04/03/go-post%E8%AF%B7%E6%B1%82%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Sat, 03 Apr 2021 22:31:41 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/go-post%E8%AF%B7%E6%B1%82%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/mofiu/article/details/79925994&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;post请求常用的几种方式，记录一下&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;httpPost&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resp, err := http.&lt;span style=&#34;color:#c34e00&#34;&gt;Post&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;https://www.abcd123.top/api/v1/login&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;application/x-www-form-urlencoded&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        strings.&lt;span style=&#34;color:#c34e00&#34;&gt;NewReader&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;username=test&amp;amp;password=ab123123&amp;#34;&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#00f&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fmt.&lt;span style=&#34;color:#c34e00&#34;&gt;Println&lt;/span&gt;(err)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;defer&lt;/span&gt; resp.Body.&lt;span style=&#34;color:#c34e00&#34;&gt;Close&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    body, err := ioutil.&lt;span style=&#34;color:#c34e00&#34;&gt;ReadAll&lt;/span&gt;(resp.Body)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#00f&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;// handle error&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fmt.&lt;span style=&#34;color:#c34e00&#34;&gt;Println&lt;/span&gt;(string(body))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;httpPostForm&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resp, err := http.&lt;span style=&#34;color:#c34e00&#34;&gt;PostForm&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;https://www.denlery.top/api/v1/login&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        url.Values{&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;auto&amp;#34;&lt;/span&gt;}, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;auto123123&amp;#34;&lt;/span&gt;}})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#00f&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;// handle error&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;defer&lt;/span&gt; resp.Body.&lt;span style=&#34;color:#c34e00&#34;&gt;Close&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    body, err := ioutil.&lt;span style=&#34;color:#c34e00&#34;&gt;ReadAll&lt;/span&gt;(resp.Body)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#00f&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;// handle error&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fmt.&lt;span style=&#34;color:#c34e00&#34;&gt;Println&lt;/span&gt;(string(body))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;httpPostJson&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    jsonStr :=[]byte(&lt;span style=&#34;color:#009c00&#34;&gt;`{ &amp;#34;username&amp;#34;: &amp;#34;auto&amp;#34;, &amp;#34;password&amp;#34;: &amp;#34;auto123123&amp;#34; }`&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    url:= &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;https://www.denlery.top/api/v1/login&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    req, err := http.&lt;span style=&#34;color:#c34e00&#34;&gt;NewRequest&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;, url, bytes.&lt;span style=&#34;color:#c34e00&#34;&gt;NewBuffer&lt;/span&gt;(jsonStr))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    req.Header.&lt;span style=&#34;color:#c34e00&#34;&gt;Set&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    client := &amp;amp;http.Client{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resp, err := client.&lt;span style=&#34;color:#c34e00&#34;&gt;Do&lt;/span&gt;(req)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#00f&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;// handle error&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;defer&lt;/span&gt; resp.Body.&lt;span style=&#34;color:#c34e00&#34;&gt;Close&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    statuscode := resp.StatusCode&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    hea := resp.Header&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    body, _ := ioutil.&lt;span style=&#34;color:#c34e00&#34;&gt;ReadAll&lt;/span&gt;(resp.Body)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fmt.&lt;span style=&#34;color:#c34e00&#34;&gt;Println&lt;/span&gt;(string(body))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fmt.&lt;span style=&#34;color:#c34e00&#34;&gt;Println&lt;/span&gt;(statuscode)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fmt.&lt;span style=&#34;color:#c34e00&#34;&gt;Println&lt;/span&gt;(hea)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>go中的init函数以及main函数</title>
      <link>http://shanks.link/blog/2021/04/03/go%E4%B8%AD%E7%9A%84init%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8Amain%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 03 Apr 2021 22:27:14 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/go%E4%B8%AD%E7%9A%84init%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8Amain%E5%87%BD%E6%95%B0/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/TimLiuDream/p/9929934.html&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;首先我们看一个例子：init函数：&lt;/p&gt;&#xA;&lt;p&gt;init 函数可在package main中，可在其他package中，可在同一个package中出现多次。&lt;/p&gt;&#xA;&lt;p&gt;main函数&lt;/p&gt;</description>
    </item>
    <item>
      <title>go 语言中关于包导入必学的8个知识点</title>
      <link>http://shanks.link/blog/2021/04/03/go-%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%85%B3%E4%BA%8E%E5%8C%85%E5%AF%BC%E5%85%A5%E5%BF%85%E5%AD%A6%E7%9A%848%E4%B8%AA%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
      <pubDate>Sat, 03 Apr 2021 22:21:55 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/go-%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%85%B3%E4%BA%8E%E5%8C%85%E5%AF%BC%E5%85%A5%E5%BF%85%E5%AD%A6%E7%9A%848%E4%B8%AA%E7%9F%A5%E8%AF%86%E7%82%B9/</guid>
      <description>&lt;p&gt;Hi，大家好，我是明哥&lt;a href=&#34;https://juejin.im/post/6844904167073382408&#34;&gt;&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;在自己学习 Golang 的这段时间里，我写了详细的学习笔记放在我的个人微信公众号 《Go编程时光》，对于 Go 语言，我也算是个初学者，因此写的东西应该会比较适合刚接触的同学，如果你也是刚学习 Go 语言，不防关注一下，一起学习，一起成长。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go struct详解</title>
      <link>http://shanks.link/blog/2021/04/03/go-struct%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 03 Apr 2021 22:15:06 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/go-struct%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;p&gt;Go Struct超详细讲解&#xA;原创作者，&lt;a href=&#34;https://juejin.im/post/6844903814168838151&#34;&gt;程序员读书&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Go语言中提供了对struct的支持,struct,中文翻译称为结构体，与数组一样，属于复合类型，并非引用类型。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang 中的垃圾回收（三)</title>
      <link>http://shanks.link/blog/2021/04/04/golang-%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%89/</link>
      <pubDate>Sun, 04 Apr 2021 00:07:15 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/04/04/golang-%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%89/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844903902924521485&#34;&gt;原文链接&lt;/a&gt;&#xA;通过前两节的说明，我们得出这样一个结论：如果降低堆内存的分配压力就会相应的减少延迟，从而提升程序性能。这一节来讲一下，给一种类型的工作负载，GC的pacing算法是怎么来确定最佳回收速率的。&#xA;&lt;strong&gt;并发代码实例&lt;/strong&gt;&#xA;本节给出的代码在这里可以找到：&#xA;&lt;a href=&#34;https://github.com/ardanlabs/gotraining/tree/master/topics/go/profiling/trace&#34;&gt;github.com/ardanlabs/g…&lt;/a&gt;&#xA;程序是做了这样一件事情，给一个特定topic，要确定它在文档集中出现的频率。程序包含了不用版本的寻找算法，它们使用了不同的并发模式。这里我们只看freq，freqConcurrent和freqNumCPU这三种版本的算法。&#xA;首先看freq，它是非并发顺序执行的程序版本，代码如下。&#xA;L1&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang 中的垃圾回收（二)</title>
      <link>http://shanks.link/blog/2021/04/03/golang-%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%BA%8C/</link>
      <pubDate>Sat, 03 Apr 2021 23:57:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/golang-%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%BA%8C/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844903892212269064&#34;&gt;原文链接&lt;/a&gt;&#xA;第一部分，我花了时间去描述了golang 垃圾收集器的行为，并说明了程序运行时候收集器所产生的延迟。我分享了怎么样去产生以及去解释GC traces。并展示了堆内内存如何改变，并且解释了GC不同阶段对延迟代价的影响。&#xA;最后的结论是，如果你减少了堆的压力，你就会减少延迟代价并提高了程序性能。我也指出了，降低收集速率，推迟收集，设法增加两次收集的时间间隔并不是很好的策略。即使是收集速率很快，但是以一致的速度进行，也能保持程序以最佳性能运行。&#xA;这部分里，我会带你通过一个实际的web应用并向你展示怎么样生成GC traces和程序状态。然后我会解释这些工具的输出内容，这样你可以找到方法去提高应用程序的性能。&#xA;&lt;strong&gt;运行应用&lt;/strong&gt;&#xA;看一下go training的web应用程序&#xA;图1.1&#xA;&lt;img src=&#34;https://user-gold-cdn.xitu.io/2019/7/18/16c03b402f24c06a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&#34; alt=&#34;&#34;&gt;&#xA;&lt;a href=&#34;https://github.com/ardanlabs/gotraining/tree/master/topics/go/profiling/project&#34;&gt;github.com/ardanlabs/g…&lt;/a&gt;&#xA;图一是应用程序的样子。这个程序从不同的地方下载三个rss 订阅集合，并且允许用户去进行搜索。build之后，启动程序&#xA;&lt;strong&gt;L1&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>go语言panic,recover的实现</title>
      <link>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80panicrecover%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sat, 03 Apr 2021 14:26:05 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80panicrecover%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;原创 爱写程序的阿波张 &lt;a href=&#34;https://mp.weixin.qq.com/s/0JTBGHr-bV4ikLva-8ghEw&#34;&gt;源码游记&lt;/a&gt; 2019-07-02&lt;/p&gt;&#xA;&lt;p&gt;本文主要分析Go语言的panic/recover在AMD64 Linux平台下的实现，包括：&lt;/p&gt;&#xA;&lt;p&gt;主动调用 panic() 函数所引发的panic的处理流程，比如go代码中直接调用panic()函数或编译器插入的对panic()的调用；&lt;/p&gt;</description>
    </item>
    <item>
      <title>go深入理解defer（下）defer实现机制</title>
      <link>http://shanks.link/blog/2021/04/03/go%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3defer%E4%B8%8Bdefer%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sat, 03 Apr 2021 11:33:30 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/go%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3defer%E4%B8%8Bdefer%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;p&gt;原创 爱写程序的阿波张 &lt;a href=&#34;https://mp.weixin.qq.com/s/iEtMbRXW4yYyCG0TTW5y9g&#34;&gt;源码游记&lt;/a&gt; 2019-06-17&lt;/p&gt;&#xA;&lt;p&gt;上一篇文章我们主要从使用的角度介绍了 defer 的基础知识，本文我们来分析一下 defer 的实现机制。&lt;/p&gt;&#xA;&lt;p&gt;还是从一个例子程序开始。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;package&lt;/span&gt; main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;sum&lt;/span&gt;(a, b &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c := a + b&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fmt.&lt;span style=&#34;color:#c34e00&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;sum:&amp;#34;&lt;/span&gt; , c)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;f&lt;/span&gt;(a, b &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;sum&lt;/span&gt;(a, b)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fmt.&lt;span style=&#34;color:#c34e00&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;a: %d, b: %d\n&amp;#34;&lt;/span&gt;, a, b)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a, b := 1, 2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;f&lt;/span&gt;(a, b)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从前一篇文章我们得知，编译器会把 defer 语句翻译成对 deferproc 函数的调用，同时，编译器也会在使用了 defer 语句的 go 函数的末尾插入对 deferreturn 函数的调用，下面我们来看一下这两个函数的实现代码。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go深入理解defer（上）defer基础</title>
      <link>http://shanks.link/blog/2021/04/03/go%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3defer%E4%B8%8Adefer%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 03 Apr 2021 11:04:11 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/go%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3defer%E4%B8%8Adefer%E5%9F%BA%E7%A1%80/</guid>
      <description>&lt;p&gt;原创 爱写程序的阿波张 &lt;a href=&#34;https://mp.weixin.qq.com/s/QmeQTONUuWlr_sRNP8b5Tw&#34;&gt;源码游记&lt;/a&gt; 2019-06-11&lt;/p&gt;&#xA;&lt;p&gt;深入理解 defer 分上下两篇文章，本文为上篇，主要介绍如下内容：&lt;/p&gt;&#xA;&lt;p&gt;为什么需要 defer；&lt;/p&gt;&#xA;&lt;p&gt;defer 语法及语义；&lt;/p&gt;&#xA;&lt;p&gt;defer 使用要点；&lt;/p&gt;&#xA;&lt;p&gt;defer 语句中的函数到底是在 return 语句之后被调用还是 return 语句之前被调用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>抢占系统调用执行时间过长的goroutine（22）</title>
      <link>http://shanks.link/blog/2021/04/03/%E6%8A%A2%E5%8D%A0%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E7%9A%84goroutine22/</link>
      <pubDate>Sat, 03 Apr 2021 10:37:43 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/%E6%8A%A2%E5%8D%A0%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E7%9A%84goroutine22/</guid>
      <description>&lt;p&gt;​​​​​​​​​原创 爱写程序的阿波张 &lt;a href=&#34;https://mp.weixin.qq.com/s/If0-35Pt8dN7G1gD4L9-hw&#34;&gt;源码游记&lt;/a&gt; 2019-06-01&lt;/p&gt;&#xA;&lt;p&gt;本文是《Go语言调度器源代码情景分析》系列的第22篇，也是第六章《抢占调度》的第2小节。&lt;/p&gt;&#xA;&lt;p&gt;上一节我们分析了因运行时间过长而导致的抢占调度，这一节我们来分析因进入系统调用时间过长而发生的抢占调度。&lt;/p&gt;</description>
    </item>
    <item>
      <title>因goroutine运行时间过长而发生的抢占调度（21）</title>
      <link>http://shanks.link/blog/2021/04/03/%E5%9B%A0goroutine%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E8%80%8C%E5%8F%91%E7%94%9F%E7%9A%84%E6%8A%A2%E5%8D%A0%E8%B0%83%E5%BA%A621/</link>
      <pubDate>Sat, 03 Apr 2021 10:34:06 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/%E5%9B%A0goroutine%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E8%80%8C%E5%8F%91%E7%94%9F%E7%9A%84%E6%8A%A2%E5%8D%A0%E8%B0%83%E5%BA%A621/</guid>
      <description>&lt;p&gt;原创 爱写程序的阿波张 &lt;a href=&#34;https://mp.weixin.qq.com/s/i8DQ0HrO5Bt-qE5cX7c1ng&#34;&gt;源码游记&lt;/a&gt; 2019-05-28&lt;/p&gt;&#xA;&lt;p&gt;本文是《Go语言调度器源代码情景分析》系列的第21篇，也是第六章《抢占调度》的第1小节。&lt;/p&gt;&#xA;&lt;p&gt;前面几节我们分析了Goroutine因读写channel等阻塞而导致的被动调度以及通过调用Gosched函数发起的主动调度，现在还剩下最后一种调度方式即抢占调度未讨论，从本节开始，我们就来对它进行分析。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go语言调度器之主动调度(20)</title>
      <link>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B9%8B%E4%B8%BB%E5%8A%A8%E8%B0%83%E5%BA%A620/</link>
      <pubDate>Sat, 03 Apr 2021 10:29:25 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B9%8B%E4%B8%BB%E5%8A%A8%E8%B0%83%E5%BA%A620/</guid>
      <description>&lt;p&gt;原创 爱写程序的阿波张 &lt;a href=&#34;https://mp.weixin.qq.com/s/zA7KY_25NGjip9pP38RIvg&#34;&gt;源码游记&lt;/a&gt; 2019-05-24&lt;/p&gt;&#xA;&lt;p&gt;本文是《Go语言调度器源代码情景分析》系列的第20篇，也是第五章《主动调度》的第1小节。&lt;/p&gt;&#xA;&lt;p&gt;Goroutine的主动调度是指当前正在运行的goroutine通过直接调用runtime.Gosched()函数暂时放弃运行而发生的调度。&lt;/p&gt;</description>
    </item>
    <item>
      <title>工作线程的唤醒及创建(19)</title>
      <link>http://shanks.link/blog/2021/04/03/%E5%B7%A5%E4%BD%9C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%94%A4%E9%86%92%E5%8F%8A%E5%88%9B%E5%BB%BA19/</link>
      <pubDate>Sat, 03 Apr 2021 10:24:35 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/%E5%B7%A5%E4%BD%9C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%94%A4%E9%86%92%E5%8F%8A%E5%88%9B%E5%BB%BA19/</guid>
      <description>&lt;p&gt;原创 爱写程序的阿波张 &lt;a href=&#34;https://mp.weixin.qq.com/s/T9CDaNF5KUFjE_Z6YW7mRw&#34;&gt;源码游记&lt;/a&gt; 2019-05-23&lt;/p&gt;&#xA;&lt;p&gt;本文是《Go语言调度器源代码情景分析》系列的第19篇，也是第四章《Goroutine被动调度》的第2小节。&lt;/p&gt;&#xA;&lt;p&gt;本文需要重点关注：&lt;/p&gt;</description>
    </item>
    <item>
      <title>goroutine被动调度之一（18）</title>
      <link>http://shanks.link/blog/2021/04/03/goroutine%E8%A2%AB%E5%8A%A8%E8%B0%83%E5%BA%A6%E4%B9%8B%E4%B8%8018/</link>
      <pubDate>Sat, 03 Apr 2021 10:21:58 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/goroutine%E8%A2%AB%E5%8A%A8%E8%B0%83%E5%BA%A6%E4%B9%8B%E4%B8%8018/</guid>
      <description>&lt;p&gt;原创 爱写程序的阿波张 &lt;a href=&#34;https://mp.weixin.qq.com/s/w3i5hVKmYW_M06nLaMlwvQ&#34;&gt;源码游记&lt;/a&gt; 2019-05-22&lt;/p&gt;&#xA;&lt;p&gt;本文是《Go语言调度器源代码情景分析》系列的第18篇，也是第四章《Goroutine被动调度》的第1小节。&lt;/p&gt;&#xA;&lt;p&gt;前一章我们详细分析了调度器的调度策略，即调度器如何选取下一个进入运行的goroutine，但我们还不清楚什么时候以及什么情况下会发生调度，从这一章开始我们就来讨论这个问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go语言调度器之盗取goroutine(17)</title>
      <link>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B9%8B%E7%9B%97%E5%8F%96goroutine17/</link>
      <pubDate>Sat, 03 Apr 2021 10:14:00 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B9%8B%E7%9B%97%E5%8F%96goroutine17/</guid>
      <description>&lt;p&gt;原创 爱写程序的阿波张 &lt;a href=&#34;https://mp.weixin.qq.com/s/o2UmxmFFOwUAkgE-Ao9MsA&#34;&gt;源码游记&lt;/a&gt; 2019-05-17&lt;/p&gt;&#xA;&lt;p&gt;本文是《Go语言调度器源代码情景分析》系列的第17篇，也是第三章《Goroutine调度策略》的第2小节。&lt;/p&gt;&#xA;&lt;p&gt;上一小节我们分析了从全局运行队列与工作线程的本地运行队列获取goroutine的过程，这一小节我们继续分析因无法从上述两个队列中拿到需要运行的goroutine而导致的从其它工作线程的本地运行队列中盗取goroutine的过程。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第三章 goroutine调度策略（16）</title>
      <link>http://shanks.link/blog/2021/04/03/%E7%AC%AC%E4%B8%89%E7%AB%A0-goroutine%E8%B0%83%E5%BA%A6%E7%AD%96%E7%95%A516/</link>
      <pubDate>Sat, 03 Apr 2021 10:12:03 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/%E7%AC%AC%E4%B8%89%E7%AB%A0-goroutine%E8%B0%83%E5%BA%A6%E7%AD%96%E7%95%A516/</guid>
      <description>&lt;p&gt;原创 爱写程序的阿波张 &lt;a href=&#34;https://mp.weixin.qq.com/s/2objs5JrlnKnwFbF4a2z2g&#34;&gt;源码游记&lt;/a&gt; 2019-05-14&lt;/p&gt;&#xA;&lt;p&gt;本文是《Go语言调度器源代码情景分析》系列的第16篇，也是第三章《Goroutine调度策略》的第1小节。&lt;/p&gt;&#xA;&lt;p&gt;在调度器概述一节我们提到过，所谓的goroutine调度，是指程序代码按照一定的算法在适当的时候挑选出合适的goroutine并放到CPU上去运行的过程。这句话揭示了调度系统需要解决的三大核心问题：&lt;/p&gt;</description>
    </item>
    <item>
      <title>非main goroutine的退出及调度循环（15）</title>
      <link>http://shanks.link/blog/2021/04/03/%E9%9D%9Emain-goroutine%E7%9A%84%E9%80%80%E5%87%BA%E5%8F%8A%E8%B0%83%E5%BA%A6%E5%BE%AA%E7%8E%AF15/</link>
      <pubDate>Sat, 03 Apr 2021 10:07:03 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/%E9%9D%9Emain-goroutine%E7%9A%84%E9%80%80%E5%87%BA%E5%8F%8A%E8%B0%83%E5%BA%A6%E5%BE%AA%E7%8E%AF15/</guid>
      <description>&lt;p&gt;原创 爱写程序的阿波张 &lt;a href=&#34;https://mp.weixin.qq.com/s/XttP9q7-PO7VXhskaBzGqA&#34;&gt;源码游记&lt;/a&gt; 2019-05-12&lt;/p&gt;&#xA;&lt;p&gt;本文是《Go语言调度器源代码情景分析》系列的第15篇，也是第二章的第5小节。&lt;/p&gt;&#xA;&lt;p&gt;上一节我们说过main goroutine退出时会直接执行exit系统调用退出整个进程，而非main goroutine退出时则会进入goexit函数完成最后的清理工作，本小节我们首先就来验证一下非main goroutine执行完成后是否真的会去执行goexit，然后再对非main goroutine的退出流程做个梳理。这一节我们需要重点理解以下内容：&lt;/p&gt;</description>
    </item>
    <item>
      <title>go语言调度器之调度main goroutine（14)</title>
      <link>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B9%8B%E8%B0%83%E5%BA%A6main-goroutine14/</link>
      <pubDate>Sat, 03 Apr 2021 10:01:28 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B9%8B%E8%B0%83%E5%BA%A6main-goroutine14/</guid>
      <description>&lt;p&gt;原创 爱写程序的阿波张 &lt;a href=&#34;https://mp.weixin.qq.com/s/8eJm5hjwKXya85VnT4y8Cw&#34;&gt;源码游记&lt;/a&gt; 2019-05-09&lt;/p&gt;&#xA;&lt;p&gt;本文是《Go语言调度器源代码情景分析》系列的第14篇，也是第二章的第4小节&lt;/p&gt;&#xA;&lt;p&gt;上一节我们通过分析main goroutine的创建详细讨论了goroutine的创建及初始化流程，这一节我们接着来分析调度器如何把main goroutine调度到CPU上去运行。本节需要重点关注的问题有：&lt;/p&gt;</description>
    </item>
    <item>
      <title>go语言调度器之创建main goroutine(13)</title>
      <link>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B9%8B%E5%88%9B%E5%BB%BAmain-goroutine13/</link>
      <pubDate>Sat, 03 Apr 2021 09:53:43 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B9%8B%E5%88%9B%E5%BB%BAmain-goroutine13/</guid>
      <description>&lt;p&gt;原创 爱写程序的阿波张 &lt;a href=&#34;https://mp.weixin.qq.com/s/FF8YU8nXP9TKt0qvSuzmtw&#34;&gt;源码游记&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;本文是《Go语言调度器源代码情景分析》系列的第13篇，也是第二章的第3小节。&lt;/p&gt;&#xA;&lt;p&gt;上一节我们分析了调度器的初始化，这一节我们来看程序中的第一个goroutine是如何创建的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go语言goroutine调度器初始化 十二</title>
      <link>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80goroutine%E8%B0%83%E5%BA%A6%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96-%E5%8D%81%E4%BA%8C/</link>
      <pubDate>Sat, 03 Apr 2021 00:23:53 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80goroutine%E8%B0%83%E5%BA%A6%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96-%E5%8D%81%E4%BA%8C/</guid>
      <description>&lt;p&gt;原创 爱写程序的阿波张 &lt;a href=&#34;https://mp.weixin.qq.com/s/W9D4Sl-6jYfcpczzdPfByQ&#34;&gt;源码游记&lt;/a&gt; 2019-05-05&lt;/p&gt;&#xA;&lt;h2 id=&#34;本文是go语言调度器源代码情景分析系列的第12篇也是第二章的第2小节&#34;&gt;本文是《Go语言调度器源代码情景分析》系列的第12篇，也是第二章的第2小节。&lt;/h2&gt;&#xA;&lt;p&gt;本章将以下面这个简单的Hello World程序为例，通过跟踪其从启动到退出这一完整的运行流程来分析Go语言调度器的初始化、goroutine的创建与退出、工作线程的调度循环以及goroutine的切换等重要内容。&lt;/p&gt;</description>
    </item>
    <item>
      <title>goroutine调度器概述(11)</title>
      <link>http://shanks.link/blog/2021/04/03/goroutine%E8%B0%83%E5%BA%A6%E5%99%A8%E6%A6%82%E8%BF%B011/</link>
      <pubDate>Sat, 03 Apr 2021 00:13:50 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/goroutine%E8%B0%83%E5%BA%A6%E5%99%A8%E6%A6%82%E8%BF%B011/</guid>
      <description>&lt;p&gt;原创 &lt;strong&gt;爱写程序的阿波张&lt;/strong&gt; &lt;a href=&#34;https://mp.weixin.qq.com/s/2wkZyOFAyhHgvNkEkXamkQ&#34;&gt;源码游记&lt;/a&gt; 2019-05-01&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;本文是《go调度器源代码情景分析》系列的第11篇，也是第二章的第1小节。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;goroutine简介&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;goroutine是Go语言实现的用户态线程，主要用来解决操作系统线程太“重”的问题，所谓的太重，主要表现在以下两个方面：&lt;/p&gt;</description>
    </item>
    <item>
      <title>go语言调度器源代码情景分析之十：线程本地存储</title>
      <link>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E5%8D%81%E7%BA%BF%E7%A8%8B%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/</link>
      <pubDate>Sat, 03 Apr 2021 00:09:46 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E5%8D%81%E7%BA%BF%E7%A8%8B%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/</guid>
      <description>&lt;p&gt;原创 &lt;strong&gt;爱写程序的阿波张&lt;/strong&gt; &lt;a href=&#34;https://mp.weixin.qq.com/s/-tiXJpH0IrJw-RH4x5SRdQ&#34;&gt;源码游记&lt;/a&gt; 2019-04-27&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;本文是《go调度器源代码情景分析》系列 第一章 预备知识的第十小节，也是预备知识的最后一小节。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;线程本地存储又叫线程局部存储，其英文为Thread Local Storage，简称TLS，看似一个很高大上的东西，其实就是线程私有的全局变量而已。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go语言调度器源代码情景分析之八：系统调用</title>
      <link>http://shanks.link/blog/2021/04/02/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E5%85%AB%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</link>
      <pubDate>Fri, 02 Apr 2021 13:13:55 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/02/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E5%85%AB%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</guid>
      <description>&lt;h1 id=&#34;原创-爱写程序的阿波张-源码游记-2019-04-24&#34;&gt;原创 爱写程序的阿波张 &lt;a href=&#34;https://mp.weixin.qq.com/s/CXhc71UZtbdbAo15xbJ6_Q&#34;&gt;源码游记&lt;/a&gt; 2019-04-24&lt;/h1&gt;&#xA;&lt;p&gt;我们将在最后一章讨论有关系统调用方面的抢占调度，所以这里有必要对系统调用有个基本的了解。&lt;/p&gt;&#xA;&lt;p&gt;系统调用是指使用类似函数调用的方式调用操作系统提供的API。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go语言调度器源代码情景分析之七：函数调用过程</title>
      <link>http://shanks.link/blog/2021/04/02/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%B8%83%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Fri, 02 Apr 2021 13:00:41 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/02/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%B8%83%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B/</guid>
      <description>&lt;p&gt;原创 爱写程序的阿波张 &lt;a href=&#34;https://mp.weixin.qq.com/s/3RUjui-q6bgRnUW7TgOjmA&#34;&gt;源码游记&lt;/a&gt; 2019-04-22&lt;/p&gt;&#xA;&lt;p&gt;前面几节我们介绍了CPU寄存器、内存、汇编指令以及栈等基础知识，为了达到融会贯通加深理解的目的，这一节我们来综合运用一下所学知识，看看函数的执行和调用过程。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go语言调度器源代码情景分析之六：go汇编语言</title>
      <link>http://shanks.link/blog/2021/04/02/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E5%85%ADgo%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/</link>
      <pubDate>Fri, 02 Apr 2021 12:54:48 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/02/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E5%85%ADgo%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/</guid>
      <description>&lt;p&gt;原创 爱写程序的阿波张 &lt;a href=&#34;https://mp.weixin.qq.com/s/dNzLMtn1X7dBvtkfX7Ifag&#34;&gt;源码游记&lt;/a&gt; 2019-04-21&lt;/p&gt;&#xA;&lt;p&gt;go语言runtime（包括调度器）源代码中有部分代码是用汇编语言编写的，不过这些汇编代码并非针对特定体系结构的汇编代码，而是go语言引入的一种伪汇编，它同样也需要经过汇编器转换成机器指令才能被CPU执行。需要注意的是，用go汇编语言编写的代码一旦经过汇编器转换成机器指令之后，再用调试工具反汇编出来的代码已经不是go语言汇编代码了，而是跟平台相关的汇编代码。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go语言调度器源代码情景分析之五：汇编指令</title>
      <link>http://shanks.link/blog/2021/04/02/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%BA%94%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Fri, 02 Apr 2021 12:47:46 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/02/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%BA%94%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/</guid>
      <description>&lt;p&gt;原创 爱写程序的阿波张 &lt;a href=&#34;https://mp.weixin.qq.com/s/fuox6st_iXg_rpklxWXXRA&#34; title=&#34;源码游记&#34;&gt;源码游记&lt;/a&gt; 2019-04-20&lt;/p&gt;&#xA;&lt;p&gt;汇编语言是每位后端程序员都应该掌握的一门语言，因为学会了汇编语言，不管是对我们调试程序还是研究与理解计算机底层的一些运行原理都具有非常重要的作用，所以建议有兴趣的读者可以多花点时间把它学好。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go语言调度器源代码情景分析之四：函数调用栈</title>
      <link>http://shanks.link/blog/2021/04/01/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E5%9B%9B%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A0%88/</link>
      <pubDate>Thu, 01 Apr 2021 23:52:57 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/01/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E5%9B%9B%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A0%88/</guid>
      <description>&lt;p&gt;原创 阿波张 &lt;a href=&#34;https://mp.weixin.qq.com/s/EY1acVrkUnmFQ0E1IwLzUQ&#34; title=&#34;源码游记&#34;&gt;源码游记&lt;/a&gt; 2019-04-19&lt;/p&gt;&#xA;&lt;p&gt;什么是栈&lt;/p&gt;&#xA;&lt;p&gt;栈是一种“后进先出”的数据结构，它相当于一个容器，当需要往容器里面添加元素时只能放在最上面的一个元素之上，需要取出元素时也只能从最上面开始取，通常我们称添加元素为入栈(push)，取出元素为出栈(pop)。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go语言调度器源代码情景分析之三：内存</title>
      <link>http://shanks.link/blog/2021/04/01/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%B8%89%E5%86%85%E5%AD%98/</link>
      <pubDate>Thu, 01 Apr 2021 23:32:28 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/01/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%B8%89%E5%86%85%E5%AD%98/</guid>
      <description>&lt;p&gt;原创 张方波 &lt;a href=&#34;https://mp.weixin.qq.com/s/iZxfTL34NFKsJNyLvREZPQ&#34; title=&#34;源码游记&#34;&gt;源码游记&lt;/a&gt; 2019-04-18&lt;/p&gt;&#xA;&lt;p&gt;内存是计算机系统的存储设备，其主要作用是协助CPU在执行程序时存储数据和指令。&lt;/p&gt;&#xA;&lt;p&gt;内存由大量内存单元组成，内存单元大小为1个字节（1字节包含8个二进制位）， 每个内存单元都有一个编号，更专业的说法是每一个内存单元都有一个地址，我们在编写汇编代码或编译器把用高级语言所写的程序编译成汇编指令时，如果要读写内存，就必须在指令中指定内存地址，这样CPU才知道它要存取哪个或哪些内存单元。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go语言调度器源代码情景分析之二：CPU寄存器</title>
      <link>http://shanks.link/blog/2021/04/01/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%BA%8Ccpu%E5%AF%84%E5%AD%98%E5%99%A8/</link>
      <pubDate>Thu, 01 Apr 2021 23:26:01 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/01/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%BA%8Ccpu%E5%AF%84%E5%AD%98%E5%99%A8/</guid>
      <description>&lt;p&gt;原创 张方波 &lt;a href=&#34;https://mp.weixin.qq.com/s/wTfbFfBfTJNGsgIJ_71nAg&#34; title=&#34;源码游记&#34;&gt;源码游记&lt;/a&gt; 2019-04-17&lt;/p&gt;&#xA;&lt;p&gt;寄存器是CPU内部的存储单元，用于存放从内存读取而来的数据（包括指令）和CPU运算的中间结果，之所以要使用寄存器来临时存放数据而不是直接操作内存，一是因为CPU的工作原理决定了有些操作运算只能在CPU内部进行，二是因为CPU读写寄存器的速度比读写内存的速度快得多。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go语言调度器源代码情景分析1</title>
      <link>http://shanks.link/blog/2021/03/31/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%901/</link>
      <pubDate>Wed, 31 Mar 2021 14:18:56 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/03/31/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%901/</guid>
      <description>&lt;p&gt;原创 张方波  源码游记  2019-04-16&#xA;专栏简介&lt;/p&gt;&#xA;&lt;p&gt;本专栏以精心设计的情景为线索，结合go语言最新1.12版源代码深入细致的分析了goroutine调度器实现原理。&lt;/p&gt;&#xA;&lt;p&gt;适宜读者&lt;/p&gt;</description>
    </item>
    <item>
      <title>os精讲</title>
      <link>http://shanks.link/blog/2020/08/20/os%E7%B2%BE%E8%AE%B2/</link>
      <pubDate>Thu, 20 Aug 2020 09:02:11 +0000</pubDate>
      <guid>http://shanks.link/blog/2020/08/20/os%E7%B2%BE%E8%AE%B2/</guid>
      <description>&lt;h3 id=&#34;本文目标&#34;&gt;本文目标&lt;/h3&gt;&#xA;&lt;p&gt;    收录OS方面主要知识点，方便面试前复习&lt;/p&gt;&#xA;&lt;h3 id=&#34;功能&#34;&gt;功能&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;处理机管理&lt;/li&gt;&#xA;&lt;li&gt;存储器管理&lt;/li&gt;&#xA;&lt;li&gt;文件系统&lt;/li&gt;&#xA;&lt;li&gt;网络系统&lt;/li&gt;&#xA;&lt;li&gt;驱动系统&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;特征&#34;&gt;特征&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;并发 宏观上多个进程同时运行（微观上交替运行）， （并行：微观上一起运行）&lt;/li&gt;&#xA;&lt;li&gt;共享 资源共享（系统中的资源可供多个并发的进程共享，eg:MEM）&lt;/li&gt;&#xA;&lt;li&gt;虚拟 空分复用（存储器管理），时分复用（处理机管理）&lt;/li&gt;&#xA;&lt;li&gt;异步 时分复用的特征下，各进程交替运行&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;指令分类&#34;&gt;指令分类&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一般指令 普通进程都能执行的指令&lt;/li&gt;&#xA;&lt;li&gt;特权指令 操作系统才能执行的特权指令，包括不限于输入输出，停机等(普通进程通过系统调用的方式请求操作系统代运行)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;宏内核和微内核&#34;&gt;宏内核和微内核&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cpu&#34;&gt;CPU&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://p1-tt.byteimg.com/origin/pgc-image/a000e6c65f864a4fad812aab9ec67870?from=pc&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4 参考资料</title>
      <link>http://shanks.link/blog/2000/01/24/p4-%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</link>
      <pubDate>Mon, 24 Jan 2000 17:22:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2000/01/24/p4-%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</guid>
      <description>&lt;h3 id=&#34;p4-官网&#34;&gt;P4 官网&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://p4.org/&#34;&gt;https://p4.org/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/p4lang&#34;&gt;https://github.com/p4lang&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://open-nfp.org/&#34;&gt;https://open-nfp.org/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;p4-demo&#34;&gt;P4-demo&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/osinstom/p4-demos&#34;&gt;https://github.com/osinstom/p4-demos&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/jafingerhut/p4-guide&#34;&gt;https://github.com/jafingerhut/p4-guide&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://open-nfp.org/resources/&#34;&gt;https://open-nfp.org/resources/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;others&#34;&gt;others&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://open-nfp.org/dataplanes-ebpf/technical-papers/&#34;&gt;https://open-nfp.org/dataplanes-ebpf/technical-papers/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/open-nfpsw&#34;&gt;https://github.com/open-nfpsw&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>DPDK资料汇总</title>
      <link>http://shanks.link/blog/2000/01/01/dpdk%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/</link>
      <pubDate>Sat, 01 Jan 2000 11:08:37 +0800</pubDate>
      <guid>http://shanks.link/blog/2000/01/01/dpdk%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/</guid>
      <description>&lt;h3 id=&#34;参考链接&#34;&gt;参考链接&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/iqiyi/dpvs/tree/v1.9.0&#34;&gt;https://github.com/iqiyi/dpvs/tree/v1.9.0&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://dpdk-docs.readthedocs.io/en/latest/prog_guide/index.html&#34;&gt;https://dpdk-docs.readthedocs.io/en/latest/prog_guide/index.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://doc.dpdk.org/guides/prog_guide/mbuf_lib.html&#34;&gt;https://doc.dpdk.org/guides/prog_guide/mbuf_lib.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/qq_45617555/article/details/124205188&#34;&gt;https://blog.csdn.net/qq_45617555/article/details/124205188&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://doc.dpdk.org/guides/sample_app_ug/ptpclient.html&#34;&gt;https://doc.dpdk.org/guides/sample_app_ug/ptpclient.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/yun6853992/article/details/122156624&#34;&gt;https://blog.csdn.net/yun6853992/article/details/122156624&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/sinat_20184565/article/details/92700223&#34;&gt;https://blog.csdn.net/sinat_20184565/article/details/92700223&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://dpdk-docs.readthedocs.io/en/latest/prog_guide/kernel_nic_interface.html#dpdk&#34;&gt;https://dpdk-docs.readthedocs.io/en/latest/prog_guide/kernel_nic_interface.html#dpdk&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/realjimmy/p/12889079.html&#34;&gt;https://www.cnblogs.com/realjimmy/p/12889079.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/realjimmy/p/12912751.html&#34;&gt;https://www.cnblogs.com/realjimmy/p/12912751.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/realjimmy/p/12914237.html&#34;&gt;https://www.cnblogs.com/realjimmy/p/12914237.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/realjimmy/p/12918685.html&#34;&gt;https://www.cnblogs.com/realjimmy/p/12918685.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/realjimmy/p/12920701.html&#34;&gt;https://www.cnblogs.com/realjimmy/p/12920701.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/realjimmy/p/12911004.html&#34;&gt;https://www.cnblogs.com/realjimmy/p/12911004.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://doc.dpdk.org/guides/linux_gsg/cross_build_dpdk_for_loongarch.html&#34;&gt;https://doc.dpdk.org/guides/linux_gsg/cross_build_dpdk_for_loongarch.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/qq_45617555/article/details/124205188&#34;&gt;https://blog.csdn.net/qq_45617555/article/details/124205188&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/ziding/p/4214499.html&#34;&gt;https://www.cnblogs.com/ziding/p/4214499.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://dpdk-docs.readthedocs.io/en/latest/prog_guide/kernel_nic_interface.html#dpdk&#34;&gt;https://dpdk-docs.readthedocs.io/en/latest/prog_guide/kernel_nic_interface.html#dpdk&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/realjimmy/p/12812883.html&#34;&gt;https://www.cnblogs.com/realjimmy/p/12812883.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/realjimmy/p/12903372.html&#34;&gt;https://www.cnblogs.com/realjimmy/p/12903372.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/realjimmy/p/12889079.html&#34;&gt;https://www.cnblogs.com/realjimmy/p/12889079.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>c语言运算符和优先级</title>
      <link>http://shanks.link/blog/2000/01/01/c%E8%AF%AD%E8%A8%80%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7/</link>
      <pubDate>Sat, 01 Jan 2000 10:33:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2000/01/01/c%E8%AF%AD%E8%A8%80%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7/</guid>
      <description>&lt;p&gt;运算符的优先级：Ｃ语言中，运算符的运算优先级共分为15 级。1 级最高，15级最低。在表达式中，优先级较高的先于优先级较低的进行运算。而在一个运算量两侧的&lt;a href=&#34;https://so.csdn.net/so/search?q=%E8%BF%90%E7%AE%97%E7%AC%A6&amp;amp;spm=1001.2101.3001.7020&#34;&gt;运算符&lt;/a&gt;优先级相同时，则按运算符的结合性所规定的结合方向处理。&lt;/p&gt;</description>
    </item>
    <item>
      <title>股票投票备忘录</title>
      <link>http://shanks.link/blog/2000/01/01/%E8%82%A1%E7%A5%A8%E6%8A%95%E7%A5%A8%E5%A4%87%E5%BF%98%E5%BD%95/</link>
      <pubDate>Sat, 01 Jan 2000 10:15:30 +0800</pubDate>
      <guid>http://shanks.link/blog/2000/01/01/%E8%82%A1%E7%A5%A8%E6%8A%95%E7%A5%A8%E5%A4%87%E5%BF%98%E5%BD%95/</guid>
      <description>&lt;h3 id=&#34;总则&#34;&gt;总则&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;记录某只股票的买卖思路，做到操作依靠思路而不是情绪化&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;北汽蓝谷-600733&#34;&gt;北汽蓝谷 600733&lt;/h2&gt;&#xA;&lt;h3 id=&#34;基本前提&#34;&gt;基本前提&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;房产熄火，需另一个大产业来带动经济（&lt;strong&gt;国家级政策&lt;/strong&gt;）&lt;/li&gt;&#xA;&lt;li&gt;电车方面：比亚迪走中低端和个性化高端，华为走中高端&lt;/li&gt;&#xA;&lt;li&gt;油车方面：传统的厂家慢慢的消亡&lt;/li&gt;&#xA;&lt;li&gt;华为合作分为：一级供应商，二级: huawei inside，三级:下场设计与销售（eg：问界）&lt;/li&gt;&#xA;&lt;li&gt;第一、二种模式做不起来，因为直接和其它厂商有竞争&lt;/li&gt;&#xA;&lt;li&gt;第三种模式，做 SUV 的有赛力斯，现在确定北汽蓝谷做行政级别轿车&lt;/li&gt;&#xA;&lt;li&gt;另外和江淮汽车、奇瑞汽车合作的两界，奇瑞不配合，江淮尚不清楚后续产品布局&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;看好的理由&#34;&gt;看好的理由&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;华为的三大业务：手机基本停滞，运营商基本停滞，汽车涉及面广，相关高科技的技术多，华为应该在这方面有想法（参考问界）,所以华为应该在享界上有比较多的投入&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;不确定的点&#34;&gt;不确定的点&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;产品从发布到大卖，是否也要经历问界那样1年9个月的磨合期（包括产品不行，改款耗时）&lt;/li&gt;&#xA;&lt;li&gt;客户是否认可享界的品牌力（是否会出现问界那样的品牌接受曲线改变过程）&lt;/li&gt;&#xA;&lt;li&gt;北汽蓝谷是否能像赛力斯一样在生产上给力（产能规划了30W）&lt;/li&gt;&#xA;&lt;li&gt;高端行政级轿车卖多了以后，北京奔驰是否有意见（华为是否顶得住）&lt;/li&gt;&#xA;&lt;li&gt;是否在华为的门店销售（目前得到的消息：YES）&lt;/li&gt;&#xA;&lt;li&gt;后续是否考虑曾程版本：（根据销售情况来决定）&lt;/li&gt;&#xA;&lt;li&gt;产能规划：当前20W，后续可以增加到30W&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;竞品&#34;&gt;竞品&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;中大型电车，暂无竞品&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;好的展望&#34;&gt;好的展望&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果做的好，那么北汽蓝谷的股价应该能参考赛力斯有质的飞跃&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;关键时间点&#34;&gt;关键时间点&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;发布 24.4.25-24.5.4 北京车展&lt;/li&gt;&#xA;&lt;li&gt;销售 24.6.28&lt;/li&gt;&#xA;&lt;li&gt;完整月销量 24.8.30  (厂家预估月销售1W)&lt;/li&gt;&#xA;&lt;li&gt;改版后的销量 25.9.30 (预估)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;股票操作参考&#34;&gt;股票操作参考&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;参考上面的时间点，来观察享界的进度情况&lt;/li&gt;&#xA;&lt;li&gt;如果往好的方向发展（参考问界），逢低可以加仓，否则不再加仓&lt;/li&gt;&#xA;&lt;li&gt;如果往差的方向发展，且 25.12.31 前没有好转迹象，则 25.12.31 卖掉&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;任何买卖都要参考上面的1-3点，操作要有操作的理由&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>EPBF 资料汇总</title>
      <link>http://shanks.link/blog/2000/01/01/epbf-%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/</link>
      <pubDate>Sat, 01 Jan 2000 09:54:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2000/01/01/epbf-%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ebpf.io/zh-cn/&#34;&gt;https://ebpf.io/zh-cn/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://eunomia.dev/tutorials/&#34;&gt;https://eunomia.dev/tutorials/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.ebpf.top/what-is-ebpf/&#34;&gt;https://www.ebpf.top/what-is-ebpf/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.ebpf.top/post/ebpf_intro/&#34;&gt;https://www.ebpf.top/post/ebpf_intro/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.ebpf.top/post/tracee_intro/&#34;&gt;https://www.ebpf.top/post/tracee_intro/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.ebpf.top/post/ebpf_network_traffic_monitor/&#34;&gt;https://www.ebpf.top/post/ebpf_network_traffic_monitor/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.ebpf.top/post/bpf-co-re-btf-libbpf/&#34;&gt;https://www.ebpf.top/post/bpf-co-re-btf-libbpf/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.ebpf.top/post/bpf_core/&#34;&gt;https://www.ebpf.top/post/bpf_core/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.ebpf.top/post/bcc-to-libbpf-guid/&#34;&gt;https://www.ebpf.top/post/bcc-to-libbpf-guid/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.ebpf.top/post/ebpf_network_kpatch_ipvs/&#34;&gt;https://www.ebpf.top/post/ebpf_network_kpatch_ipvs/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.ebpf.top/post/offensive-bpf-bpftrace/&#34;&gt;https://www.ebpf.top/post/offensive-bpf-bpftrace/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.ebpf.top/post/ebpf_network_kpatch_ipvs/&#34;&gt;https://www.ebpf.top/post/ebpf_network_kpatch_ipvs/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.ebpf.top/post/bcc-to-libbpf-guid/&#34;&gt;https://www.ebpf.top/post/bcc-to-libbpf-guid/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.ebpf.top/post/ebpf_prog_pid_filter/&#34;&gt;https://www.ebpf.top/post/ebpf_prog_pid_filter/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://davidlovezoe.club/wordpress/archives/901&#34;&gt;https://davidlovezoe.club/wordpress/archives/901&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/378258986&#34;&gt;https://zhuanlan.zhihu.com/p/378258986&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://cloudnative.to/blog/bpf-intro/&#34;&gt;https://cloudnative.to/blog/bpf-intro/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/iovisor/bcc&#34;&gt;https://github.com/iovisor/bcc&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Netopian/natbee&#34;&gt;https://github.com/Netopian/natbee&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zoidyzoidzoid/awesome-ebpf&#34;&gt;https://github.com/zoidyzoidzoid/awesome-ebpf&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/lianhunqianr1/article/details/119363772&#34;&gt;https://blog.csdn.net/lianhunqianr1/article/details/119363772&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.ngui.cc/zz/2197457.html?action=onClick&#34;&gt;https://www.ngui.cc/zz/2197457.html?action=onClick&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://pancakeliu.github.io/2022/04/06/ebpf-network-forward/&#34;&gt;https://pancakeliu.github.io/2022/04/06/ebpf-network-forward/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://nakryiko.com/posts/libbpf-bootstrap/&#34;&gt;https://nakryiko.com/posts/libbpf-bootstrap/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.51cto.com/article/711018.html&#34;&gt;https://www.51cto.com/article/711018.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://davidlovezoe.club/wordpress/archives/901&#34;&gt;https://davidlovezoe.club/wordpress/archives/901&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://davidlovezoe.club/wordpress/archives/937&#34;&gt;https://davidlovezoe.club/wordpress/archives/937&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://libbpf.readthedocs.io/en/latest/libbpf_overview.html#getting-started-with-libbpf&#34;&gt;https://libbpf.readthedocs.io/en/latest/libbpf_overview.html#getting-started-with-libbpf&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
