<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenVPN on Golang入门指南</title>
    <link>http://shanks.link/tags/openvpn/</link>
    <description>Recent content in OpenVPN on Golang入门指南</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 31 Aug 2023 15:17:00 +0800</lastBuildDate>
    <atom:link href="http://shanks.link/tags/openvpn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OpenVPN 在 Mac 上编译</title>
      <link>http://shanks.link/blog/2023/08/31/openvpn-%E5%9C%A8-mac-%E4%B8%8A%E7%BC%96%E8%AF%91/</link>
      <pubDate>Thu, 31 Aug 2023 15:17:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/31/openvpn-%E5%9C%A8-mac-%E4%B8%8A%E7%BC%96%E8%AF%91/</guid>
      <description>&lt;h3 id=&#34;下载&#34;&gt;下载&lt;/h3&gt;&#xA;&lt;p&gt;下面的 url 以实际地址为准&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://swupdate.openvpn.org/community/releases/openvpn-2.6.6.tar.gz&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;依赖库&#34;&gt;依赖库&lt;/h3&gt;&#xA;&lt;p&gt;设置依赖库的路径，避免 libssl 库 too old 的问题，路径以实际的为准x86和arm架构不一样&lt;/p&gt;&#xA;&lt;p&gt;以下是 x86架构对应的参数&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;export PATH=&amp;#34;/usr/local/opt/openssl@3/bin:$PATH&amp;#34;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.zshrc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export LDFLAGS=&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;-L/usr/local/opt/openssl@3/lib&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export CPPFLAGS=&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;-I/usr/local/opt/openssl@3/include&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下是arm架构对应的参数&lt;/p&gt;</description>
    </item>
    <item>
      <title>Openvpn 客户端路由配置</title>
      <link>http://shanks.link/blog/2023/08/16/openvpn-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 16 Aug 2023 10:53:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/16/openvpn-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;h1 id=&#34;openvpn-客户端路由配置&#34;&gt;Openvpn 客户端路由配置&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;Openvpn&lt;/code&gt; 是个非常强大的工具，默认的参数已经足够对付大多数场景了。由于工作需要，我们只想要某些 ip 走 openvpn的线路，这就需要自定义路由了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN 部署</title>
      <link>http://shanks.link/blog/2023/03/23/openvpn-%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Thu, 23 Mar 2023 15:48:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/03/23/openvpn-%E9%83%A8%E7%BD%B2/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;参考 &lt;a href=&#34;https://www.ishells.cn/archives/openvpn-server-client-deploy&#34;&gt;https://www.ishells.cn/archives/openvpn-server-client-deploy&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/pied/p/5402771.html&#34;&gt;参考blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;服务器上开启 ip 包转发和 nat 转换&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables -P INPUT ACCEPT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables -P FORWARD ACCEPT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;客户端上需要主动或被动设置 route 表&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>图解ECDHE秘钥交换算法</title>
      <link>http://shanks.link/blog/2022/07/18/%E5%9B%BE%E8%A7%A3ecdhe%E7%A7%98%E9%92%A5%E4%BA%A4%E6%8D%A2%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 18 Jul 2022 09:26:50 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/18/%E5%9B%BE%E8%A7%A3ecdhe%E7%A7%98%E9%92%A5%E4%BA%A4%E6%8D%A2%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/xiaolincoding/&#34;&gt;&lt;img src=&#34;https://www.cnblogs.com/skins/custom/images/logo.gif&#34; alt=&#34;返回主页&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;HTTPS 常用的密钥交换算法有两种，分别是 RSA 和 ECDHE 算法。&lt;/p&gt;&#xA;&lt;p&gt;其中，RSA 是比较传统的密钥交换算法，它不具备前向安全的性质，因此现在很少服务器使用的。而 ECDHE 算法具有前向安全，所以被广泛使用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>图解HTTPS</title>
      <link>http://shanks.link/blog/2022/07/18/%E5%9B%BE%E8%A7%A3https/</link>
      <pubDate>Mon, 18 Jul 2022 09:19:39 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/18/%E5%9B%BE%E8%A7%A3https/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/xiaolincoding/&#34;&gt;&lt;img src=&#34;https://www.cnblogs.com/skins/custom/images/logo.gif&#34; alt=&#34;返回主页&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;我很早之前写过一篇关于 HTTP 和 HTTPS 的文章，但对于 HTTPS 介绍还不够详细，只讲了比较基础的部分，所以这次我们再来深入一下 HTTPS，用&lt;strong&gt;实战抓包&lt;/strong&gt;的方式，带大家再来窥探一次 HTTPS。&lt;/p&gt;</description>
    </item>
    <item>
      <title>返璞归真实现OpenVPN第二阶段协商</title>
      <link>http://shanks.link/blog/2022/07/12/%E8%BF%94%E7%92%9E%E5%BD%92%E7%9C%9F%E5%AE%9E%E7%8E%B0openvpn%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%E5%8D%8F%E5%95%86/</link>
      <pubDate>Tue, 12 Jul 2022 09:39:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/12/%E8%BF%94%E7%92%9E%E5%BD%92%E7%9C%9F%E5%AE%9E%E7%8E%B0openvpn%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%E5%8D%8F%E5%95%86/</guid>
      <description>&lt;h1 id=&#34;背景介绍&#34;&gt;背景介绍&lt;/h1&gt;&#xA;&lt;p&gt;听着《梦中的额吉》，《天堂》&amp;hellip;女儿在睡觉&amp;hellip;外面细雨&amp;hellip;中秋小长假，完成自己的OpenVPN patch 编码中充满了快乐！前提是你知道自己在做什么！ OpenVPN不给力，虽然它给出了N多的Renegotiate选项，然则其实现却不尽人意。难道设计者以为我们众人就这么好忽悠吗？&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVP性能 当tap遇到bonding</title>
      <link>http://shanks.link/blog/2022/07/12/openvp%E6%80%A7%E8%83%BD-%E5%BD%93tap%E9%81%87%E5%88%B0bonding/</link>
      <pubDate>Tue, 12 Jul 2022 09:32:02 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/12/openvp%E6%80%A7%E8%83%BD-%E5%BD%93tap%E9%81%87%E5%88%B0bonding/</guid>
      <description>&lt;h1 id=&#34;引子&#34;&gt;引子&lt;/h1&gt;&#xA;&lt;p&gt;​&#x9;&#x9;别的就不多说什么了，前面的文章说过，OpenVPN有两个瓶颈，一个是tap网卡，另一个是加密/解密 ，然而不可否认，OpenVPN的客户端和服务器端处于一个“虚拟网段”，抛开虚拟不谈，只要是一个网段的，我们就可以说它们属于一个局域网(当然前提是使用tcp/ip网络)，既然属于一个局域网，那么它要么是广播的，要么是点对点的，不管怎样，两端都有确定的三层地址(IP地址)，所有的数据包都是通过这个三层地址来传输到对端的，因此为了使得路径畅通，我们只关心路由即可。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN性能 第二个瓶颈在ssl加解密</title>
      <link>http://shanks.link/blog/2022/07/12/openvpn%E6%80%A7%E8%83%BD-%E7%AC%AC%E4%BA%8C%E4%B8%AA%E7%93%B6%E9%A2%88%E5%9C%A8ssl%E5%8A%A0%E8%A7%A3%E5%AF%86/</link>
      <pubDate>Tue, 12 Jul 2022 09:28:26 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/12/openvpn%E6%80%A7%E8%83%BD-%E7%AC%AC%E4%BA%8C%E4%B8%AA%E7%93%B6%E9%A2%88%E5%9C%A8ssl%E5%8A%A0%E8%A7%A3%E5%AF%86/</guid>
      <description>&lt;p&gt;测试命令：&lt;code&gt;ab -k -c 8 -n 500 http://10.0.188.139/5m.html&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;机器部署：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;S0：&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eth0:192.168.188.194 mtu 1500 e1000e 1000baseT-FD flow-control&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tun0:172.17.0.2      mtu 1500 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;route:10.0.188.139   dev tun0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;S1:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eth0:192.168.188.193 mtu 1500 e1000e 1000baseT-FD flow-control&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eth1:10.0.188.193    mtu 1500 e1000e 1000baseT-FD flow-control&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tun0:172.16.0.1      mtu 1500&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;S2:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eth1:10.0.188.139    mtu 1500 e1000e 1000baseT-FD flow-control&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;route:172.17.0.0     gw  10.0.188.193&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试数据： OpenVPN配置：&lt;code&gt;--cipher BF-CBC --auth SHA1&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN的效率问题</title>
      <link>http://shanks.link/blog/2022/07/12/openvpn%E7%9A%84%E6%95%88%E7%8E%87%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 12 Jul 2022 09:25:37 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/12/openvpn%E7%9A%84%E6%95%88%E7%8E%87%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;OpenVPN由于其设计问题，速度很慢，有人认为是由于加密解密导致了速度变慢，当将cipher设置成none之后，发现效率并没有提升，并且使用最慢的cipher，使用比较好的cpu，设置比较大的txqueuelen，使用比较快的网卡&amp;ndash;100baseT-FD，OpenVPN的效率还是不行，cpu使用率没多少，那么可以认为提升cpu性能已经于事无补了，后来才发现是OpenVPN自身的问题，通过源代码看得出OpenVPN是一个单进程单线程的程序，整个程序启动后就是一个大的循环，结构如下：&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN高级路由技术 全面的互通性配置</title>
      <link>http://shanks.link/blog/2022/07/12/openvpn%E9%AB%98%E7%BA%A7%E8%B7%AF%E7%94%B1%E6%8A%80%E6%9C%AF-%E5%85%A8%E9%9D%A2%E7%9A%84%E4%BA%92%E9%80%9A%E6%80%A7%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 12 Jul 2022 09:22:14 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/12/openvpn%E9%AB%98%E7%BA%A7%E8%B7%AF%E7%94%B1%E6%8A%80%E6%9C%AF-%E5%85%A8%E9%9D%A2%E7%9A%84%E4%BA%92%E9%80%9A%E6%80%A7%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;p&gt;本文全面介绍OpenVPN的路由配置，不再阐述理论。为了简单且不引入其它问题，以下的配置不考虑NAT。 零.介绍和声明以及拓扑图&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;以下的配置不再给出任何配置文件或者配置选项，比如iroute配置等；以下路由配置可以不使用默认网关，使用默认网关只是为了方便。正确的做法是配置指向确切网络的路由，变长掩码非0&lt;/li&gt;&#xA;&lt;li&gt;由于OpenVPN支持tun和tap两种模式，在Tun中，路由指的是下一跳节点或者是一个虚拟网卡，在tap中，路由指的是从OpenVPN虚拟交换机出去的虚拟端口，这二者是截然不同的，协议也没有工作在同一个层，因此OpenVPN内部路由使用multi_instance代表这两者，tun模式中，multi_instance代表三层路由目标，tap模式中，multi_instance代表二层路由目标，即端口。 拓扑图如下：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/14/167ac0272d6f73cd~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN高级路由技术 虚拟交换机和内部路由缓存</title>
      <link>http://shanks.link/blog/2022/07/12/openvpn%E9%AB%98%E7%BA%A7%E8%B7%AF%E7%94%B1%E6%8A%80%E6%9C%AF-%E8%99%9A%E6%8B%9F%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%92%8C%E5%86%85%E9%83%A8%E8%B7%AF%E7%94%B1%E7%BC%93%E5%AD%98/</link>
      <pubDate>Tue, 12 Jul 2022 09:18:56 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/12/openvpn%E9%AB%98%E7%BA%A7%E8%B7%AF%E7%94%B1%E6%8A%80%E6%9C%AF-%E8%99%9A%E6%8B%9F%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%92%8C%E5%86%85%E9%83%A8%E8%B7%AF%E7%94%B1%E7%BC%93%E5%AD%98/</guid>
      <description>&lt;p&gt;前面的《OpenVPN高级路由技术》系列文章阐述了OpenVPN中潜在的内部路由技术以及具体的配置方法，另外也谈到了如何使用OpenVPN将网络进行扩展，然而具体到这些内部路由是怎么工作的，并没有谈及。为什么直到现在才说这些呢？我以为最好先不要管内部原理，先要学会用，只有当你明白这是个黑盒子的时候，你才会有目的的想进入它，希望它成为你的白盒子。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN的包过滤机制</title>
      <link>http://shanks.link/blog/2022/07/12/openvpn%E7%9A%84%E5%8C%85%E8%BF%87%E6%BB%A4%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 12 Jul 2022 09:10:40 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/12/openvpn%E7%9A%84%E5%8C%85%E8%BF%87%E6%BB%A4%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;p&gt;OpenVPN是和网络结合的非常紧密的一款VPN，事实上，每一个VPN框架都和IP网络结合的很紧密，因此在此首先劝一下那些想搞VPN的朋友们，一定要先彻底精通TCP/IP网络协议栈，特别是IP路由，防火墙原理之后再去啃OpenVPN或者其它的VPN，否则会事倍功半的，仅仅看懂源代码和灵活配置，灵活运用，灵活定制之间的差距和很远，精通VPN远远不是会写C代码会使用哈希表就能应付得了的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN高级路由技术 反向推送信息</title>
      <link>http://shanks.link/blog/2022/07/12/openvpn%E9%AB%98%E7%BA%A7%E8%B7%AF%E7%94%B1%E6%8A%80%E6%9C%AF-%E5%8F%8D%E5%90%91%E6%8E%A8%E9%80%81%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Tue, 12 Jul 2022 09:04:38 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/12/openvpn%E9%AB%98%E7%BA%A7%E8%B7%AF%E7%94%B1%E6%8A%80%E6%9C%AF-%E5%8F%8D%E5%90%91%E6%8E%A8%E9%80%81%E4%BF%A1%E6%81%AF/</guid>
      <description>&lt;p&gt;在&lt;a href=&#34;https://juejin.im/editor/drafts/5c13080be51d456859418774&#34;&gt;《VPN的概念以及要点》&lt;/a&gt;中，我指出了OpenVPN构建的网络是单向的，也就是说在不手工配置系统路由的情况下，只能由OpenVPN客户端一侧发起连接。这是因为OpenVPN服务器会把自己一侧的路由推送至OpenVPN客户端，反之，OpenVPN客户端却不能把自己一侧的路由推送给OpenVPN服务器。于是我自己修改代码手工实现了一个PUSH消息，将客户端的信息放在PUSH_REQUEST的后面进行发送，然后OpenVPN服务器端进行解析。此举改动了大量的代码，浪费了我一天无聊的时间…&lt;/p&gt;&#xA;&lt;p&gt;有什么更直接的方式么？事实上，当你认为没有的时候，蓦然回首，那人正在灯火阑珊处等你呢。如果你执行openvpn –help的时候，你会发现一个很有趣的选项，那就是push-peer-info选项，正如help解释所说，它只能用于client。该选项的含义是将OpenVPN客户端的信息推送至OpenVPN服务器。那么赶紧试试看。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN高级路由技术 扩展成巨大的网络</title>
      <link>http://shanks.link/blog/2022/07/12/openvpn%E9%AB%98%E7%BA%A7%E8%B7%AF%E7%94%B1%E6%8A%80%E6%9C%AF-%E6%89%A9%E5%B1%95%E6%88%90%E5%B7%A8%E5%A4%A7%E7%9A%84%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Tue, 12 Jul 2022 09:01:03 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/12/openvpn%E9%AB%98%E7%BA%A7%E8%B7%AF%E7%94%B1%E6%8A%80%E6%9C%AF-%E6%89%A9%E5%B1%95%E6%88%90%E5%B7%A8%E5%A4%A7%E7%9A%84%E7%BD%91%E7%BB%9C/</guid>
      <description>&lt;p&gt;OpenVPN内部实现了一个路由器的功能，其源代码的multi_get_instance_by_virtual_addr函数执行路由查找的工作，这种路由是OpenVPN的内部路由，也就是说这种路由是OpenVPN配置并查找的，和外部的系统路由是完全独立的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN的高级路由技术 内部路由</title>
      <link>http://shanks.link/blog/2022/07/12/openvpn%E7%9A%84%E9%AB%98%E7%BA%A7%E8%B7%AF%E7%94%B1%E6%8A%80%E6%9C%AF-%E5%86%85%E9%83%A8%E8%B7%AF%E7%94%B1/</link>
      <pubDate>Tue, 12 Jul 2022 08:57:11 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/12/openvpn%E7%9A%84%E9%AB%98%E7%BA%A7%E8%B7%AF%E7%94%B1%E6%8A%80%E6%9C%AF-%E5%86%85%E9%83%A8%E8%B7%AF%E7%94%B1/</guid>
      <description>&lt;h1 id=&#34;server模式以及点对点模式的openvpn&#34;&gt;server模式以及点对点模式的OpenVPN&lt;/h1&gt;&#xA;&lt;p&gt;前文好几次说过，虽然OpenVPN也可以创建隧道，该隧道封装了IP数据报或者以太帧，然而却和使用IPSec VPN的网络拓扑无法做到兼容，这是因为在网对网模式下，默认配置下，使用tun虚拟网卡模式的OpenVPN的客户端虚拟网卡上要强制做SNAT，否则便通不过OpenVPN服务器端的检查。这是因为OpenVPN服务器是根据分配给客户端的虚拟IP地址来维护客户端和自己保存的session(也就是multi_instance)的对应关系的。为了定位是哪个客户端发来了封装的数据包，OpenVPN需要解析出封装载荷中的源IP地址，从而找到和自己保存的multi_instance的对应关系。初看起来，这好像是OpenVPN服务器设计时端偷了一个懒，然而下一节会说明，事实并不是那样。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用OpenVPN的桥接模式扩展内部局域网</title>
      <link>http://shanks.link/blog/2022/07/12/%E4%BD%BF%E7%94%A8openvpn%E7%9A%84%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F%E6%89%A9%E5%B1%95%E5%86%85%E9%83%A8%E5%B1%80%E5%9F%9F%E7%BD%91/</link>
      <pubDate>Tue, 12 Jul 2022 08:53:11 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/12/%E4%BD%BF%E7%94%A8openvpn%E7%9A%84%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F%E6%89%A9%E5%B1%95%E5%86%85%E9%83%A8%E5%B1%80%E5%9F%9F%E7%BD%91/</guid>
      <description>&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;&#xA;&lt;p&gt;​&#x9;&#x9;&#x9;&#x9;OpenVPN是一款高度可扩展的VPN软件，除了既有的将应用客户端安全接入服务器这一传统功能外，还可以让你无缝的接入一个远程的局域网，正如你身在该局域网一样，如果你不用OpenVPN，你将很难做到这一点。当然，你可以选择像IPSec这样的重量级VPN，但是你的生活从此将不再简单，你也可以使用拨号，连接到远程，但是你永远无法体验完全接入这种身临其境的感觉。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN协议解析 通道 状态机 Reliability层</title>
      <link>http://shanks.link/blog/2022/07/11/openvpn%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90-%E9%80%9A%E9%81%93-%E7%8A%B6%E6%80%81%E6%9C%BA-reliability%E5%B1%82/</link>
      <pubDate>Mon, 11 Jul 2022 23:50:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/openvpn%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90-%E9%80%9A%E9%81%93-%E7%8A%B6%E6%80%81%E6%9C%BA-reliability%E5%B1%82/</guid>
      <description>&lt;h1 id=&#34;openvpn通道&#34;&gt;OpenVPN通道&lt;/h1&gt;&#xA;&lt;h2 id=&#34;openvpn通道-1&#34;&gt;OpenVPN通道&lt;/h2&gt;&#xA;&lt;p&gt;​&#x9;&#x9;OpenVPN内置了两个通道，一个用于控制，另一个用于数据传输，在设计上，很多网络协议都实现了多通道，也有N种方式实现多通道，其中常用的有两种，一种是使用带外数据传输控制信息，另一种就是将控制信息多路复用到数据通道。OpenVPN使用的就是第二种方式。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN协议解析 握手数据包分析</title>
      <link>http://shanks.link/blog/2022/07/11/openvpn%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90-%E6%8F%A1%E6%89%8B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 11 Jul 2022 23:31:43 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/openvpn%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90-%E6%8F%A1%E6%89%8B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;​&#x9;&#x9;学习一种协议的最好的方式就是研究它的数据包，这样可以加深对协议的理解。对于研究过某种协议数据包的家伙来讲，他一定知道协议头的哪个位置对应哪个字段，虽然这对于理解协议为什么这么设计可能没有太大的帮助，然而对于排查问题和实际实施是很有帮助的。既然很多人都对Richard Stevens的《TCP/IP详解》情有独钟，咱就剽窃他的风格，解析一下OpenVPN的握手是如何完成的。本文分析70余个数据包，当然，最终我会略去重复的内容，来看看OpenVPN的握手协商过程。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN关于push Peer Info的实现</title>
      <link>http://shanks.link/blog/2022/07/11/openvpn%E5%85%B3%E4%BA%8Epush-peer-info%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 11 Jul 2022 23:22:57 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/openvpn%E5%85%B3%E4%BA%8Epush-peer-info%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;OpenVPN在help中列举了push-peer-info选项，可是man手册中却没有，google之，发现了以下的帖子以及回复：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Subject:how to use --push-peer-info under 2.2-RC2?&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Flow:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;m testing out 2.2-RC2 under Linux - installed on both client and server (--help shows it&amp;#39;&lt;/span&gt;s there too). I have add &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;push-peer-info&amp;#34;&lt;/span&gt; to the client, and have up/down&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; scripts on the server that include a printenv line to capture environment variables. However, I&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;m not seeing any new vars showing up.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;So can someone tell me where does that detail show up on the server?&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#009c00&#34;&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;Subject:how to use --push-peer-info under 2.2-RC2?&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;Flow:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;AFAIK (and AFAICT from looking at the sources) the &amp;#39;&lt;/span&gt;push-peer-info&amp;#39; option is not complete yet. The *client* side works, but the server never extracts the right UV_* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;variables which are pushed out by the client to the server. &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;November last year I asked the -devel list what this option is supposed to &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; ; the result of that discussion was that &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;this is a work in progress&amp;#34;&lt;/span&gt;  :-/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;根据这个帖子，是否可以说OpenVPN对于push-peer-info的实现是个半吊子实现呢？实际上确实有点这个意思。可是这么做并没有什么不妥，永远不要指望开源代码能做到完美实现你的任意需求，人家开发者没有义务这么做。代码在自己手上，如果你看懂了逻辑，自己修改一下使之符合自己的需求便是了。唯一的问题就是将来有一天，他们实现了你现在通过修改代码实现的功能，你还要花一些时间来合并自己的实现和新版本的实现，有时候你要丢弃你的所有修改。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN的日志记录头</title>
      <link>http://shanks.link/blog/2022/07/11/openvpn%E7%9A%84%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E5%A4%B4/</link>
      <pubDate>Mon, 11 Jul 2022 23:17:47 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/openvpn%E7%9A%84%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E5%A4%B4/</guid>
      <description>&lt;p&gt;​&#x9;&#x9;日志记录机制是很多大型软件必不可少的组成部分，日志记录其实是蛮有趣的，既不能记录太多又要切中要害，因此很多程序将日志记录分为若干级别，比如调试级别只输出错误和调试信息，而错误级别则不再输出调试信息等，另外需要管理日志记录的分类，想完全实现这些机制是要动一番脑筋的，既有效又巧妙的实现遍布各大开源代码中，其中linux内核以及openvpn的记录都不错，都将日志作为一个协议而编码，该协议的通信双方是代码的处理逻辑部分和实际日志记录部分，不像printf或者fprintf仅仅记录内容本身，printk还包含一个级别信息，我们将此信息称作日志头，而消息本身就是日志体了，openvpn的实现更加精妙，本文详述其日志头的构成。实际上任何的消息如果想更加方便的管理和应用，都可以增加一个协议头，毕竟协议本身就是为了方便隔离的交互双方的耦合的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN中虚拟ip地址的自定义分配 总结</title>
      <link>http://shanks.link/blog/2022/07/11/openvpn%E4%B8%AD%E8%99%9A%E6%8B%9Fip%E5%9C%B0%E5%9D%80%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E9%85%8D-%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 11 Jul 2022 23:13:29 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/openvpn%E4%B8%AD%E8%99%9A%E6%8B%9Fip%E5%9C%B0%E5%9D%80%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E9%85%8D-%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;​&#x9;&#x9;OpenVPN中自定义IP地址分配有两种实现方式，一种是写一个plugin，plugin_call这个调用可以被添加到任何地方，OpenVPN中的plugin挂载点也可在任意位置定义，因此利用plugin来自定义IP地址分配策略就有两种方式，第一种方式是可以新定义一个plugin挂载点，紧接着动态分配IP的代码，然后在plugin中实现策略，当然具体到如何将已经分配的ip地址的指针传入plugin中还需要前文中介绍的方式，将ip地址的内存地址作为环境变量加入到env_set，然后&amp;hellip;，这种方式需要修改OpenVPN的代码，要么自己定义一个挂载点，要么在已有的CLIENT_CONNECT中加入新的内存地址环境变量；第二种方式是一种标准的方式，也就是OpenVPN建议的方式，那就是在multi_connection_established中做文章，OpenVPN的代码不需要做任何修改：&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN中虚拟ip地址的分配</title>
      <link>http://shanks.link/blog/2022/07/11/openvpn%E4%B8%AD%E8%99%9A%E6%8B%9Fip%E5%9C%B0%E5%9D%80%E7%9A%84%E5%88%86%E9%85%8D/</link>
      <pubDate>Mon, 11 Jul 2022 23:07:51 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/openvpn%E4%B8%AD%E8%99%9A%E6%8B%9Fip%E5%9C%B0%E5%9D%80%E7%9A%84%E5%88%86%E9%85%8D/</guid>
      <description>&lt;p&gt;​&#x9;&#x9;server将topology推送至client，这就是为何必须实现net30模式的原因，就是为了兼容windows，由于windows的低版本tap-win32驱动只支持这种模式，而后的topology为p2p(实际上windows的tap-win32驱动通过简单修改，比如改掉自问自答的那一部分逻辑看上去也支持这种拓扑，但是如果涉及到dhcp，事情就复杂了，因为通过net30拓扑分给windows的两个主机ip中有一个会充当虚假的dhcp服务器，如果在windows上采用了p2p拓扑，那么tap-win32网卡将直连server的虚拟网卡，而server的虚拟网卡可不敢担此大任)，对于server来讲，没有什么变化，只是对于client来讲，解放了ip的占用，但是client必须是非windows的，不过server倒是可以是 windows，因为对于net30和p2p而言，server端的虚拟ip地址是一样的，不同的是对client的影响&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN的广播问题以及tun和tap设备的深层次挖掘</title>
      <link>http://shanks.link/blog/2022/07/11/openvpn%E7%9A%84%E5%B9%BF%E6%92%AD%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8Atun%E5%92%8Ctap%E8%AE%BE%E5%A4%87%E7%9A%84%E6%B7%B1%E5%B1%82%E6%AC%A1%E6%8C%96%E6%8E%98/</link>
      <pubDate>Mon, 11 Jul 2022 23:04:08 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/openvpn%E7%9A%84%E5%B9%BF%E6%92%AD%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8Atun%E5%92%8Ctap%E8%AE%BE%E5%A4%87%E7%9A%84%E6%B7%B1%E5%B1%82%E6%AC%A1%E6%8C%96%E6%8E%98/</guid>
      <description>&lt;p&gt;​&#x9;&#x9;广播到底通过还是不通过OpenVPN呢？tap处理二层，tun处理三层，虽然tun两端ip是同一个子网，但是其二层却不是，广播是无法进行的，但是tap可以传输广播；由于windows的虚拟网卡驱动的特殊性，为了让windows也能进入vpn，OpenVPN和虚拟网卡驱动作了特殊且复杂的处理。本文详述之(注意，本文不介绍OpenVPN的各种专业术语，比如路由模式和桥接模式之类，需要的话请参考OpenVPN的文档或者FAQ)。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN遇到的Secondary地址问题</title>
      <link>http://shanks.link/blog/2022/07/11/openvpn%E9%81%87%E5%88%B0%E7%9A%84secondary%E5%9C%B0%E5%9D%80%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 11 Jul 2022 22:59:31 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/openvpn%E9%81%87%E5%88%B0%E7%9A%84secondary%E5%9C%B0%E5%9D%80%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;​&#x9;&#x9;对于提供服务的程序，一般而言喜欢使用0.0.0.0这个地址，但是如果这个服务是UDP的，那么就有可能出现一些问题，比如如果某块网卡配置了多个IP地址，那么问题就可能重现。最近使用OpenVPN的时候就遇到了这样的问题。OpenVPN建议使用UDP协议，然而正是由于使用了UDP协议才出现了问题。以下几个要点帮助解决这样的问题，记之备忘：&lt;/p&gt;</description>
    </item>
    <item>
      <title>MacOS上安装OpenVPN</title>
      <link>http://shanks.link/blog/2022/07/11/macos%E4%B8%8A%E5%AE%89%E8%A3%85openvpn/</link>
      <pubDate>Mon, 11 Jul 2022 22:48:32 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/macos%E4%B8%8A%E5%AE%89%E8%A3%85openvpn/</guid>
      <description>&lt;p&gt;​&#x9;这完全是一次需求驱动的行为，而不是工作驱动或者兴趣驱动的行为。我准备完全放弃我那牛慢的台式机，完全使用MacBook，而且绝不安装Windows虚拟机。因此所有 Windows上有的软件在Mac上都要能找到对应物，当然也包括OpenVPN，因为我需要使用OpenVPN连入公司。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN211在windows上的编译</title>
      <link>http://shanks.link/blog/2022/07/11/openvpn211%E5%9C%A8windows%E4%B8%8A%E7%9A%84%E7%BC%96%E8%AF%91/</link>
      <pubDate>Mon, 11 Jul 2022 22:42:22 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/openvpn211%E5%9C%A8windows%E4%B8%8A%E7%9A%84%E7%BC%96%E8%AF%91/</guid>
      <description>&lt;h1 id=&#34;总述&#34;&gt;总述：&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;对于openvpn-2.1.0的编译，由于微软cl编译器和GNU的gcc行为不同，需要修改不多的几个源文件来适应微软的编译器&lt;/li&gt;&#xA;&lt;li&gt;对于openvpn-2.1.1的编译，根目录下没有了Makefile.w32-vc，估计作者们觉得不应该修改源文件以适应编译器，也不能保证修改源文件这种事普通用户一定能用好，因此采用了一种别的编译方式，即使用MinGW和MSYS来支持编译，不过这些包都要下载，安装，这些也要消耗不小的工作量，但是一劳永逸&lt;/li&gt;&#xA;&lt;li&gt;但是仍然能通过2.1.0的方式编译2.1.1，就是将Makefile.w32-vc复制过来，然后修改源文件&lt;/li&gt;&#xA;&lt;li&gt;OpenVPN依赖OpenSSL，lzo以及pkcs11-helper，因此在编译OpenVPN之前必须确保上述依赖库均存在，如果都已经存在了，那么直接跳到第五节开始编译OpenVPN；&lt;/li&gt;&#xA;&lt;li&gt;OpenVPN的2.1.0以及之前的版本和2.1.1版本在windows上的编译方式不同，但是基本原理都是一样的（编译+链接），因此不妨采用老版本的方式，手动拷贝makefile到新版本目录；&lt;/li&gt;&#xA;&lt;li&gt;由于windows的C编译器和GNU的编译器行为有所不同，所以需要手工修改一些文件来适应windows的编译器，下面的编译均使用“Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 14.00.50727.42 for 80x86”编译器以及“Microsoft (R) Incremental Linker Version 8.00.50727.42”链接器，使用其它编译器的可能需要修改的文件以及怎样修改和此处不同甚至不用修改。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;编译openssl&#34;&gt;编译OpenSSL&lt;/h1&gt;&#xA;&lt;p&gt;（略）&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVP简易文档</title>
      <link>http://shanks.link/blog/2022/07/11/openvp%E7%AE%80%E6%98%93%E6%96%87%E6%A1%A3/</link>
      <pubDate>Mon, 11 Jul 2022 22:34:39 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/openvp%E7%AE%80%E6%98%93%E6%96%87%E6%A1%A3/</guid>
      <description>&lt;h1 id=&#34;openvpn简介&#34;&gt;OpenVPN简介&lt;/h1&gt;&#xA;&lt;p&gt;VPN 替代昂贵的专线用以在开放的 Internet 上实现了一个虚拟的网络，该虚拟网络本身在不安全的真实网络上对数据提供安全保护。&lt;/p&gt;&#xA;&lt;p&gt;OpenVPN 实现了一个灵活的 VPN，和通过修改协议栈而实现的基于 IPSec 的 VPN 相比，OpenVPN 有以下的优点：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux平台VPN技术概论 续</title>
      <link>http://shanks.link/blog/2022/07/11/linux%E5%B9%B3%E5%8F%B0vpn%E6%8A%80%E6%9C%AF%E6%A6%82%E8%AE%BA-%E7%BB%AD/</link>
      <pubDate>Mon, 11 Jul 2022 22:29:55 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/linux%E5%B9%B3%E5%8F%B0vpn%E6%8A%80%E6%9C%AF%E6%A6%82%E8%AE%BA-%E7%BB%AD/</guid>
      <description>&lt;p&gt;虚拟专用网处理的任务只有两个：&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;1. 虚拟&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;2. 专用&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;其中虚拟是次要的，专用才是主要的，只要能实现专用，不虚拟也行。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;“专用”这个概念有两个含义：&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux平台VPN技术概论</title>
      <link>http://shanks.link/blog/2022/07/11/linux%E5%B9%B3%E5%8F%B0vpn%E6%8A%80%E6%9C%AF%E6%A6%82%E8%AE%BA/</link>
      <pubDate>Mon, 11 Jul 2022 10:23:32 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/linux%E5%B9%B3%E5%8F%B0vpn%E6%8A%80%E6%9C%AF%E6%A6%82%E8%AE%BA/</guid>
      <description>&lt;h1 id=&#34;第一部分-vpn要解决的问题以及方案&#34;&gt;第一部分 VPN要解决的问题以及方案&lt;/h1&gt;&#xA;&lt;p&gt;基于主机的第三层 VPN 的要旨就是“&lt;strong&gt;透明/安全&lt;/strong&gt;的接入”，其中透明的含义就是配置要简单，尽量让用户感觉不到 VPN 的存在，因此这种 VPN 的实现其实只要解决两个问题即可：&lt;/p&gt;</description>
    </item>
    <item>
      <title>VPN原理及实现之TCP还是UDP</title>
      <link>http://shanks.link/blog/2022/07/11/vpn%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0%E4%B9%8Btcp%E8%BF%98%E6%98%AFudp/</link>
      <pubDate>Mon, 11 Jul 2022 10:18:02 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/11/vpn%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0%E4%B9%8Btcp%E8%BF%98%E6%98%AFudp/</guid>
      <description>&lt;p&gt;​&#x9;&#x9;&#x9;&#x9;有了 ip over ssl 的关键思想，OpenVPN 就是一个必然结果了，于是就不多说了，OpenVPN 和 OpenSSL 并不在一个层次上，虽然都很 open。OpenVPN 的配置非常复杂，主要就是为了建立更加合理的隧道，虽然 IPSec 实现的 VPN 不区分客户端和服务器，建立 sa 的时候全靠 dh 对称的协商加密密钥和算法，但是基于 OpenSSL 的 OpenVPN 却区分二者，因为 OpenVPN 的安全是 ssl 实现的，而 ssl 区分客户端和服务器，虚拟网卡已经说的很多了，现在说说隧道的一些细节，OpenVPN 可以建立 tcp 隧道和 udp 隧道，tcp 隧道顾名思义就是用 tcp 来封装 VPN 数据流，udp 亦然，但是虽然可以使用 udp 封装，在 OpenVPN 中你却不需要担心数据失序，因为 udp 之上还有 ssl ，而 ssl 不允许数据失序，确切的说不应说是 ssl，基于 udp 的 ssl 实际上是 tls，ssl 数据由于并不是流式的，而是基于记录的，每次必然读取一条记录，因此 ssl 是存储接收和存储发送的，如果下面用 udp 传输，那么就可能出现丢包或者失序的情况，如此一来读取的记录就会不正确，在 ssl 解密特别是 cbc 方式解密时就会出错，所以 ssl 下面必然是可靠而按序的，即使用 udp，那么在 ssl 和 udp 之间也必须实现可靠和按序。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN协议之Control packet wire format</title>
      <link>http://shanks.link/blog/2022/07/07/openvpn%E5%8D%8F%E8%AE%AE%E4%B9%8Bcontrol-packet-wire-format/</link>
      <pubDate>Thu, 07 Jul 2022 21:33:36 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/07/openvpn%E5%8D%8F%E8%AE%AE%E4%B9%8Bcontrol-packet-wire-format/</guid>
      <description>&lt;h3 id=&#34;control-packet-wire-format&#34;&gt;Control packet wire format&lt;/h3&gt;&#xA;&lt;p&gt;[header] [1-byte ack array len] [[4 bytes acked packet-id]] [8 bytes dest session-id] [4 bytes message-packet-id] [tls-encrypted payload]&lt;/p&gt;&#xA;&lt;p&gt;​&#x9; [header]&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;&#x9;&#x9; tls-plain&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;&#x9;&#x9;&#x9;  [1 byte opcode/key-id] [8 bytes self session-id]&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;&#x9;&#x9;tls-auth&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;&#x9;&#x9;&#x9;&#x9;[1 byte opcode/key-id]&#x9; [8 bytes self session-id] &#x9;[hmac] &#x9;[4 bytes packet-id] &#x9;[4 bytes packet-datetime]&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;&#x9;&#x9;&#x9;&#x9;[8 bytes self session-id] - 8 bytes of randomness, generated at the beginning of protocol session&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;&#x9;&#x9;&#x9; &#x9;[hmac] - calculate hmac over:&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN协议概要</title>
      <link>http://shanks.link/blog/2022/07/07/openvpn%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%A6%81/</link>
      <pubDate>Thu, 07 Jul 2022 21:23:36 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/07/openvpn%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%A6%81/</guid>
      <description>&lt;h2 id=&#34;openvpn-wire-protocol-work-in-progress&#34;&gt;OpenVPN Wire Protocol (work in progress)&lt;/h2&gt;&#xA;&lt;p&gt;​&#x9;&#x9;OpenVPN is an open source SSL/TLS based VPN solution which had its first release in May 2001.  This document describes the wire protocol OpenVPN makes use of for establishing end-to-end-connections.  Even though OpenVPN bases its communication on SSL/TLS, it is not a traditional SSL/TLS protocol which utilizes only TCP.  OpenVPN supports some enhanced security features as well as providing SSL/TLS connections both over TCP as well as UDP.&lt;/p&gt;</description>
    </item>
    <item>
      <title>VPN原理及实现之隧道的一种实现</title>
      <link>http://shanks.link/blog/2022/07/06/vpn%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0%E4%B9%8B%E9%9A%A7%E9%81%93%E7%9A%84%E4%B8%80%E7%A7%8D%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 06 Jul 2022 23:51:38 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/06/vpn%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0%E4%B9%8B%E9%9A%A7%E9%81%93%E7%9A%84%E4%B8%80%E7%A7%8D%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;理论上已经合理的 ip over ssl 还需要一些额外的技术支撑才能使用，必须想办法将一个 ip 数据报原封不动的让它被 ssl 重新封装一次，这个动作不可能在原始的标准协议栈中执行，标准协议栈不支持数据双向流动，那么解决方案之一就是修改协议栈，在 ip 层之下实现一个轻量的 ssl 协议层，但是如此一来就又回到了 IPSec 的老路上，因此此法不可取，正确的方法是不修改协议栈，让一切留在它应该在的地方，于是 ssl 必然得在应用层或者说是表示层实现，现在的问题是如何将下层的 ip 数据报重新引入上面的应用层，而且还不能修改标准协议栈，于是必然地要让 ip 数据报继续往下走，然后最终从一个网卡流出，于是就出了协议栈，接下来就可以自由发挥了，让数据流出网卡的原因是不能修改协议栈，但是还不能真的让它流出机器，如果它走了就不能指望用 ssl 封装它了，那么流到哪里呢？回环设备是一个不错的选择，从回环设备流出的数据实际上又流进了回环设备，用户空间只需要打开回环设备然后读取就可以了，注意不能通过一般套接字读取，毕竟那些数据不是发给我们的，要使用类似抓包的方式进行数据抓取，并且用防火墙禁止被抓取的数据继续被 forward，这实际上是一种巧妙的拦截方式，被抓取得数据然后经过 ssl 封装后再发向一个真的 ip 地址，我们需要配置的就是将所有的 vpn 数据全部发往回环设备，其实就是添加一条路由，虚拟网络已经建立，事情到此为止看似要结束了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VPN原理及实现之一般理论</title>
      <link>http://shanks.link/blog/2022/07/06/vpn%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0%E4%B9%8B%E4%B8%80%E8%88%AC%E7%90%86%E8%AE%BA/</link>
      <pubDate>Wed, 06 Jul 2022 23:46:26 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/06/vpn%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0%E4%B9%8B%E4%B8%80%E8%88%AC%E7%90%86%E8%AE%BA/</guid>
      <description>&lt;p&gt;OpenVPN 基于 OpenSSL 来实现安全，但是却不是传统意义上的 SSLVPN，它只是一个普通的 VPN，工作在 IP 层而不是传输层。&lt;/p&gt;&#xA;&lt;p&gt;VPN 的含义着重点有两层意思，一个是 &lt;strong&gt;V&lt;/strong&gt;，也就是&lt;strong&gt;虚拟&lt;/strong&gt;，另一个是 &lt;strong&gt;P&lt;/strong&gt;，也就是&lt;strong&gt;专用&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPN简介</title>
      <link>http://shanks.link/blog/2022/07/06/openvpn%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 06 Jul 2022 23:25:36 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/06/openvpn%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h1 id=&#34;1-openvpn-简介&#34;&gt;1. OpenVPN 简介&lt;/h1&gt;&#xA;&lt;p&gt;VPN 直译就是虚拟专用通道，是提供给企业之间或者个人与公司之间&lt;strong&gt;安全数据传输&lt;/strong&gt;的隧道，OpenVPN 无疑是 Linux 下开源 VPN 的先锋，提供了良好的性能和友好的用户 GUI。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
