<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>面试 on 愿星光伴你左右</title>
    <link>http://shanks.link/tags/%E9%9D%A2%E8%AF%95/</link>
    <description>Recent content in 面试 on 愿星光伴你左右</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 24 Apr 2022 22:19:30 +0800</lastBuildDate><atom:link href="http://shanks.link/tags/%E9%9D%A2%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>深入了解map</title>
      <link>http://shanks.link/blog/2022/04/24/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3map/</link>
      <pubDate>Sun, 24 Apr 2022 22:19:30 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/04/24/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3map/</guid>
      <description>摘要 map 通过 hasTable 实现了我们最常见的 key-value 存储，能快速的对数据集增删查改。同时 Go 里的 map 也有很多特殊的地方，比如它的无序性、并发不安全等。今天，就让我们</description>
    </item>
    
    <item>
      <title>Redis系列总结</title>
      <link>http://shanks.link/blog/2022/04/24/redis%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 24 Apr 2022 22:16:39 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/04/24/redis%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/</guid>
      <description>原文链接 Redis 总体介绍 Redis 是 key-value 型的 memory 缓存中间件，相信大部分程序员都在项目中使用过它。我们也可以利用 memory 来实现缓存，只是使用 redis 的话，可以将缓存功能统一</description>
    </item>
    
    <item>
      <title>关于分布式系统共识的思考</title>
      <link>http://shanks.link/blog/2022/04/24/%E5%85%B3%E4%BA%8E%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%85%B1%E8%AF%86%E7%9A%84%E6%80%9D%E8%80%83/</link>
      <pubDate>Sun, 24 Apr 2022 22:13:24 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/04/24/%E5%85%B3%E4%BA%8E%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%85%B1%E8%AF%86%E7%9A%84%E6%80%9D%E8%80%83/</guid>
      <description>原文链接 分布式系统的挑战 在前面的文章里，我们分析了分布式系统在业务上的一致性技术，即分布式事务，它的结果导向是面向用户的。然而在我们的系统内</description>
    </item>
    
    <item>
      <title>关于分布式事务的思考</title>
      <link>http://shanks.link/blog/2022/04/24/%E5%85%B3%E4%BA%8E%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%80%9D%E8%80%83/</link>
      <pubDate>Sun, 24 Apr 2022 22:10:50 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/04/24/%E5%85%B3%E4%BA%8E%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%80%9D%E8%80%83/</guid>
      <description>原文链接 现象 互联网的世界与十几年前相比，已经大不相同。以往的单体服务就可以支撑起大多数的用户需求。然而随着手机等电子产品的普及，用户想要的服</description>
    </item>
    
    <item>
      <title>秒懂消息队列</title>
      <link>http://shanks.link/blog/2022/04/24/%E7%A7%92%E6%87%82%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link>
      <pubDate>Sun, 24 Apr 2022 18:42:37 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/04/24/%E7%A7%92%E6%87%82%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</guid>
      <description>原文链接 摘要 作为技术方案最常提到的组件：消息队列，它在我们的程序中起到了重要的作用。异步、解耦、削峰（缓冲）等特性正是我们选择它的原因。本文</description>
    </item>
    
    <item>
      <title>Golang系列之channel全面解析</title>
      <link>http://shanks.link/blog/2022/04/24/golang%E7%B3%BB%E5%88%97%E4%B9%8Bchannel%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Sun, 24 Apr 2022 18:39:34 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/04/24/golang%E7%B3%BB%E5%88%97%E4%B9%8Bchannel%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/</guid>
      <description>原文链接 前言 channel 是 goroutine 与 goroutine 之间通信的重要桥梁，借助 channel，我们能很轻易的写出一个多协程通信程序。今天，我们就来看看这个 channel 的常用用法以及底</description>
    </item>
    
    <item>
      <title>Redis面试总结</title>
      <link>http://shanks.link/blog/2022/04/24/redis%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 24 Apr 2022 16:47:59 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/04/24/redis%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</guid>
      <description>1. redis 为什么快？ 在底层上， redis 使用了 IO 多路复用技术，像 select、epoll 等。能较好的保障吞吐量。而且 redis 采用了单线程处理请求，避免了线程切换</description>
    </item>
    
    <item>
      <title>Goroutinue理解</title>
      <link>http://shanks.link/blog/2022/04/24/goroutinue%E7%90%86%E8%A7%A3/</link>
      <pubDate>Sun, 24 Apr 2022 15:53:47 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/04/24/goroutinue%E7%90%86%E8%A7%A3/</guid>
      <description>原文链接 Go语言最大的特色就是从语言层面支持并发（Goroutine），Goroutine是Go中最基本的执行单元。事实上每一个Go程序至少</description>
    </item>
    
    <item>
      <title>计算机网络面试知识点</title>
      <link>http://shanks.link/blog/2022/04/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
      <pubDate>Sun, 24 Apr 2022 15:14:30 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/04/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9/</guid>
      <description>计算机网络面试知识点 原文链接 1. 计算机网络体系模型 物理层：建立、维护、断开物理连接。 数据链路层：建立逻辑连接、进行硬件地址寻址、差错校验等功能</description>
    </item>
    
    <item>
      <title>Go面试总结</title>
      <link>http://shanks.link/blog/2022/04/24/go%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 24 Apr 2022 15:08:40 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/04/24/go%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</guid>
      <description>golang 面试总结 原文链接 前言 前段时间找工作搜索 golang 面试题时，发现都是比较零散或是基础的题目，覆盖面较小。而自己也在边面试时边总结了一些知识点，为了方</description>
    </item>
    
    <item>
      <title>分布式系统的Raft算法</title>
      <link>http://shanks.link/blog/2021/09/03/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84raft%E7%AE%97%E6%B3%95/</link>
      <pubDate>Fri, 03 Sep 2021 17:38:11 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/09/03/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84raft%E7%AE%97%E6%B3%95/</guid>
      <description>过去, Paxos一直是分布式协议的标准，但是Paxos难于理解，更难以实现，Google的分布式锁系统Chubby作为Paxos实现曾经遭遇</description>
    </item>
    
    <item>
      <title>Redis的47连环炮，试试你能看住几个 -面前复习</title>
      <link>http://shanks.link/blog/2021/08/26/redis%E7%9A%8447%E8%BF%9E%E7%8E%AF%E7%82%AE%E8%AF%95%E8%AF%95%E4%BD%A0%E8%83%BD%E7%9C%8B%E4%BD%8F%E5%87%A0%E4%B8%AA-%E9%9D%A2%E5%89%8D%E5%A4%8D%E4%B9%A0/</link>
      <pubDate>Thu, 26 Aug 2021 00:59:58 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/26/redis%E7%9A%8447%E8%BF%9E%E7%8E%AF%E7%82%AE%E8%AF%95%E8%AF%95%E4%BD%A0%E8%83%BD%E7%9C%8B%E4%BD%8F%E5%87%A0%E4%B8%AA-%E9%9D%A2%E5%89%8D%E5%A4%8D%E4%B9%A0/</guid>
      <description>写在前面 大家好，我是老田，前面我们已经分享了五篇连环炮文章，今天我们继续。今天我们接着来聊聊Redis。Redis已经成为我们开发者必备技能</description>
    </item>
    
    <item>
      <title>常见的10种排序算法</title>
      <link>http://shanks.link/blog/2021/08/12/%E5%B8%B8%E8%A7%81%E7%9A%8410%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Thu, 12 Aug 2021 23:31:57 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/12/%E5%B8%B8%E8%A7%81%E7%9A%8410%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>[常见的排序算法——常见的10种排序] 常见算法可以分为两大类： 非线性时间比较类排序：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破</description>
    </item>
    
    <item>
      <title>数据库面试简答、30道高频面试题</title>
      <link>http://shanks.link/blog/2021/07/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%A2%E8%AF%95%E7%AE%80%E7%AD%9430%E9%81%93%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Tue, 27 Jul 2021 16:16:32 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%A2%E8%AF%95%E7%AE%80%E7%AD%9430%E9%81%93%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description>数据库面试简答、30道高频面试题 一、MySQL问答 1、数据库sql语句查询，跨表查询有哪几种方式 内连接(inner可以不写) select e.name e.age p.product_name p.saled from employee e</description>
    </item>
    
    <item>
      <title>golang 的channels 行为</title>
      <link>http://shanks.link/blog/2021/07/19/golang-%E7%9A%84channels-%E8%A1%8C%E4%B8%BA/</link>
      <pubDate>Mon, 19 Jul 2021 16:22:27 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/19/golang-%E7%9A%84channels-%E8%A1%8C%E4%B8%BA/</guid>
      <description>简介 当我第一次使用 Go 的 channels 工作的时候，我犯了一个错误，把 channels 考虑为一个数据结构。我把 channels 看作为 goroutines 之间提供自动同步访问的队列。这种结构上的理解导致我</description>
    </item>
    
    <item>
      <title>分布式锁实现原理与最佳实践</title>
      <link>http://shanks.link/blog/2021/06/15/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 15 Jun 2021 19:57:11 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/06/15/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
      <description>分布式锁实现原理与最佳实践 分布式锁应用场景 很多应用场景是需要系统保证幂等性的（如api服务或消息消费者），并发情况下或消息重复很容易造成系统</description>
    </item>
    
  </channel>
</rss>
