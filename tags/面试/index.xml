<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>面试 on 愿星光伴随你左右</title>
    <link>http://shanks.link/tags/%E9%9D%A2%E8%AF%95/</link>
    <description>Recent content in 面试 on 愿星光伴随你左右</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 03 May 2022 16:43:53 +0800</lastBuildDate>
    <atom:link href="http://shanks.link/tags/%E9%9D%A2%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>共识算法Raft</title>
      <link>http://shanks.link/blog/2022/05/03/%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95raft/</link>
      <pubDate>Tue, 03 May 2022 16:43:53 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/05/03/%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95raft/</guid>
      <description>&lt;p&gt;上篇讲到了「拜占庭将军问题」：多个拜占庭将军要如何在可能有叛徒、信使可能被策反或者暗杀的情况下达成是否要进攻的一致性决定？还不了解的先看看上一篇&lt;a href=&#34;https://link.jianshu.com/?t=%5Bhttps%3A%2F%2Fmp.weixin.qq.com%2Fs%2FPJvCXm9pwU-Wp3LNN7g8pQ%5D(https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FPJvCXm9pwU-Wp3LNN7g8pQ)&#34;&gt;《拜占庭将军问题》&lt;/a&gt;。这篇主要是介绍简化版拜占庭将军问题的解决方案：Raft 共识算法。&lt;/p&gt;</description>
    </item>
    <item>
      <title>分布式系统面试知识点</title>
      <link>http://shanks.link/blog/2022/05/03/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
      <pubDate>Tue, 03 May 2022 16:33:44 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/05/03/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9/</guid>
      <description>&lt;p&gt;本文为笔者2019年秋招面试经验总结和牛客网面经总结。大部分资源来源于网络，公众号的总结。&lt;/p&gt;&#xA;&lt;p&gt;1.CAP原则&lt;/p&gt;&#xA;&lt;p&gt;答：分布式系统有三大特性，一致性，分区容忍性和可用性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>深入了解map</title>
      <link>http://shanks.link/blog/2022/04/24/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3map/</link>
      <pubDate>Sun, 24 Apr 2022 22:19:30 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/24/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3map/</guid>
      <description>&lt;h3 id=&#34;摘要&#34;&gt;摘要&lt;/h3&gt;&#xA;&lt;p&gt;map 通过 hasTable 实现了我们最常见的 key-value 存储，能快速的对数据集增删查改。同时 Go 里的 map 也有很多特殊的地方，比如它的无序性、并发不安全等。今天，就让我们对 map 进行深入研究，看看它是怎么设计的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redis系列总结</title>
      <link>http://shanks.link/blog/2022/04/24/redis%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 24 Apr 2022 22:16:39 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/24/redis%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.modb.pro/db/247766&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;redis-总体介绍&#34;&gt;Redis 总体介绍&lt;/h1&gt;&#xA;&lt;p&gt;Redis 是 key-value 型的 memory 缓存中间件，相信大部分程序员都在项目中使用过它。我们也可以利用 memory 来实现缓存，只是使用 redis 的话，可以将缓存功能统一到一个组件里，方便后续重用拓展。&lt;/p&gt;</description>
    </item>
    <item>
      <title>关于分布式系统共识的思考</title>
      <link>http://shanks.link/blog/2022/04/24/%E5%85%B3%E4%BA%8E%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%85%B1%E8%AF%86%E7%9A%84%E6%80%9D%E8%80%83/</link>
      <pubDate>Sun, 24 Apr 2022 22:13:24 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/24/%E5%85%B3%E4%BA%8E%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%85%B1%E8%AF%86%E7%9A%84%E6%80%9D%E8%80%83/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.modb.pro/db/247776&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;分布式系统的挑战&#34;&gt;分布式系统的挑战&lt;/h1&gt;&#xA;&lt;p&gt;在前面的文章里，我们分析了分布式系统在业务上的一致性技术，即分布式事务，它的结果导向是面向用户的。然而在我们的系统内部，有时也需要面对来自软件架构等更高层次上的一致性要求，比如 Redis 的哨兵模式，Zookeeper 的选举过程等。它们所考虑的一致性更多的是服务节点之间一个&lt;code&gt;共识&lt;/code&gt;&#xA;的达成，当共识达成之后，就可以以此为指导原则，展开更多的协同操作。&lt;/p&gt;</description>
    </item>
    <item>
      <title>关于分布式事务的思考</title>
      <link>http://shanks.link/blog/2022/04/24/%E5%85%B3%E4%BA%8E%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%80%9D%E8%80%83/</link>
      <pubDate>Sun, 24 Apr 2022 22:10:50 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/24/%E5%85%B3%E4%BA%8E%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%80%9D%E8%80%83/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.modb.pro/db/247777&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;现象&#34;&gt;现象&lt;/h1&gt;&#xA;&lt;p&gt;互联网的世界与十几年前相比，已经大不相同。以往的单体服务就可以支撑起大多数的用户需求。然而随着手机等电子产品的普及，用户想要的服务已经是越来越复杂，各种需求相互关联。而这也给软件开发带来了更多的挑战。为了应付随时会变化的代码世界，现有的开发趋势都在逐渐的化整为零。其中最具代表性的就是&lt;strong&gt;微服务&lt;/strong&gt;的流行。&lt;/p&gt;</description>
    </item>
    <item>
      <title>秒懂消息队列</title>
      <link>http://shanks.link/blog/2022/04/24/%E7%A7%92%E6%87%82%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link>
      <pubDate>Sun, 24 Apr 2022 18:42:37 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/24/%E7%A7%92%E6%87%82%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.modb.pro/db/247447&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;摘要&#34;&gt;摘要&lt;/h3&gt;&#xA;&lt;p&gt;作为技术方案最常提到的组件：消息队列，它在我们的程序中起到了重要的作用。异步、解耦、削峰（缓冲）等特性正是我们选择它的原因。本文将会按自己的理解聊一聊消息队列的本质、使用场景、注意事项、以及介绍下主流的消息队列。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang系列之channel全面解析</title>
      <link>http://shanks.link/blog/2022/04/24/golang%E7%B3%BB%E5%88%97%E4%B9%8Bchannel%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Sun, 24 Apr 2022 18:39:34 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/24/golang%E7%B3%BB%E5%88%97%E4%B9%8Bchannel%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.modb.pro/db/247758&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;&#xA;&lt;p&gt;channel 是 goroutine 与 goroutine 之间通信的重要桥梁，借助 channel，我们能很轻易的写出一个&lt;strong&gt;多协程&lt;/strong&gt;通信程序。今天，我们就来看看这个 channel 的常用用法以及底层原理。&lt;/p&gt;&#xA;&lt;h3 id=&#34;一channel-的概念&#34;&gt;一、channel 的概念&lt;/h3&gt;&#xA;&lt;p&gt;channel 是一个通道，用于&lt;strong&gt;端到端&lt;/strong&gt;的数据传输，这有点像我们平常使用的消息队列，只不过 channel 的发送方和接受方是 &lt;strong&gt;goroutine&lt;/strong&gt; 对象，属于&lt;strong&gt;内存级别&lt;/strong&gt;的通信。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redis面试总结</title>
      <link>http://shanks.link/blog/2022/04/24/redis%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 24 Apr 2022 16:47:59 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/24/redis%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;h1 id=&#34;1-redis-为什么快&#34;&gt;1. redis 为什么快？&lt;/h1&gt;&#xA;&lt;p&gt;在底层上， redis 使用了 IO 多路复用技术，像 select、epoll 等。能较好的保障吞吐量。而且 redis 采用了单线程处理请求，避免了线程切换和锁竞争锁带来的额外消耗。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goroutinue理解</title>
      <link>http://shanks.link/blog/2022/04/24/goroutinue%E7%90%86%E8%A7%A3/</link>
      <pubDate>Sun, 24 Apr 2022 15:53:47 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/24/goroutinue%E7%90%86%E8%A7%A3/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000018150987&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Go语言最大的特色就是从语言层面支持并发（Goroutine），Goroutine是Go中最基本的执行单元。事实上每一个Go程序至少有一个Goroutine：主Goroutine。当程序启动时，它会自动创建。&lt;/p&gt;</description>
    </item>
    <item>
      <title>计算机网络面试知识点</title>
      <link>http://shanks.link/blog/2022/04/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
      <pubDate>Sun, 24 Apr 2022 15:14:30 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9/</guid>
      <description>&lt;h1 id=&#34;计算机网络面试知识点&#34;&gt;计算机网络面试知识点&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.modb.pro/db/332622&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;计算机网络体系模型&#34;&gt;计算机网络体系模型&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;物理层：建立、维护、断开物理连接。&lt;/li&gt;&#xA;&lt;li&gt;数据链路层：建立逻辑连接、进行硬件地址寻址、差错校验等功能。&lt;/li&gt;&#xA;&lt;li&gt;网络层：进行逻辑地址寻址，实现不同网络之间的路径选择。&lt;/li&gt;&#xA;&lt;li&gt;传输层：定义传输数据的协议端口号，以及流控和差错校验。&lt;/li&gt;&#xA;&lt;li&gt;会话层：建立、管理、终止会话，（在五层模型里面已经合并到了应用层） 会话的一端是本地主机，另一端是远程主机。&lt;/li&gt;&#xA;&lt;li&gt;表示层：数据的表示、安全、压缩。（在五层模型里面已经合并到了应用层） 格式有，JPEG、ASCll、EBCDIC、加密格式等。&lt;/li&gt;&#xA;&lt;li&gt;应用层：网络服务与最终用户的一个接口。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/tcpip/modb_20220222_6694eb70-9395-11ec-90a4-fa163eb4f6be.png&#34; alt=&#34;&#34;&gt;计算机网络模型&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go面试总结</title>
      <link>http://shanks.link/blog/2022/04/24/go%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 24 Apr 2022 15:08:40 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/24/go%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.modb.pro/db/247446&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;相比较于其他语言-go-有什么优势或者特点&#34;&gt;相比较于其他语言, Go 有什么优势或者特点？&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Go 允许跨平台编译，编译出来的是二进制的可执行文件，直接部署在对应系统上即可运行。&lt;/li&gt;&#xA;&lt;li&gt;Go 在语言层次上天生支持高并发，通过 goroutine 和 channel 实现。channel 的理论依据是 CSP 并发模型， 即所谓的&lt;code&gt;通过通信来共享内存&lt;/code&gt;&#xA;；Go 在 runtime 运行时里实现了属于自己的调度机制：GPM，降低了内核态和用户态的切换成本。&lt;/li&gt;&#xA;&lt;li&gt;Go 的代码风格是强制性的统一，如果没有按照规定来，会编译不通过。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;golang-里的-gpm-模型&#34;&gt;Golang 里的 GPM 模型？&lt;/h1&gt;&#xA;&lt;p&gt;GPM 模型是 golang 自己的一个调度模型，它抽象出了下面三个结构：&lt;/p&gt;</description>
    </item>
    <item>
      <title>分布式系统的Raft算法</title>
      <link>http://shanks.link/blog/2021/09/03/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84raft%E7%AE%97%E6%B3%95/</link>
      <pubDate>Fri, 03 Sep 2021 17:38:11 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/09/03/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84raft%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;p&gt;　　过去, Paxos一直是分布式协议的标准，但是Paxos难于理解，更难以实现，Google的分布式锁系统Chubby作为Paxos实现曾经遭遇到很多坑。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redis的47连环炮，试试你能看住几个 -面前复习</title>
      <link>http://shanks.link/blog/2021/08/26/redis%E7%9A%8447%E8%BF%9E%E7%8E%AF%E7%82%AE%E8%AF%95%E8%AF%95%E4%BD%A0%E8%83%BD%E7%9C%8B%E4%BD%8F%E5%87%A0%E4%B8%AA-%E9%9D%A2%E5%89%8D%E5%A4%8D%E4%B9%A0/</link>
      <pubDate>Thu, 26 Aug 2021 00:59:58 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/26/redis%E7%9A%8447%E8%BF%9E%E7%8E%AF%E7%82%AE%E8%AF%95%E8%AF%95%E4%BD%A0%E8%83%BD%E7%9C%8B%E4%BD%8F%E5%87%A0%E4%B8%AA-%E9%9D%A2%E5%89%8D%E5%A4%8D%E4%B9%A0/</guid>
      <description>&lt;h2 id=&#34;写在前面&#34;&gt;写在前面&lt;/h2&gt;&#xA;&lt;p&gt;大家好，我是老田，前面我们已经分享了五篇连环炮文章，今天我们继续。今天我们接着来聊聊Redis。Redis已经成为我们开发者必备技能之一了，同时面试也是必问的。下面就来对Redis进行一个总结，然后赠送43连环炮。&lt;/p&gt;</description>
    </item>
    <item>
      <title>常见的10种排序算法</title>
      <link>http://shanks.link/blog/2021/08/12/%E5%B8%B8%E8%A7%81%E7%9A%8410%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Thu, 12 Aug 2021 23:31:57 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/12/%E5%B8%B8%E8%A7%81%E7%9A%8410%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h1 id=&#34;常见的排序算法常见的10种排序&#34;&gt;[常见的排序算法——常见的10种排序]&lt;/h1&gt;&#xA;&lt;h2 id=&#34;常见算法可以分为两大类&#34;&gt;常见算法可以分为两大类：&lt;/h2&gt;&#xA;&lt;p&gt;　　非线性时间比较类排序：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此称为非线性时间比较类排序。&lt;/p&gt;&#xA;&lt;p&gt;　　线性时间非比较类排序：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此称为线性时间非比较类排序。&#xA;&lt;img src=&#34;http://shanks.link/img/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/1730367-20190711231258717-1334457150.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据库面试简答、30道高频面试题</title>
      <link>http://shanks.link/blog/2021/07/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%A2%E8%AF%95%E7%AE%80%E7%AD%9430%E9%81%93%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Tue, 27 Jul 2021 16:16:32 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/07/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%A2%E8%AF%95%E7%AE%80%E7%AD%9430%E9%81%93%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/ZhuChangwu/&#34;&gt;&lt;img src=&#34;https://www.cnblogs.com/skins/custom/images/logo.gif&#34; alt=&#34;返回主页&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;数据库面试简答30道高频面试题&#34;&gt;&lt;a href=&#34;shankusu.me/%E8%81%8C%E5%9C%BA/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%A2%E8%AF%95%E7%AE%80%E7%AD%9430%E9%81%93%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98/#more&#34;&gt;数据库面试简答、30道高频面试题&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h3 id=&#34;一mysql问答&#34;&gt;一、MySQL问答&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1数据库sql语句查询跨表查询有哪几种方式&#34;&gt;1、数据库sql语句查询，跨表查询有哪几种方式&lt;/h4&gt;&#xA;&lt;p&gt;内连接(inner可以不写)&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt; e.name e.age p.product_name p.saled&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;from&lt;/span&gt; employee e，product p &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;where&lt;/span&gt; e.id = p.id&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;select&lt;/span&gt; e.name e.age p.product_name p.saled&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;from&lt;/span&gt; employee &lt;span style=&#34;color:#00f&#34;&gt;inner&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;join&lt;/span&gt; e，product p &lt;span style=&#34;color:#00f&#34;&gt;on&lt;/span&gt; e.id = p.id&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这就是内连接，它要求数据必须On条件必须百分百匹配才会符合条件并返回。当不满足时，他会返回空。&lt;/p&gt;</description>
    </item>
    <item>
      <title>golang 的channels 行为</title>
      <link>http://shanks.link/blog/2021/07/19/golang-%E7%9A%84channels-%E8%A1%8C%E4%B8%BA/</link>
      <pubDate>Mon, 19 Jul 2021 16:22:27 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/07/19/golang-%E7%9A%84channels-%E8%A1%8C%E4%B8%BA/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;&#xA;&lt;p&gt;当我第一次使用 Go 的 channels 工作的时候，我犯了一个错误，把 channels 考虑为一个数据结构。我把 channels 看作为 goroutines 之间提供自动同步访问的队列。这种结构上的理解导致我写了很多不好且结构复杂的并发代码。&lt;/p&gt;</description>
    </item>
    <item>
      <title>分布式锁实现原理与最佳实践</title>
      <link>http://shanks.link/blog/2021/06/15/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 15 Jun 2021 19:57:11 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/06/15/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;h2 id=&#34;分布式锁实现原理与最佳实践&#34;&gt;分布式锁实现原理与最佳实践&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;分布式锁应用场景&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;很多应用场景是需要系统保证幂等性的（如api服务或消息消费者），并发情况下或消息重复很容易造成系统重入，那么分布式锁是保障幂等的一个重要手段。&lt;/p&gt;</description>
    </item>
    <item>
      <title>再见 Go 面试官：GMP 模型，为什么要有 P？</title>
      <link>http://shanks.link/blog/2021/04/16/%E5%86%8D%E8%A7%81-go-%E9%9D%A2%E8%AF%95%E5%AE%98gmp-%E6%A8%A1%E5%9E%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89-p/</link>
      <pubDate>Fri, 16 Apr 2021 18:20:16 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/16/%E5%86%8D%E8%A7%81-go-%E9%9D%A2%E8%AF%95%E5%AE%98gmp-%E6%A8%A1%E5%9E%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89-p/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/an7dml9NLOhqOZjEGLdEEw&#34;&gt;转载自煎鱼的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;最近金三银四，是面试的季节。在我的 Go 读者交流群里出现了许多小伙伴在讨论自己面试过程中所遇到的一些 Go 面试题。&lt;/p&gt;&#xA;&lt;p&gt;今天的主角，是 Go 面试的万能题 GMP 模型的延伸题（疑问），那就是 ”&lt;strong&gt;GMP 模型，为什么要有 P&lt;/strong&gt;？“&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
