<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go内存详解 on Golang编程语言知识介绍</title>
    <link>http://shanks.link/tags/go%E5%86%85%E5%AD%98%E8%AF%A6%E8%A7%A3/</link>
    <description>Recent content in go内存详解 on Golang编程语言知识介绍</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 04 Apr 2021 00:07:15 +0000</lastBuildDate><atom:link href="http://shanks.link/tags/go%E5%86%85%E5%AD%98%E8%AF%A6%E8%A7%A3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang 中的垃圾回收（三)</title>
      <link>http://shanks.link/blog/2021/04/04/golang-%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%89/</link>
      <pubDate>Sun, 04 Apr 2021 00:07:15 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/04/golang-%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%89/</guid>
      <description>原文链接 通过前两节的说明，我们得出这样一个结论：如果降低堆内存的分配压力就会相应的减少延迟，从而提升程序性能。这一节来讲一下，给一种类型的工</description>
    </item>
    
    <item>
      <title>Golang 中的垃圾回收（二)</title>
      <link>http://shanks.link/blog/2021/04/03/golang-%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%BA%8C/</link>
      <pubDate>Sat, 03 Apr 2021 23:57:23 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/golang-%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%BA%8C/</guid>
      <description>原文链接 第一部分，我花了时间去描述了golang 垃圾收集器的行为，并说明了程序运行时候收集器所产生的延迟。我分享了怎么样去产生以及去解释GC</description>
    </item>
    
    <item>
      <title>Golang 中的垃圾回收（一）</title>
      <link>http://shanks.link/blog/2021/04/03/golang-%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%80/</link>
      <pubDate>Sat, 03 Apr 2021 23:41:35 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/golang-%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%80/</guid>
      <description>原文链接 垃圾回收器负责追踪堆内存的分配，释放掉不需要的空间，追踪那些还在使用的分配空间。不同编程语言对这个机制的实现都很复杂，但是开发人员开</description>
    </item>
    
  </channel>
</rss>
