<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go内存详解 on 愿星光伴随你左右</title>
    <link>http://shanks.link/tags/go%E5%86%85%E5%AD%98%E8%AF%A6%E8%A7%A3/</link>
    <description>Recent content in Go内存详解 on 愿星光伴随你左右</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 03 Apr 2021 23:41:35 +0000</lastBuildDate>
    <atom:link href="http://shanks.link/tags/go%E5%86%85%E5%AD%98%E8%AF%A6%E8%A7%A3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang 中的垃圾回收（一）</title>
      <link>http://shanks.link/blog/2021/04/03/golang-%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%80/</link>
      <pubDate>Sat, 03 Apr 2021 23:41:35 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/golang-%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%80/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844903888177332237&#34;&gt;原文链接&lt;/a&gt;&#xA;垃圾回收器负责追踪堆内存的分配，释放掉不需要的空间，追踪那些还在使用的分配空间。不同编程语言对这个机制的实现都很复杂，但是开发人员开发软件时候并不需要了解垃圾回收太细节的东西就能进行构建。另外，不同发布版本编程语言的VM和runtime也总是在改变和进化。对于应用开发人员来说，重要的是保持一个良好的work模型，了解编程语言里垃圾回收器的行为并且它们是怎么样支持这种行为的。&#xA;对于go 1.12版本来说，go语言使用了非分代，并发的三色标记和清扫的回收器。如果想了解如何进行标记和清扫的工作，请参考这篇文章。golang的垃圾回收器的实现每个版本都在更新和进化。因此一旦下个版本发布，讲任何细节的实现都不再准确。&#xA;总而言之，这篇文章不会去讲实际的实现细节。我会为你分享回收器的一些行为并且去解释怎样面对这些行为，不考虑实现细节以及未来的改变。这将会使你成为一个更好的golang开发者&#xA;&lt;strong&gt;堆不是一个容器&lt;/strong&gt;&#xA;我不会把堆看做是一个可以存储或者是释放值的容器。理解这件事情很重要，内存里并没有明确定义了“堆”的一个分界线。任何应用程序预留的内存空间，在堆内存分配上是可用的。给定任何堆内存分配空间，它实际在虚拟内存还是物理内存上的存储位置和我们的模型并没有关联。理解这件事情会帮助你更好的理解垃圾回收模型的工作方式。&#xA;&lt;strong&gt;回收器行为&lt;/strong&gt;&#xA;当回收开始，回收器会完成三个阶段的工作。这其中两个阶段会产生Stop The World(STW) 延迟，并且另一个阶段也会产生延迟，并且会导致降低应用程序的吞吐量。这三个阶段是：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang 中的垃圾回收（三)</title>
      <link>http://shanks.link/blog/2021/04/04/golang-%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%89/</link>
      <pubDate>Sun, 04 Apr 2021 00:07:15 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/04/04/golang-%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%89/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844903902924521485&#34;&gt;原文链接&lt;/a&gt;&#xA;通过前两节的说明，我们得出这样一个结论：如果降低堆内存的分配压力就会相应的减少延迟，从而提升程序性能。这一节来讲一下，给一种类型的工作负载，GC的pacing算法是怎么来确定最佳回收速率的。&#xA;&lt;strong&gt;并发代码实例&lt;/strong&gt;&#xA;本节给出的代码在这里可以找到：&#xA;&lt;a href=&#34;https://github.com/ardanlabs/gotraining/tree/master/topics/go/profiling/trace&#34;&gt;github.com/ardanlabs/g…&lt;/a&gt;&#xA;程序是做了这样一件事情，给一个特定topic，要确定它在文档集中出现的频率。程序包含了不用版本的寻找算法，它们使用了不同的并发模式。这里我们只看freq，freqConcurrent和freqNumCPU这三种版本的算法。&#xA;首先看freq，它是非并发顺序执行的程序版本，代码如下。&#xA;L1&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang 中的垃圾回收（二)</title>
      <link>http://shanks.link/blog/2021/04/03/golang-%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%BA%8C/</link>
      <pubDate>Sat, 03 Apr 2021 23:57:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/04/03/golang-%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%BA%8C/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844903892212269064&#34;&gt;原文链接&lt;/a&gt;&#xA;第一部分，我花了时间去描述了golang 垃圾收集器的行为，并说明了程序运行时候收集器所产生的延迟。我分享了怎么样去产生以及去解释GC traces。并展示了堆内内存如何改变，并且解释了GC不同阶段对延迟代价的影响。&#xA;最后的结论是，如果你减少了堆的压力，你就会减少延迟代价并提高了程序性能。我也指出了，降低收集速率，推迟收集，设法增加两次收集的时间间隔并不是很好的策略。即使是收集速率很快，但是以一致的速度进行，也能保持程序以最佳性能运行。&#xA;这部分里，我会带你通过一个实际的web应用并向你展示怎么样生成GC traces和程序状态。然后我会解释这些工具的输出内容，这样你可以找到方法去提高应用程序的性能。&#xA;&lt;strong&gt;运行应用&lt;/strong&gt;&#xA;看一下go training的web应用程序&#xA;图1.1&#xA;&lt;img src=&#34;https://user-gold-cdn.xitu.io/2019/7/18/16c03b402f24c06a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&#34; alt=&#34;&#34;&gt;&#xA;&lt;a href=&#34;https://github.com/ardanlabs/gotraining/tree/master/topics/go/profiling/project&#34;&gt;github.com/ardanlabs/g…&lt;/a&gt;&#xA;图一是应用程序的样子。这个程序从不同的地方下载三个rss 订阅集合，并且允许用户去进行搜索。build之后，启动程序&#xA;&lt;strong&gt;L1&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
