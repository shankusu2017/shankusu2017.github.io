<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wasm on 愿星光伴随你左右</title>
    <link>http://shanks.link/tags/wasm/</link>
    <description>Recent content in Wasm on 愿星光伴随你左右</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 17 Jul 2022 21:54:38 +0800</lastBuildDate>
    <atom:link href="http://shanks.link/tags/wasm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WebAssembly 系列（五）为什么 WebAssembly 更快？</title>
      <link>http://shanks.link/blog/2022/07/17/webassembly-%E7%B3%BB%E5%88%97%E4%BA%94%E4%B8%BA%E4%BB%80%E4%B9%88-webassembly-%E6%9B%B4%E5%BF%AB/</link>
      <pubDate>Sun, 17 Jul 2022 21:54:38 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/07/17/webassembly-%E7%B3%BB%E5%88%97%E4%BA%94%E4%B8%BA%E4%BB%80%E4%B9%88-webassembly-%E6%9B%B4%E5%BF%AB/</guid>
      <description></description>
    </item>
    <item>
      <title>WebAssembly 不完全指北</title>
      <link>http://shanks.link/blog/2021/10/29/webassembly-%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8C%97/</link>
      <pubDate>Fri, 29 Oct 2021 17:22:07 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/29/webassembly-%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8C%97/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844903895110533133&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;背景从-javascript-说起&#34;&gt;背景：从 JavaScript 说起&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;JavaScript 占据着统治地位，不管是公开还是私有的项目、任何组织、世界任何地区，JavaScript 都是第一。 -GitHub 2018 年度报告&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/23/16c1cbdedf8c36c4~tplv-t2oaga2asx-watermark.awebp&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;随着JavaScript的快速发展，目前它已然成为最流行的编程语言之一，这背后正是 Web 的发展所推动的。但是随着JavaScript被广泛的应用，它也暴露了很多问题：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wasm介绍之7：文本格式</title>
      <link>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B7%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Fri, 29 Oct 2021 17:08:46 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B7%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844904097791868941&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/20/170f65a0d551a389~tplv-t2oaga2asx-zoom-crop-mark:1304:1304:1304:734.awebp&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;-wasm介绍之7文本格式&#34;&gt;# Wasm介绍之7：文本格式&lt;/h1&gt;&#xA;&lt;p&gt;前面的文章详细介绍了&lt;a href=&#34;https%3A%2F%2Fwebassembly.org%2F&#34;&gt;WebAssembly&lt;/a&gt;（简称Wasm）&lt;a href=&#34;https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fbinary%2Findex.html&#34;&gt;二进制格式&lt;/a&gt;和&lt;a href=&#34;https://link.juejin.cn/?target=https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fsyntax%2Finstructions.html&#34;&gt;指令集&lt;/a&gt;，这篇文章将介绍&lt;a href=&#34;https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Ftext%2Findex.html&#34;&gt;Wasm文本格式&lt;/a&gt;（WebAssembly Text Format，后面简称WAT）。&lt;/p&gt;&#xA;&lt;h2 id=&#34;整体结构&#34;&gt;整体结构&lt;/h2&gt;&#xA;&lt;p&gt;WAT采用了&lt;a href=&#34;https://link.juejin.cn/?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FS-expression&#34;&gt;S-表达式&lt;/a&gt;写法，整体结构如下所示：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(module&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (type   ... )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (import ... )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#00f&#34;&gt;func&lt;/span&gt;   ... )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (table  ... )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (mem    ... )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (global ... )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#00f&#34;&gt;export&lt;/span&gt; ... )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (start  ... )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (elem   ... )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (data   ... )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;复制代码&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;文本格式是二进制格式的另外一种表现形式，但是对人类更加友好。二进制格式更适合机器（比如编译器）生成和（比如Wasm解释器）理解，文本格式则更适合人类编写和阅读。除了表现形式有明显不同，在结构上，两种格式主要有下面这些不同点：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wasm介绍之6: 间接函数调用</title>
      <link>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B6-%E9%97%B4%E6%8E%A5%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</link>
      <pubDate>Fri, 29 Oct 2021 16:54:22 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B6-%E9%97%B4%E6%8E%A5%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/12/170ccd25b6a16402~tplv-t2oaga2asx-zoom-crop-mark:1304:1304:1304:734.awebp&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;-wasm介绍之6间接函数调用&#34;&gt;# Wasm介绍之6：间接函数调用&lt;/h1&gt;&#xA;&lt;p&gt;在前面的5篇文章里，我们详细讨论了&lt;a href=&#34;https%3A%2F%2Fwebassembly.org%2F&#34;&gt;WebAssembly&lt;/a&gt;（简称Wasm）&lt;a href=&#34;https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fbinary%2Findex.html&#34;&gt;二进制格式&lt;/a&gt;和除&lt;code&gt;call_indirect&lt;/code&gt;之外的所有指令。这篇文章将详细介绍Wasm间接函数调用机制和&lt;code&gt;call_indirect&lt;/code&gt;指令。&lt;/p&gt;&#xA;&lt;h2 id=&#34;call_indirect指令&#34;&gt;call_indirect指令&lt;/h2&gt;&#xA;&lt;p&gt;为了更好的理解&lt;code&gt;call_indirect&lt;/code&gt;指令，我们首先来回顾一下&lt;code&gt;call&lt;/code&gt;指令的工作方式。根据之前文章的介绍 可知，&lt;code&gt;call&lt;/code&gt;指令带有一个立即数参数，指定被调用函数的索引。在Wasm实现执行&lt;code&gt;call&lt;/code&gt;指令之前，必须保证要传递给被调用函数的参数已经在栈顶，且参数的顺序和类型必须完全匹配被调函数的签名。&lt;code&gt;call&lt;/code&gt;指令执行完毕之后，参数已经从栈顶弹出，函数的返回值（如果有的话）会出现在栈顶。我们假设被调用函数接收两个参数，类型分别是&lt;code&gt;f32&lt;/code&gt;和&lt;code&gt;f64&lt;/code&gt;，返回值类型是&lt;code&gt;i64&lt;/code&gt;，下面是&lt;code&gt;call&lt;/code&gt;指令的示意图：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wasm介绍之5：控制指令</title>
      <link>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B5%E6%8E%A7%E5%88%B6%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Fri, 29 Oct 2021 16:51:54 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B5%E6%8E%A7%E5%88%B6%E6%8C%87%E4%BB%A4/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844904082071617544&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/5/170a96e59f4522e8~tplv-t2oaga2asx-zoom-crop-mark:1304:1304:1304:734.awebp&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;-wasm介绍之5控制指令&#34;&gt;# Wasm介绍之5：控制指令&lt;/h1&gt;&#xA;&lt;p&gt;[WebAssembly]https%3A%2F%2Fwebassembly.org%2F)（简称Wasm）&lt;a href=&#34;https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fbinary%2Finstructions.html%23control-instructions&#34;&gt;控制指令&lt;/a&gt;一共有11条，其中&lt;code&gt;unreachable&lt;/code&gt;指令（操作码&lt;code&gt;0x00&lt;/code&gt;）和&lt;code&gt;nop&lt;/code&gt;指令（操作码&lt;code&gt;0x01&lt;/code&gt;）比较简单，不介绍。&lt;code&gt;call&lt;/code&gt;指令（操作码&lt;code&gt;0x10&lt;/code&gt;）已经在上一篇文章里介绍，&lt;code&gt;call_indirect&lt;/code&gt;指令（操作码&lt;code&gt;0x11&lt;/code&gt;）将在下一篇文章里介绍。本文重点讨论&lt;code&gt;block&lt;/code&gt;（操作码&lt;code&gt;0x02&lt;/code&gt;）、&lt;code&gt;loop&lt;/code&gt;（操作码&lt;code&gt;0x03&lt;/code&gt;）、&lt;code&gt;if&lt;/code&gt;（操作码&lt;code&gt;0x04&lt;/code&gt;）、&lt;code&gt;br&lt;/code&gt;（操作码&lt;code&gt;0x0C&lt;/code&gt;）、&lt;code&gt;br_if&lt;/code&gt;（操作码&lt;code&gt;0x0D&lt;/code&gt;）、&lt;code&gt;br_table&lt;/code&gt;（操作码&lt;code&gt;0x0E&lt;/code&gt;）和&lt;code&gt;return&lt;/code&gt;（操作码&lt;code&gt;0x0F&lt;/code&gt;）这7条指令。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wasm介绍之4：函数调用</title>
      <link>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B4%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</link>
      <pubDate>Fri, 29 Oct 2021 16:48:03 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B4%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844904077411745800&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/2/28/1708b4c47191d9b5~tplv-t2oaga2asx-watermark.awebp&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;上一篇文章介绍了&lt;a href=&#34;https%3A%2F%2Fwebassembly.org%2F&#34;&gt;WebAssembly&lt;/a&gt;（简称Wasm）内存和相关指令，这篇文章将介绍&lt;a href=&#34;https://link.juejin.cn/?target=https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fbinary%2Finstructions.html%23variable-instructions&#34;&gt;变量指令&lt;/a&gt;和函数调用指令。&lt;/p&gt;&#xA;&lt;h2 id=&#34;全局变量&#34;&gt;全局变量&lt;/h2&gt;&#xA;&lt;p&gt;Wasm&lt;a href=&#34;https://link.juejin.cn/?target=https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fsyntax%2Fmodules.html&#34;&gt;模块&lt;/a&gt;可以&lt;a href=&#34;https://link.juejin.cn/?target=https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fsyntax%2Fmodules.html%23globals&#34;&gt;定义&lt;/a&gt;或者&lt;a href=&#34;https://link.juejin.cn/?target=https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fsyntax%2Fmodules.html%23imports&#34;&gt;导入&lt;/a&gt;全局变量。导入时，可以限定全局变量的类型和可修改性（mutability）。定义时，除了限定类型和可修改性还可以给定初始值。下面是一个&lt;a href=&#34;https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Ftext%2Fconventions.html&#34;&gt;WAT&lt;/a&gt;例子，展示了全局变量的导入和定义：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(module&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (import &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;env&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;g1&amp;#34;&lt;/span&gt; (global $g1 i32))       ;; immutable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (import &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;env&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;g2&amp;#34;&lt;/span&gt; (global $g2 (mut f32))) ;; mutable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (global $g3 (mut i32) (i32.&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; 123)) ;; mutable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (global $g4 (mut i64) (i64.&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; 456)) ;; mutable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (global $g5 f32 (f32.&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; 1.5))       ;; immutable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (global $g6 f64 (f64.&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; 2.5))       ;; immutable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#00f&#34;&gt;func&lt;/span&gt; $main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ;; $g3 = $g1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (global.get $g1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (global.set $g3)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;复制代码&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;变量指令一共5条，其中2条用来读写全局变量，下面分别介绍。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wasm介绍之3：内存</title>
      <link>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B3%E5%86%85%E5%AD%98/</link>
      <pubDate>Fri, 29 Oct 2021 16:40:13 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B3%E5%86%85%E5%AD%98/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844904069186715656&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/2/21/17066003f2cbfc43~tplv-t2oaga2asx-watermark.awebp&#34; alt=&#34;1.jpg&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;上一篇文章介绍了&lt;a href=&#34;target=https%3A%2F%2Fwebassembly.org%2F&#34;&gt;WebAssembly&lt;/a&gt;（简称Wasm）&lt;a href=&#34;https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fsyntax%2Finstructions.html&#34;&gt;指令集&lt;/a&gt;以及指令的操作码（Opcode）、立即数（Immediate Arguments）、操作数（Operands）、操作数栈（Operand Stack，简称栈）等概念，并且详细介绍了&lt;a href=&#34;https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fbinary%2Finstructions.html%23parametric-instructions&#34;&gt;参数指令&lt;/a&gt;和&lt;a href=&#34;https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fbinary%2Finstructions.html%23numeric-instructions&#34;&gt;数值指令&lt;/a&gt;。这篇文章将介绍Wasm内存和相关指令。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wasm介绍之2：指令集和栈</title>
      <link>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B2%E6%8C%87%E4%BB%A4%E9%9B%86%E5%92%8C%E6%A0%88/</link>
      <pubDate>Fri, 29 Oct 2021 16:36:38 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B2%E6%8C%87%E4%BB%A4%E9%9B%86%E5%92%8C%E6%A0%88/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844904065411842056&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;上一篇文章介绍了&lt;a href=&#34;https%3A%2F%2Fwebassembly.org%2F&#34;&gt;WebAssembly&lt;/a&gt;（后文简称Wasm）&lt;a href=&#34;https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fbinary%2Findex.html&#34;&gt;二进制格式&lt;/a&gt;，这一篇文章将介绍Wasm&lt;a href=&#34;https%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fsyntax%2Finstructions.html&#34;&gt;指令集&lt;/a&gt;、操作数栈和部分指令。&lt;/p&gt;&#xA;&lt;h2 id=&#34;wasm指令集&#34;&gt;Wasm指令集&lt;/h2&gt;&#xA;&lt;p&gt;和真实的&lt;a href=&#34;https://link.juejin.cn/?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FMachine_code&#34;&gt;机器码&lt;/a&gt;一样，Wasm二进制文件中的代码也由一条一条的&lt;strong&gt;指令&lt;/strong&gt;构成。同样，Wasm指令也包含两部分信息：&lt;strong&gt;操作码&lt;/strong&gt;（Opcode）和&lt;strong&gt;操作数&lt;/strong&gt; （Operands）。Wasm操作码固定为一个字节，因此最多能表示256条指令，这一点和&lt;a href=&#34;https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FJava_bytecode&#34;&gt;Java字节码&lt;/a&gt;一样。Wasm1.0规范一共定义了172条指令，这些指令按功能可以分为5大类，分别是：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;控制指令&lt;/strong&gt;（Control Instructions），共13条。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;参数指令&lt;/strong&gt;（Parametric Instructions），共2条。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;变量指令&lt;/strong&gt;（Variable Instructions），共5条。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;内存指令&lt;/strong&gt;（Memory Instructions），共25条。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;数值指令&lt;/strong&gt;（Numeric Instructions），共127条。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;可以看到，已经定义的指令中，有超过2/3属于数值指令。为了方便人类书写和理解，Wasm规范给也给每个操作码定义了&lt;strong&gt;助记符&lt;/strong&gt;（&lt;a href=&#34;https://link.juejin.cn/?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FAssembly_language%23Opcode_mnemonics_and_extended_mnemonics&#34;&gt;Mnemonic&lt;/a&gt;），比如说操作码&lt;code&gt;0x41&lt;/code&gt;的助记符是&lt;code&gt;i32.const&lt;/code&gt;。下面是已定义指令的操作码分布示意图：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wasm介绍之1：二进制格式</title>
      <link>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B1%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Fri, 29 Oct 2021 16:33:16 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/29/wasm%E4%BB%8B%E7%BB%8D%E4%B9%8B1%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%A0%BC%E5%BC%8F/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844904062148689933&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;关于&lt;a href=&#34;https%3A%2F%2Fwebassembly.org%2F&#34;&gt;WebAssembly&lt;/a&gt;（下文简称Wasm）的介绍已经有很多了，本文不打算再多啰嗦。本文介绍的重点是Wasm&lt;a href=&#34;https://link.juejin.cn/?target=https%3A%2F%2Flinks.jianshu.com%2Fgo%3Fto%3Dhttps%3A%2F%2Fwebassembly.github.io%2Fspec%2Fcore%2Fbinary%2Findex.html&#34;&gt;二进制格式&lt;/a&gt;，我们会把一个最简单的&lt;a href=&#34;https://link.juejin.cn/?target=https%3A%2F%2Flinks.jianshu.com%2Fgo%3Fto%3Dhttps%3A%2F%2Fwww.rust-lang.org%2F&#34;&gt;Rust&lt;/a&gt;程序（没错，就是&lt;code&gt;Hello，World！&lt;/code&gt;程序）编译成Wasm二进制格式，然后以Go伪代码结合&lt;code&gt;xxd&lt;/code&gt;命令的形式来剖析Wasm二进制格式 。下面是这个Rust程序的完整代码（如果不了解如何将Rust编译成Wasm，请看&lt;a href=&#34;https%3A%2F%2Fdev.to%2Fdandyvica%2Fwasm-in-rust-without-nodejs-2e0c&#34;&gt;这篇文章&lt;/a&gt;）：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#![no_std]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#![no_main]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;print_str&lt;/span&gt;(ptr: *&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;u8&lt;/span&gt;, len: &lt;span style=&#34;color:#00f&#34;&gt;usize&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#[panic_handler]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;panic&lt;/span&gt;(_info: &lt;span style=&#34;color:#00f&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#007575&#34;&gt;core&lt;/span&gt;::panic::PanicInfo) -&amp;gt; ! {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;loop&lt;/span&gt; {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#[no_mangle]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsafe&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;let&lt;/span&gt; s = &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;Hello, World!&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print_str(s.as_ptr(), s.len());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;module&#34;&gt;Module&lt;/h2&gt;&#xA;&lt;p&gt;Wasm的顶层结构是&lt;strong&gt;模块&lt;/strong&gt;（Module），每一个Wasm二进制文件对应一个模块。模块以4字节&lt;a href=&#34;https://link.juejin.cn/?target=https%3A%2F%2Flinks.jianshu.com%2Fgo%3Fto%3Dhttps%3A%2F%2Fen.wikipedia.org%2Fwiki%2FMagic_number_%28programming%29&#34;&gt;魔数&lt;/a&gt;开始，接着是4字节版本号，其余是模块的数据。具体的模块数据被分门别类的放在不同的&lt;strong&gt;段&lt;/strong&gt;（Section）中，每个段都由唯一的段ID来标识。除了&lt;strong&gt;自定义段&lt;/strong&gt;（后文会介绍）以外，其他所有的段都最多只能出现一次，且必须按照段ID递增的顺序出现。下面的&lt;strong&gt;伪代码&lt;/strong&gt;（采用Go语言语法，下同）给出了模块的整体结构：&lt;/p&gt;</description>
    </item>
    <item>
      <title>WebAssembly完全入门了解wasm的前世今身</title>
      <link>http://shanks.link/blog/2021/10/20/webassembly%E5%AE%8C%E5%85%A8%E5%85%A5%E9%97%A8%E4%BA%86%E8%A7%A3wasm%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E8%BA%AB/</link>
      <pubDate>Wed, 20 Oct 2021 14:43:14 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/20/webassembly%E5%AE%8C%E5%85%A8%E5%85%A5%E9%97%A8%E4%BA%86%E8%A7%A3wasm%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E8%BA%AB/</guid>
      <description>&lt;p&gt;首发于&lt;a href=&#34;https://www.zhihu.com/column/detectiveHLH&#34;&gt;SH的全栈笔记&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;接触WebAssembly之后，在google上看了很多资料。感觉对WebAssembly的使用、介绍、意义都说的比较模糊和笼统。感觉看了之后收获没有达到预期，要么是文章中的例子自己去实操不能成功，要么就是不知所云、一脸蒙蔽。本着业务催生技术的态度，这边文章就诞生了。前部分主要是对WebAssembly的背景做一些介绍，WebAssembly是怎么出现的，优势在哪儿。如果想直接开始撸代码试试效果，可以直接跳到最后一个板块。&lt;/p&gt;</description>
    </item>
    <item>
      <title>十年磨一剑，WebAssembly是如何诞生的？</title>
      <link>http://shanks.link/blog/2021/10/20/%E5%8D%81%E5%B9%B4%E7%A3%A8%E4%B8%80%E5%89%91webassembly%E6%98%AF%E5%A6%82%E4%BD%95%E8%AF%9E%E7%94%9F%E7%9A%84/</link>
      <pubDate>Wed, 20 Oct 2021 14:34:08 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/20/%E5%8D%81%E5%B9%B4%E7%A3%A8%E4%B8%80%E5%89%91webassembly%E6%98%AF%E5%A6%82%E4%BD%95%E8%AF%9E%E7%94%9F%E7%9A%84/</guid>
      <description>&lt;p&gt;首发于&lt;a href=&#34;https://www.zhihu.com/column/c_1228368234593677312&#34;&gt;寒雁Talk&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;创造一个编程语言最好的时间是10年前，其次是现在。&lt;/p&gt;&#xA;&lt;p&gt;从Emscripten到asm.js再到WebAssembly，从一个业余项目到W3C标准，差不多是整整10年。&lt;/p&gt;</description>
    </item>
    <item>
      <title>深入浅出WebAssembly1-8链接</title>
      <link>http://shanks.link/blog/2021/10/20/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAwebassembly1-8%E9%93%BE%E6%8E%A5/</link>
      <pubDate>Wed, 20 Oct 2021 10:45:41 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/20/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAwebassembly1-8%E9%93%BE%E6%8E%A5/</guid>
      <description>&lt;p&gt;这系列主要是我对WASM研究的笔记，可能内容比较简略。总共包括：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/6844904050656444424&#34;&gt;深入浅出WebAssembly(1) Compilation&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/6844904190146248712&#34;&gt;深入浅出WebAssembly(2) Basic Api&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;[深入浅出WebAssembly(3) Instructions]((&lt;a href=&#34;https://juejin.cn/post/6844904190150443015&#34;&gt;https://juejin.cn/post/6844904190150443015&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/6844904190150443022&#34;&gt;深入浅出WebAssembly(4) Validation&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/6844904176816783374&#34;&gt;深入浅出WebAssembly(5) Memory&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/6844904190163025934&#34;&gt;深入浅出WebAssembly(6) Binary Format&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/6844904176820944904&#34;&gt;深入浅出WebAssembly(7) Future&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;[深入浅出WebAssembly(8) Wasm in Rust（TODO）]&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>深入浅出WebAssembly(2) Basic API</title>
      <link>http://shanks.link/blog/2021/10/20/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAwebassembly2-basic-api/</link>
      <pubDate>Wed, 20 Oct 2021 10:43:19 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/20/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAwebassembly2-basic-api/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844904190146248712&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;这系列主要是我对WASM研究的笔记，可能内容比较简略。总共包括：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(1) Compilation&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(2) Basic Api&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(3) Instructions&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(4) Validation&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(5) Memory&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(6) Binary Format&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(7) Future&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(8) Wasm in Rust（TODO）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;api总览&#34;&gt;API总览&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;//async version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WebAssembly.compile(bufferSource: ArrayBuffer): Promise&amp;lt;WebAssembly.Module&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WebAssembly.instantiate(bufferSource: ArrayBuffer, importObj?: any): Promise&amp;lt;{module: WebAssembly.Module, instance: WebAssembly.Instance}&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WebAssembly.instantiate(module: WebAssembly.Module, importObj?: any): Promise&amp;lt;WebAssembly.Instance&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WebAssembly.compileStreaming(source: Promise&amp;lt;Responce&amp;gt;): Promise&amp;lt;WebAssembly.Module&amp;gt; // wasm 请求头：Context-type: application/wasm&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;//sync version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new WebAssembly.Module(bufferSource: ArrayBuffer)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new WebAssembly.Instance(module: WebAssembly.Module, importObj?: any)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// helper&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WebAssembly.Module.customSections(module:WebAssembly.Module, sectionName: string): ArrayBuffer[]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WebAssembly.Module.exports(module: WebAssembly.Module): { name: string, kind: &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;function|table|memory|global&amp;#34;&lt;/span&gt; }][]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WebAssembly.Module.imports(module: WebAssembly.Module): { module: string, name: string, kind: &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;function|table|memory|global&amp;#34;&lt;/span&gt; }][]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// validation and error&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WebAssembly.validate(bufferSource: ArrayBuffer):boolean&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;interface CommonError {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  message: string&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  filename: string&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lineNumber: number&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new WebAssembly.CompileError(message: string, fileName: string, lineNumber: number) // 解码，验证阶段&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new WebAssembly.LinkError(message: string, fileName: string, lineNumber: number)  // 实例化阶段&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new WebAssembly.RuntimeError(message: string, fileName: string, lineNumber: number) // 运行阶段&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;复制代码&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;如何初始化一个模块&#34;&gt;如何初始化一个模块？&lt;/h2&gt;&#xA;&lt;h3 id=&#34;async-way&#34;&gt;Async way:&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fetch(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;./index.wasm&amp;#39;&lt;/span&gt;).then(response =&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  response.arrayBuffer()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;).then(bytes =&amp;gt; WebAssembly.instantiate(bytes, {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  env: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    yyy: xxx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})).then(wasm =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; { module, instance } = wasm;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}).catch(console.error);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;复制代码&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;streaming-way&#34;&gt;Streaming way:&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; source = fetch(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;./index.wasm&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WebAssembly.compileStreaming(source).then(module =&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  WebAssembly.instantiate(module, {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    env: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      xxx: yyy&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  })&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;).then(instance =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  //xxx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}).catch(console.error);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;复制代码&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;sync-way&#34;&gt;Sync way:&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; source = fetch(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;./index.wasm&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WebAssembly.compileStreaming(source).then(module =&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  WebAssembly.instantiate(module, {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    env: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      xxx: yyy&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  })&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;).then(instance =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  //xxx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}).catch(console.error);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;复制代码&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最好的方式是通过 &lt;code&gt;WebAssembly.compileStreaming&lt;/code&gt; 的方式来加载。可以对wasm模块提前进行编译验证。&lt;/p&gt;</description>
    </item>
    <item>
      <title>深入浅出WebAssembly(1) Compilation</title>
      <link>http://shanks.link/blog/2021/10/20/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAwebassembly1-compilation/</link>
      <pubDate>Wed, 20 Oct 2021 10:39:28 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/20/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAwebassembly1-compilation/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844904050656444424&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;这系列主要是我对WASM研究的笔记，可能内容比较简略。总共包括：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(1) Compilation&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(2) Basic Api&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(3) Instructions&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(4) Validation&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(5) Memory&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(6) Binary Format&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(7) Future&lt;/li&gt;&#xA;&lt;li&gt;深入浅出WebAssembly(8) Wasm in Rust（TODO）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;js是如何解析运行的&#34;&gt;JS是如何解析运行的？&lt;/h2&gt;&#xA;&lt;h3 id=&#34;词法分析&#34;&gt;词法分析&lt;/h3&gt;&#xA;&lt;p&gt;JS代码首先需要经过词法分析器(Lexer)来生成Token，如a = 1 + 2将被解析成&lt;code&gt;{a, =, 1, +, 2}&lt;/code&gt;五个Token&lt;/p&gt;</description>
    </item>
    <item>
      <title>编程语言、虚拟机和 webAssembly 三者有什么关系</title>
      <link>http://shanks.link/blog/2021/10/20/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C-webassembly-%E4%B8%89%E8%80%85%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Wed, 20 Oct 2021 09:43:43 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/20/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C-webassembly-%E4%B8%89%E8%80%85%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;前言：今天我们聊一聊最近很火热的技术 webAssembly。webAssbemly 作为一项新的技术，自 2015 年诞生之初，就逐渐受到人们的关注。那究竟什么是 webAssembly ？它是一门新的编程语言吗？它跟虚拟机又有什么样的关系呢？它有着什么样的应用场景呢？接下来就让我们用 5-10分钟的时间来回答这些问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>WebAssembly 系列（六）WebAssembly 的现在与未来</title>
      <link>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E5%85%ADwebassembly-%E7%9A%84%E7%8E%B0%E5%9C%A8%E4%B8%8E%E6%9C%AA%E6%9D%A5/</link>
      <pubDate>Wed, 20 Oct 2021 09:34:37 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E5%85%ADwebassembly-%E7%9A%84%E7%8E%B0%E5%9C%A8%E4%B8%8E%E6%9C%AA%E6%9D%A5/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;本文作者：Lin Clark&lt;/p&gt;&#xA;&lt;p&gt;翻译原文：&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//huziketang.com/blog/posts/detail%3FpostId%3D58ce7fd3a6d8a07e449fdd26&#34;&gt;http://huziketang.com/blog/posts/detail?postId=58ce7fd3a6d8a07e449fdd26&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;英文原文：&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//hacks.mozilla.org/2017/02/where-is-webassembly-now-and-whats-next/&#34;&gt;Where is WebAssembly now and what’s next?&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;本文是关于 WebAssembly 系列的第六篇文章（&lt;strong&gt;本系列共六篇文章&lt;/strong&gt;），也同时是本系列的收尾文章。如果你没有读先前文章的话，建议&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//huziketang.com/blog/posts/detail%3FpostId%3D58ce8036a6d8a07e449fdd27&#34;&gt;先读这里&lt;/a&gt;。如果对 WebAssembly 没概念，建议&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//blog.csdn.net/wulixiaoxiao1/article/details/60581397&#34;&gt;先读这里&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>WebAssembly 系列（四）WebAssembly 工作原理</title>
      <link>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E5%9B%9Bwebassembly-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 20 Oct 2021 09:15:58 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E5%9B%9Bwebassembly-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;p&gt;首发于&lt;a href=&#34;https://www.zhihu.com/column/qianduandaha&#34;&gt;前端大哈&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;本文作者：Lin Clark&lt;/p&gt;&#xA;&lt;p&gt;翻译原文：&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//huziketang.com/blog/posts/detail%3FpostId%3D58c77641a6d8a07e449fdd24&#34;&gt;http://huziketang.com/blog/posts/detail?postId=58c77641a6d8a07e449fdd24&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;英文原文：&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//hacks.mozilla.org/2017/02/creating-and-working-with-webassembly-modules/&#34;&gt;Creating and working with WebAssembly modules&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;本文是关于 WebAssembly 系列的第四篇文章（&lt;strong&gt;本系列共六篇文章&lt;/strong&gt;）。如果你没有读先前文章的话，建议&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//huziketang.com/blog/posts/detail%3FpostId%3D58ce8036a6d8a07e449fdd27&#34;&gt;先读这里&lt;/a&gt;。如果对 WebAssembly 没概念，建议&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//blog.csdn.net/wulixiaoxiao1/article/details/60581397&#34;&gt;先读这里&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>WebAssembly 系列（三）编译器如何生成汇编</title>
      <link>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E4%B8%89%E7%BC%96%E8%AF%91%E5%99%A8%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E6%B1%87%E7%BC%96/</link>
      <pubDate>Wed, 20 Oct 2021 09:13:32 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E4%B8%89%E7%BC%96%E8%AF%91%E5%99%A8%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E6%B1%87%E7%BC%96/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;本文作者：Lin Clark&#xA;翻译原文：&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//huziketang.com/blog/posts/detail%3FpostId%3D58c55a3ba6d8a07e449fdd23&#34;&gt;http://huziketang.com/blog/posts/detail?postId=58c55a3ba6d8a07e449fdd23&lt;/a&gt;&#xA;英文原文：&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//hacks.mozilla.org/2017/02/a-crash-course-in-assembly/&#34;&gt;A crash course in assembly&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;本文是关于 WebAssembly 系列的第三篇文章&lt;/em&gt;**（本系列共六篇文章）&lt;em&gt;&lt;em&gt;&lt;em&gt;。如果你没有读先前文章的话，建议&lt;/em&gt;&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//huziketang.com/blog/posts/detail%3FpostId%3D58ce8036a6d8a07e449fdd27&#34;&gt;先读这里&lt;/a&gt;&lt;/em&gt;。如果对 WebAssembly 没概念，建议&lt;/em&gt;&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//blog.csdn.net/wulixiaoxiao1/article/details/60581397&#34;&gt;先读这里&lt;/a&gt;&lt;em&gt;。&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>WebAssembly 系列（二）JavaScript Just-in-time (JIT) 工作</title>
      <link>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E4%BA%8Cjavascript-just-in-time-jit-%E5%B7%A5%E4%BD%9C/</link>
      <pubDate>Wed, 20 Oct 2021 09:10:21 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E4%BA%8Cjavascript-just-in-time-jit-%E5%B7%A5%E4%BD%9C/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;作者：Lin Clark&#xA;翻译原文：&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//huziketang.com/blog/posts/detail%3FpostId%3D58c12f36a6d8a07e449fdd22&#34;&gt;http://huziketang.com/blog/posts/detail?postId=58c12f36a6d8a07e449fdd22&lt;/a&gt;&#xA;英文原文：&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//hacks.mozilla.org/2017/02/a-crash-course-in-just-in-time-jit-compilers/&#34;&gt;A crash course in just-in-time (JIT) compilers&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;本文是关于 WebAssembly 系列的第二篇文章**（本系列共六篇文章）**。如果你没有读先前文章的话，建议&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//huziketang.com/blog/posts/detail%3FpostId%3D58ce8036a6d8a07e449fdd27&#34;&gt;先读这里&lt;/a&gt;。如果对 WebAssembly 没概念，建议&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//blog.csdn.net/wulixiaoxiao1/article/details/60581397&#34;&gt;先读这里&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>WebAssembly 系列（一）生动形象地介绍 WebAssembly</title>
      <link>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E4%B8%80%E7%94%9F%E5%8A%A8%E5%BD%A2%E8%B1%A1%E5%9C%B0%E4%BB%8B%E7%BB%8D-webassembly/</link>
      <pubDate>Wed, 20 Oct 2021 09:07:03 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/20/webassembly-%E7%B3%BB%E5%88%97%E4%B8%80%E7%94%9F%E5%8A%A8%E5%BD%A2%E8%B1%A1%E5%9C%B0%E4%BB%8B%E7%BB%8D-webassembly/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;本文作者：Lin Clark&lt;/p&gt;&#xA;&lt;p&gt;翻译原文：&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//huziketang.com/blog/posts/detail%3FpostId%3D58ce8036a6d8a07e449fdd27&#34;&gt;http://huziketang.com/blog/posts/detail?postId=58ce8036a6d8a07e449fdd27&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;英文原文：&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//hacks.mozilla.org/2017/02/a-cartoon-intro-to-webassembly/&#34;&gt;A cartoon intro to WebAssembly&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;你可能已经听说过，WebAssembly 执行的更快。但是 WebAssembly 为什么执行的更快呢？&lt;/p&gt;&#xA;&lt;p&gt;在这个系列文章中，我会为你解释这一点。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
