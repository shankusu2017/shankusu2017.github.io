<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>It on 愿星光伴随你左右</title>
    <link>http://shanks.link/tags/it/</link>
    <description>Recent content in It on 愿星光伴随你左右</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 24 Jan 2024 16:04:20 +0800</lastBuildDate>
    <atom:link href="http://shanks.link/tags/it/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>分布式系统学习资料汇总</title>
      <link>http://shanks.link/blog/2024/01/24/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/</link>
      <pubDate>Wed, 24 Jan 2024 16:04:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/24/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;本文首发自公众号：“木鸟杂记”，会不定期更新。欢迎订阅我的分布式系统和数据库专栏：系统日知录，&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//xiaobot.net/p/system-thinking&#34;&gt;https://xiaobot.net/p/system-thinking&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;引子&#34;&gt;引子&lt;/h2&gt;&#xA;&lt;p&gt;时下，随着通信技术的发展、移动互联网的普及、物联网车联网人工智能的兴起，每天所产生的数据呈爆炸性的增长。这种尺度的数据不是传统单机系统可以独立处理的，而只能借助于大规模的分布式系统，因而分布式系统渐渐的变成一门“显学”。而作为一个分布式系统初学者，面对网上未加归类、浩如烟海的学习资料，很容易两眼抓瞎。&lt;/p&gt;</description>
    </item>
    <item>
      <title>理解socks5协议的工作过程和协议细节</title>
      <link>http://shanks.link/blog/2024/01/24/%E7%90%86%E8%A7%A3socks5%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B%E5%92%8C%E5%8D%8F%E8%AE%AE%E7%BB%86%E8%8A%82/</link>
      <pubDate>Wed, 24 Jan 2024 14:33:33 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/24/%E7%90%86%E8%A7%A3socks5%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B%E5%92%8C%E5%8D%8F%E8%AE%AE%E7%BB%86%E8%8A%82/</guid>
      <description>&lt;h2 id=&#34;1前言&#34;&gt;1前言&lt;/h2&gt;&#xA;&lt;p&gt;本位将由浅入深带大家详细了解socks5协议。文章首先会对socks协议进行简单介绍，接着会介绍socks5协议的使用场景，然后介绍它的工作工程，最后介绍协议的细节(握手、数据转发)。&lt;/p&gt;</description>
    </item>
    <item>
      <title>vscode远程gdb调试</title>
      <link>http://shanks.link/blog/2024/01/24/vscode%E8%BF%9C%E7%A8%8Bgdb%E8%B0%83%E8%AF%95/</link>
      <pubDate>Wed, 24 Jan 2024 10:14:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/24/vscode%E8%BF%9C%E7%A8%8Bgdb%E8%B0%83%E8%AF%95/</guid>
      <description>&lt;h3 id=&#34;目标&#34;&gt;目标&lt;/h3&gt;&#xA;&lt;p&gt;话不多说，本文要实现的是：在 windows 端远程调试 linux 服务器和 &lt;a href=&#34;https://so.csdn.net/so/search?q=arm&amp;amp;spm=1001.2101.3001.7020&#34;&gt;arm&lt;/a&gt; 嵌入式设备上的 c++ 代码，对 gdb 调试的配置及使用进行一个整理。&lt;/p&gt;&#xA;&lt;h2 id=&#34;远程连接&#34;&gt;远程连接&lt;/h2&gt;&#xA;&lt;p&gt;首先需要实现&lt;a href=&#34;https://so.csdn.net/so/search?q=%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8&amp;amp;spm=1001.2101.3001.7020&#34;&gt;远程连接服务器&lt;/a&gt;，在插件库中搜索 “remote-ssh”，双击下载安装即可（下图中我已安装好），安装好之后在侧边栏出现远程资源管理器&lt;/p&gt;</description>
    </item>
    <item>
      <title>__attribute__((packed))详解</title>
      <link>http://shanks.link/blog/2024/01/24/__attribute__packed%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 24 Jan 2024 09:42:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/24/__attribute__packed%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;h3 id=&#34;attributepacked详解&#34;&gt;&lt;strong&gt;attribute&lt;/strong&gt;((packed))详解&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;strong&gt;attribute&lt;/strong&gt; ((packed)) 的作用就是告诉&lt;a href=&#34;https://so.csdn.net/so/search?q=%E7%BC%96%E8%AF%91%E5%99%A8&amp;amp;spm=1001.2101.3001.7020&#34;&gt;编译器&lt;/a&gt;取消结构在编译过程中的优化对齐,按照实际占用字节数进行对齐，是GCC特有的语法。这个功能是跟操作系统没关系，跟编译器有关，gcc编译器不是紧凑模式的，我在windows下，用vc的编译器也不是紧凑的，用tc的编译器就是紧凑的。例如：&lt;/p&gt;&#xA;&lt;p&gt;在TC下：&lt;a href=&#34;https://so.csdn.net/so/search?q=struct&amp;amp;spm=1001.2101.3001.7020&#34;&gt;struct&lt;/a&gt; my{ char ch; int a;} sizeof(int)=2;sizeof(my)=3;（紧凑模式）&lt;/p&gt;&#xA;&lt;p&gt;在&lt;a href=&#34;https://so.csdn.net/so/search?q=GCC&amp;amp;spm=1001.2101.3001.7020&#34;&gt;GCC&lt;/a&gt;下：struct my{ char ch; int a;} sizeof(int)=4;sizeof(my)=8;（非紧凑模式）&lt;/p&gt;</description>
    </item>
    <item>
      <title>GDB的调试原理</title>
      <link>http://shanks.link/blog/2024/01/23/gdb%E7%9A%84%E8%B0%83%E8%AF%95%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 23 Jan 2024 11:53:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/23/gdb%E7%9A%84%E8%B0%83%E8%AF%95%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;p&gt;GDB是如何实现的，对于这个问题，在面试中也遇到过一次，我真的不懂，只能整理一下文章和资料&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/it/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240123115500.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;当我们启动gdb程序之后，会执行下面的操作：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;：通过fork（）系统调用创建一个新的进程。&lt;/li&gt;&#xA;&lt;li&gt;：在新的子进程中在执行下述操作：ptrace（PTRACE_TRACEME，0，0，0）；&lt;/li&gt;&#xA;&lt;li&gt;：在子进程中通过execv（）系统调用加载用于执行的可执行文件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       ptrace - process trace&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SYNOPSIS&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include &amp;lt;sys/ptrace.h&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       long ptrace(enum __ptrace_request request, pid_t pid,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   void *addr, void *data);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DESCRIPTION&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       The  ptrace()  system  call provides a means by which a parent process may observe and control the execution of another process,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       and examine and change its core image and registers.  It is primarily used to implement breakpoint  debugging  and  system  call&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       tracing.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       The  parent  can initiate a trace by calling fork(2) and having the resulting child &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; a PTRACE_TRACEME, followed (typically) by&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       an exec(3).  Alternatively, the parent may commence trace of an existing process using PTRACE_ATTACH.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       While being traced, the child will stop each time a signal is delivered, even &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; the signal is being ignored.  (The exception is&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       SIGKILL, which has its usual effect.)  The parent will be notified at its next wait(2) and may inspect and modify the child pro-&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       cess &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; it is stopped.  The parent &lt;span style=&#34;color:#00f&#34;&gt;then&lt;/span&gt; causes the child to &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;, optionally  ignoring  the  delivered  signal  (or  even&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       delivering a different signal instead).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       When  the parent is finished tracing, it can terminate the child with PTRACE_KILL or cause it to &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt; executing in a normal,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       untraced mode via PTRACE_DETACH.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       The value of request determines the action to be performed&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;attatch动作&#34;&gt;attatch动作&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/it/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240123115543.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>为什么pthread_cond_wait需要互斥锁mutex作为参数</title>
      <link>http://shanks.link/blog/2024/01/22/%E4%B8%BA%E4%BB%80%E4%B9%88pthread_cond_wait%E9%9C%80%E8%A6%81%E4%BA%92%E6%96%A5%E9%94%81mutex%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0/</link>
      <pubDate>Mon, 22 Jan 2024 17:35:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/22/%E4%B8%BA%E4%BB%80%E4%B9%88pthread_cond_wait%E9%9C%80%E8%A6%81%E4%BA%92%E6%96%A5%E9%94%81mutex%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0/</guid>
      <description>&lt;h1 id=&#34;为什么pthread_cond_wait需要互斥锁mutex作为参数&#34;&gt;为什么pthread_cond_wait需要互斥锁mutex作为参数&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;pthread_cond_wait需要互斥锁mutex作为参数的原因：当前线程执行pthread_cond_wait时，一定是处于某个临界区，正在访问共享资源，存在一个mutex与该临界区相关联。因此，在阻塞前，必须释放mutex；被唤醒后，需要再次获得mutex。&lt;/p&gt;</description>
    </item>
    <item>
      <title>thrift 之 go 入门 Getting Started with Thrift Go</title>
      <link>http://shanks.link/blog/2023/12/08/thrift-%E4%B9%8B-go-%E5%85%A5%E9%97%A8-getting-started-with-thrift-go/</link>
      <pubDate>Fri, 08 Dec 2023 16:20:09 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/12/08/thrift-%E4%B9%8B-go-%E5%85%A5%E9%97%A8-getting-started-with-thrift-go/</guid>
      <description>&lt;h3 id=&#34;下载安装-thrift-编译器&#34;&gt;下载、安装 thrift 编译器&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;thrift 编译器的下载连接 &lt;a href=&#34;https://thrift.apache.org/downloa&#34;&gt;https://thrift.apache.org/downloa&lt;/a&gt; 这里注意下版本&lt;/li&gt;&#xA;&lt;li&gt;将下载的编译器放到系统的可执行目录下，并去掉版本信息， eg: thrift-0.19.0.exe 改为 thrift.exe&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;go-安装-thrift-包&#34;&gt;go 安装 thrift 包&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go get github.com/apache/thrift@0.19.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#这里的版本要和上面的对应&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;新建-tmp-目录&#34;&gt;新建 tmp 目录&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;新建一个临时目录 tmp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;在新建的 tmp 目录下新建一个存放 thrift 文件的 thrift 目录&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;将上述 thrift 包的实例文件(tutorial)拷贝到 thrift 目录下&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;我这里的 thrift 安装包的路径是 C:&lt;span style=&#34;color:#009c00&#34;&gt;\U&lt;/span&gt;sers&lt;span style=&#34;color:#009c00&#34;&gt;\s&lt;/span&gt;hanks&lt;span style=&#34;color:#009c00&#34;&gt;\g&lt;/span&gt;o&lt;span style=&#34;color:#009c00&#34;&gt;\p&lt;/span&gt;kg&lt;span style=&#34;color:#009c00&#34;&gt;\m&lt;/span&gt;od&lt;span style=&#34;color:#009c00&#34;&gt;\g&lt;/span&gt;ithub.com&lt;span style=&#34;color:#009c00&#34;&gt;\a&lt;/span&gt;pache&lt;span style=&#34;color:#009c00&#34;&gt;\t&lt;/span&gt;hrift@v0.19.0 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;将 tutorial 中的 shared.thrift 和 tutorial.thrift 文件 拷贝到 tmp/thrift中&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;生成对应语言的协议文件&#34;&gt;生成对应语言的协议文件&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;在上述新建的 tmp 目录下执行 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;thrift -r --gen go thrift/tutorial.thrift&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;生产 go 语言版本的 thrift协议代码&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;拷贝实例代码&#34;&gt;拷贝实例代码&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;将上述安装目录下的 tutorial\go\src 中的代码（包括上层的 server.crt 和 server.key ）拷贝到 tmp 目录下&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;编译-go-代码&#34;&gt;编译 go 代码&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go mod init example.com/m 有 go.mod 可不执行&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go build main.go&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;编译报错处理即可&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>thrift 备忘录 thrift memorandum</title>
      <link>http://shanks.link/blog/2023/12/08/thrift-%E5%A4%87%E5%BF%98%E5%BD%95-thrift-memorandum/</link>
      <pubDate>Fri, 08 Dec 2023 14:10:09 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/12/08/thrift-%E5%A4%87%E5%BF%98%E5%BD%95-thrift-memorandum/</guid>
      <description>&lt;h3 id=&#34;下载&#34;&gt;下载&lt;/h3&gt;&#xA;&lt;p&gt;thrift 编译器的下载连接 &lt;a href=&#34;https://thrift.apache.org/download&#34;&gt;https://thrift.apache.org/download&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;版本&#34;&gt;版本&lt;/h3&gt;&#xA;&lt;p&gt;上述下载的编译器版本要和后续引用的 thrift 头文件的版本对应，比如这里下载的是 0.19.0 版本，后续引用头文件 github.com/apache/thrift 或者 git.apache.org/thrift.git 需要 git checkout 0.19.0&lt;/p&gt;&#xA;&lt;h3 id=&#34;多个仓库-replace-的问题&#34;&gt;多个仓库 replace 的问题&lt;/h3&gt;&#xA;&lt;p&gt;go.mod 中可以手动添加 replace git.apache.org/thrift.git v0.19.0 =&amp;gt; github.com/apache/thrift v0.19.0&lt;/p&gt;</description>
    </item>
    <item>
      <title>体系化认识 RPC</title>
      <link>http://shanks.link/blog/2023/12/07/%E4%BD%93%E7%B3%BB%E5%8C%96%E8%AE%A4%E8%AF%86-rpc/</link>
      <pubDate>Thu, 07 Dec 2023 16:14:09 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/12/07/%E4%BD%93%E7%B3%BB%E5%8C%96%E8%AE%A4%E8%AF%86-rpc/</guid>
      <description>&lt;p&gt;RPC（Remote Procedure Call），即远程过程调用，是一个分布式系统间通信的必备技术。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/it/0x63b8c117.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;RPC 最核心要解决的问题就是在分布式系统间，如何执行另外一个地址空间上的函数、方法，就仿佛在本地调用一样，个人总结的 RPC 最核心的概念和技术包括如下，如图所示：&lt;/p&gt;</description>
    </item>
    <item>
      <title>RADIUS简介</title>
      <link>http://shanks.link/blog/2023/12/06/radius%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 06 Dec 2023 11:44:09 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/12/06/radius%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h1 id=&#34;什么是radius&#34;&gt;什么是RADIUS？&lt;/h1&gt;&#xA;&lt;p&gt;RADIUS（Remote Authentication Dial In User Service，远程用户拨号认证）协议是一种分布式的、客户端/服务器结构的信息交互协议，能保护网络不受未授权访问的干扰，常应用在既要求较高安全性、又允许远程用户访问的各种网络环境中。RADIUS协议为标准协议，基本所有主流设备均支持，在实际网络中应用最多。RADIUS使用UDP（User Datagram Protocol，用户数据报协议）作为传输协议，具有良好的实时性；同时也支持重传机制和备用服务器机制，具有较好的可靠性；实现较为简单，适用于大用户量时服务器端的多线程结构。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何查看iptables关于nat的日志</title>
      <link>http://shanks.link/blog/2023/04/26/%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8Biptables%E5%85%B3%E4%BA%8Enat%E7%9A%84%E6%97%A5%E5%BF%97/</link>
      <pubDate>Wed, 26 Apr 2023 20:56:28 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/04/26/%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8Biptables%E5%85%B3%E4%BA%8Enat%E7%9A%84%E6%97%A5%E5%BF%97/</guid>
      <description>&lt;h3 id=&#34;查看iptables关于nat的日志的方法有许多种我在这里介绍一个简单的方法&#34;&gt;查看&lt;strong&gt;iptables&lt;/strong&gt;关于&lt;strong&gt;nat&lt;/strong&gt;的&lt;strong&gt;日志&lt;/strong&gt;的方法有许多种，我在这里介绍一个简单的方法。&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;使用iptables -t mangle -A POSTROUTING -j LOG &amp;ndash;log-level debug &amp;ndash;log-prefix &amp;ldquo;OUT PACKETS:&amp;rdquo;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;然后修改/etc/syslog.conf&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;加上一行 kern.debug /var/log/iptables&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;重启syslog服务&lt;/p&gt;&#xA;&lt;p&gt;这样，所有通过iptables的包就会被记录在/var/log/iptables里面&lt;/p&gt;</description>
    </item>
    <item>
      <title> 写给工程师的十条精进原则</title>
      <link>http://shanks.link/blog/2022/09/29/%E5%86%99%E7%BB%99%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E5%8D%81%E6%9D%A1%E7%B2%BE%E8%BF%9B%E5%8E%9F%E5%88%99/</link>
      <pubDate>Thu, 29 Sep 2022 20:15:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/29/%E5%86%99%E7%BB%99%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E5%8D%81%E6%9D%A1%E7%B2%BE%E8%BF%9B%E5%8E%9F%E5%88%99/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;时间回到8年前，我人生中第一份实习的工作，是在某互联网公司的无线搜索部做一个C++工程师。当时的我可谓意气风发，想要大干一场，结果第一次上线就写了人生中第一个Casestudy。由于对部署环境的不了解，把SVN库里的配置文件错误地发到线上，并且上完线就去吃晚饭了，等吃饭回来发现师傅在焦头烂额地回滚配置。那次故障造成了一个核心服务20分钟不可用，影响了几百万的用户。这仅仅是一个开始，在后来半年的时间里，我几乎把所有职场新人可能犯的错误都犯了个遍。架构师让我调研一个抓取性能提升方案，我闷头搞了两周，也没有得出任何结论；本来安排好的开发计划，由于我临时要回去写论文，搞得经理措手不及；参加项目座谈会，全程“打酱油”……那段时间，自己也很苦恼，几乎每天晚上11点多才走，很累很辛苦，但依然拿不到想要的结果。&lt;/p&gt;</description>
    </item>
    <item>
      <title>工作中如何做好技术积累</title>
      <link>http://shanks.link/blog/2022/09/29/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/</link>
      <pubDate>Thu, 29 Sep 2022 19:48:32 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/29/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;古人云：“活到老，学到老。”互联网算是最辛苦的行业之一，“加班”对工程师来说已是“家常便饭”，同时互联网技术又日新月异，很多工程师都疲于应付，叫苦不堪。以至于长期以来流传一个很广的误解：35岁是程序员工作的终点。&lt;/p&gt;</description>
    </item>
    <item>
      <title>工程师的基本功是什么？该如何练习？</title>
      <link>http://shanks.link/blog/2022/09/29/%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8A%9F%E6%98%AF%E4%BB%80%E4%B9%88%E8%AF%A5%E5%A6%82%E4%BD%95%E7%BB%83%E4%B9%A0/</link>
      <pubDate>Thu, 29 Sep 2022 19:43:45 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/29/%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8A%9F%E6%98%AF%E4%BB%80%E4%B9%88%E8%AF%A5%E5%A6%82%E4%BD%95%E7%BB%83%E4%B9%A0/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在美团有一句老话，叫做“苦练基本功”。美团创始人王兴解读的基本功是业务和管理的基本动作。只要能把基本功扎实练好，就能产生巨大价值。然而滴水石穿非一日之功，练好基本功是一个长期的事情。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Compare And Swap（CAS）原理分析</title>
      <link>http://shanks.link/blog/2022/09/29/compare-and-swapcas%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 29 Sep 2022 18:26:01 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/29/compare-and-swapcas%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h1 id=&#34;1-什么是cas&#34;&gt;1 什么是&lt;a href=&#34;https://so.csdn.net/so/search?q=CAS&amp;amp;spm=1001.2101.3001.7020&#34;&gt;CAS&lt;/a&gt;？&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;11-加锁和cas解决原子性问题的不同原理&#34;&gt;1.1 加锁和CAS解决&lt;a href=&#34;https://so.csdn.net/so/search?q=%E5%8E%9F%E5%AD%90%E6%80%A7&amp;amp;spm=1001.2101.3001.7020&#34;&gt;原子性&lt;/a&gt;问题的不同原理&lt;/h2&gt;&#xA;&lt;p&gt;首先看如下代码：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;package&lt;/span&gt; com.nrsc.ch2.cas;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;import&lt;/span&gt; java.util.ArrayList;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;import&lt;/span&gt; java.util.List;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#007575&#34;&gt;CasDemo&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;//共享资源&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;increase&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        i++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;main&lt;/span&gt;(String[] args) &lt;span style=&#34;color:#00f&#34;&gt;throws&lt;/span&gt; InterruptedException {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Runnable r = () -&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; j = 0; j &amp;lt; 1000; j++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                increase();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&amp;lt;Thread&amp;gt; threads = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; j = 0; j &amp;lt; 10; j++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Thread thread = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; Thread(r);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            threads.add(thread);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            thread.start();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;//确保前面10个线程都走完&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (Thread thread : threads) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            thread.join();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.out.println(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;123456789101112131415161718192021222324252627282930313233343536&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;相信每个人都知道这段代码由于&lt;code&gt;i++不是原子操作&lt;/code&gt;,因此会导致这10个线程执行后的最终结果不是10*1,000 = 10,000。&#xA;当然也相信几乎所有人都知道通过&lt;code&gt;加锁可以解决这个问题&lt;/code&gt;，加锁方式解决该问题的原理基本可以用下图进行概况：&#xA;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200322200432294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25yc2MyNzI0MjAxOTk=,size_16,color_FFFFFF,t_70&#34; alt=&#34;在这里插入图片描述&#34;&gt;&#xA;而其实除了加锁之外利用CAS机制也能解决这个问题。既然说它是除了加锁之外的另一种解决方式，&lt;code&gt;那它肯定是无锁的&lt;/code&gt;，因此利用CAS机制解决该问题的方式大致可以用下图进行概况：&#xA;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200322201324892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25yc2MyNzI0MjAxOTk=,size_16,color_FFFFFF,t_70&#34; alt=&#34;在这里插入图片描述&#34;&gt;&#xA;那到底啥是CAS呢？它又是是如何解决这个问题的呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>磁盘那些事</title>
      <link>http://shanks.link/blog/2022/09/29/%E7%A3%81%E7%9B%98%E9%82%A3%E4%BA%9B%E4%BA%8B/</link>
      <pubDate>Thu, 29 Sep 2022 16:31:09 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/29/%E7%A3%81%E7%9B%98%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;&#xA;&lt;p&gt;计算机硬件性能在过去十年间的发展普遍遵循摩尔定律，通用计算机的CPU主频早已超过3GHz，内存也进入了普及DDR4的时代。然而传统硬盘虽然在存储容量上增长迅速，但是在读写性能上并无明显提升，同时SSD硬盘价格高昂，不能在短时间内完全替代传统硬盘。传统磁盘的I/O读写速度成为了计算机系统性能提高的瓶颈，制约了计算机整体性能的发展。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
