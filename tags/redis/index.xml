<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on 程序员的小天地</title>
    <link>http://shanks.link/tags/redis/</link>
    <description>Recent content in Redis on 程序员的小天地</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 24 Apr 2022 22:16:39 +0800</lastBuildDate>
    <atom:link href="http://shanks.link/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis系列总结</title>
      <link>http://shanks.link/blog/2022/04/24/redis%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 24 Apr 2022 22:16:39 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/24/redis%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.modb.pro/db/247766&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;redis-总体介绍&#34;&gt;Redis 总体介绍&lt;/h1&gt;&#xA;&lt;p&gt;Redis 是 key-value 型的 memory 缓存中间件，相信大部分程序员都在项目中使用过它。我们也可以利用 memory 来实现缓存，只是使用 redis 的话，可以将缓存功能统一到一个组件里，方便后续重用拓展。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redis面试总结</title>
      <link>http://shanks.link/blog/2022/04/24/redis%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 24 Apr 2022 16:47:59 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/24/redis%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;h1 id=&#34;1-redis-为什么快&#34;&gt;1. redis 为什么快？&lt;/h1&gt;&#xA;&lt;p&gt;在底层上， redis 使用了 IO 多路复用技术，像 select、epoll 等。能较好的保障吞吐量。而且 redis 采用了单线程处理请求，避免了线程切换和锁竞争锁带来的额外消耗。&lt;/p&gt;</description>
    </item>
    <item>
      <title>More Redis internals: Tracing a GET &amp; SET</title>
      <link>http://shanks.link/blog/2021/09/02/more-redis-internals-tracing-a-get-set/</link>
      <pubDate>Thu, 02 Sep 2021 01:24:09 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/09/02/more-redis-internals-tracing-a-get-set/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.pauladamsmith.com/blog/2011/03/redis_get_set.html&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;MARCH 10, 2011&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.pauladamsmith.com/images/redis.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;In my &lt;a href=&#34;https://www.pauladamsmith.com/articles/redis-under-the-hood.html&#34;&gt;previous article&lt;/a&gt;, I took a superficial look at how Redis starts up and prepares itself to process commands. In this article, I&amp;rsquo;ll follow a &lt;code&gt;GET&lt;/code&gt; and a &lt;code&gt;SET&lt;/code&gt; command as they move from client through the server and back. The &lt;code&gt;GET&lt;/code&gt; will be for a key that doesn&amp;rsquo;t exist, and the &lt;code&gt;SET&lt;/code&gt; will set that key. Then I&amp;rsquo;ll look quickly at a subsequent &lt;code&gt;GET&lt;/code&gt; and how it differs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>under the hood</title>
      <link>http://shanks.link/blog/2021/09/01/under-the-hood/</link>
      <pubDate>Wed, 01 Sep 2021 19:37:20 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/09/01/under-the-hood/</guid>
      <description>&lt;p&gt;by &lt;a href=&#34;https://www.pauladamsmith.com/&#34;&gt;Paul Smith&lt;/a&gt; (&lt;a href=&#34;http://twitter.com/paulsmith&#34;&gt;@paulsmith&lt;/a&gt;)&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://code.google.com/p/redis/&#34;&gt;&lt;img src=&#34;https://www.pauladamsmith.com/articles/redis_under_the_hood/redis.png&#34; alt=&#34;Redis logo&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;How does the &lt;a href=&#34;http://code.google.com/p/redis/&#34;&gt;Redis&lt;/a&gt; server work?&lt;/p&gt;&#xA;&lt;p&gt;I was curious to learn more about Redis’s internals, so I’ve been familiarizing myself with the source, largely by reading and jumping around in Emacs. After I had peeled back enough of the onion’s layers, I realized I was trying to keep track of too many details in my head, and it wasn’t clear how it all hung together. I decided to write out in narrative form how an instance of the Redis server starts up and initializes itself, and how it handles the request/response cycle with a client, as a way of explaining it to myself, hopefully in a clear fashion. Luckily, Redis has a nice, clean code base that is easy to read and follow along. Armed with a &lt;a href=&#34;http://ctags.sourceforge.net/&#34;&gt;TAGS&lt;/a&gt; file, my &lt;code&gt;$EDITOR&lt;/code&gt;, and GDB, I set out to see how it all works under the hood. (Incidentally, I was working with the Redis code base as of &lt;a href=&#34;http://github.com/antirez/redis/tree/b4f2e412d087bae0a523fe6ea40fcad30fe74b5b&#34;&gt;commit b4f2e41&lt;/a&gt;. Of course, internals such as I outline below are subject to change. However, the broad architecture of the server is unlikely to change very much, and I tried to keep that in mind as I went along.)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redis的47连环炮，试试你能看住几个 -面前复习</title>
      <link>http://shanks.link/blog/2021/08/26/redis%E7%9A%8447%E8%BF%9E%E7%8E%AF%E7%82%AE%E8%AF%95%E8%AF%95%E4%BD%A0%E8%83%BD%E7%9C%8B%E4%BD%8F%E5%87%A0%E4%B8%AA-%E9%9D%A2%E5%89%8D%E5%A4%8D%E4%B9%A0/</link>
      <pubDate>Thu, 26 Aug 2021 00:59:58 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/26/redis%E7%9A%8447%E8%BF%9E%E7%8E%AF%E7%82%AE%E8%AF%95%E8%AF%95%E4%BD%A0%E8%83%BD%E7%9C%8B%E4%BD%8F%E5%87%A0%E4%B8%AA-%E9%9D%A2%E5%89%8D%E5%A4%8D%E4%B9%A0/</guid>
      <description>&lt;h2 id=&#34;写在前面&#34;&gt;写在前面&lt;/h2&gt;&#xA;&lt;p&gt;大家好，我是老田，前面我们已经分享了五篇连环炮文章，今天我们继续。今天我们接着来聊聊Redis。Redis已经成为我们开发者必备技能之一了，同时面试也是必问的。下面就来对Redis进行一个总结，然后赠送43连环炮。&lt;/p&gt;</description>
    </item>
    <item>
      <title>redis基础数据结构skiplist</title>
      <link>http://shanks.link/blog/2021/08/25/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84skiplist/</link>
      <pubDate>Wed, 25 Aug 2021 15:18:17 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/25/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84skiplist/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_45827856/article/details/103254965&#34;&gt;以下内容转载自csdn-Knight0xffff&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;太长不看版&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;跳跃表是有序集合的底层实现之一， 除此之外它在 Redis 中没有其他应用。&lt;/li&gt;&#xA;&lt;li&gt;每个跳跃表节点的层高都是 1 至 64 之间的随机数&lt;/li&gt;&#xA;&lt;li&gt;层高越高出现的概率越低，层高为i的概率为( 1 − p ) ∗ p i − 1 , ( p = 1 / 4 ) (1-p) * p^{i-1}, (p=1/4)(1−&lt;em&gt;p&lt;/em&gt;)∗&lt;em&gt;p**i&lt;/em&gt;−1,(&lt;em&gt;p&lt;/em&gt;=1/4)。&lt;/li&gt;&#xA;&lt;li&gt;跳跃表中，分值可以重复， 但对象成员唯一。分值相同时，节点按照成员对象的大小进行排序。&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;本篇解析基于&lt;a href=&#34;https://github.com/antirez/redis&#34;&gt;redis&lt;/a&gt; 5.0.0版本，本篇涉及源码文件为t_zset.c, server.h。&lt;/p&gt;</description>
    </item>
    <item>
      <title>redis源码推荐阅读顺序</title>
      <link>http://shanks.link/blog/2021/08/23/redis%E6%BA%90%E7%A0%81%E6%8E%A8%E8%8D%90%E9%98%85%E8%AF%BB%E9%A1%BA%E5%BA%8F/</link>
      <pubDate>Mon, 23 Aug 2021 19:45:13 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/23/redis%E6%BA%90%E7%A0%81%E6%8E%A8%E8%8D%90%E9%98%85%E8%AF%BB%E9%A1%BA%E5%BA%8F/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.huangz.me/diary/2014/how-to-read-redis-source-code.html#&#34;&gt;转载自黄健宏的博客&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;在这篇文章中， 我将向大家介绍一种我认为比较合理的 Redis 源码阅读顺序， 希望可以给对 Redis 有兴趣并打算阅读 Redis 源码的朋友带来一点帮助。&lt;/p&gt;&#xA;&lt;h2 id=&#34;第-1-步阅读数据结构实现&#34;&gt;第 1 步：阅读数据结构实现&lt;/h2&gt;&#xA;&lt;p&gt;刚开始阅读 Redis 源码的时候， 最好从数据结构的相关文件开始读起， 因为这些文件和 Redis 中的其他部分耦合最少， 并且这些文件所实现的数据结构在大部分算法书上都可以了解到， 所以从这些文件开始读是最轻松的、难度也是最低的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>redis独立模块-慢查询日志</title>
      <link>http://shanks.link/blog/2021/08/23/redis%E7%8B%AC%E7%AB%8B%E6%A8%A1%E5%9D%97-%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97/</link>
      <pubDate>Mon, 23 Aug 2021 16:02:14 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/23/redis%E7%8B%AC%E7%AB%8B%E6%A8%A1%E5%9D%97-%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97/</guid>
      <description>&lt;h3 id=&#34;数据结构&#34;&gt;数据结构&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* This structure defines an entry inside the slow log list */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;typedef &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; slowlogEntry {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    robj **argv;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; argc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    long long id;       &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Unique entry identifier. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    long long duration; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Time spent by the query, in nanoseconds. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    time_t time;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Unix time at which the query was executed. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} slowlogEntry;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;特点&#34;&gt;特点&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;超过阈值时长的操作会被记录(不写入硬盘)&lt;/li&gt;&#xA;&lt;li&gt;仅记录最近N(配置)条记录&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>详解Redis源码中的部分快速排序算法pqsort</title>
      <link>http://shanks.link/blog/2021/08/16/%E8%AF%A6%E8%A7%A3redis%E6%BA%90%E7%A0%81%E4%B8%AD%E7%9A%84%E9%83%A8%E5%88%86%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95pqsort/</link>
      <pubDate>Mon, 16 Aug 2021 17:08:33 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/16/%E8%AF%A6%E8%A7%A3redis%E6%BA%90%E7%A0%81%E4%B8%AD%E7%9A%84%E9%83%A8%E5%88%86%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95pqsort/</guid>
      <description>&lt;h1 id=&#34;详解redis源码中的部分快速排序算法pqsortc&#34;&gt;详解Redis源码中的部分快速排序算法（pqsort.c）&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/guodongxiaren&#34;&gt;转载自果冻虾仁&lt;/a&gt; 2015-06-07 19:08:39&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;　　看标题，你可能会疑惑：咦？你这家伙，怎么不讲解完整的快排，只讲一部分快排……&lt;code&gt;-。-&lt;/code&gt; 哎，冤枉。“部分快排”是算法的名字，实际上本文相当详细呢。本文几乎与普通快排无异。看懂了本文，你对普通的快排也会有更深的认识了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>redis-lzf压缩算法</title>
      <link>http://shanks.link/blog/2021/08/10/redis-lzf%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 10 Aug 2021 18:20:17 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/10/redis-lzf%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h3 id=&#34;文件&#34;&gt;文件&lt;/h3&gt;&#xA;&lt;p&gt;lzf.h&#xA;lzfP.h&#xA;lzf_c.c (压缩)&#xA;lzf_d.c (解压)&lt;/p&gt;&#xA;&lt;h3 id=&#34;压缩&#34;&gt;压缩&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;默认模式是&lt;strong&gt;VERY_FAST&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;核心思想&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对重复值进行压缩&lt;/li&gt;&#xA;&lt;li&gt;通过hash表来判断是否重复数据&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;h4 id=&#34;三种模式&#34;&gt;三种模式&lt;/h4&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;模式&lt;/th&gt;&#xA;          &lt;th&gt;（压缩）时间&lt;/th&gt;&#xA;          &lt;th&gt;（压缩后）空间&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;ULTRA_FAST&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;极端快&lt;/td&gt;&#xA;          &lt;td&gt;大&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;VERY_FAST&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;非常快&lt;/td&gt;&#xA;          &lt;td&gt;中&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;普通&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;快&lt;/td&gt;&#xA;          &lt;td&gt;小&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;h4 id=&#34;变量&#34;&gt;变量&lt;/h4&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;LZF_HSLOT_BIAS&lt;/strong&gt; 64位系统，是in_data的起始地址&#xA;&lt;strong&gt;ip&lt;/strong&gt; 输入游标&#xA;&lt;strong&gt;op&lt;/strong&gt; 输出游标&#xA;&lt;strong&gt;hval&lt;/strong&gt; 整型，当前游标的4位数值ip[-1]|ip[0]|ip[1]|ip[2]&#xA;&lt;strong&gt;htab&lt;/strong&gt; 保存输入数据(in_data)的下标&#xA;&lt;strong&gt;hslot&lt;/strong&gt; 哈希槽，指向哈希表(htab)的指针&#xA;&lt;strong&gt;ref&lt;/strong&gt; 值引用，ref = *hslot + LZF_HSLOT_BIAS，也是引用in_data的数据&#xA;&lt;strong&gt;off&lt;/strong&gt; 偏移量，ip相对于ref的偏移量&#xA;&lt;strong&gt;lit&lt;/strong&gt; literal，非压缩字符串长度&lt;/p&gt;</description>
    </item>
    <item>
      <title>redis基础组件-ae简介</title>
      <link>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6-ae%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 10 Aug 2021 17:15:11 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6-ae%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h3 id=&#34;数据结构&#34;&gt;数据结构&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* File event structure */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; aeFileEvent {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; mask; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* one of AE_(READABLE|WRITABLE) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    aeFileProc *rfileProc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    aeFileProc *wfileProc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *clientData;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} aeFileEvent;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Time event structure */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; aeTimeEvent {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;long&lt;/span&gt; id; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* time event identifier. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;long&lt;/span&gt; when_sec; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* seconds */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;long&lt;/span&gt; when_ms; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* milliseconds */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    aeTimeProc *timeProc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    aeEventFinalizerProc *finalizerProc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *clientData;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; aeTimeEvent *next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} aeTimeEvent;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* A fired event */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; aeFiredEvent {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; fd;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; mask;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} aeFiredEvent;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* State of an event based program */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; aeEventLoop {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; maxfd;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;long&lt;/span&gt; timeEventNextId;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    aeFileEvent events[AE_SETSIZE]; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Registered events */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    aeFiredEvent fired[AE_SETSIZE]; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Fired events */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    aeTimeEvent *timeEventHead;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; stop;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *apidata; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* This is used for polling API specific data */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    aeBeforeSleepProc *beforesleep;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} aeEventLoop;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;特点&#34;&gt;特点&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;整个redis服务器运行的发动机&lt;/li&gt;&#xA;&lt;li&gt;利用OS提供的多路复用机制，高效的处理句柄的读写事件和超时事件&lt;/li&gt;&#xA;&lt;li&gt;同一个fd，可读和可写的event是分开的(fd可能随时来数据，所以时刻监听其可读，但只有在还有待写数据的情况下才需要监听fd的可写事件)&lt;/li&gt;&#xA;&lt;li&gt;在处理时间事件的句柄中，不处理新生成的时间事件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;重要接口函数&#34;&gt;重要接口函数&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;处理文件fd的读写事件,若没有则等待最近的时间事件超时&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Process every pending time event, then every pending file event&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * (that may be registered by time event callbacks just processed).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * Without special flags the function sleeps until some file event&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * fires, or when the next time event occurrs (if any).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; *&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * If flags is 0, the function does nothing and returns.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * if flags has AE_ALL_EVENTS set, all the kind of events are processed.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * if flags has AE_FILE_EVENTS set, file events are processed.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * if flags has AE_TIME_EVENTS set, time events are processed.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * if flags has AE_DONT_WAIT set the function returns ASAP until all&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * the events that&amp;#39;s possible to process without to wait are processed.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; *&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * The function returns the number of events processed. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;aeProcessEvents&lt;/span&gt;(aeEventLoop *eventLoop, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; flags)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; processed = 0, numevents;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Nothing to do? return ASAP */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!(flags &amp;amp; AE_TIME_EVENTS) &amp;amp;&amp;amp; !(flags &amp;amp; AE_FILE_EVENTS)) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Note that we want call select() even if there are no&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;     * file events to process as long as we want to process time&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;     * events, in order to sleep until the next time event is ready&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;     * to fire. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (eventLoop-&amp;gt;maxfd != -1 ||&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ((flags &amp;amp; AE_TIME_EVENTS) &amp;amp;&amp;amp; !(flags &amp;amp; AE_DONT_WAIT))) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; j;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        aeTimeEvent *shortest = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; timeval tv, *tvp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (flags &amp;amp; AE_TIME_EVENTS &amp;amp;&amp;amp; !(flags &amp;amp; AE_DONT_WAIT))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            shortest = &lt;span style=&#34;color:#c34e00&#34;&gt;aeSearchNearestTimer&lt;/span&gt;(eventLoop);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (shortest) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;long&lt;/span&gt; now_sec, now_ms;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Calculate the time missing for the nearest&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;             * timer to fire. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;aeGetTime&lt;/span&gt;(&amp;amp;now_sec, &amp;amp;now_ms);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            tvp = &amp;amp;tv;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            tvp-&amp;gt;tv_sec = shortest-&amp;gt;when_sec - now_sec;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (shortest-&amp;gt;when_ms &amp;lt; now_ms) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                tvp-&amp;gt;tv_usec = ((shortest-&amp;gt;when_ms+1000) - now_ms)*1000;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                tvp-&amp;gt;tv_sec --;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                tvp-&amp;gt;tv_usec = (shortest-&amp;gt;when_ms - now_ms)*1000;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (tvp-&amp;gt;tv_sec &amp;lt; 0) tvp-&amp;gt;tv_sec = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (tvp-&amp;gt;tv_usec &amp;lt; 0) tvp-&amp;gt;tv_usec = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* If we have to check for events but need to return&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;             * ASAP because of AE_DONT_WAIT we need to se the timeout&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;             * to zero */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (flags &amp;amp; AE_DONT_WAIT) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                tv.tv_sec = tv.tv_usec = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                tvp = &amp;amp;tv;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Otherwise we can block */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                tvp = NULL; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* wait forever */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        numevents = &lt;span style=&#34;color:#c34e00&#34;&gt;aeApiPoll&lt;/span&gt;(eventLoop, tvp);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (j = 0; j &amp;lt; numevents; j++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            aeFileEvent *fe = &amp;amp;eventLoop-&amp;gt;events[eventLoop-&amp;gt;fired[j].fd];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; mask = eventLoop-&amp;gt;fired[j].mask;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; fd = eventLoop-&amp;gt;fired[j].fd;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; rfired = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* note the fe-&amp;gt;mask &amp;amp; mask &amp;amp; ... code: maybe an already processed&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;             * event removed an element that fired and we still didn&amp;#39;t&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;             * processed, so we check if the event is still valid. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (fe-&amp;gt;mask &amp;amp; mask &amp;amp; AE_READABLE) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                rfired = 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                fe-&amp;gt;&lt;span style=&#34;color:#c34e00&#34;&gt;rfileProc&lt;/span&gt;(eventLoop,fd,fe-&amp;gt;clientData,mask);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (fe-&amp;gt;mask &amp;amp; mask &amp;amp; AE_WRITABLE) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!rfired || fe-&amp;gt;wfileProc != fe-&amp;gt;rfileProc)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    fe-&amp;gt;&lt;span style=&#34;color:#c34e00&#34;&gt;wfileProc&lt;/span&gt;(eventLoop,fd,fe-&amp;gt;clientData,mask);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            processed++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Check time events */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (flags &amp;amp; AE_TIME_EVENTS)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        processed += &lt;span style=&#34;color:#c34e00&#34;&gt;processTimeEvents&lt;/span&gt;(eventLoop);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; processed; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* return the number of processed file/time events */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>redis基础组件-anet简介</title>
      <link>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6-anet%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 10 Aug 2021 17:06:09 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6-anet%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h3 id=&#34;特点&#34;&gt;特点&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;模块非常简洁，提供了监听指定端口，链接指定地址，读，写网络句柄等功能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;重要的接口函数&#34;&gt;重要的接口函数&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;监听指定端口&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;anetTcpServer&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *err, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; port, &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *bindaddr)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; s, on = 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; sockaddr_in sa;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; ((s = &lt;span style=&#34;color:#c34e00&#34;&gt;socket&lt;/span&gt;(AF_INET, SOCK_STREAM, 0)) == -1) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;anetSetError&lt;/span&gt;(err, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;socket: %s&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c34e00&#34;&gt;strerror&lt;/span&gt;(errno));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ANET_ERR;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;setsockopt&lt;/span&gt;(s, SOL_SOCKET, SO_REUSEADDR, &amp;amp;on, &lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(on)) == -1) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;anetSetError&lt;/span&gt;(err, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;setsockopt SO_REUSEADDR: %s&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c34e00&#34;&gt;strerror&lt;/span&gt;(errno));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;close&lt;/span&gt;(s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ANET_ERR;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;memset&lt;/span&gt;(&amp;amp;sa,0,&lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(sa));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sa.sin_family = AF_INET;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sa.sin_port = &lt;span style=&#34;color:#c34e00&#34;&gt;htons&lt;/span&gt;(port);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sa.sin_addr.s_addr = &lt;span style=&#34;color:#c34e00&#34;&gt;htonl&lt;/span&gt;(INADDR_ANY);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (bindaddr) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;inet_aton&lt;/span&gt;(bindaddr, &amp;amp;sa.sin_addr) == 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;anetSetError&lt;/span&gt;(err, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;Invalid bind address&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;close&lt;/span&gt;(s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ANET_ERR;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;bind&lt;/span&gt;(s, (&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; sockaddr*)&amp;amp;sa, &lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(sa)) == -1) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;anetSetError&lt;/span&gt;(err, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;bind: %s&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c34e00&#34;&gt;strerror&lt;/span&gt;(errno));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;close&lt;/span&gt;(s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ANET_ERR;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;listen&lt;/span&gt;(s, 511) == -1) { &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* the magic 511 constant is from nginx */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;anetSetError&lt;/span&gt;(err, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;listen: %s&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c34e00&#34;&gt;strerror&lt;/span&gt;(errno));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;close&lt;/span&gt;(s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ANET_ERR;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; s;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;链接指定地址&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;anetTcpGenericConnect&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *err, &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *addr, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; port, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; flags)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; s, on = 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; sockaddr_in sa;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; ((s = &lt;span style=&#34;color:#c34e00&#34;&gt;socket&lt;/span&gt;(AF_INET, SOCK_STREAM, 0)) == -1) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;anetSetError&lt;/span&gt;(err, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;creating socket: %s&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c34e00&#34;&gt;strerror&lt;/span&gt;(errno));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ANET_ERR;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Make sure connection-intensive things like the redis benckmark&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;     * will be able to close/open sockets a zillion of times */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setsockopt&lt;/span&gt;(s, SOL_SOCKET, SO_REUSEADDR, &amp;amp;on, &lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(on));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sa.sin_family = AF_INET;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sa.sin_port = &lt;span style=&#34;color:#c34e00&#34;&gt;htons&lt;/span&gt;(port);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;inet_aton&lt;/span&gt;(addr, &amp;amp;sa.sin_addr) == 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; hostent *he;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        he = &lt;span style=&#34;color:#c34e00&#34;&gt;gethostbyname&lt;/span&gt;(addr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (he == NULL) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;anetSetError&lt;/span&gt;(err, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;can&amp;#39;t resolve: %s&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, addr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;close&lt;/span&gt;(s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ANET_ERR;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;memcpy&lt;/span&gt;(&amp;amp;sa.sin_addr, he-&amp;gt;h_addr, &lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; in_addr));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (flags &amp;amp; ANET_CONNECT_NONBLOCK) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;anetNonBlock&lt;/span&gt;(err,s) != ANET_OK)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ANET_ERR;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;connect&lt;/span&gt;(s, (&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; sockaddr*)&amp;amp;sa, &lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(sa)) == -1) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (errno == EINPROGRESS &amp;amp;&amp;amp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            flags &amp;amp; ANET_CONNECT_NONBLOCK)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; s;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;anetSetError&lt;/span&gt;(err, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;connect: %s&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c34e00&#34;&gt;strerror&lt;/span&gt;(errno));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;close&lt;/span&gt;(s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ANET_ERR;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; s;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;读写指定句柄&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Like read(2) but make sure &amp;#39;count&amp;#39; is read before to return&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * (unless error or EOF condition is encountered) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;anetRead&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; fd, &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *buf, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; count)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nread, totlen = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt;(totlen != count) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        nread = &lt;span style=&#34;color:#c34e00&#34;&gt;read&lt;/span&gt;(fd,buf,count-totlen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (nread == 0) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; totlen;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (nread == -1) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; -1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        totlen += nread;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        buf += nread;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; totlen;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Like write(2) but make sure &amp;#39;count&amp;#39; is read before to return&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * (unless error is encountered) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;anetWrite&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; fd, &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *buf, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; count)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nwritten, totlen = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt;(totlen != count) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        nwritten = &lt;span style=&#34;color:#c34e00&#34;&gt;write&lt;/span&gt;(fd,buf,count-totlen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (nwritten == 0) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; totlen;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (nwritten == -1) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; -1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        totlen += nwritten;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        buf += nwritten;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; totlen;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>redis基础组件-zmalloc简介</title>
      <link>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6-zmalloc%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 10 Aug 2021 16:52:16 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6-zmalloc%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h3 id=&#34;数据结构&#34;&gt;数据结构&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;len|context&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;特点&#34;&gt;特点&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;申请内存时，自带整个MEM的len，用于统计当前进程总共消耗的MEM&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;模糊点&#34;&gt;模糊点&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在申请内存的接口中怎么确定ptr+sizeof(size_t)后的地址一定就能满足内存对齐？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;主要接口函数&#34;&gt;主要接口函数&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;申请一片内存&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *&lt;span style=&#34;color:#c34e00&#34;&gt;zmalloc&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; size) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *ptr = &lt;span style=&#34;color:#c34e00&#34;&gt;malloc&lt;/span&gt;(size+PREFIX_SIZE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!ptr) &lt;span style=&#34;color:#c34e00&#34;&gt;zmalloc_oom&lt;/span&gt;(size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#ifdef HAVE_MALLOC_SIZE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;increment_used_memory&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;redis_malloc_size&lt;/span&gt;(ptr));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ptr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#else&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    *((&lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt;*)ptr) = size;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;increment_used_memory&lt;/span&gt;(size+PREFIX_SIZE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt;*)ptr+PREFIX_SIZE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;调整内存大小&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *&lt;span style=&#34;color:#c34e00&#34;&gt;zrealloc&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *ptr, &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; size) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#ifndef HAVE_MALLOC_SIZE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *realptr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; oldsize;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *newptr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ptr == NULL) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;zmalloc&lt;/span&gt;(size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#ifdef HAVE_MALLOC_SIZE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    oldsize = &lt;span style=&#34;color:#c34e00&#34;&gt;redis_malloc_size&lt;/span&gt;(ptr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    newptr = &lt;span style=&#34;color:#c34e00&#34;&gt;realloc&lt;/span&gt;(ptr,size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!newptr) &lt;span style=&#34;color:#c34e00&#34;&gt;zmalloc_oom&lt;/span&gt;(size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;decrement_used_memory&lt;/span&gt;(oldsize);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;increment_used_memory&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;redis_malloc_size&lt;/span&gt;(newptr));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; newptr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#else&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    realptr = (&lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt;*)ptr-PREFIX_SIZE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    oldsize = *((&lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt;*)realptr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    newptr = &lt;span style=&#34;color:#c34e00&#34;&gt;realloc&lt;/span&gt;(realptr,size+PREFIX_SIZE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!newptr) &lt;span style=&#34;color:#c34e00&#34;&gt;zmalloc_oom&lt;/span&gt;(size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    *((&lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt;*)newptr) = size;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;decrement_used_memory&lt;/span&gt;(oldsize);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;increment_used_memory&lt;/span&gt;(size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt;*)newptr+PREFIX_SIZE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;释放内存&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;zfree&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *ptr) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#ifndef HAVE_MALLOC_SIZE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *realptr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; oldsize;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ptr == NULL) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#ifdef HAVE_MALLOC_SIZE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;decrement_used_memory&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;redis_malloc_size&lt;/span&gt;(ptr));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;free&lt;/span&gt;(ptr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#else&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    realptr = (&lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt;*)ptr-PREFIX_SIZE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    oldsize = *((&lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt;*)realptr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;decrement_used_memory&lt;/span&gt;(oldsize+PREFIX_SIZE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;free&lt;/span&gt;(realptr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>redis基础数据结构-zipmap简介</title>
      <link>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-zipmap%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 10 Aug 2021 15:57:58 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-zipmap%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h3 id=&#34;数据结构&#34;&gt;数据结构&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--------------------------------------------------------------------------------------------------------------------------------------------------&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cnt |key1.len|key1.context|val1.len|free1.len|val1.context|null1.context|key2.len|key2.context|val2.len|free2.len|val2.context|null2.context|0xFF| &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--------------------------------------------------------------------------------------------------------------------------------------------------&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;cnt:一个字节，如果&amp;lt;ZIPMAP_BIGLEN(254),则是key-val对的数量，否则==ZIPMAP_BIGLEN时需要循环遍历zip来确定实时的数量&lt;/li&gt;&#xA;&lt;li&gt;key.len: 头字节若&amp;lt;ZIPMAP_BIGLEN则存储的是key的长度，否则==ZIPMAP_BIGLEN时，key的长度存在后续4个字节中&lt;/li&gt;&#xA;&lt;li&gt;key.context:可包含二进制数据的的key&lt;/li&gt;&#xA;&lt;li&gt;val.len:同key.len&lt;/li&gt;&#xA;&lt;li&gt;free.len:固定一个字节,理论上能给val预留不超过255个byte，但实际代码中不能超过&#xA;超过ZIPMAP_VALUE_MAX_FREE(4)，否则会被回收（不太明白作者为何不将此值扩大点)&lt;/li&gt;&#xA;&lt;li&gt;OXFF:标志位，zip的尽头&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;特点&#34;&gt;特点&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;给val预留了free，避免频繁的系统调用&lt;/li&gt;&#xA;&lt;li&gt;len采用非固定格式，尽量的避免浪费MEM&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;主要接口函数&#34;&gt;主要接口函数&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;构建zipmap&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Create a new empty zipmap. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *&lt;span style=&#34;color:#c34e00&#34;&gt;zipmapNew&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *zm = &lt;span style=&#34;color:#c34e00&#34;&gt;zmalloc&lt;/span&gt;(2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    zm[0] = 0; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Length */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    zm[1] = ZIPMAP_END;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; zm;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;计算key.len和val.len的实际代表的长度&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Decode the encoded length pointed by &amp;#39;p&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapDecodeLength&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *p) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; len = *p;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (len &amp;lt; ZIPMAP_BIGLEN) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;memcpy&lt;/span&gt;(&amp;amp;len,p+1,&lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;设置一对key.val&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Set key to value, creating the key if it does not already exist.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * If &amp;#39;update&amp;#39; is not NULL, *update is set to 1 if the key was&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * already preset, otherwise to 0. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *&lt;span style=&#34;color:#c34e00&#34;&gt;zipmapSet&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *zm, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *key, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; klen, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *val, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; vlen, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; *update) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; zmlen, offset;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; freelen, reqlen = &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapRequiredLength&lt;/span&gt;(klen,vlen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; empty, vempty;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *p;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    freelen = reqlen;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (update) *update = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p = &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapLookupRaw&lt;/span&gt;(zm,key,klen,&amp;amp;zmlen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (p == NULL) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Key not found: enlarge */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        zm = &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapResize&lt;/span&gt;(zm, zmlen+reqlen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        p = zm+zmlen-1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        zmlen = zmlen+reqlen;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 新的总长 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Increase zipmap length (this is an insert) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (zm[0] &amp;lt; ZIPMAP_BIGLEN) zm[0]++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Key found. Is there enough space for the new value? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Compute the total length: */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (update) *update = 1;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* key已存在，则更新key对应的val */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        freelen = &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapRawEntryLength&lt;/span&gt;(p);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (freelen &amp;lt; reqlen) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 现存的空间不够用 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Store the offset of this key within the current zipmap, so&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;             * it can be resized. Then, move the tail backwards so this&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;             * pair fits at the current position. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            offset = p-zm;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            zm = &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapResize&lt;/span&gt;(zm, zmlen-freelen+reqlen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            p = zm+offset;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* The +1 in the number of bytes to be moved is caused by the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;             * end-of-zipmap byte. Note: the *original* zmlen is used. &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;             * void *memmove(void *dest, const void *src, size_t n) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;memmove&lt;/span&gt;(p+reqlen, p+freelen, zmlen-(offset+freelen+1));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            zmlen = zmlen-freelen+reqlen;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            freelen = reqlen;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* We now have a suitable block where the key/value entry can&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;     * be written. If there is too much free space, move the tail&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;     * of the zipmap a few bytes to the front and shrink the zipmap,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;     * as we want zipmaps to be very space efficient. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    empty = freelen-reqlen;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (empty &amp;gt;= ZIPMAP_VALUE_MAX_FREE) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* First, move the tail &amp;lt;empty&amp;gt; bytes to the front, then resize&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;         * the zipmap to be &amp;lt;empty&amp;gt; bytes smaller. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        offset = p-zm;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;memmove&lt;/span&gt;(p+reqlen, p+freelen, zmlen-(offset+freelen+1));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        zmlen -= empty;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        zm = &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapResize&lt;/span&gt;(zm, zmlen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        p = zm+offset;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        vempty = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        vempty = empty;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Just write the key + value and we are done. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Key: */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p += &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapEncodeLength&lt;/span&gt;(p,klen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;memcpy&lt;/span&gt;(p,key,klen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p += klen;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Value: */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p += &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapEncodeLength&lt;/span&gt;(p,vlen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    *p++ = vempty;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;memcpy&lt;/span&gt;(p,val,vlen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; zm;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;删除一对key.val&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Remove the specified key. If &amp;#39;deleted&amp;#39; is not NULL the pointed integer is&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * set to 0 if the key was not found, to 1 if it was found and deleted. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *&lt;span style=&#34;color:#c34e00&#34;&gt;zipmapDel&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *zm, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *key, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; klen, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; *deleted) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; zmlen, freelen;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *p = &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapLookupRaw&lt;/span&gt;(zm,key,klen,&amp;amp;zmlen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (p) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        freelen = &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapRawEntryLength&lt;/span&gt;(p);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;memmove&lt;/span&gt;(p, p+freelen, zmlen-((p-zm)+freelen+1));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        zm = &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapResize&lt;/span&gt;(zm, zmlen-freelen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Decrease zipmap length */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (zm[0] &amp;lt; ZIPMAP_BIGLEN) zm[0]--;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (deleted) *deleted = 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (deleted) *deleted = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; zm;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;读取指定的val值&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Search a key and retrieve the pointer and len of the associated value.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * If the key is found the function returns 1, otherwise 0. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapGet&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *zm, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *key, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; klen, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; **value, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; *vlen) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *p;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; ((p = &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapLookupRaw&lt;/span&gt;(zm,key,klen,NULL)) == NULL) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p += &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapRawKeyLength&lt;/span&gt;(p);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    *vlen = &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapDecodeLength&lt;/span&gt;(p);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    *value = p + &lt;span style=&#34;color:#c34e00&#34;&gt;ZIPMAP_LEN_BYTES&lt;/span&gt;(*vlen) + 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;迭代遍历zipmap&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Call it before to iterate trought elements via zipmapNext() */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *&lt;span style=&#34;color:#c34e00&#34;&gt;zipmapRewind&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *zm) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; zm+1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* This function is used to iterate through all the zipmap elements.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * In the first call the first argument is the pointer to the zipmap + 1.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * In the next calls what zipmapNext returns is used as first argument.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * Example:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; *&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * unsigned char *i = zipmapRewind(my_zipmap);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * while((i = zipmapNext(i,&amp;amp;key,&amp;amp;klen,&amp;amp;value,&amp;amp;vlen)) != NULL) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; *     printf(&amp;#34;%d bytes key at $p\n&amp;#34;, klen, key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; *     printf(&amp;#34;%d bytes value at $p\n&amp;#34;, vlen, value);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *&lt;span style=&#34;color:#c34e00&#34;&gt;zipmapNext&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *zm, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; **key, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; *klen, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; **value, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; *vlen) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (zm[0] == ZIPMAP_END) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        *key = zm;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        *klen = &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapDecodeLength&lt;/span&gt;(zm);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        *key += &lt;span style=&#34;color:#c34e00&#34;&gt;ZIPMAP_LEN_BYTES&lt;/span&gt;(*klen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    zm += &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapRawKeyLength&lt;/span&gt;(zm);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (value) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        *value = zm+1;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* +1是free.len.head格式占用的一个字节空间 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        *vlen = &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapDecodeLength&lt;/span&gt;(zm);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        *value += &lt;span style=&#34;color:#c34e00&#34;&gt;ZIPMAP_LEN_BYTES&lt;/span&gt;(*vlen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    zm += &lt;span style=&#34;color:#c34e00&#34;&gt;zipmapRawValueLength&lt;/span&gt;(zm);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; zm;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>redis基础数据结构-dict简介</title>
      <link>http://shanks.link/blog/2021/08/09/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-dict%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 09 Aug 2021 15:57:56 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/09/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-dict%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h3 id=&#34;数据结构&#34;&gt;数据结构&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; dictEntry {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *key;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *val;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; dictEntry *next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} dictEntry;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* This is our hash table structure. Every dictionary has two of this as we&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * implement incremental rehashing, for the old to the new table. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; dictht {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dictEntry **table;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;long&lt;/span&gt; size;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;long&lt;/span&gt; sizemask;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;long&lt;/span&gt; used;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} dictht;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; dict {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dictType *type;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *privdata;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dictht ht[2];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; rehashidx; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* rehashing not in progress if rehashidx == -1 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; iterators; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* number of iterators currently running */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} dict;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; dictIterator {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dict *d;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; table;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; index;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dictEntry *entry, *nextEntry;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} dictIterator;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;特点&#34;&gt;特点&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;2个ht,用于循环渐进式的rehash，避免ht过大的情况下一次性rehash而卡住程序&lt;/li&gt;&#xA;&lt;li&gt;底层实现为哈希桶&lt;/li&gt;&#xA;&lt;li&gt;fingerprint：指纹值方法用于粗略判断两个时间戳之间ht是否有被修改&lt;/li&gt;&#xA;&lt;li&gt;rehash的条件考虑到了存档RDB时的linux操作系统的写时复制策略&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;主要接口实现&#34;&gt;主要接口实现&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;插入节点&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Add an element to the target hash table */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;dictAdd&lt;/span&gt;(dict *d, &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *key, &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *val)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; index;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dictEntry *entry;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dictht *ht;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 执行一次rehash */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;dictIsRehashing&lt;/span&gt;(d)) &lt;span style=&#34;color:#c34e00&#34;&gt;_dictRehashStep&lt;/span&gt;(d);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Get the index of the new element, or -1 if&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;     * the element already exists. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; ((index = &lt;span style=&#34;color:#c34e00&#34;&gt;_dictKeyIndex&lt;/span&gt;(d, key)) == -1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; DICT_ERR;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Allocates the memory and stores key&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; * 正在rehash则存入ht[0]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;    ht = dictIsRehashing(d) ? &amp;amp;d-&amp;gt;ht[1] : &amp;amp;d-&amp;gt;ht[0];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;    entry = _dictAlloc(sizeof(*entry));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;    entry-&amp;gt;next = ht-&amp;gt;table[index];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;    ht-&amp;gt;table[index] = entry;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;    ht-&amp;gt;used++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;    /* Set the hash entry fields. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;dictSetHashKey&lt;/span&gt;(d, entry, key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;dictSetHashVal&lt;/span&gt;(d, entry, val);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; DICT_OK;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;rehash&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;dictRehash&lt;/span&gt;(dict *d, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; n) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;dictIsRehashing&lt;/span&gt;(d)) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt;(n--) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dictEntry *de, *nextde;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Check if we already rehashed the whole table... */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (d-&amp;gt;ht[0].used == 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;_dictFree&lt;/span&gt;(d-&amp;gt;ht[0].table);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            d-&amp;gt;ht[0] = d-&amp;gt;ht[1];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;_dictReset&lt;/span&gt;(&amp;amp;d-&amp;gt;ht[1]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            d-&amp;gt;rehashidx = -1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Note that rehashidx can&amp;#39;t overflow as we are sure there are more&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;         * elements because ht[0].used != 0 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;         * 因为上面used的判断，这里可以确定不会溢出 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt;(d-&amp;gt;ht[0].table[d-&amp;gt;rehashidx] == NULL) d-&amp;gt;rehashidx++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        de = d-&amp;gt;ht[0].table[d-&amp;gt;rehashidx];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Move all the keys in this bucket from the old to the new hash HT */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt;(de) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; h;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            nextde = de-&amp;gt;next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Get the index in the new hash table */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            h = &lt;span style=&#34;color:#c34e00&#34;&gt;dictHashKey&lt;/span&gt;(d, de-&amp;gt;key) &amp;amp; d-&amp;gt;ht[1].sizemask;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            de-&amp;gt;next = d-&amp;gt;ht[1].table[h];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            d-&amp;gt;ht[1].table[h] = de;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            d-&amp;gt;ht[0].used--;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            d-&amp;gt;ht[1].used++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            de = nextde;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        d-&amp;gt;ht[0].table[d-&amp;gt;rehashidx] = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        d-&amp;gt;rehashidx++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>redis基础数据结构-list简介</title>
      <link>http://shanks.link/blog/2021/08/06/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-list%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Fri, 06 Aug 2021 18:01:06 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/06/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-list%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h3 id=&#34;数据结构&#34;&gt;数据结构&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; listNode {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; listNode *prev;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; listNode *next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} listNode;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; listIter {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    listNode *next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; direction;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} listIter;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; list {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    listNode *head;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    listNode *tail;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *(*dup)(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *ptr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; (*free)(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *ptr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; (*match)(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *ptr, &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} list;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;特点&#34;&gt;特点&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;可以转载任何类型的数据&lt;/li&gt;&#xA;&lt;li&gt;可以定制dup,free,match方法，自由度大&lt;/li&gt;&#xA;&lt;li&gt;可以从头、尾分别插入链表&lt;/li&gt;&#xA;&lt;li&gt;提供迭代器，方便遍历整个链表&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;重要接口实现&#34;&gt;重要接口实现&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;构建/释放list&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;list *&lt;span style=&#34;color:#c34e00&#34;&gt;listCreate&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; list *list;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; ((list = &lt;span style=&#34;color:#c34e00&#34;&gt;zmalloc&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(*list))) == NULL)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    list-&amp;gt;head = list-&amp;gt;tail = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    list-&amp;gt;len = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    list-&amp;gt;dup = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    list-&amp;gt;free = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    list-&amp;gt;match = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; list;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;listRelease&lt;/span&gt;(list *list)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    listNode *current, *next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    current = list-&amp;gt;head;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    len = list-&amp;gt;len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt;(len--) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        next = current-&amp;gt;next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (list-&amp;gt;free) list-&amp;gt;&lt;span style=&#34;color:#c34e00&#34;&gt;free&lt;/span&gt;(current-&amp;gt;value);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;zfree&lt;/span&gt;(current);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        current = next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;zfree&lt;/span&gt;(list);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;遍历和复制list&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;listIter *&lt;span style=&#34;color:#c34e00&#34;&gt;listGetIterator&lt;/span&gt;(list *list, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; direction)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    listIter *iter;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; ((iter = &lt;span style=&#34;color:#c34e00&#34;&gt;zmalloc&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(*iter))) == NULL) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (direction == AL_START_HEAD)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        iter-&amp;gt;next = list-&amp;gt;head;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        iter-&amp;gt;next = list-&amp;gt;tail;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    iter-&amp;gt;direction = direction;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; iter;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;listNode *&lt;span style=&#34;color:#c34e00&#34;&gt;listNext&lt;/span&gt;(listIter *iter)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    listNode *current = iter-&amp;gt;next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (current != NULL) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (iter-&amp;gt;direction == AL_START_HEAD)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            iter-&amp;gt;next = current-&amp;gt;next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            iter-&amp;gt;next = current-&amp;gt;prev;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; current;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;list *&lt;span style=&#34;color:#c34e00&#34;&gt;listDup&lt;/span&gt;(list *orig)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    list *copy;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    listIter *iter;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    listNode *node;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; ((copy = &lt;span style=&#34;color:#c34e00&#34;&gt;listCreate&lt;/span&gt;()) == NULL)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    copy-&amp;gt;dup = orig-&amp;gt;dup;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    copy-&amp;gt;free = orig-&amp;gt;free;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    copy-&amp;gt;match = orig-&amp;gt;match;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    iter = &lt;span style=&#34;color:#c34e00&#34;&gt;listGetIterator&lt;/span&gt;(orig, AL_START_HEAD);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt;((node = &lt;span style=&#34;color:#c34e00&#34;&gt;listNext&lt;/span&gt;(iter)) != NULL) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (copy-&amp;gt;dup) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            value = copy-&amp;gt;&lt;span style=&#34;color:#c34e00&#34;&gt;dup&lt;/span&gt;(node-&amp;gt;value);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (value == NULL) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#c34e00&#34;&gt;listRelease&lt;/span&gt;(copy);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#c34e00&#34;&gt;listReleaseIterator&lt;/span&gt;(iter);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            value = node-&amp;gt;value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;listAddNodeTail&lt;/span&gt;(copy, value) == NULL) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;listRelease&lt;/span&gt;(copy);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;listReleaseIterator&lt;/span&gt;(iter);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;listReleaseIterator&lt;/span&gt;(iter);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; copy;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>redis基础数据结构-sds简介</title>
      <link>http://shanks.link/blog/2021/08/06/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-sds%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Fri, 06 Aug 2021 16:55:31 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/06/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-sds%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h3 id=&#34;数据结构&#34;&gt;数据结构&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* context &#x9;= &amp;#34;hello&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * len &#x9;&#x9;= 5 不包含redis自动添加的&amp;#39;\0&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * free &#x9;= 0 预分配和惰性释放&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * buf[5]&#x9;= &amp;#39;\0&amp;#39; 自动添加一个&amp;#39;\0&amp;#39;在末尾，&amp;#39;\0&amp;#39;对外透明  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; sdshdr {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;long&lt;/span&gt; len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;long&lt;/span&gt; free;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; buf[];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;特点&#34;&gt;特点&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;空间预分配和惰性释放&#xA;&lt;ul&gt;&#xA;&lt;li&gt;避免频繁的系统调用造成的CPU耗时&lt;/li&gt;&#xA;&lt;li&gt;减少内存碎片&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;二进制安全和兼容部分C的string函数&#xA;&lt;ul&gt;&#xA;&lt;li&gt;尾部自动添加&amp;rsquo;\0&amp;rsquo;,以及len字段 实现了装载二进制数据的能力和兼容部分C的string函数&lt;/li&gt;&#xA;&lt;li&gt;明确的len和free避免了缓冲区的溢出&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;降低获取len的复杂度&#xA;&lt;ul&gt;&#xA;&lt;li&gt;相比C原始风格的字符串风格，sds可以直接读取len字段来获得len，从而将复杂度从0(n)优化为0(1)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;重要接口实现&#34;&gt;重要接口实现&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;构建指定长度的sds&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sds &lt;span style=&#34;color:#c34e00&#34;&gt;sdsnewlen&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *init, &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; initlen) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; sdshdr *sh;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sh = &lt;span style=&#34;color:#c34e00&#34;&gt;zmalloc&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; sdshdr)+initlen+0+1);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;// initlen:len 0:free 1:&amp;#39;\0&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (sh == NULL) &lt;span style=&#34;color:#c34e00&#34;&gt;sdsOomAbort&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sh-&amp;gt;len = initlen;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sh-&amp;gt;free = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (initlen) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (init) &lt;span style=&#34;color:#c34e00&#34;&gt;memcpy&lt;/span&gt;(sh-&amp;gt;buf, init, initlen);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;memset&lt;/span&gt;(sh-&amp;gt;buf,0,initlen);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;// 空指针则填充&amp;#39;\0&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sh-&amp;gt;buf[initlen] = &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;// 添加哨兵&amp;#39;\0&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt;*)sh-&amp;gt;buf;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;// NOTE: 这里返回的是buf&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;- 初始化时没有预分配MEM，因为一般而言sds是只读的，未修改则先不预分配空间&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;修改sds的长度&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; sds &lt;span style=&#34;color:#c34e00&#34;&gt;sdsMakeRoomFor&lt;/span&gt;(sds s, &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; addlen) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; sdshdr *sh, *newsh;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; free = &lt;span style=&#34;color:#c34e00&#34;&gt;sdsavail&lt;/span&gt;(s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; len, newlen;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (free &amp;gt;= addlen) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; s;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    len = &lt;span style=&#34;color:#c34e00&#34;&gt;sdslen&lt;/span&gt;(s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sh = (&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt;*) (s-(&lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; sdshdr)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    newlen = (len+addlen)*2;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;// 直接预分配一倍&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    newsh = &lt;span style=&#34;color:#c34e00&#34;&gt;zrealloc&lt;/span&gt;(sh, &lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; sdshdr)+newlen+1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (newsh == NULL) &lt;span style=&#34;color:#c34e00&#34;&gt;sdsOomAbort&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    newsh-&amp;gt;free = newlen - len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; newsh-&amp;gt;buf;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;- 这里可以看到作者的思路，既然此sds被修改，那么很有可能再次修改，所以为了频繁系统调用，这里预分配一部分内存&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>redis源码阅读计划</title>
      <link>http://shanks.link/blog/2021/08/06/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%A1%E5%88%92/</link>
      <pubDate>Fri, 06 Aug 2021 15:21:07 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/06/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%A1%E5%88%92/</guid>
      <description>&lt;h3 id=&#34;整体思路&#34;&gt;整体思路&lt;/h3&gt;&#xA;&lt;p&gt;        鉴于在DB和分布式方面没有啥知识储备，以及空闲时间的不确定，整体思路：从简到繁，从基础到单机再到分布式&lt;/p&gt;&#xA;&lt;h3 id=&#34;内容计划&#34;&gt;内容计划&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;阅读0.0.1版本，了解大致的数据结构，事件系统，网络模块等主模块的逻辑(已完成)&lt;/p&gt;</description>
    </item>
    <item>
      <title>亿级系统的Redis缓存如何设计???</title>
      <link>http://shanks.link/blog/2021/07/05/%E4%BA%BF%E7%BA%A7%E7%B3%BB%E7%BB%9F%E7%9A%84redis%E7%BC%93%E5%AD%98%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Mon, 05 Jul 2021 20:24:32 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/05/%E4%BA%BF%E7%BA%A7%E7%B3%BB%E7%BB%9F%E7%9A%84redis%E7%BC%93%E5%AD%98%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;h2 id=&#34;亿级系统的redis缓存如何设计&#34;&gt;亿级系统的Redis缓存如何设计？？？&lt;/h2&gt;&#xA;&lt;p&gt;以下文章来源于微观技术 ，作者TomGE&lt;/p&gt;&#xA;&lt;p&gt;缓存设计可谓老生常谈了，早些时候都是采用&lt;code&gt;memcache&lt;/code&gt;，现在大家更多倾向使用&lt;code&gt;redis&lt;/code&gt;，除了知晓常用的数据存储类型，结合业务场景有针对性选择，好像其他也没有什么大的难点。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
