<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>redis on Golang编程语言知识介绍</title>
    <link>http://shanks.link/tags/redis/</link>
    <description>Recent content in redis on Golang编程语言知识介绍</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 24 Apr 2022 22:16:39 +0800</lastBuildDate><atom:link href="http://shanks.link/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis系列总结</title>
      <link>http://shanks.link/blog/2022/04/24/redis%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 24 Apr 2022 22:16:39 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/04/24/redis%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/</guid>
      <description>原文链接 Redis 总体介绍 Redis 是 key-value 型的 memory 缓存中间件，相信大部分程序员都在项目中使用过它。我们也可以利用 memory 来实现缓存，只是使用 redis 的话，可以将缓存功能统一</description>
    </item>
    
    <item>
      <title>Redis面试总结</title>
      <link>http://shanks.link/blog/2022/04/24/redis%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 24 Apr 2022 16:47:59 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/04/24/redis%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</guid>
      <description>1. redis 为什么快？ 在底层上， redis 使用了 IO 多路复用技术，像 select、epoll 等。能较好的保障吞吐量。而且 redis 采用了单线程处理请求，避免了线程切换</description>
    </item>
    
    <item>
      <title>More Redis internals: Tracing a GET &amp; SET</title>
      <link>http://shanks.link/blog/2021/09/02/more-redis-internals-tracing-a-get-set/</link>
      <pubDate>Thu, 02 Sep 2021 01:24:09 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/09/02/more-redis-internals-tracing-a-get-set/</guid>
      <description>原文链接 MARCH 10, 2011 In my previous article, I took a superficial look at how Redis starts up and prepares itself to process commands. In this article, I&amp;rsquo;ll follow a GET and a SET command as they move from client through the server and back. The GET will be for a key that doesn&amp;rsquo;t exist, and the SET will set that key. Then I&amp;rsquo;ll look quickly at</description>
    </item>
    
    <item>
      <title>under the hood</title>
      <link>http://shanks.link/blog/2021/09/01/under-the-hood/</link>
      <pubDate>Wed, 01 Sep 2021 19:37:20 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/09/01/under-the-hood/</guid>
      <description>by Paul Smith (@paulsmith)

How does the Redis server work?
I was curious to learn more about Redis’s internals, so I’ve been familiarizing myself with the source, largely by reading and jumping around in Emacs. After I had peeled back enough of the onion’s layers, I realized I was trying to keep track of too many details in my head, and it wasn’t clear how it all hung together. I decided to write out in narrative form how an instance of the Redis server starts up and initializes itself, and how it handles the request/response cycle with a client, as a way of explaining it to myself, hopefully in a clear fashion.</description>
    </item>
    
    <item>
      <title>Redis的47连环炮，试试你能看住几个 -面前复习</title>
      <link>http://shanks.link/blog/2021/08/26/redis%E7%9A%8447%E8%BF%9E%E7%8E%AF%E7%82%AE%E8%AF%95%E8%AF%95%E4%BD%A0%E8%83%BD%E7%9C%8B%E4%BD%8F%E5%87%A0%E4%B8%AA-%E9%9D%A2%E5%89%8D%E5%A4%8D%E4%B9%A0/</link>
      <pubDate>Thu, 26 Aug 2021 00:59:58 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/26/redis%E7%9A%8447%E8%BF%9E%E7%8E%AF%E7%82%AE%E8%AF%95%E8%AF%95%E4%BD%A0%E8%83%BD%E7%9C%8B%E4%BD%8F%E5%87%A0%E4%B8%AA-%E9%9D%A2%E5%89%8D%E5%A4%8D%E4%B9%A0/</guid>
      <description>写在前面 大家好，我是老田，前面我们已经分享了五篇连环炮文章，今天我们继续。今天我们接着来聊聊Redis。Redis已经成为我们开发者必备技能</description>
    </item>
    
    <item>
      <title>redis基础数据结构skiplist</title>
      <link>http://shanks.link/blog/2021/08/25/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84skiplist/</link>
      <pubDate>Wed, 25 Aug 2021 15:18:17 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/25/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84skiplist/</guid>
      <description>以下内容转载自csdn-Knight0xffff 太长不看版 跳跃表是有序集合的底层实现之一， 除此之外它在 Redis 中没有其他应用。 每个跳跃表节点的层高</description>
    </item>
    
    <item>
      <title>redis源码推荐阅读顺序</title>
      <link>http://shanks.link/blog/2021/08/23/redis%E6%BA%90%E7%A0%81%E6%8E%A8%E8%8D%90%E9%98%85%E8%AF%BB%E9%A1%BA%E5%BA%8F/</link>
      <pubDate>Mon, 23 Aug 2021 19:45:13 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/23/redis%E6%BA%90%E7%A0%81%E6%8E%A8%E8%8D%90%E9%98%85%E8%AF%BB%E9%A1%BA%E5%BA%8F/</guid>
      <description>转载自黄健宏的博客 在这篇文章中， 我将向大家介绍一种我认为比较合理的 Redis 源码阅读顺序， 希望可以给对 Redis 有兴趣并打算阅读 Redis 源码的朋友带来一点帮助。 第</description>
    </item>
    
    <item>
      <title>redis独立模块-慢查询日志</title>
      <link>http://shanks.link/blog/2021/08/23/redis%E7%8B%AC%E7%AB%8B%E6%A8%A1%E5%9D%97-%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97/</link>
      <pubDate>Mon, 23 Aug 2021 16:02:14 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/23/redis%E7%8B%AC%E7%AB%8B%E6%A8%A1%E5%9D%97-%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97/</guid>
      <description>数据结构 /* This structure defines an entry inside the slow log list */ typedef struct slowlogEntry { robj **argv; int argc; long long id; /* Unique entry identifier. */ long long duration; /* Time spent by the query, in nanoseconds. */ time_t time; /* Unix time at which the query was executed. */ } slowlogEntry; 特点 超过阈值时长的操作会</description>
    </item>
    
    <item>
      <title>详解Redis源码中的部分快速排序算法pqsort</title>
      <link>http://shanks.link/blog/2021/08/16/%E8%AF%A6%E8%A7%A3redis%E6%BA%90%E7%A0%81%E4%B8%AD%E7%9A%84%E9%83%A8%E5%88%86%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95pqsort/</link>
      <pubDate>Mon, 16 Aug 2021 17:08:33 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/16/%E8%AF%A6%E8%A7%A3redis%E6%BA%90%E7%A0%81%E4%B8%AD%E7%9A%84%E9%83%A8%E5%88%86%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95pqsort/</guid>
      <description>详解Redis源码中的部分快速排序算法（pqsort.c） 转载自果冻虾仁 2015-06-07 19:08:39 看标题，你可能会疑惑：咦？你这家伙，怎么不讲解完整的快排，只讲一</description>
    </item>
    
    <item>
      <title>redis-lzf压缩算法</title>
      <link>http://shanks.link/blog/2021/08/10/redis-lzf%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 10 Aug 2021 18:20:17 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/10/redis-lzf%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95/</guid>
      <description>文件 lzf.h lzfP.h lzf_c.c (压缩) lzf_d.c (解压) 压缩 默认模式是VERY_FAST 核心思想 对重复值进行压缩 通过hash表来判断是否重复数据 三种模式 模式 （压缩）时间</description>
    </item>
    
    <item>
      <title>redis基础组件-ae简介</title>
      <link>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6-ae%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 10 Aug 2021 17:15:11 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6-ae%E7%AE%80%E4%BB%8B/</guid>
      <description>数据结构 /* File event structure */ typedef struct aeFileEvent { int mask; /* one of AE_(READABLE|WRITABLE) */ aeFileProc *rfileProc; aeFileProc *wfileProc; void *clientData; } aeFileEvent; /* Time event structure */ typedef struct aeTimeEvent { long long id; /* time event identifier. */ long when_sec; /* seconds */ long when_ms; /* milliseconds */ aeTimeProc *timeProc; aeEventFinalizerProc *finalizerProc; void *clientData; struct aeTimeEvent *next; } aeTimeEvent; /* A fired event</description>
    </item>
    
    <item>
      <title>redis基础组件-anet简介</title>
      <link>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6-anet%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 10 Aug 2021 17:06:09 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6-anet%E7%AE%80%E4%BB%8B/</guid>
      <description>特点 模块非常简洁，提供了监听指定端口，链接指定地址，读，写网络句柄等功能 重要的接口函数 监听指定端口 int anetTcpServer(char *err, int port, char *bindaddr) { int s, on = 1; struct sockaddr_in sa; if ((s = socket(AF_INET, SOCK_STREAM,</description>
    </item>
    
    <item>
      <title>redis基础组件-zmalloc简介</title>
      <link>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6-zmalloc%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 10 Aug 2021 16:52:16 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6-zmalloc%E7%AE%80%E4%BB%8B/</guid>
      <description>数据结构 ------------ len|context ------------ 特点 申请内存时，自带整个MEM的len，用于统计当前进程总共消耗的MEM 模糊点 在申请内存的接口中怎么确定ptr+sizeof(</description>
    </item>
    
    <item>
      <title>redis基础数据结构-zipmap简介</title>
      <link>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-zipmap%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 10 Aug 2021 15:57:58 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/10/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-zipmap%E7%AE%80%E4%BB%8B/</guid>
      <description>数据结构 -------------------------------------------------------------------------------------------------------------------------------------------------- cnt |key1.len|key1.context|val1.len|free1.len|val1.context|null1.context|key2.len|key2.context|val2.len|free2.len|val2.context|null2.context|0xFF| -------------------------------------------------------------------------------------------------------------------------------------------------- cnt:一个字节，如果&amp;lt;ZIPMAP_BIGLEN(254),则是key-val对的数量，否则==ZIPMAP_BIG</description>
    </item>
    
    <item>
      <title>redis基础数据结构-dict简介</title>
      <link>http://shanks.link/blog/2021/08/09/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-dict%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 09 Aug 2021 15:57:56 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/09/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-dict%E7%AE%80%E4%BB%8B/</guid>
      <description>数据结构 typedef struct dictEntry { void *key; void *val; struct dictEntry *next; } dictEntry; /* This is our hash table structure. Every dictionary has two of this as we * implement incremental rehashing, for the old to the new table. */ typedef struct dictht { dictEntry **table; unsigned long size; unsigned long sizemask; unsigned long used; } dictht; typedef struct dict { dictType *type; void *privdata; dictht</description>
    </item>
    
    <item>
      <title>redis基础数据结构-list简介</title>
      <link>http://shanks.link/blog/2021/08/06/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-list%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Fri, 06 Aug 2021 18:01:06 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/06/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-list%E7%AE%80%E4%BB%8B/</guid>
      <description>数据结构 typedef struct listNode { struct listNode *prev; struct listNode *next; void *value; } listNode; typedef struct listIter { listNode *next; int direction; } listIter; typedef struct list { listNode *head; listNode *tail; void *(*dup)(void *ptr); void (*free)(void *ptr); int (*match)(void *ptr, void *key); unsigned int len; } list; 特点 可以转载任何类型的数据 可以定制d</description>
    </item>
    
    <item>
      <title>redis基础数据结构-sds简介</title>
      <link>http://shanks.link/blog/2021/08/06/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-sds%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Fri, 06 Aug 2021 16:55:31 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/06/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-sds%E7%AE%80%E4%BB%8B/</guid>
      <description>数据结构 /* context = &amp;#34;hello&amp;#34; * len = 5 不包含redis自动添加的&amp;#39;\0&amp;#39; * free = 0 预分配和惰性释放 * buf[5] = &amp;#39;\0&amp;#39; 自动添加一个&amp;#39;\0&amp;#39</description>
    </item>
    
    <item>
      <title>redis源码阅读计划</title>
      <link>http://shanks.link/blog/2021/08/06/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%A1%E5%88%92/</link>
      <pubDate>Fri, 06 Aug 2021 15:21:07 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/06/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%A1%E5%88%92/</guid>
      <description>整体思路 鉴于在DB和分布式方面没有啥知识储备，以及空闲时间的不确定，整体思路：从简到繁，从基础到单机再到分布式 内容计划 阅读0.0.1版本，了</description>
    </item>
    
    <item>
      <title>亿级系统的Redis缓存如何设计???</title>
      <link>http://shanks.link/blog/2021/07/05/%E4%BA%BF%E7%BA%A7%E7%B3%BB%E7%BB%9F%E7%9A%84redis%E7%BC%93%E5%AD%98%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Mon, 05 Jul 2021 20:24:32 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/05/%E4%BA%BF%E7%BA%A7%E7%B3%BB%E7%BB%9F%E7%9A%84redis%E7%BC%93%E5%AD%98%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1/</guid>
      <description>亿级系统的Redis缓存如何设计？？？ 以下文章来源于微观技术 ，作者TomGE 缓存设计可谓老生常谈了，早些时候都是采用memcache，现在大</description>
    </item>
    
  </channel>
</rss>
