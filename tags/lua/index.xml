<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lua on Golang编程语言知识介绍</title>
    <link>http://shanks.link/tags/lua/</link>
    <description>Recent content in lua on Golang编程语言知识介绍</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 19 Oct 2022 13:21:51 +0800</lastBuildDate><atom:link href="http://shanks.link/tags/lua/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>lua常用函数-打印表</title>
      <link>http://shanks.link/blog/2022/10/19/lua%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0-%E6%89%93%E5%8D%B0%E8%A1%A8/</link>
      <pubDate>Wed, 19 Oct 2022 13:21:51 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/10/19/lua%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0-%E6%89%93%E5%8D%B0%E8%A1%A8/</guid>
      <description>打印表 function PrintTable(table, key, level) level = level or 1 local indent = &amp;#34;&amp;#34; for i = 1, level do indent = indent..&amp;#34; &amp;#34; end if key ~= nil then print(indent..key..&amp;#34; &amp;#34;..&amp;#34;=&amp;#34;..&amp;#34; &amp;#34;..&amp;#34;{&amp;#34;) else print(indent .. &amp;#34;{&amp;#34;) end for k,v in pairs(table) do if type(v) == &amp;#34;table&amp;#34; then PrintTable(v, key, level + 1) else local content = string.format(&amp;#34;%s%s = %s&amp;#34;, indent .. &amp;#34; &amp;#34;,tostring(k), tostring(v)) print(content) end end</description>
    </item>
    
    <item>
      <title>lua51 Instructions Commment</title>
      <link>http://shanks.link/blog/2021/07/01/lua51-instructions-commment/</link>
      <pubDate>Thu, 01 Jul 2021 00:20:54 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/01/lua51-instructions-commment/</guid>
      <description>typedef enum { /*---------------------------------------------------------------------- name args description ------------------------------------------------------------------------*/ OP_MOVE, /* A B R(A) := R(B) */ OP_LOADK, /* A Bx R(A) := Kst(Bx) */ OP_LOADBOOL, /* A B C R(A) := (Bool)B; if (C) pc++ */ OP_LOADNIL, /* A B R(A) := ... := R(B) := nil */ OP_GETUPVAL, /* A B R(A) := UpValue[B] */ OP_GETGLOBAL, /* A Bx R(A) := Gbl[Kst(Bx)] */ OP_GETTABLE, /* A B C R(A)</description>
    </item>
    
    <item>
      <title>lua源码注释lcode.c</title>
      <link>http://shanks.link/blog/2021/06/08/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8Alcode.c/</link>
      <pubDate>Tue, 08 Jun 2021 23:26:48 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/06/08/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8Alcode.c/</guid>
      <description>/* ** $Id: lcode.c,v 2.25.1.5 2011/01/31 14:53:16 roberto Exp $ ** Code generator for Lua ** See Copyright Notice in lua.h */ #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #define lcode_c #define LUA_CORE #include &amp;#34;lua.h&amp;#34; #include &amp;#34;lcode.h&amp;#34;#include &amp;#34;ldebug.h&amp;#34;#include &amp;#34;ldo.h&amp;#34;#include &amp;#34;lgc.h&amp;#34;#include &amp;#34;llex.h&amp;#34;#include &amp;#34;lmem.h&amp;#34;#include &amp;#34;lobject.h&amp;#34;#include &amp;#34;lopcodes.h&amp;#34;#include &amp;#34;lparser.h&amp;#34;#include &amp;#34;ltable.h&amp;#34; /* e的类型 expdesc */ #define hasjumps(e) ((e)-&amp;gt;t != (e)-&amp;gt;f) static int isnumeral(expdesc *e) { return (e-&amp;gt;k == VKNUM &amp;amp;&amp;amp; /* 仅仅e-</description>
    </item>
    
    <item>
      <title>lua源码注释 lparse.c</title>
      <link>http://shanks.link/blog/2021/06/08/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-lparse.c/</link>
      <pubDate>Tue, 08 Jun 2021 23:03:28 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/06/08/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-lparse.c/</guid>
      <description>/* 参考的BNF地址 shankusu.me/lua/TheCompleteSyntaxOfLua51/ */ /* ** $Id: lparser.c,v 2.42.1.4 2011/10/21 19:31:42 roberto Exp $ ** Lua Parser ** See Copyright Notice in lua.h */ #include &amp;lt;string.h&amp;gt;#include &amp;lt;stdio.h&amp;gt; #define lparser_c #define LUA_CORE #include &amp;#34;lua.h&amp;#34; #include &amp;#34;lcode.h&amp;#34;#include &amp;#34;ldebug.h&amp;#34;#include &amp;#34;ldo.h&amp;#34;#include &amp;#34;lfunc.h&amp;#34;#include &amp;#34;llex.h&amp;#34;#include &amp;#34;lmem.h&amp;#34;#include &amp;#34;lobject.h&amp;#34;#include &amp;#34;lopcodes.h&amp;#34;#include &amp;#34;lparser.h&amp;#34;#include &amp;#34;lstate.h&amp;#34;#include &amp;#34;lstring.h&amp;#34;#include &amp;#34;ltable.h&amp;#34; /* 也只有函数调用或变参操作符这两种</description>
    </item>
    
    <item>
      <title>lua源码注释 lparse.h</title>
      <link>http://shanks.link/blog/2021/06/08/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-lparse.h/</link>
      <pubDate>Tue, 08 Jun 2021 23:01:44 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/06/08/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-lparse.h/</guid>
      <description>/* ** $Id: lparser.h,v 1.57.1.1 2007/12/27 13:02:25 roberto Exp $ ** Lua Parser ** See Copyright Notice in lua.h */ #ifndef lparser_h #define lparser_h #include &amp;#34;llimits.h&amp;#34;#include &amp;#34;lobject.h&amp;#34;#include &amp;#34;lzio.h&amp;#34; /**************************** 官方的BNF ********************************** chunk ::= {stat [`;´]} [laststat [`;´]] block ::= chunk stat ::= varlist `=´ explist | functioncall | do block end | while</description>
    </item>
    
    <item>
      <title>lua源码分析4的执行</title>
      <link>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%904%E7%9A%84%E6%89%A7%E8%A1%8C/</link>
      <pubDate>Thu, 03 Jun 2021 19:40:49 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%904%E7%9A%84%E6%89%A7%E8%A1%8C/</guid>
      <description>第3章 lua中函数调用的方法 前面，以及分析了lua中定义一个函数的方法，现在总结如下： ​ 1、 将函数名作为局部变量存在局部变量表里，并在栈上开</description>
    </item>
    
    <item>
      <title>lua源码分析3条件跳转</title>
      <link>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%903%E6%9D%A1%E4%BB%B6%E8%B7%B3%E8%BD%AC/</link>
      <pubDate>Thu, 03 Jun 2021 19:32:57 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%903%E6%9D%A1%E4%BB%B6%E8%B7%B3%E8%BD%AC/</guid>
      <description>第2章 关于条件编译 ​ 首先，解释一下，为什么题目叫做：条件编译。其实很简单，现在这一章要分析的是，if、while、repeat、for语句。</description>
    </item>
    
    <item>
      <title>lua源码分析2（局部函数的定义）</title>
      <link>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902%E5%B1%80%E9%83%A8%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89/</link>
      <pubDate>Thu, 03 Jun 2021 18:17:39 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902%E5%B1%80%E9%83%A8%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89/</guid>
      <description>第二节 局部函数的声明 ​ 前面研究了局部变量的定义，下面就研究下，lua中局部函数定义的方法。 ​ 其中局部函数定义的语法是： ​ local function FuncName (parlist) chunk END ​ 首先，</description>
    </item>
    
    <item>
      <title>lua源码分析1（局部变量的定义）</title>
      <link>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E5%AE%9A%E4%B9%89/</link>
      <pubDate>Thu, 03 Jun 2021 16:51:33 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E5%AE%9A%E4%B9%89/</guid>
      <description>第0节 一切从这里开始 ​ Lua是边进行语法分析，边词法分析。其中，词法分析的模块是：llex。其对外暴露的接口是：llex_next()。并且</description>
    </item>
    
    <item>
      <title>lua源码注释-llex.c</title>
      <link>http://shanks.link/blog/2021/05/31/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-llex.c/</link>
      <pubDate>Mon, 31 May 2021 16:14:08 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/31/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-llex.c/</guid>
      <description>/* ** $Id: llex.c,v 2.20.1.2 2009/11/23 14:58:22 roberto Exp $ ** Lexical Analyzer ** See Copyright Notice in lua.h */ #include &amp;lt;ctype.h&amp;gt;#include &amp;lt;locale.h&amp;gt;#include &amp;lt;string.h&amp;gt; #define llex_c #define LUA_CORE #include &amp;#34;lua.h&amp;#34; #include &amp;#34;ldo.h&amp;#34;#include &amp;#34;llex.h&amp;#34;#include &amp;#34;lobject.h&amp;#34;#include &amp;#34;lparser.h&amp;#34;#include &amp;#34;lstate.h&amp;#34;#include &amp;#34;lstring.h&amp;#34;#include &amp;#34;ltable.h&amp;#34;#include &amp;#34;lzio.h&amp;#34; #define next(ls) (ls-&amp;gt;current = zgetc(ls-&amp;gt;z)) #define currIsNewline(ls) (ls-&amp;gt;current == &amp;#39;\n&amp;#39; || ls-&amp;gt;current == &amp;#39;\r&amp;#39;) /* ORDER RESERVED */ const char *const luaX_tokens [] = { &amp;#34;and&amp;#34;, &amp;#34;break&amp;#34;, &amp;#34;do&amp;#34;, &amp;#34;else&amp;#34;, &amp;#34;elseif&amp;#34;, &amp;#34;end&amp;#34;,</description>
    </item>
    
    <item>
      <title>lua源码注释-ldo.c</title>
      <link>http://shanks.link/blog/2021/05/28/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-ldo.c/</link>
      <pubDate>Fri, 28 May 2021 23:17:07 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/28/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-ldo.c/</guid>
      <description>/* ** $Id: ldo.c,v 2.38.1.4 2012/01/18 02:27:10 roberto Exp $ ** Stack and Call structure of Lua ** See Copyright Notice in lua.h */ #include &amp;lt;setjmp.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;string.h&amp;gt; #define ldo_c #define LUA_CORE #include &amp;#34;lua.h&amp;#34; #include &amp;#34;ldebug.h&amp;#34;#include &amp;#34;ldo.h&amp;#34;#include &amp;#34;lfunc.h&amp;#34;#include &amp;#34;lgc.h&amp;#34;#include &amp;#34;lmem.h&amp;#34;#include &amp;#34;lobject.h&amp;#34;#include &amp;#34;lopcodes.h&amp;#34;#include &amp;#34;lparser.h&amp;#34;#include &amp;#34;lstate.h&amp;#34;#include &amp;#34;lstring.h&amp;#34;#include &amp;#34;ltable.h&amp;#34;#include &amp;#34;ltm.h&amp;#34;#include &amp;#34;lundump.h&amp;#34;#include &amp;#34;lvm.h&amp;#34;#include &amp;#34;lzio.h&amp;#34; /* ** {====================================================== ** Error-recovery functions ** ======================================================= */ /* chain list of long jump buffers */ struct lua_longjmp {</description>
    </item>
    
    <item>
      <title>Lua 5.1 Reference Manual</title>
      <link>http://shanks.link/blog/2021/05/26/lua-5.1-reference-manual/</link>
      <pubDate>Wed, 26 May 2021 15:31:07 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/26/lua-5.1-reference-manual/</guid>
      <description>Lua 5.1 Reference Manual by Roberto Ierusalimschy, Luiz Henrique de Figueiredo, Waldemar Celes
Copyright © 2006–2012 Lua.org, PUC-Rio. Freely available under the terms of the Lua license.
contents · index · other versions · english · português · español · deutsch 1 – Introduction Lua is an extension programming language designed to support general procedural programming with data description facilities. It also offers good support for object-oriented programming, functional programming, and data-driven programming.</description>
    </item>
    
    <item>
      <title>lua源码注释-lvm.c</title>
      <link>http://shanks.link/blog/2021/05/23/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-lvm.c/</link>
      <pubDate>Sun, 23 May 2021 23:07:16 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/23/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-lvm.c/</guid>
      <description>github链接 lua515子域 /* ** $Id: lvm.c,v 2.63.1.5 2011/08/17 20:43:11 roberto Exp $ ** Lua virtual machine ** See Copyright Notice in lua.h */ #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;string.h&amp;gt; #define lvm_c #define LUA_CORE #include &amp;#34;lua.h&amp;#34; #include &amp;#34;ldebug.h&amp;#34;#include &amp;#34;ldo.h&amp;#34;#include &amp;#34;lfunc.h&amp;#34;#include &amp;#34;lgc.h&amp;#34;#include &amp;#34;lobject.h&amp;#34;#include &amp;#34;lopcodes.h&amp;#34;#include &amp;#34;lstate.h&amp;#34;#include &amp;#34;lstring.h&amp;#34;#include &amp;#34;ltable.h&amp;#34;#include &amp;#34;ltm.h&amp;#34;#include &amp;#34;lvm.h&amp;#34; /* limit for table tag-method chains (to avoid loops) */ #define</description>
    </item>
    
    <item>
      <title>lua源码注释-ltable.c</title>
      <link>http://shanks.link/blog/2021/05/20/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-ltable.c/</link>
      <pubDate>Thu, 20 May 2021 23:44:58 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/20/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-ltable.c/</guid>
      <description>github链接 lua515子域 /* ** $Id: ltable.c,v 2.32.1.2 2007/12/28 15:32:23 roberto Exp $ ** Lua tables (hash) ** See Copyright Notice in lua.h */ /* ** Implementation of tables (aka(又名) arrays, objects, or hash tables). ** Tables keep its elements in two parts: an array part and a hash part.</description>
    </item>
    
    <item>
      <title>The Complete Syntax of Lua51</title>
      <link>http://shanks.link/blog/2021/05/19/the-complete-syntax-of-lua51/</link>
      <pubDate>Wed, 19 May 2021 12:27:54 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/19/the-complete-syntax-of-lua51/</guid>
      <description>Here is the complete syntax of Lua in extended BNF. (It does not describe operator precedences.)
chunk ::= {stat [`;´]} [laststat [`;´]] block ::= chunk stat ::= varlist `=´ explist | functioncall | do block end | while exp do block end | repeat block until exp | if exp then block {elseif exp then block} [else block] end | for Name `=´ exp `,´ exp [`,´ exp] do block end | for namelist in explist do block end | function funcname funcbody | local function Name funcbody | local namelist [`=´ explist] laststat ::= return [explist] | break funcname ::= Name {`.</description>
    </item>
    
    <item>
      <title>A No-Frills Introduction to Lua 5.1 VM Instructions</title>
      <link>http://shanks.link/blog/2021/05/19/a-no-frills-introduction-to-lua-5.1-vm-instructions/</link>
      <pubDate>Wed, 19 May 2021 11:58:46 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/19/a-no-frills-introduction-to-lua-5.1-vm-instructions/</guid>
      <description>A No-Frills Introduction to Lua 5.1 VM Instructions by Kein-Hong Man, esq. &amp;lt;khman AT users.sf.net&amp;gt; Version 0.1, 20060313 ​ 为了检索指令描述，本人额外做了添加特定的前缀OP_处理，eg: MOVE&amp;mdash;-&amp;gt;OP_M</description>
    </item>
    
    <item>
      <title>lua源码阅读之旅-具体排期</title>
      <link>http://shanks.link/blog/2021/05/17/lua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E6%97%85-%E5%85%B7%E4%BD%93%E6%8E%92%E6%9C%9F/</link>
      <pubDate>Mon, 17 May 2021 12:39:24 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/17/lua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E6%97%85-%E5%85%B7%E4%BD%93%E6%8E%92%E6%9C%9F/</guid>
      <description>​ 开篇规划了整理思路，跨度比较大，不利于把控进度，这篇做一个以week为单位的周期安排，以便有效的利用时间和及时复盘自己的学习计划。 资料 5.10-16 《</description>
    </item>
    
    <item>
      <title>lua源码阅读之旅-再次启航</title>
      <link>http://shanks.link/blog/2021/05/10/lua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E6%97%85-%E5%86%8D%E6%AC%A1%E5%90%AF%E8%88%AA/</link>
      <pubDate>Mon, 10 May 2021 15:45:22 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/10/lua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E6%97%85-%E5%86%8D%E6%AC%A1%E5%90%AF%E8%88%AA/</guid>
      <description>​ 第一次阅读lua源码从2019元旦，哪一年阅读计划失败，去年又心血来潮，尝试阅读，结果又是失败，今年再次重拾这个计划。 ​ 作为本系列文章的开</description>
    </item>
    
    <item>
      <title>云风的Blog-Lua GC的源码解剖6</title>
      <link>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%966/</link>
      <pubDate>Fri, 09 Apr 2021 01:12:23 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%966/</guid>
      <description>原文链接 Lua GC 的源码剖析 (6) 完结 GC 中最繁杂的 mark 部分已经谈完了。剩下的东西很简单。今天一次可以写完。 sweep 分两个步骤，一个是清理字符串，另一个是清理其</description>
    </item>
    
    <item>
      <title>云风的Blog-Lua GC的源码解剖5</title>
      <link>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%965/</link>
      <pubDate>Fri, 09 Apr 2021 01:10:11 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%965/</guid>
      <description>原文链接 Lua GC 的源码剖析 (5) 今天来说说 write barrier 。 在 GC 的扫描过程中，由于分步执行，难免会出现少描了一半时，那些已经被置黑的对象又被修改，需要重新标记的</description>
    </item>
    
    <item>
      <title>云风的Blog-Lua GC的源码解剖4</title>
      <link>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%964/</link>
      <pubDate>Fri, 09 Apr 2021 01:08:59 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%964/</guid>
      <description>原文链接 Lua GC 的源码剖析 (4) 今天来看一下 mark 过程是怎样实现的。 所有的 GC 流程，都从 singlestep 函数开始。singlestep 就是一个最简单的状态机。GC 状态简</description>
    </item>
    
    <item>
      <title>云风的Blog-Lua GC的源码解剖3</title>
      <link>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%963/</link>
      <pubDate>Fri, 09 Apr 2021 01:07:31 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%963/</guid>
      <description>原文链接 Lua GC 的源码剖析 (3) 有了前几天的基础，我们可以从顶向下来读 lua gc 部分的代码了。 我们知道，lua 对外的 API 中，一切个 gc 打交道的都通过 lua_gc 。C 语言</description>
    </item>
    
    <item>
      <title>云风的Blog-Lua GC的源码解剖2</title>
      <link>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%962/</link>
      <pubDate>Fri, 09 Apr 2021 01:05:52 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%962/</guid>
      <description>原文链接 Lua GC 的源码剖析 (2) 早期的 Lua GC 采用的是 stop the world 的实现。一旦发生 gc 就需要等待整个 gc 流程走完。如果你用 lua 处理较少量数据，或是数据增删不频繁，这</description>
    </item>
    
    <item>
      <title>云风的Blog-Lua GC的源码解剖1</title>
      <link>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%961/</link>
      <pubDate>Fri, 09 Apr 2021 01:03:52 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%961/</guid>
      <description>原文链接 Lua GC 的源码剖析 (1) 最近发现在大数据量的 lua 环境中，GC 占据了很多的 CPU 。差不多是整个 CPU 时间的 20% 左右。希望着手改进。这样，必须先对 lua 的 gc 算法</description>
    </item>
    
    <item>
      <title>构建Lua解释器Part11：Upvalue</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part11upvalue/</link>
      <pubDate>Thu, 08 Apr 2021 23:31:51 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part11upvalue/</guid>
      <description>本文转载自Manistein&amp;rsquo;s Blog 构建Lua解释器Part11：Upvalue 前言 ​ 本章，我将深入探讨lua的upvalue机制</description>
    </item>
    
    <item>
      <title>构建Lua解释器Part10：userdata</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part10userdata/</link>
      <pubDate>Thu, 08 Apr 2021 23:30:06 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part10userdata/</guid>
      <description>本文转载自Manistein&amp;rsquo;s Blog 构建Lua解释器Part10：userdata 前言 ​ 本章节，我开始对dummylua的user</description>
    </item>
    
    <item>
      <title>构建Lua解释器Part9：metatable</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part9metatable/</link>
      <pubDate>Thu, 08 Apr 2021 23:27:50 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part9metatable/</guid>
      <description>本文转载自Manistein&amp;rsquo;s Blog 构建Lua解释器Part9：metatable Posted on December 8, 2020 前言 ​ 本章，我们将进入到metatab</description>
    </item>
    
    <item>
      <title>构建Lua解释器Part8：构建完整的语法分析器(下)</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part8%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4%E7%9A%84%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E4%B8%8B/</link>
      <pubDate>Thu, 08 Apr 2021 23:20:30 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part8%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4%E7%9A%84%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E4%B8%8B/</guid>
      <description>构建Lua解释器Part8：构建完整的语法分析器(下) 前言 ​ 前面，我已经用3篇blog的巨大篇幅，详细论述了Lua编译模块的一些基本知识。其</description>
    </item>
    
    <item>
      <title>构建Lua解释器Part7：构建完整的语法分析器(上)</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part7%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4%E7%9A%84%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E4%B8%8A/</link>
      <pubDate>Thu, 08 Apr 2021 22:58:42 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part7%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4%E7%9A%84%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E4%B8%8A/</guid>
      <description>本文转载自Manistein&amp;rsquo;s Blog 构建Lua解释器Part7：构建完整的语法分析器(上) 前言 ​ 在上一章里，我完成了词法分析器的设</description>
    </item>
    
    <item>
      <title>构建Lua解释器Part6：脚本运行基础架构的设计与实现</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part6%E8%84%9A%E6%9C%AC%E8%BF%90%E8%A1%8C%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 08 Apr 2021 14:43:42 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part6%E8%84%9A%E6%9C%AC%E8%BF%90%E8%A1%8C%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>本文转载自Manistein&amp;rsquo;s Blog 前言 ​ 构建Lua解释器Part5，对Lua解释器进行了整体介绍，并且以一个hello world</description>
    </item>
    
    <item>
      <title>构建Lua解释器Part5：脚本运行基础架构的设计与实现</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part5%E8%84%9A%E6%9C%AC%E8%BF%90%E8%A1%8C%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 08 Apr 2021 13:02:42 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part5%E8%84%9A%E6%9C%AC%E8%BF%90%E8%A1%8C%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>本文转载自Manistein&amp;rsquo;s Blog 前言 在经过漫长的准备，我终于完成了《构建Lua解释器》系列的第五部分的代码编写，并且通过了预定</description>
    </item>
    
    <item>
      <title>构建Lua解释器Part4：Table设计与实现</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part4table%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 08 Apr 2021 12:42:31 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part4table%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>本文转载自Manistein&amp;rsquo;s Blog 前言 本篇我将对dummylua中Table的设计和实现进行介绍和说明。本文的目的旨在梳理清du</description>
    </item>
    
    <item>
      <title>构建Lua解释器Part3：String设计与实现</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part3string%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 08 Apr 2021 12:28:49 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part3string%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>本文转载自Manistein&amp;rsquo;s Blog 前言 上一章节我介绍了dummylua项目的gc的设计原理和实现方式，该部分我基本是仿造了官方l</description>
    </item>
    
    <item>
      <title>构建Lua解释器Part2：Garbage Collection基础架构</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part2garbage-collection%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Thu, 08 Apr 2021 11:18:57 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part2garbage-collection%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/</guid>
      <description>本文转载自Manistein&amp;rsquo;s Blog 前言 上一篇我已经设计和实现了Lua解释器最基础的基本数据结构，实现了纯C函数在栈中的调用流程，</description>
    </item>
    
    <item>
      <title>构建Lua解释器Part1：虚拟机的基础--Lua基本数据结构、栈和基于栈的C函数调用的设计与实现</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part1%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%9F%BA%E7%A1%80-lua%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A0%88%E5%92%8C%E5%9F%BA%E4%BA%8E%E6%A0%88%E7%9A%84c%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 08 Apr 2021 10:44:15 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part1%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%9F%BA%E7%A1%80-lua%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A0%88%E5%92%8C%E5%9F%BA%E4%BA%8E%E6%A0%88%E7%9A%84c%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>本文转载自Manistein&amp;rsquo;s Blog 前言 从本篇开始，我们正式进入到Lua解释器的开发阶段（这是一个遵循Lua5.3标准的项目）。本</description>
    </item>
    
    <item>
      <title>C4：4个函数，528行代码实现可自举的 C语言编译器</title>
      <link>http://shanks.link/blog/2021/04/06/c44%E4%B8%AA%E5%87%BD%E6%95%B0528%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8F%AF%E8%87%AA%E4%B8%BE%E7%9A%84-c%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E5%99%A8/</link>
      <pubDate>Tue, 06 Apr 2021 23:10:47 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/06/c44%E4%B8%AA%E5%87%BD%E6%95%B0528%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8F%AF%E8%87%AA%E4%B8%BE%E7%9A%84-c%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>lua源码阅读顺序-建议</title>
      <link>http://shanks.link/blog/2021/04/06/lua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E9%A1%BA%E5%BA%8F-%E5%BB%BA%E8%AE%AE/</link>
      <pubDate>Tue, 06 Apr 2021 22:51:18 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/06/lua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E9%A1%BA%E5%BA%8F-%E5%BB%BA%E8%AE%AE/</guid>
      <description>原文链接 Recommended reading order: lmathlib.c, lstrlib.c: get familiar with the external C API. Don&amp;rsquo;t bother with the pattern matcher though. Just the easy functions. lapi.c: Check how the API is implemented internally. Only skim this to get a feeling for the code. Cross-reference to lua.h and luaconf.h as needed. lobject.h: tagged values and object representation. skim through this first. you&amp;rsquo;ll want to keep a window with this</description>
    </item>
    
    <item>
      <title>Lua虚拟机指令介绍</title>
      <link>http://shanks.link/blog/2021/04/06/lua%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A4%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Tue, 06 Apr 2021 22:51:17 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/06/lua%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A4%E4%BB%8B%E7%BB%8D/</guid>
      <description>作者：nicochen，腾讯 IEG 游戏开发工程师 本文从一个简单示例入手，详细讲解 Lua 字节码文件的存储结构及各字段含义，进而引出 Lua 虚拟机指令集和运行</description>
    </item>
    
    <item>
      <title>探索Lua52内部实现:GC3</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0gc3/</link>
      <pubDate>Tue, 06 Apr 2021 12:57:07 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0gc3/</guid>
      <description>GC步骤 global_State中的gcstate记录了当前incremental gc的执行状态。根据执行状态，整个gc过程被分为很多步执行</description>
    </item>
    
    <item>
      <title>探索Lua52内部实现:GC2</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0gc2/</link>
      <pubDate>Tue, 06 Apr 2021 12:51:11 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0gc2/</guid>
      <description>原文链接 GCObject Lua使用union GCObject来表示所有的垃圾回收对象： 182 /* 183 ** Union of all collectable objects 184 */ 185 union GCObject { 186 GCheader gch; /* common header */ 187 union TString ts; 188 union Udata u; 189 union Closure cl;</description>
    </item>
    
    <item>
      <title>探索Lua5.2内部实现:Garbage Collection(1) 原理</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0garbage-collection1-%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 06 Apr 2021 12:45:04 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0garbage-collection1-%E5%8E%9F%E7%90%86/</guid>
      <description>原文链接 Lua5.2采用垃圾回收机制对所有的lua对象(GCObject)进行管理。Lua虚拟机会定期运行GC，释放掉已经不再被被引用到的l</description>
    </item>
    
    <item>
      <title>探索Lua52内部实现-Function</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-function/</link>
      <pubDate>Tue, 06 Apr 2021 12:42:56 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-function/</guid>
      <description>原文链接 基本概念 Lua函数引入了很多functional programming的概念，这些概念使得Lua函数在使用上可谓“功能强大，简洁统一</description>
    </item>
    
    <item>
      <title>探索Lua52内部实现:TString</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0tstring/</link>
      <pubDate>Tue, 06 Apr 2021 12:41:56 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0tstring/</guid>
      <description>原文链接 Lua使用TString结构体代表一个字符串对象。 /* ** Header for string value; string bytes follow the end of this structure */ typedef union TString { L_Umaxalign dummy; /* ensures maximum alignment for strings */ struct { CommonHeader; lu_byte extra; /* reserved words for short strings; &amp;#34;has hash&amp;#34;</description>
    </item>
    
    <item>
      <title>探索Lua52内部实现-编译系统4-表达式分类</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F4-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%86%E7%B1%BB/</link>
      <pubDate>Tue, 06 Apr 2021 11:59:59 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F4-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%86%E7%B1%BB/</guid>
      <description>原文链接 常量表达式 常量表达式在Lua用来表示&amp;quot;nil&amp;quot;，“true”，“false”，字符串和数字的值。在BNF中常量表</description>
    </item>
    
    <item>
      <title>探索Lua52内部实现-编译系统3-表达式</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F3-%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Tue, 06 Apr 2021 11:51:50 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F3-%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>​ 表达式(expression)在编程语言中代表一个可以返回值的语法单位，比如常量表达式，变量表达式，函数调用表达式，算术、关系和逻辑表达式</description>
    </item>
    
    <item>
      <title>探索Lua52内部实现-编译系统2-跳转的处理</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F2-%E8%B7%B3%E8%BD%AC%E7%9A%84%E5%A4%84%E7%90%86/</link>
      <pubDate>Tue, 06 Apr 2021 11:45:14 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F2-%E8%B7%B3%E8%BD%AC%E7%9A%84%E5%A4%84%E7%90%86/</guid>
      <description>​ 跳转用来控制程序的指令流程。Lua使用OP_JMP指令来执行一个跳转，有关OP_JMP的详细介绍，可以参见《虚拟机指令》。跳转可以分为条件</description>
    </item>
    
    <item>
      <title>探索Lua52内部实现-编译系统1-概述</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F1-%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Tue, 06 Apr 2021 11:35:26 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F1-%E6%A6%82%E8%BF%B0/</guid>
      <description>原文链接 Lua是一个轻量级高效率的语言。这种轻量级和高效率不仅体现在它本身虚拟机的运行效率上，而且也体现在他整个的编译系统的实现上。因为绝大</description>
    </item>
    
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(8) LOOP</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A48-loop/</link>
      <pubDate>Tue, 06 Apr 2021 00:04:49 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A48-loop/</guid>
      <description>原文链接 Lua5.2种除了for循环之外，其他的各种循环都使用关系和逻辑指令，配合JMP指令来完成。 local a = 0; while(a &amp;lt; 10) do a = a + 1; end 1 [1] LOADK 0 -1 ;</description>
    </item>
    
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(7) 关系和逻辑指令</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A47-%E5%85%B3%E7%B3%BB%E5%92%8C%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Mon, 05 Apr 2021 23:57:32 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A47-%E5%85%B3%E7%B3%BB%E5%92%8C%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4/</guid>
      <description>原文链接 name args desc OP_JMP A sBx pc+=sBx; if (A) close all upvalues &amp;gt;= R(A) + 1 JMP执行一个跳转，sBx表示跳转的偏移位置，被加到当前指向下一指令的指令指针上。如果sBx为0，表</description>
    </item>
    
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(6）FUNCTION</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A46function/</link>
      <pubDate>Mon, 05 Apr 2021 23:49:45 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A46function/</guid>
      <description>原文链接 name args desc OP_CALL A B C A B C R(A), &amp;hellip; ,R(A+C-2) := R(A)(R(A+1), &amp;hellip; ,R(A+B-1)) CALL执行一个函数调用。寄存器A中存放函数对象，所有参数按顺序放置在A后面的寄存器中。B－1表示</description>
    </item>
    
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(5）Arithmetic</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A45arithmetic/</link>
      <pubDate>Mon, 05 Apr 2021 23:16:09 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A45arithmetic/</guid>
      <description>原文链接 name args desc OP_ADD A B C R(A) := RK(B) + RK(C) OP_SUB A B C R(A) := RK(B) - RK(C) OP_MUL A B C R(A) := RK(B) * RK(C) OP_DIV A B C R(A) := RK(B) / RK(C) OP_MOD A B C R(A) := RK(B) % RK(C) OP_POW A B C R(A) := RK(B) ^ RK(C) 上表中的指令都是与</description>
    </item>
    
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(4) Table</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A44-table/</link>
      <pubDate>Mon, 05 Apr 2021 22:22:31 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A44-table/</guid>
      <description>原文链接 name args desc OP_NEWTABLE A B C R(A) := {} (size = B,C) NEWTABLE在寄存器A处创建一个table对象。B和C分别用来存储这个table数组部分和hash部分</description>
    </item>
    
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(3) Upvalues &amp; Globals</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A43-upvalues-globals/</link>
      <pubDate>Mon, 05 Apr 2021 22:20:15 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A43-upvalues-globals/</guid>
      <description>原文链接 在编译期，如果要访问变量a时，会依照以下的顺序决定变量a的类型： a是当前函数的local变量 a是外层函数的local变量，那么a是当</description>
    </item>
    
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(2) MOVE &amp; LOAD</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A42-move-load/</link>
      <pubDate>Mon, 05 Apr 2021 22:07:13 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A42-move-load/</guid>
      <description>原文链接 | name | args | desc | | OP_MOVE | A B | R(A) := R(B) | OP_MOVE用来将寄存器B中的值拷贝到寄存器A中。由于Lua是register based vm，大部分的指</description>
    </item>
    
    <item>
      <title>探索Lua52内部实现-虚拟机指令1概述</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A41%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Mon, 05 Apr 2021 21:38:47 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A41%E6%A6%82%E8%BF%B0/</guid>
      <description>原文链接 Lua一直把虚拟机执行代码的效率作为一个非常重要的设计目标。而采用什么样的指令系统的对于虚拟机的执行效率来说至关重要。 Stack based vs Register based VM 根</description>
    </item>
    
    <item>
      <title>lua的历史与演进</title>
      <link>http://shanks.link/blog/2021/04/05/lua%E7%9A%84%E5%8E%86%E5%8F%B2%E4%B8%8E%E6%BC%94%E8%BF%9B/</link>
      <pubDate>Mon, 05 Apr 2021 20:08:32 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/05/lua%E7%9A%84%E5%8E%86%E5%8F%B2%E4%B8%8E%E6%BC%94%E8%BF%9B/</guid>
      <description>lua的优点： 可移植性 容易嵌入 体积小 高效率 这些优点都来自于lua的设计目标：简洁。从Scheme获得了很多灵感，包括匿名函数，合理的语义域概</description>
    </item>
    
  </channel>
</rss>
