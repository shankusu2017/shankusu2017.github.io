<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on 程序员的小天地</title>
    <link>http://shanks.link/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on 程序员的小天地</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 06 Dec 2023 14:21:12 +0800</lastBuildDate>
    <atom:link href="http://shanks.link/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>负载均衡算法</title>
      <link>http://shanks.link/blog/2023/12/06/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 06 Dec 2023 14:21:12 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/12/06/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h2 id=&#34;1轮询法&#34;&gt;1、轮询法&lt;/h2&gt;&#xA;&lt;p&gt;将请求按顺序轮流地分配到后端服务器上，它均衡地对待后端的每一台服务器，而不关心服务器实际的连接数和当前的系统负载。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2随机法&#34;&gt;2、随机法&lt;/h2&gt;&#xA;&lt;p&gt;通过系统的随机算法，根据后端服务器的列表大小值来随机选取其中的一台服务器进行访问。由概率统计理论可以得知，随着客户端调用服务端的次数增多，其实际效果越来越接近于平均分配调用量到后端的每一台服务器，也就是轮询的结果。&lt;/p&gt;</description>
    </item>
    <item>
      <title>DH算法图解&#43;数学证明</title>
      <link>http://shanks.link/blog/2023/05/12/dh%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3-%E6%95%B0%E5%AD%A6%E8%AF%81%E6%98%8E/</link>
      <pubDate>Fri, 12 May 2023 09:33:12 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/05/12/dh%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3-%E6%95%B0%E5%AD%A6%E8%AF%81%E6%98%8E/</guid>
      <description>&lt;p&gt;前几天和同事讨论IKE密钥交换流程时，提到了Diffie-Hellman交换。DH算法最主要的作用便是在不安全的网络上成功公共密钥(并未传输真实密钥)。但由于对于DH算法的数学原理则不清楚，因此私下对DH算法进行一个简单学习。&lt;/p&gt;</description>
    </item>
    <item>
      <title>字符串匹配的KMP算法</title>
      <link>http://shanks.link/blog/2022/09/29/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%9A%84kmp%E7%AE%97%E6%B3%95/</link>
      <pubDate>Thu, 29 Sep 2022 19:23:12 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/29/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%9A%84kmp%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/2013/05/&#34;&gt;https://www.ruanyifeng.com/blog/2013/05/&lt;/a&gt;)&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/String_searching_algorithm&#34;&gt;字符串匹配&lt;/a&gt;是计算机的基本任务之一。&lt;/p&gt;&#xA;&lt;p&gt;举例来说，有一个字符串&amp;quot;BBC ABCDAB ABCDABCDABDE&amp;quot;，我想知道，里面是否包含另一个字符串&amp;quot;ABCDABD&amp;quot;？&lt;/p&gt;</description>
    </item>
    <item>
      <title>常见的10种排序算法</title>
      <link>http://shanks.link/blog/2021/08/12/%E5%B8%B8%E8%A7%81%E7%9A%8410%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Thu, 12 Aug 2021 23:31:57 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/12/%E5%B8%B8%E8%A7%81%E7%9A%8410%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h1 id=&#34;常见的排序算法常见的10种排序&#34;&gt;[常见的排序算法——常见的10种排序]&lt;/h1&gt;&#xA;&lt;h2 id=&#34;常见算法可以分为两大类&#34;&gt;常见算法可以分为两大类：&lt;/h2&gt;&#xA;&lt;p&gt;　　非线性时间比较类排序：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此称为非线性时间比较类排序。&lt;/p&gt;&#xA;&lt;p&gt;　　线性时间非比较类排序：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此称为线性时间非比较类排序。&#xA;&lt;img src=&#34;http://shanks.link/img/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/1730367-20190711231258717-1334457150.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
