<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lua on Golang入门指南</title>
    <link>http://shanks.link/categories/lua/</link>
    <description>Recent content in Lua on Golang入门指南</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 19 Oct 2022 13:21:51 +0800</lastBuildDate>
    <atom:link href="http://shanks.link/categories/lua/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>lua常用函数-打印表</title>
      <link>http://shanks.link/blog/2022/10/19/lua%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0-%E6%89%93%E5%8D%B0%E8%A1%A8/</link>
      <pubDate>Wed, 19 Oct 2022 13:21:51 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/19/lua%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0-%E6%89%93%E5%8D%B0%E8%A1%A8/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;打印表&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;PrintTable&lt;/span&gt;(table, key, level)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  level = level or 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;local&lt;/span&gt; indent = &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; i = 1, level &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    indent = indent..&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;  &amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; key ~= &lt;span style=&#34;color:#00f&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(indent..key..&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;..&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;..&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;..&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;{&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(indent .. &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;{&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; k,v &lt;span style=&#34;color:#00f&#34;&gt;in&lt;/span&gt; pairs(table) &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; type(v) == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;table&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        PrintTable(v, key, level + 1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;local&lt;/span&gt; content = string.format(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;%s%s = %s&amp;#34;&lt;/span&gt;, indent .. &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;  &amp;#34;&lt;/span&gt;,tostring(k), tostring(v))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      print(content)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  print(indent .. &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;}&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>lua51 Instructions Commment</title>
      <link>http://shanks.link/blog/2021/07/01/lua51-instructions-commment/</link>
      <pubDate>Thu, 01 Jul 2021 00:20:54 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/07/01/lua51-instructions-commment/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;enum&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*----------------------------------------------------------------------&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;name&#x9;&#x9;args&#x9;description&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;------------------------------------------------------------------------*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_MOVE,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B&#x9;&#x9;R(A) := R(B)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_LOADK,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A Bx&#x9;R(A) := Kst(Bx)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_LOADBOOL,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A) := (Bool)B; if (C) pc++&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_LOADNIL,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B&#x9;&#x9;R(A) := ... := R(B) := nil&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_GETUPVAL,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B&#x9;&#x9;R(A) := UpValue[B]&#x9;&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_GETGLOBAL,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A Bx&#x9;R(A) := Gbl[Kst(Bx)]&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_GETTABLE,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A) := R(B)[RK(C)]&#x9;&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_SETGLOBAL,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A Bx&#x9;Gbl[Kst(Bx)] := R(A)&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_SETUPVAL,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B&#x9;&#x9;UpValue[B] := R(A)&#x9;&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_SETTABLE,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A)[RK(B)] := RK(C)&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_NEWTABLE,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A) := {} (size = B,C)&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_SELF,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A+1) := R(B); R(A) := R(B)[RK(C)]&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_ADD,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A) := RK(B) + RK(C)&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_SUB,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A) := RK(B) - RK(C)&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_MUL,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A) := RK(B) * RK(C)&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_DIV,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A) := RK(B) / RK(C)&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_MOD,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A) := RK(B) % RK(C)&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_POW,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A) := RK(B) ^ RK(C)&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_UNM,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B&#x9;&#x9;R(A) := -R(B)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_NOT,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B&#x9;&#x9;R(A) := not R(B)&#x9;&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_LEN,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B&#x9;&#x9;R(A) := length of R(B)&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_CONCAT,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A) := R(B).. ... ..R(C)&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_JMP,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;sBx&#x9;&#x9;pc+=sBx&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_EQ,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;if ((RK(B) == RK(C)) ~= A) then pc++*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_LT,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;if ((RK(B) &amp;lt;  RK(C)) ~= A) then pc++*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_LE,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;if ((RK(B) &amp;lt;= RK(C)) ~= A) then pc++*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* !!!! &amp;lt;=&amp;gt;:用bool值做相等性比较，而不是判断不相等 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_TEST,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A C&#x9;&#x9;if not (R(A) &amp;lt;=&amp;gt; C) then pc++&#x9;&#x9;*/&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_TESTSET,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;if (R(B) &amp;lt;=&amp;gt; C) then R(A) := R(B) else pc++&#x9;*/&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** B=1表示没有传入参数,2:传入一个参数,0:传入了不定参数 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** C=1:期待没有返回值，2：期待一个返回值，0：期待不定数量返回值&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_CALL,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1)) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_TAILCALL,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;return R(A)(R(A+1), ... ,R(A+B-1))&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* B=1：无返回值，2：一个返回值，0：不定数量返回值 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_RETURN,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B&#x9;&#x9;return R(A), ... ,R(A+B-2)&#x9;(see note)&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_FORLOOP,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A sBx&#x9;R(A)+=R(A+2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if R(A) &amp;lt;?= R(A+1) then { pc+=sBx; R(A+3)=R(A) }*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_FORPREP,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A sBx&#x9;R(A)-=R(A+2); pc+=sBx&#x9;&#x9;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_TFORLOOP,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A C&#x9;R(A+3), ... ,R(A+2+C) := R(A)(R(A+1), R(A+2)); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;                        &#x9;&#x9;if R(A+3) ~= nil then R(A+2)=R(A+3) else pc++&#x9;*/&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_SETLIST,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B C&#x9;R(A)[(C-1)*FPF+i] := R(A+i), 1 &amp;lt;= i &amp;lt;= B&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_CLOSE,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A &#x9;&#x9;close all variables in the stack up to (&amp;gt;=) R(A)*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_CLOSURE,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A Bx&#x9;R(A) := closure(KPROTO[Bx], R(A), ... ,R(A+n))&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_VARARG&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#x9;A B&#x9;&#x9;R(A), R(A+1), ..., R(A+B-1) = vararg&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} OpCode;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>lua源码注释lcode.c</title>
      <link>http://shanks.link/blog/2021/06/08/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8Alcode.c/</link>
      <pubDate>Tue, 08 Jun 2021 23:26:48 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/06/08/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8Alcode.c/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** $Id: lcode.c,v 2.25.1.5 2011/01/31 14:53:16 roberto Exp $&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Code generator for Lua&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** See Copyright Notice in lua.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define lcode_c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define LUA_CORE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lua.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lcode.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ldebug.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ldo.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lgc.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;llex.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lmem.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lobject.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lopcodes.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lparser.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ltable.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* e的类型 expdesc */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define hasjumps(e)&#x9;((e)-&amp;gt;t != (e)-&amp;gt;f)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;isnumeral&lt;/span&gt;(expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; (e-&amp;gt;k == VKNUM &amp;amp;&amp;amp;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 仅仅e-&amp;gt;k == VKNUM 不够么？ */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;  &#x9;e-&amp;gt;t == NO_JUMP &amp;amp;&amp;amp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;  &#x9;e-&amp;gt;f == NO_JUMP);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 给连续的变量赋nil&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** OP_LOADNIL A B R(A) := ... := R(B) := nil&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 当可以合并前一条OP_LOADNIL时则尝试合并，可以利用fun&amp;#39;stack的默认NIL时，直接用NIL&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_nil&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; from, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; n) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Instruction *previous;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (fs-&amp;gt;pc &amp;gt; fs-&amp;gt;lasttarget) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no jumps to current position? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (fs-&amp;gt;pc == 0) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* function start? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (from &amp;gt;= fs-&amp;gt;nactvar)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 新调用一个fun时，其私有stack默认会被置NULL，这种情况直接使用默认的NULL即可 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* positions are already clean */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      previous = &amp;amp;fs-&amp;gt;f-&amp;gt;code[fs-&amp;gt;pc-1];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(*previous) == OP_LOADNIL) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 尝试合并前后连续的OP_LOADNIL指令 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; pfrom = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_A&lt;/span&gt;(*previous);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; pto = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(*previous);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (pfrom &amp;lt;= from &amp;amp;&amp;amp; from &amp;lt;= pto+1) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* can connect both? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (from+n-1 &amp;gt; pto)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;SETARG_B&lt;/span&gt;(*previous, from+n-1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_LOADNIL, from, from+n-1, 0);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else no optimization */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** OP_JMP sBx PC += sBx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 待回填的跳转链表指向我，而我又指向其它pc，那么将上述链表和我串联在一起即可&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_jump&lt;/span&gt; (FuncState *fs) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; jpc = fs-&amp;gt;jpc;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* save list of jumps to here */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; j;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;jpc = NO_JUMP;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  j = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeAsBx&lt;/span&gt;(fs, OP_JMP, 0, NO_JUMP);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_concat&lt;/span&gt;(fs, &amp;amp;j, jpc);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* keep them on hold */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; j;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 从函数返回&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** OP_RETURN A B return R(A), ... ,R(A+B-2)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_ret&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; first, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nret) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_RETURN, first, nret+1, 0);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里可以反推OP_RETURNS中A,B,C的含义了 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 有条件跳转 OP_TEST, OP_TESTSET */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;condjump&lt;/span&gt; (FuncState *fs, OpCode op, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; A, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; B, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; C) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, op, A, B, C);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_jump&lt;/span&gt;(fs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 将待回填的跳转指令pc指向dest */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fixjump&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; pc, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; dest) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Instruction *jmp = &amp;amp;fs-&amp;gt;f-&amp;gt;code[pc];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 下面计算跳转指令的跳转目标绝对值时也加了1，和这里是一致的 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; offset = dest-(pc+1);&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(dest != NO_JUMP);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;abs&lt;/span&gt;(offset) &amp;gt; MAXARG_sBx)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_syntaxerror&lt;/span&gt;(fs-&amp;gt;ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;control structure too long&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;SETARG_sBx&lt;/span&gt;(*jmp, offset);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** returns current `pc&amp;#39; and marks it as a jump target (to avoid wrong&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** optimizations(优化) with consecutive(连续) instructions not in the same basic block).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_getlabel&lt;/span&gt; (FuncState *fs) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;lasttarget = fs-&amp;gt;pc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; fs-&amp;gt;pc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 获取跳转指令指向的绝对位置 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;getjump&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; pc) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; offset = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_sBx&lt;/span&gt;(fs-&amp;gt;f-&amp;gt;code[pc]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (offset == NO_JUMP)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* point to itself represents end of list */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; NO_JUMP;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* end of list */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; (pc+1)+offset;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* turn offset into absolute position */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; Instruction *&lt;span style=&#34;color:#c34e00&#34;&gt;getjumpcontrol&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; pc) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Instruction *pi = &amp;amp;fs-&amp;gt;f-&amp;gt;code[pc];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (pc &amp;gt;= 1 &amp;amp;&amp;amp; &lt;span style=&#34;color:#c34e00&#34;&gt;testTMode&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(*(pi-1))))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; pi-1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; pi;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** check whether list has any jump that do not produce a value&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** (or produce an inverted(颠,倒) value)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;need_value&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; list) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (; list != NO_JUMP; list = &lt;span style=&#34;color:#c34e00&#34;&gt;getjump&lt;/span&gt;(fs, list)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Instruction i = *&lt;span style=&#34;color:#c34e00&#34;&gt;getjumpcontrol&lt;/span&gt;(fs, list);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(i) != OP_TESTSET) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* not found */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;patchtestreg&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; node, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; reg) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Instruction *i = &lt;span style=&#34;color:#c34e00&#34;&gt;getjumpcontrol&lt;/span&gt;(fs, node);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(*i) != OP_TESTSET)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* cannot patch other instructions */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (reg != NO_REG &amp;amp;&amp;amp; reg != &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(*i))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;SETARG_A&lt;/span&gt;(*i, reg);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no register to put value or register already has the value */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    *i = &lt;span style=&#34;color:#c34e00&#34;&gt;CREATE_ABC&lt;/span&gt;(OP_TEST, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(*i), 0, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_C&lt;/span&gt;(*i));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;removevalues&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; list) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (; list != NO_JUMP; list = &lt;span style=&#34;color:#c34e00&#34;&gt;getjump&lt;/span&gt;(fs, list))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;patchtestreg&lt;/span&gt;(fs, list, NO_REG);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 回填跳转指令链表上的指令到指定目标&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 将待回填跳转指令列表list上指令的跳转参数sBx更新到target上 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;patchlistaux&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; list, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; vtarget, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; reg,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; dtarget) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (list != NO_JUMP) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; next = &lt;span style=&#34;color:#c34e00&#34;&gt;getjump&lt;/span&gt;(fs, list);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;patchtestreg&lt;/span&gt;(fs, list, reg))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;fixjump&lt;/span&gt;(fs, list, vtarget);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;fixjump&lt;/span&gt;(fs, list, dtarget);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* jump to default target */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    list = next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 将待回填的跳转到当前指令的跳转链表上的跳转指令的sBx更新为fs-&amp;gt;pc */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;dischargejpc&lt;/span&gt; (FuncState *fs) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;patchlistaux&lt;/span&gt;(fs, fs-&amp;gt;jpc, fs-&amp;gt;pc, NO_REG, fs-&amp;gt;pc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;jpc = NO_JUMP;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 置空 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchlist&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; list, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; target) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (target == fs-&amp;gt;pc)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchtohere&lt;/span&gt;(fs, list);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(target &amp;lt; fs-&amp;gt;pc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;patchlistaux&lt;/span&gt;(fs, list, target, NO_REG, target);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 将待回填的跳转指令链表list挂到fs-&amp;gt;jpc,等生成下一条指令时回填sBx */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchtohere&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; list) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_getlabel&lt;/span&gt;(fs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_concat&lt;/span&gt;(fs, &amp;amp;fs-&amp;gt;jpc, list);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*  l1.sBx = l2 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 将l2指向的待回填跳转指令/指令链表挂到l1的跳转链表上&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_concat&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; *l1, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; l2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (l2 == NO_JUMP) &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* l2不是一条跳转指令，直接返回 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (*l1 == NO_JUMP)&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 当前跳转列表为空 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    *l1 = l2;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* l1尚未初始化，直接赋值即可 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; list = *l1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; ((next = &lt;span style=&#34;color:#c34e00&#34;&gt;getjump&lt;/span&gt;(fs, list)) != NO_JUMP)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* find last element */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      list = next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;fixjump&lt;/span&gt;(fs, list, l2);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 将待回填的跳转指令链表l2挂到l1的末尾 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 调整maxstacksize以便匹配locvar的数量 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_checkstack&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; n) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; newstack = fs-&amp;gt;freereg + n;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (newstack &amp;gt; fs-&amp;gt;f-&amp;gt;maxstacksize) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这个判断是必须的 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (newstack &amp;gt;= MAXSTACK)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_syntaxerror&lt;/span&gt;(fs-&amp;gt;ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;function or expression too complex&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fs-&amp;gt;f-&amp;gt;maxstacksize = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_byte&lt;/span&gt;(newstack);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* reserve reg:预定 寄存器 实际上是占用n个寄存器的意思&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_reserveregs&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; n) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_checkstack&lt;/span&gt;(fs, n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;freereg += n;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 占用n个locvar,释放则n为负值或在其它函数中实现 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 重点函数，需要细读 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;freereg&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; reg) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ISK&lt;/span&gt;(reg) &amp;amp;&amp;amp;            &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 常量的就不用释放了，压根没占用reg */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      reg &amp;gt;= fs-&amp;gt;nactvar) {   &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* reg从0开始，nactvar从1开始，所以这里reg&amp;gt;=fs-&amp;gt;nactvar是可以的&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  &#x9;/* 释放一个reg后,reg==fs-&amp;gt;freereg:确保只能释放最新一个被激活的reg(作为exp的临时reg占用？) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fs-&amp;gt;freereg--;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(reg == fs-&amp;gt;freereg);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 释放被临时占用的reg */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt; (FuncState *fs, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e-&amp;gt;k == VNONRELOC)&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 表达式的值已被CP_XXX到reg中的，才释放 (还没加载到reg，那压根没占用reg，释放个锤子*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;freereg&lt;/span&gt;(fs, e-&amp;gt;u.s.info);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* VNONRELOC info = result register */&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 将常量加载到fs-&amp;gt;f的常量表中&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** local var = &amp;#34;hello&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34; 则本函数的k,v=&amp;#34;hello&amp;#34; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;addk&lt;/span&gt; (FuncState *fs, TValue *k, TValue *v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lua_State *L = fs-&amp;gt;L;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TValue *idx = &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_set&lt;/span&gt;(L, fs-&amp;gt;h, k);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Proto *f = fs-&amp;gt;f;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; oldsize = f-&amp;gt;sizek;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnumber&lt;/span&gt;(idx)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaO_rawequalObj&lt;/span&gt;(&amp;amp;fs-&amp;gt;f-&amp;gt;k[&lt;span style=&#34;color:#c34e00&#34;&gt;cast_int&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(idx))], v));&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;cast_int&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(idx));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* constant not found; create a new entry */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(idx, &lt;span style=&#34;color:#c34e00&#34;&gt;cast_num&lt;/span&gt;(fs-&amp;gt;nk));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_growvector&lt;/span&gt;(L, f-&amp;gt;k, fs-&amp;gt;nk, f-&amp;gt;sizek, TValue,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    MAXARG_Bx, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;constant table overflow&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (oldsize &amp;lt; f-&amp;gt;sizek) &lt;span style=&#34;color:#c34e00&#34;&gt;setnilvalue&lt;/span&gt;(&amp;amp;f-&amp;gt;k[oldsize++]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setobj&lt;/span&gt;(L, &amp;amp;f-&amp;gt;k[fs-&amp;gt;nk], v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_barrier&lt;/span&gt;(L, f, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; fs-&amp;gt;nk++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 将字符串常量加载到fs-&amp;gt;f的常量表中 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_stringK&lt;/span&gt; (FuncState *fs, TString *s) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TValue o;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setsvalue&lt;/span&gt;(fs-&amp;gt;L, &amp;amp;o, s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;addk&lt;/span&gt;(fs, &amp;amp;o, &amp;amp;o);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_numberK&lt;/span&gt; (FuncState *fs, lua_Number r) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TValue o;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(&amp;amp;o, r);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;addk&lt;/span&gt;(fs, &amp;amp;o, &amp;amp;o);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;boolK&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; b) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TValue o;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setbvalue&lt;/span&gt;(&amp;amp;o, b);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;addk&lt;/span&gt;(fs, &amp;amp;o, &amp;amp;o);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;nilK&lt;/span&gt; (FuncState *fs) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TValue k, v;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setnilvalue&lt;/span&gt;(&amp;amp;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* cannot use nil as key; instead use table itself to represent nil */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;sethvalue&lt;/span&gt;(fs-&amp;gt;L, &amp;amp;k, fs-&amp;gt;h);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;addk&lt;/span&gt;(fs, &amp;amp;k, &amp;amp;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* nresults:-1, C=0，表示希望返回变参&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** nresults: 0, C=1, 表示希望返回0个参数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** nresults: 2, C=2, 表示希望返回1个参数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_setreturns&lt;/span&gt; (FuncState *fs, expdesc *e, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nresults) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* OP_CALL A B C &#x9;&#x9;R(A), … ,R(A+C-2) := R(A)(R(A+1), … ,R(A+B-1)) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e-&amp;gt;k == VCALL) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* expression is an open function call? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;SETARG_C&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getcode&lt;/span&gt;(fs, e), nresults+1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e-&amp;gt;k == VVARARG) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* OP_VARARG A B &#x9;R(A), R(A+1), ..., R(A+B-1) = vararg &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  &#x9;** 将变参拷贝到RA指定的寄存器开始的地方，拷贝B个元素，这里仅使用了一个寄存器的编码?&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  &#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;SETARG_B&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getcode&lt;/span&gt;(fs, e), nresults+1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;SETARG_A&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getcode&lt;/span&gt;(fs, e), fs-&amp;gt;freereg);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_reserveregs&lt;/span&gt;(fs, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 对于可能返回变参的表达式，强制其仅返回一个值 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_setoneret&lt;/span&gt; (FuncState *fs, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e-&amp;gt;k == VCALL) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* expression is an open function call? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* A B C R(A), … ,R(A+C-2) := R(A)(R(A+1), … ,R(A+B-1)) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 函数调用返回的第一个值占用的reg就是函数指针本身占用的reg,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  &#x9;** 不能返回到其它地方，故而这里是VNONRELOC&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  &#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    e-&amp;gt;k = VNONRELOC;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    e-&amp;gt;u.s.info = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_A&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getcode&lt;/span&gt;(fs, e));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e-&amp;gt;k == VVARARG) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;SETARG_B&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getcode&lt;/span&gt;(fs, e), 2);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 2:期待返回一个返回值 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    e-&amp;gt;k = VRELOCABLE;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* can relocate its simple result */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 生成LOAD_XXX(加载)系列指令，（为后续加载间接表达式的值到reg做准备）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 对需间接读取src.val的表达式生成对应的读值指令(eg:OP_GETTABLE),以便下一步的dst=src&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 需要间接求表达式src.val的：&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 生成求表达式src.val的指令&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** e-&amp;gt;u.s.info----&amp;gt;pc.addr方便后面确定dst后进行指令回填&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** e.k        ----&amp;gt;VNONRELOC 表达式的src.val对应读值指令已生成，但不在reg中&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 表达式的src.val已经在reg中的&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** src.val已在reg中的表达式(VLOCAL,VCALL)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**   e.k      ----&amp;gt; e.k=VNONRELOC&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 表达式的src.val是直接值的&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** src.val是直接值的表达式，无需处理&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** discharge:释放&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_dischargevars&lt;/span&gt; (FuncState *fs, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (e-&amp;gt;k) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VLOCAL: {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* exp.src已在reg中，故而这里是VNONRELOC */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      e-&amp;gt;k = VNONRELOC;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VUPVAL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      e-&amp;gt;u.s.info = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_GETUPVAL, 0, e-&amp;gt;u.s.info, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      e-&amp;gt;k = VRELOCABLE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VGLOBAL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      e-&amp;gt;u.s.info = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABx&lt;/span&gt;(fs, OP_GETGLOBAL, 0, e-&amp;gt;u.s.info);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      e-&amp;gt;k = VRELOCABLE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VINDEXED: {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* OP_GETTABLE A B C R(A) := R(B)[RK(C)] */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* !!这里是依次释放的&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;  ** a.b.c.d.e... 释放a.b.c.d之前占用的reg,以便重利用reg&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;freereg&lt;/span&gt;(fs, e-&amp;gt;u.s.aux);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;freereg&lt;/span&gt;(fs, e-&amp;gt;u.s.info);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* A填 0，配合下面的可重定位VRELOCALBLE */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      e-&amp;gt;u.s.info = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_GETTABLE, 0, e-&amp;gt;u.s.info, e-&amp;gt;u.s.aux);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      e-&amp;gt;k = VRELOCABLE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VVARARG:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VCALL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_setoneret&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* !!!!常量，常量，常量 不需要用到reg，无需更新reg的信息e-&amp;gt;k了 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VNIL:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VTRUE:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VFALSE:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VKNUM:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VK: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 还没遇到过，不太理解 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VJMP:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* e-&amp;gt;k已经确定了寄存器的信息了，直接返回 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VRELOCABLE:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VNONRELOC:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* there is one value available (somewhere) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;code_label&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; A, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; b, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; jump) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_getlabel&lt;/span&gt;(fs);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* those instructions may be jump targets */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_LOADBOOL, A, b, jump);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** CP_XXX拷贝指令&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 拷贝表达式的值到指定的目的寄存器(reg(dst) = exp(src)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** step.1 生成表达式的src.val的加载指令(R(B))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** step.2 回填表达式的目标寄存器(RA),对VNONRELOC的则生成MV指令&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 参考init_exp 和 luaK_dischargevars函数来理解本函数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;discharge2reg&lt;/span&gt; (FuncState *fs, expdesc *e, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; reg) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** step1. 对&amp;#34;间接表达式&amp;#34;生成求值指令 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_dischargevars&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** step2. 对&amp;#34;直接表达式&amp;#34;生成求值指令&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** step3. 对&amp;#34;上述表达式&amp;#34;进行回填处理(确定目标寄存器(R(A)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (e-&amp;gt;k) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 表达式的值是常值, 这里生成指令并回填R(A) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VNIL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_nil&lt;/span&gt;(fs, reg, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VFALSE:  &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VTRUE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_LOADBOOL, reg, e-&amp;gt;k == VTRUE, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 表达式的值在e-&amp;gt;u.s.info：常量表中，这里提出来，生成指令并回填R(A)                       */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VK: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* reg：指令的目标寄存器RA, e-&amp;gt;u.s.info:指令中常量exp在常量表中的索引 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABx&lt;/span&gt;(fs, OP_LOADK, reg, e-&amp;gt;u.s.info);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 同上VK，只是nval在常量中的索引延迟到这里确定 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VKNUM: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABx&lt;/span&gt;(fs, OP_LOADK, reg, &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_numberK&lt;/span&gt;(fs, e-&amp;gt;u.nval));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 指令，表达式的值都已确定，这里回填指令的目的地R(A)即可 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VRELOCABLE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Instruction *pc = &amp;amp;&lt;span style=&#34;color:#c34e00&#34;&gt;getcode&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;SETARG_A&lt;/span&gt;(*pc, reg);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 表达式的值已确定，生成OP_MOVE指令，回填R(A)=R(B)中的即可 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VNONRELOC: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (reg != e-&amp;gt;u.s.info)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_MOVE, reg, e-&amp;gt;u.s.info, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* VJMP尚不理解 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(e-&amp;gt;k == VVOID || e-&amp;gt;k == VJMP);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* nothing to do... */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 表达式的目的寄存器R(A)已确定 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e-&amp;gt;u.s.info = reg;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e-&amp;gt;k = VNONRELOC;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;discharge2anyreg&lt;/span&gt; (FuncState *fs, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e-&amp;gt;k != VNONRELOC) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_reserveregs&lt;/span&gt;(fs, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;discharge2reg&lt;/span&gt;(fs, e, fs-&amp;gt;freereg-1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* dst=src CP_XXX指令，将表达式的值赋值给指定的寄存器reg */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;exp2reg&lt;/span&gt; (FuncState *fs, expdesc *e, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; reg) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 将表达式的src.val赋值给dst(reg) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;discharge2reg&lt;/span&gt;(fs, e, reg);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e-&amp;gt;k == VJMP)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_concat&lt;/span&gt;(fs, &amp;amp;e-&amp;gt;t, e-&amp;gt;u.s.info);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* put this jump in `t&amp;#39; list */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;hasjumps&lt;/span&gt;(e)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; final;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* position after whole expression */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; p_f = NO_JUMP;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* position of an eventual LOAD false */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;p_t&lt;/span&gt; = NO_JUMP;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* position of an eventual LOAD true */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;need_value&lt;/span&gt;(fs, e-&amp;gt;t) || &lt;span style=&#34;color:#c34e00&#34;&gt;need_value&lt;/span&gt;(fs, e-&amp;gt;f)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; fj = (e-&amp;gt;k == VJMP) ? NO_JUMP : &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_jump&lt;/span&gt;(fs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      p_f = &lt;span style=&#34;color:#c34e00&#34;&gt;code_label&lt;/span&gt;(fs, reg, 0, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;p_t&lt;/span&gt; = &lt;span style=&#34;color:#c34e00&#34;&gt;code_label&lt;/span&gt;(fs, reg, 1, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchtohere&lt;/span&gt;(fs, fj);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    final = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_getlabel&lt;/span&gt;(fs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;patchlistaux&lt;/span&gt;(fs, e-&amp;gt;f, final, reg, p_f);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;patchlistaux&lt;/span&gt;(fs, e-&amp;gt;t, final, reg, &lt;span style=&#34;color:#00f&#34;&gt;p_t&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e-&amp;gt;f = e-&amp;gt;t = NO_JUMP;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 经过dst.(reg) = src.val 后，表达式的目标地址已确定,且已在reg中 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e-&amp;gt;u.s.info = reg;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e-&amp;gt;k = VNONRELOC;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** CP_XXX 拷贝指令 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** reg(var) = exp： 将表达式的src.val拷贝给next&amp;#39;free.reg&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2nextreg&lt;/span&gt; (FuncState *fs, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 更新exp的reg或者op信息&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 不能确定exp对应指令的则e-&amp;gt;u.info中填入指令地址，方便回填,同时e-&amp;gt;k:更新为VRELOCABLE，表示需要回填RA?&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_dischargevars&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 释放被临时占用的reg */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 申请一个reg，并将exp赋值到reg上 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_reserveregs&lt;/span&gt;(fs, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;exp2reg&lt;/span&gt;(fs, e, fs-&amp;gt;freereg - 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** LOAD_XXX 加载指令&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 将表达式的值加载到寄存器中(eg:VGLOBAL, VINDEXED)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 已加载到reg中的则无需此步骤(VNONRELOC)),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** RETURNS:寄存器地址 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2anyreg&lt;/span&gt; (FuncState *fs, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 对表达式生成估值指令 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_dischargevars&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e-&amp;gt;k == VNONRELOC) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* e的src.val已在reg中，则直接返回对应的reg */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;hasjumps&lt;/span&gt;(e)) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; e-&amp;gt;u.s.info;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* exp is already in a register */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e-&amp;gt;u.s.info &amp;gt;= fs-&amp;gt;nactvar) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* reg. is not a local? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;exp2reg&lt;/span&gt;(fs, e, e-&amp;gt;u.s.info);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* put value on it */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; e-&amp;gt;u.s.info;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* e的src值还不在reg则将其存入reg */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2nextreg&lt;/span&gt;(fs, e);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* default */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; e-&amp;gt;u.s.info;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 类似 LOAD_XXX 生成表达式的加载指令(！！！！不是CP_XXX拷贝一份e的值到reg的拷贝指令) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2val&lt;/span&gt; (FuncState *fs, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;hasjumps&lt;/span&gt;(e))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2anyreg&lt;/span&gt;(fs, e);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 求解表达式的src.val后，将表达式的值放到下一个free.reg中 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_dischargevars&lt;/span&gt;(fs, e);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 对间接表达式（原值不在reg中或不是直接值的）生成求值指令 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** LOAD_XXX 加载指令 将表达式的值加载到next’free’reg中&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** VNONRELOC这种表达式的值已被加载到reg上的就无需处理了&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** step.1 表达式的值不在reg中的非VNONRELOC,生成对应的加载指令&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** step.2 回填上述加载指令，正式将表达式加载到reg中&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** RETURNS: 加载的reg的地址&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2RK&lt;/span&gt; (FuncState *fs, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 对[间接]表达式e生成求值指令 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2val&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* e是常量表达式，无需生成求值指令，直接返回常量表中对应的索引即可 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (e-&amp;gt;k) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VKNUM:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VTRUE:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VFALSE:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VNIL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (fs-&amp;gt;nk &amp;lt;= MAXINDEXRK) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* constant fit in RK operand? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        e-&amp;gt;u.s.info = (e-&amp;gt;k == VNIL)  ? &lt;span style=&#34;color:#c34e00&#34;&gt;nilK&lt;/span&gt;(fs) :&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      (e-&amp;gt;k == VKNUM) ? &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_numberK&lt;/span&gt;(fs, e-&amp;gt;u.nval) :&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                        &lt;span style=&#34;color:#c34e00&#34;&gt;boolK&lt;/span&gt;(fs, (e-&amp;gt;k == VTRUE));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        e-&amp;gt;k = VK;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;RKASK&lt;/span&gt;(e-&amp;gt;u.s.info);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VK: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e-&amp;gt;u.s.info &amp;lt;= MAXINDEXRK)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* constant fit in argC? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;RKASK&lt;/span&gt;(e-&amp;gt;u.s.info);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* not a constant in the right range: put it in a register &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 间接表达式(非常量表达式)，将其src.val赋值到下一个free.reg中&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2anyreg&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* var = ex&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 先 LOAD_XXX (ex) 后 SET_XXX(var=ex) 的&amp;#34;赋值组合业务&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_storevar&lt;/span&gt; (FuncState *fs, expdesc *var, expdesc *ex) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (var-&amp;gt;k) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VLOCAL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, ex);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;exp2reg&lt;/span&gt;(fs, ex, var-&amp;gt;u.s.info);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* var = ex */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VUPVAL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; e = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2anyreg&lt;/span&gt;(fs, ex);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* var = ex */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_SETUPVAL, e, var-&amp;gt;u.s.info, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VGLOBAL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; e = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2anyreg&lt;/span&gt;(fs, ex);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* var = ex */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABx&lt;/span&gt;(fs, OP_SETGLOBAL, e, var-&amp;gt;u.s.info);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VINDEXED: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; e = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2RK&lt;/span&gt;(fs, ex);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* var = ex */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_SETTABLE, var-&amp;gt;u.s.info, var-&amp;gt;u.s.aux, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(0);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* invalid var kind to store */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, ex);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* OP_SELF A B C R(A+1) := R(B); R(A) := R(B)[RK(C)] */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_self&lt;/span&gt; (FuncState *fs, expdesc *e, expdesc *key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; func;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2anyreg&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  func = fs-&amp;gt;freereg;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_reserveregs&lt;/span&gt;(fs, 2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_SELF, func, e-&amp;gt;u.s.info, &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2RK&lt;/span&gt;(fs, key));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e-&amp;gt;u.s.info = func;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e-&amp;gt;k = VNONRELOC;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* invert:颠倒 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;invertjump&lt;/span&gt; (FuncState *fs, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Instruction *pc = &lt;span style=&#34;color:#c34e00&#34;&gt;getjumpcontrol&lt;/span&gt;(fs, e-&amp;gt;u.s.info);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;testTMode&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(*pc)) &amp;amp;&amp;amp; &lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(*pc) != OP_TESTSET &amp;amp;&amp;amp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                           &lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(*pc) != OP_TEST);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;SETARG_A&lt;/span&gt;(*pc, !(&lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_A&lt;/span&gt;(*pc)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;jumponcond&lt;/span&gt; (FuncState *fs, expdesc *e, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; cond) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e-&amp;gt;k == VRELOCABLE) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Instruction ie = &lt;span style=&#34;color:#c34e00&#34;&gt;getcode&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(ie) == OP_NOT) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      fs-&amp;gt;pc--;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* remove previous OP_NOT */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;condjump&lt;/span&gt;(fs, OP_TEST, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(ie), 0, !cond);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else go through */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;discharge2anyreg&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;condjump&lt;/span&gt;(fs, OP_TESTSET, NO_REG, e-&amp;gt;u.s.info, cond);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* and */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_goiftrue&lt;/span&gt; (FuncState *fs, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; pc;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* pc of last jump */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_dischargevars&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (e-&amp;gt;k) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VK: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VKNUM: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VTRUE: {&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      pc = NO_JUMP;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* always true; do nothing， keep go throught? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VJMP: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;invertjump&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      pc = e-&amp;gt;u.s.info;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      pc = &lt;span style=&#34;color:#c34e00&#34;&gt;jumponcond&lt;/span&gt;(fs, e, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_concat&lt;/span&gt;(fs, &amp;amp;e-&amp;gt;f, pc);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* insert last jump in `f&amp;#39; list */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchtohere&lt;/span&gt;(fs, e-&amp;gt;t);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e-&amp;gt;t = NO_JUMP;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* or */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_goiffalse&lt;/span&gt; (FuncState *fs, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; pc;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* pc of last jump */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_dischargevars&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (e-&amp;gt;k) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VNIL: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VFALSE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      pc = NO_JUMP;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* always false; do nothing */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VJMP: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      pc = e-&amp;gt;u.s.info;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      pc = &lt;span style=&#34;color:#c34e00&#34;&gt;jumponcond&lt;/span&gt;(fs, e, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_concat&lt;/span&gt;(fs, &amp;amp;e-&amp;gt;t, pc);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* insert last jump in `t&amp;#39; list */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchtohere&lt;/span&gt;(fs, e-&amp;gt;f);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e-&amp;gt;f = NO_JUMP;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* not  A B R(A) := not R(B) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** not的stat的左边必须有左值,否则就是语法错误&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;codenot&lt;/span&gt; (FuncState *fs, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_dischargevars&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (e-&amp;gt;k) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VNIL: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VFALSE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      e-&amp;gt;k = VTRUE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VK: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VKNUM: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VTRUE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      e-&amp;gt;k = VFALSE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VJMP: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;invertjump&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VRELOCABLE:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; VNONRELOC: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;discharge2anyreg&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      e-&amp;gt;u.s.info = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_NOT, 0, e-&amp;gt;u.s.info, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      e-&amp;gt;k = VRELOCABLE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(0);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* cannot happen */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* interchange true and false lists */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  { &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; temp = e-&amp;gt;f; e-&amp;gt;f = e-&amp;gt;t; e-&amp;gt;t = temp; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;removevalues&lt;/span&gt;(fs, e-&amp;gt;f);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;removevalues&lt;/span&gt;(fs, e-&amp;gt;t);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 索引表达式t.k &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** info = table register; aux = index register (or `k&amp;#39;) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** eg: tbl(info).aux(aux) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_indexed&lt;/span&gt; (FuncState *fs, expdesc *t, expdesc *k) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  t-&amp;gt;u.s.aux = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2RK&lt;/span&gt;(fs, k);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  t-&amp;gt;k = VINDEXED;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 尝试合并二元操作符以及左右两边的表达式(编译优化) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;constfolding&lt;/span&gt; (OpCode op, expdesc *e1, expdesc *e2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lua_Number v1, v2, r;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 两个操作数都得是numeral */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;isnumeral&lt;/span&gt;(e1) || !&lt;span style=&#34;color:#c34e00&#34;&gt;isnumeral&lt;/span&gt;(e2)) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v1 = e1-&amp;gt;u.nval;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v2 = e2-&amp;gt;u.nval;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (op) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_ADD: r = &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numadd&lt;/span&gt;(v1, v2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_SUB: r = &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numsub&lt;/span&gt;(v1, v2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_MUL: r = &lt;span style=&#34;color:#c34e00&#34;&gt;luai_nummul&lt;/span&gt;(v1, v2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_DIV:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (v2 == 0) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* do not attempt to divide by 0 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      r = &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numdiv&lt;/span&gt;(v1, v2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_MOD:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (v2 == 0) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* do not attempt to divide by 0 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      r = &lt;span style=&#34;color:#c34e00&#34;&gt;luai_nummod&lt;/span&gt;(v1, v2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_POW: r = &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numpow&lt;/span&gt;(v1, v2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_UNM: r = &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numunm&lt;/span&gt;(v1); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_LEN: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no constant folding for &amp;#39;len&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(0); r = 0; &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luai_numisnan&lt;/span&gt;(r)) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* do not attempt to produce NaN */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e1-&amp;gt;u.nval = r;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** local a = b + c &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 表达式运行完毕后，b,c占用的临时的reg就可以被释放了，故而这一行编译完成后b,c占用的reg也可以释放了&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;codearith&lt;/span&gt; (FuncState *fs, OpCode op, expdesc *e1, expdesc *e2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;constfolding&lt;/span&gt;(op, e1, e2))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; o2 = (op != OP_UNM &amp;amp;&amp;amp; op != OP_LEN) ? &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2RK&lt;/span&gt;(fs, e2) : 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; o1 = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2RK&lt;/span&gt;(fs, e1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 释放exp的规则是从后往前free */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (o1 &amp;gt; o2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, e1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, e2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, e2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, e1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里R(A)的值尚未确定，e-&amp;gt;=VRELOCABLE:表示需要重定位？ */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    e1-&amp;gt;u.s.info = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, op, 0, o1, o2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    e1-&amp;gt;k = VRELOCABLE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 关系表达式 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;codecomp&lt;/span&gt; (FuncState *fs, OpCode op, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; cond, expdesc *e1,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                          expdesc *e2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; o1 = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2RK&lt;/span&gt;(fs, e1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; o2 = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2RK&lt;/span&gt;(fs, e2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, e2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, e1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (cond == 0 &amp;amp;&amp;amp; op != OP_EQ) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; temp;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* exchange args to replace by `&amp;lt;&amp;#39; or `&amp;lt;=&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    temp = o1; o1 = o2; o2 = temp;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* o1 &amp;lt;==&amp;gt; o2 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cond = 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e1-&amp;gt;u.s.info = &lt;span style=&#34;color:#c34e00&#34;&gt;condjump&lt;/span&gt;(fs, op, cond, o1, o2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e1-&amp;gt;k = VJMP;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_prefix&lt;/span&gt; (FuncState *fs, UnOpr op, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc e2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e2.t = e2.f = NO_JUMP;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e2.k = VKNUM; e2.u.nval = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (op) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_MINUS: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;isnumeral&lt;/span&gt;(e))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2anyreg&lt;/span&gt;(fs, e);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* cannot operate on non-numeric constants */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;codearith&lt;/span&gt;(fs, OP_UNM, e, &amp;amp;e2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_NOT: &lt;span style=&#34;color:#c34e00&#34;&gt;codenot&lt;/span&gt;(fs, e); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_LEN: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2anyreg&lt;/span&gt;(fs, e);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* cannot operate on constants */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;codearith&lt;/span&gt;(fs, OP_LEN, e, &amp;amp;e2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_infix&lt;/span&gt; (FuncState *fs, BinOpr op, expdesc *v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (op) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_AND: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_goiftrue&lt;/span&gt;(fs, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_OR: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_goiffalse&lt;/span&gt;(fs, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_CONCAT: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2nextreg&lt;/span&gt;(fs, v);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* operand must be on the `stack&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_ADD: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_SUB: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_MUL: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_DIV:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_MOD: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_POW: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;isnumeral&lt;/span&gt;(v)) &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2RK&lt;/span&gt;(fs, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2RK&lt;/span&gt;(fs, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_posfix&lt;/span&gt; (FuncState *fs, BinOpr op, expdesc *e1, expdesc *e2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (op) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_AND: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(e1-&amp;gt;t == NO_JUMP);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* list must be closed */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_dischargevars&lt;/span&gt;(fs, e2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_concat&lt;/span&gt;(fs, &amp;amp;e2-&amp;gt;f, e1-&amp;gt;f);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      *e1 = *e2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_OR: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(e1-&amp;gt;f == NO_JUMP);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* list must be closed */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_dischargevars&lt;/span&gt;(fs, e2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_concat&lt;/span&gt;(fs, &amp;amp;e2-&amp;gt;t, e1-&amp;gt;t);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      *e1 = *e2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_CONCAT: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2val&lt;/span&gt;(fs, e2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e2-&amp;gt;k == VRELOCABLE &amp;amp;&amp;amp; &lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getcode&lt;/span&gt;(fs, e2)) == OP_CONCAT) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(e1-&amp;gt;u.s.info == &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getcode&lt;/span&gt;(fs, e2))-1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;freeexp&lt;/span&gt;(fs, e1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;SETARG_B&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getcode&lt;/span&gt;(fs, e2), e1-&amp;gt;u.s.info);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        e1-&amp;gt;k = VRELOCABLE; e1-&amp;gt;u.s.info = e2-&amp;gt;u.s.info;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2nextreg&lt;/span&gt;(fs, e2);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* operand must be on the &amp;#39;stack&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;codearith&lt;/span&gt;(fs, OP_CONCAT, e1, e2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_ADD: &lt;span style=&#34;color:#c34e00&#34;&gt;codearith&lt;/span&gt;(fs, OP_ADD, e1, e2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_SUB: &lt;span style=&#34;color:#c34e00&#34;&gt;codearith&lt;/span&gt;(fs, OP_SUB, e1, e2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_MUL: &lt;span style=&#34;color:#c34e00&#34;&gt;codearith&lt;/span&gt;(fs, OP_MUL, e1, e2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_DIV: &lt;span style=&#34;color:#c34e00&#34;&gt;codearith&lt;/span&gt;(fs, OP_DIV, e1, e2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_MOD: &lt;span style=&#34;color:#c34e00&#34;&gt;codearith&lt;/span&gt;(fs, OP_MOD, e1, e2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_POW: &lt;span style=&#34;color:#c34e00&#34;&gt;codearith&lt;/span&gt;(fs, OP_POW, e1, e2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_EQ: &lt;span style=&#34;color:#c34e00&#34;&gt;codecomp&lt;/span&gt;(fs, OP_EQ, 1, e1, e2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_NE: &lt;span style=&#34;color:#c34e00&#34;&gt;codecomp&lt;/span&gt;(fs, OP_EQ, 0, e1, e2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_LT: &lt;span style=&#34;color:#c34e00&#34;&gt;codecomp&lt;/span&gt;(fs, OP_LT, 1, e1, e2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_LE: &lt;span style=&#34;color:#c34e00&#34;&gt;codecomp&lt;/span&gt;(fs, OP_LE, 1, e1, e2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_GT: &lt;span style=&#34;color:#c34e00&#34;&gt;codecomp&lt;/span&gt;(fs, OP_LT, 0, e1, e2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OPR_GE: &lt;span style=&#34;color:#c34e00&#34;&gt;codecomp&lt;/span&gt;(fs, OP_LE, 0, e1, e2); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新上一个生成的pc对应的行信息 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_fixline&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;f-&amp;gt;lineinfo[fs-&amp;gt;pc - 1] = line;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_code&lt;/span&gt; (FuncState *fs, Instruction i, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Proto *f = fs-&amp;gt;f;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;dischargejpc&lt;/span&gt;(fs);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `pc&amp;#39; will change */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* put new instruction in code array */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_growvector&lt;/span&gt;(fs-&amp;gt;L, f-&amp;gt;code, fs-&amp;gt;pc, f-&amp;gt;sizecode, Instruction,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  MAX_INT, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;code size overflow&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;code[fs-&amp;gt;pc] = i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* save corresponding line information */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_growvector&lt;/span&gt;(fs-&amp;gt;L, f-&amp;gt;lineinfo, fs-&amp;gt;pc, f-&amp;gt;sizelineinfo, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  MAX_INT, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;code size overflow&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;lineinfo[fs-&amp;gt;pc] = line;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; fs-&amp;gt;pc++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt; (FuncState *fs, OpCode o, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; b, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; c) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getOpMode&lt;/span&gt;(o) == iABC);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getBMode&lt;/span&gt;(o) != OpArgN || b == 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getCMode&lt;/span&gt;(o) != OpArgN || c == 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_code&lt;/span&gt;(fs, &lt;span style=&#34;color:#c34e00&#34;&gt;CREATE_ABC&lt;/span&gt;(o, a, b, c), fs-&amp;gt;ls-&amp;gt;lastline);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABx&lt;/span&gt; (FuncState *fs, OpCode o, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; bc) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getOpMode&lt;/span&gt;(o) == iABx || &lt;span style=&#34;color:#c34e00&#34;&gt;getOpMode&lt;/span&gt;(o) == iAsBx);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getCMode&lt;/span&gt;(o) == OpArgN);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_code&lt;/span&gt;(fs, &lt;span style=&#34;color:#c34e00&#34;&gt;CREATE_ABx&lt;/span&gt;(o, a, bc), fs-&amp;gt;ls-&amp;gt;lastline);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_setlist&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; base, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nelems, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; tostore) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; c =  (nelems - 1)/LFIELDS_PER_FLUSH + 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; b = (tostore == LUA_MULTRET) ? 0 : tostore;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* tostore中最后一个是变参，则tostore==LUA_MULTRET */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(tostore != 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (c &amp;lt;= MAXARG_C)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_SETLIST, base, b, c);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* c过大，将其放到下一条指令中 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_SETLIST, base, b, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_code&lt;/span&gt;(fs, &lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(Instruction, c), fs-&amp;gt;ls-&amp;gt;lastline);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里可以回收空闲出来的寄存器了，有意思吧 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;freereg = base + 1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* free registers with list values */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>lua源码注释 lparse.c</title>
      <link>http://shanks.link/blog/2021/06/08/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-lparse.c/</link>
      <pubDate>Tue, 08 Jun 2021 23:03:28 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/06/08/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-lparse.c/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 参考的BNF地址 shankusu.me/lua/TheCompleteSyntaxOfLua51/ */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** $Id: lparser.c,v 2.42.1.4 2011/10/21 19:31:42 roberto Exp $&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Lua Parser&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** See Copyright Notice in lua.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define lparser_c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define LUA_CORE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lua.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lcode.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ldebug.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ldo.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lfunc.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;llex.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lmem.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lobject.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lopcodes.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lparser.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lstate.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lstring.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ltable.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 也只有函数调用或变参操作符这两种TOKEN能返回 ... */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define hasmultret(k)&#x9;&#x9;((k) == VCALL || (k) == VVARARG)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* i:当前活跃的locvar的索引 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define getlocvar(fs, i)&#x9;((fs)-&amp;gt;f-&amp;gt;locvars[(fs)-&amp;gt;actvar[i]])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 检查value是否超过了limit限制,超过则报错msg */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define luaY_checklimit(fs,v,l,m)&#x9;if ((v)&amp;gt;(l)) errorlimit(fs,l,m)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** nodes for block list (list of active blocks)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** previous:往前跳(eg:查找变量时从now-block往前一级一级的block找)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; BlockCnt {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; BlockCnt *previous;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* chain */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; breaklist;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* list of jumps out of this loop */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** ！！！！在进入本block的瞬间，外面已经激活的var的数量， ！！！！&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 意味着本块内激活的locvar的reg.idx不会低于整个值，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 用于按照便变量的生存期检索变量 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 退出本block后，将fs-&amp;gt;reg重置到本次即可清掉本block内激活的actvar&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lu_byte nactvar;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* # active locals outside the breakable structure */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lu_byte upval;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* true if some variable in the block is an upvalue(本块中存在某些变量是其它块的upvalues：本块关闭时要做善后处理？) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lu_byte isbreakable;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* true if `block&amp;#39; is a loop, 语法规则：break仅能用于loop的block中 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} BlockCnt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** prototypes for recursive non-terminal functions&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;chunk&lt;/span&gt; (LexState *ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;expr&lt;/span&gt; (LexState *ls, expdesc *v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* anchor:锚 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;anchor_token&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;t.token == TK_NAME || ls-&amp;gt;t.token == TK_STRING) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TString *ts = ls-&amp;gt;t.seminfo.ts;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_newstring&lt;/span&gt;(ls, &lt;span style=&#34;color:#c34e00&#34;&gt;getstr&lt;/span&gt;(ts), ts-&amp;gt;tsv.len);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;error_expected&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_syntaxerror&lt;/span&gt;(ls,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_pushfstring&lt;/span&gt;(ls-&amp;gt;L, LUA_QS &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34; expected&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_token2str&lt;/span&gt;(ls, token)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;errorlimit&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; limit, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *what) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *msg = (fs-&amp;gt;f-&amp;gt;linedefined == 0) ?&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_pushfstring&lt;/span&gt;(fs-&amp;gt;L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;main function has more than %d %s&amp;#34;&lt;/span&gt;, limit, what) :&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_pushfstring&lt;/span&gt;(fs-&amp;gt;L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;function at line %d has more than %d %s&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            fs-&amp;gt;f-&amp;gt;linedefined, limit, what);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lexerror&lt;/span&gt;(fs-&amp;gt;ls, msg, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;testnext&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; c) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;t.token == c) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 检查当前c是否为特定的token&amp;#39;Type */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;check&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; c) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;t.token != c)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;error_expected&lt;/span&gt;(ls, c);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;checknext&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; c) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;check&lt;/span&gt;(ls, c);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define check_condition(ls,c,msg)&#x9;{ if (!(c)) luaX_syntaxerror(ls, msg); }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 在where(line)这里，who(TK.1)需要一个what(TK.2)匹配&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** eg: function 需要一个end来结束函数定义&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;check_match&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; what, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; who, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; where) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;testnext&lt;/span&gt;(ls, what)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (where == ls-&amp;gt;linenumber)&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 当前行，那就不需要打印line信息了？ */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;error_expected&lt;/span&gt;(ls, what);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 输出连带line信息的错误信息 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_syntaxerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_pushfstring&lt;/span&gt;(ls-&amp;gt;L,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             LUA_QS &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34; expected (to close &amp;#34;&lt;/span&gt; LUA_QS &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34; at line %d)&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_token2str&lt;/span&gt;(ls, what), &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_token2str&lt;/span&gt;(ls, who), where));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 强制检查并当前token的type为TK_NAME，返回当前token，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 读取下一个token &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; TString *&lt;span style=&#34;color:#c34e00&#34;&gt;str_checkname&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TString *ts;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;check&lt;/span&gt;(ls, TK_NAME);&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 当前token&amp;#39;type必须是TK_NAME的类型 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ts = ls-&amp;gt;t.seminfo.ts;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 提取token的值 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 继续读下一个token */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ts;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*  KEYCODE: 关键函数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt; (expdesc *e, expkind k, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e-&amp;gt;f = e-&amp;gt;t = NO_JUMP;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ************************************exp对应的reg已定或是一个参数无需reg*********************************&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** VVOID, VKNUM, VNIL, VTRUE, VFALSE,   &#x9;i:0 值直接被包含在表达式expdesc中，无需寄存器&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** VK   &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;    i:常量表中的索引&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** VLOCAL&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;i:locvar占用的reg索引&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** VGLOBAL&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;    i:NO_REG-&amp;gt;全局变量名的NAME在常量表中的索引&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ***********************************需回填指令的RA?**********************************&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** VRELOCABLE&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;i:？对应指令OP在指令数组中的下标（方便回填指令中的RA？)？&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** VCALL, VVARARG&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;i:对应指令OP在指令数组中的下标（方便回填指令中的RA？)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** VNONRELOC&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;i:对应指令OP在指令数组的下标(方便回填指令中的RA?)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e-&amp;gt;k = k;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  e-&amp;gt;u.s.info = i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 用字符串(TK_NAME)s初始化expdesc的e表达式 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;codestring&lt;/span&gt; (LexState *ls, expdesc *e, TString *s) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(e, VK, &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_stringK&lt;/span&gt;(ls-&amp;gt;fs, s));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 先检查当前t的类型为NAME，后将其携带的string赋值给expdesc, 内部读取一次luaX_next() */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;checkname&lt;/span&gt;(LexState *ls, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;codestring&lt;/span&gt;(ls, e, &lt;span style=&#34;color:#c34e00&#34;&gt;str_checkname&lt;/span&gt;(ls));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 填充一个全新的 Locvar信息到 Proto.locvars (供调试用)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;registerlocalvar&lt;/span&gt; (LexState *ls, TString *varname) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Proto *f = fs-&amp;gt;f;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; oldsize = f-&amp;gt;sizelocvars;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 原来的总数组f-&amp;gt;sizelocvars空间不足则扩大 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_growvector&lt;/span&gt;(ls-&amp;gt;L, f-&amp;gt;locvars, fs-&amp;gt;nlocvars, f-&amp;gt;sizelocvars,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  LocVar, SHRT_MAX, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;too many local variables&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (oldsize &amp;lt; f-&amp;gt;sizelocvars)&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* locvars数组扩大则将新增的slot填NULL */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;f-&amp;gt;locvars[oldsize++].varname = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新locvar信息, startPC,endPC暂时还不确定 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;locvars[fs-&amp;gt;nlocvars].varname = varname; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* printf(&amp;#34;registerlocalvar: idx(%d), name(%p)\n&amp;#34;, fs-&amp;gt;nlocvars, varname); */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_objbarrier&lt;/span&gt;(ls-&amp;gt;L, f, varname);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; fs-&amp;gt;nlocvars++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 如果v是不变的string则此宏定义可以利用宏处理阶段提高程序速度 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define new_localvarliteral(ls,v,n) \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  new_localvar(ls, luaX_newstring(ls, &amp;#34;&amp;#34; v, (sizeof(v)/sizeof(char))-1), n)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* KEYCODE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 注册一个本地变量信息到 Proto.locvars ,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 填充变量名, startpc,endpc稍后再处理&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvar&lt;/span&gt; (LexState *ls, TString *name, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; n) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaY_checklimit&lt;/span&gt;(fs, fs-&amp;gt;nactvar+n+1, LUAI_MAXVARS, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;local variables&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 设置actvar 到 Proto.nlocvars 的映射 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里仅设置了变量的name, 尚未设置startpc,endpc */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;actvar[fs-&amp;gt;nactvar+n] = &lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;short&lt;/span&gt;, &lt;span style=&#34;color:#c34e00&#34;&gt;registerlocalvar&lt;/span&gt;(ls, name));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;//printf(&amp;#34;......... %d-&amp;gt;%d&amp;#34;, fs-&amp;gt;nactvar+n, fs-&amp;gt;actvar[fs-&amp;gt;nactvar+n]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 更新!!! FunState.nactvar 数量，更新 Proto.locvars.startpc &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 一次性生成多个locvar时，nvars可以告诉本函数方便一次性调整到位&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;adjustlocalvars&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nvars) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新fs中当前激活的locvar数量 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新fs中当前激活的locvar数量 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新fs中当前激活的locvar数量 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;nactvar = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_byte&lt;/span&gt;(fs-&amp;gt;nactvar + nvars);&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新localvar的startpc */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (; nvars; nvars--) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;getlocvar&lt;/span&gt;(fs, fs-&amp;gt;nactvar - nvars).startpc = fs-&amp;gt;pc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 对应的chunk结束时，再更新endpc信息，也只有那个时候才能确切的知道endpc */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 确定一批actvar的endpc &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 仔细看这个函数，很有意思哈（结合 new_localvar adjustlocalvars 一起看 ）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;removevars&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; tolevel) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (fs-&amp;gt;nactvar &amp;gt; tolevel)&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里tolevel是指block结束时对应的pc.idx */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;getlocvar&lt;/span&gt;(fs, --fs-&amp;gt;nactvar).endpc = fs-&amp;gt;pc;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 离开block时,关闭block内actvar */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 查找一个upvalue,返回其在upval数组中的索引，没有则构建 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;indexupvalue&lt;/span&gt; (FuncState *fs, TString *name, expdesc *v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Proto *f = fs-&amp;gt;f;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; oldsize = f-&amp;gt;sizeupvalues;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 当前存在的upvalue中已存在吗? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i=0; i&amp;lt;f-&amp;gt;nups; i++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (fs-&amp;gt;upvalues[i].k == v-&amp;gt;k &amp;amp;&amp;amp;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 类型为VUPVAL */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;fs-&amp;gt;upvalues[i].info == v-&amp;gt;u.s.info) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 在proto中的索引一致 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(f-&amp;gt;upvalues[i] == name);&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 名字就必须一致了 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* new one */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 数组容量不够则扩大 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaY_checklimit&lt;/span&gt;(fs, f-&amp;gt;nups + 1, LUAI_MAXUPVALUES, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;upvalues&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_growvector&lt;/span&gt;(fs-&amp;gt;L, f-&amp;gt;upvalues, f-&amp;gt;nups, f-&amp;gt;sizeupvalues,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  TString *, MAX_INT, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (oldsize &amp;lt; f-&amp;gt;sizeupvalues)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;f-&amp;gt;upvalues[oldsize++] = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;upvalues[f-&amp;gt;nups] = name;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_objbarrier&lt;/span&gt;(fs-&amp;gt;L, f, name);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(v-&amp;gt;k == VLOCAL || v-&amp;gt;k == VUPVAL);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里的v-&amp;gt;k==VLOCAL ? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新到fs */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;upvalues[f-&amp;gt;nups].k = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_byte&lt;/span&gt;(v-&amp;gt;k);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;upvalues[f-&amp;gt;nups].info = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_byte&lt;/span&gt;(v-&amp;gt;u.s.info);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; f-&amp;gt;nups++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 尝试在当前fs中匹配激活状态的locvar */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;searchvar&lt;/span&gt; (FuncState *fs, TString *n) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i=fs-&amp;gt;nactvar-1; i &amp;gt;= 0; i--) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (n == &lt;span style=&#34;color:#c34e00&#34;&gt;getlocvar&lt;/span&gt;(fs, i).varname)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; -1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* not found */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* fs中的locvar在其它函数中被当作upval引用&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 标记fs中对应的block，你有变量是其它fs的upval&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** level:actvar在reg数组中的索引&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;markupval&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; level) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BlockCnt *bl = fs-&amp;gt;bl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这个标记过程的逻辑蛮有意思的 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (bl &amp;amp;&amp;amp; bl-&amp;gt;nactvar &amp;gt; level)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;bl = bl-&amp;gt;previous;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (bl)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;bl-&amp;gt;upval = 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 查找变量名对应的表达式类型的值类型(VLOCAL还是?)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 仔细看这个函数的逻辑，搞明白关于变量的查找过程&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** step1:先在本地fs6激活中的locvar查找，找到则返回VLOCAL&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** step2:往前一个fs5中的激活中的locvar查找，找不到，继续下一步step3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** step3:继续往前一个fs1中的激活的locvar查找，一直到fs1-&amp;gt;pre为空，则&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**     可以确定var是一个VGLOBAL&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** step4:在某一个fs3中的激活中的locvar被找到，则标记此fs3中的bl表示你的某个var被其它fsX当作upval了&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**        往前退，在fs4中的upval中新增一条信息(此upval在父fs3中是VLOCAL,且在fs3的actvar中的索引是多少)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**        再往前退，在fs5中的upval中新增一条信息(此upval在父fs4中是UPVAL，且在fs4的upvalues的索引是多少)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**        再往前退，直到初始的fs6，在fs6中的upval中新增一条信息（此upval在父fs5中是UPVAL,且在fs5的upvalues的索引是多少)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 理论上可以优化下：在本地locvar找不到时，先不要在父fs中找，而是在本fs的upvales中找下&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;singlevaraux&lt;/span&gt; (FuncState *fs, TString *n, expdesc *var, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; base) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (fs == NULL) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no more levels? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* default is global variable, NO_REG:表示此全局变量尚未决定其寄存器的位置&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;** 全局变量对应的NAME在p中常量表的索引由singlevar()函数来处理&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  &#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(var, VGLOBAL, NO_REG);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; VGLOBAL;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 往外一层一层都找不到时，则认为它是全局变量 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 在激活的locvar中找到了，则是本地变量 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; v = &lt;span style=&#34;color:#c34e00&#34;&gt;searchvar&lt;/span&gt;(fs, n);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* look up at current level */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (v &amp;gt;= 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(var, VLOCAL, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!base)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;markupval&lt;/span&gt;(fs, v);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* local will be used as an upval */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; VLOCAL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* not found at current level; try upper one */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;singlevaraux&lt;/span&gt;(fs-&amp;gt;prev, n, var, 0) == VGLOBAL)&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 都没找到，则是全局变量 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; VGLOBAL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 父func中找到，在自己的fun中算upval */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      var-&amp;gt;u.s.info = &lt;span style=&#34;color:#c34e00&#34;&gt;indexupvalue&lt;/span&gt;(fs, n, var);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else was LOCAL or UPVAL */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      var-&amp;gt;k = VUPVAL;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* upvalue in this level */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; VUPVAL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** step1: 检查ls-&amp;gt;t.token的类型为TK_NAME，读取下一个TOKEN&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** step2: 根据上一个token的NAME，确定其变量(VLOCAL,VGLOBAL还是VUPVAL？)类型，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**            后填充expdesc.u.s.info信息&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;singlevar&lt;/span&gt; (LexState *ls, expdesc *var) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TString *varname = &lt;span style=&#34;color:#c34e00&#34;&gt;str_checkname&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** OP_GETGLOBAL A Bx R(A) := Gbl[Kst(Bx)]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** OP_SETGLOBAL A Bx Gbl[Kst(Bx)] := R(A)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 全局变量的指令需要知道表示全局变量的NAME在常量表中的idx，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **     理解这一点就明白了下面var-&amp;gt;u.s.info的赋值的意义&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;singlevaraux&lt;/span&gt;(fs, varname, var, 1) == VGLOBAL) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* VLOCVAR,VUPVAL在singlevaraux中已被init_exp初始化 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    var-&amp;gt;u.s.info = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_stringK&lt;/span&gt;(fs, varname);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* info points to global name */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 针对 nvars = nexps 赋值进行调整&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 如果右边少了则给左边赋NIL&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 如果右边有call,...则确定期待的返回值个数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** ！！！ 如果右边多了，本函数未处理！！！&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;adjust_assign&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nvars, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nexps, expdesc *e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* extra: 右边除掉fun和...外，表达式的数量少于左边的val的数量的情况下，缺失的数量? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; extra = nvars - nexps;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;hasmultret&lt;/span&gt;(e-&amp;gt;k)) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* exp的类型为VARARG或CALL */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    extra++;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* includes call itself：除开VARARG和CALL本身 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 如果右边exp多了，那就不用补偿左边了&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;** OP_VARARG A B R(A), R(A+1), ..., R(A+B-1) = vararg&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;** 看上面的指令的含义，猜测这里是在确定B的值&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (extra &amp;lt; 0) extra = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_setreturns&lt;/span&gt;(fs, e, extra);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* last exp. provides the difference */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (extra &amp;gt; 1) &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_reserveregs&lt;/span&gt;(fs, extra-1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e-&amp;gt;k != VVOID) &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2nextreg&lt;/span&gt;(fs, e);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* close last expression */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (extra &amp;gt; 0) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* nexps：包含右边最后一个exp */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; reg = fs-&amp;gt;freereg;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 为左边多出来的var申请reg,然后填NIL */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_reserveregs&lt;/span&gt;(fs, extra);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_nil&lt;/span&gt;(fs, reg, extra);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 进入一个新的block */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;enterlevel&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (++ls-&amp;gt;L-&amp;gt;nCcalls &amp;gt; LUAI_MAXCCALLS)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lexerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;chunk has too many syntax levels&amp;#34;&lt;/span&gt;, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define leavelevel(ls)&#x9;((ls)-&amp;gt;L-&amp;gt;nCcalls--)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 进入块时，初始化block信息 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;enterblock&lt;/span&gt; (FuncState *fs, BlockCnt *bl, lu_byte isbreakable) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bl-&amp;gt;breaklist = NO_JUMP;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bl-&amp;gt;isbreakable = isbreakable;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bl-&amp;gt;nactvar = fs-&amp;gt;nactvar;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bl-&amp;gt;upval = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里有个印象 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bl-&amp;gt;previous = fs-&amp;gt;bl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;bl = bl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(fs-&amp;gt;freereg == fs-&amp;gt;nactvar);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;leaveblock&lt;/span&gt; (FuncState *fs) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BlockCnt *bl = fs-&amp;gt;bl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;bl = bl-&amp;gt;previous;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 确定本block内激活的var的生存周期的endpc */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;removevars&lt;/span&gt;(fs-&amp;gt;ls, bl-&amp;gt;nactvar);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* OP_CLOSE A close all variables in the stack up to (&amp;gt;=) R(A) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (bl-&amp;gt;upval) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_CLOSE, bl-&amp;gt;nactvar, 0, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* a block either controls scope or breaks (never both) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(!bl-&amp;gt;isbreakable || !bl-&amp;gt;upval);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* TODOLOOK 还不是太理解 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(bl-&amp;gt;nactvar == fs-&amp;gt;nactvar);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这个必须保证 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;freereg = fs-&amp;gt;nactvar;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* free registers */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchtohere&lt;/span&gt;(fs, bl-&amp;gt;breaklist);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;pushclosure&lt;/span&gt; (LexState *ls, FuncState *func, expdesc *v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Proto *f = fs-&amp;gt;f;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; oldsize = f-&amp;gt;sizep;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_growvector&lt;/span&gt;(ls-&amp;gt;L, f-&amp;gt;p, fs-&amp;gt;np, f-&amp;gt;sizep, Proto *,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  MAXARG_Bx, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;constant table overflow&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (oldsize &amp;lt; f-&amp;gt;sizep) f-&amp;gt;p[oldsize++] = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;p[fs-&amp;gt;np++] = func-&amp;gt;f;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_objbarrier&lt;/span&gt;(ls-&amp;gt;L, f, func-&amp;gt;f);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(v, VRELOCABLE, &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABx&lt;/span&gt;(fs, OP_CLOSURE, 0, fs-&amp;gt;np-1));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i=0; i&amp;lt;func-&amp;gt;f-&amp;gt;nups; i++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    OpCode o = (func-&amp;gt;upvalues[i].k == VLOCAL) ? OP_MOVE : OP_GETUPVAL;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* TODOLOOK 这里不是明白 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, o, 0, func-&amp;gt;upvalues[i].info, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 开始编译函数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;open_func&lt;/span&gt; (LexState *ls, FuncState *fs) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lua_State *L = ls-&amp;gt;L;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;L = L;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Proto *f = &lt;span style=&#34;color:#c34e00&#34;&gt;luaF_newproto&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;ls = ls;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;f = f;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* funState 在编译哪个Proto */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ls指向最新的一个FuncState,这里可以猜测，只有先编译完了子函数才有可能编译父函数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;prev = ls-&amp;gt;fs;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* linked list of funcstates */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ls-&amp;gt;fs = fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;pc = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;lasttarget = -1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;jpc = NO_JUMP;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;freereg = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;nk = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;np = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;nlocvars = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;nactvar = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;bl = NULL;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里是NULL */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;source = ls-&amp;gt;source;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;maxstacksize = 2;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* registers 0/1 are always valid */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;h = &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_new&lt;/span&gt;(L, 0, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* anchor table of constants and prototype (to avoid being collected)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 常量和原型的锚表（避免被收集）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;sethvalue2s&lt;/span&gt;(L, L-&amp;gt;top, fs-&amp;gt;h);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;incr_top&lt;/span&gt;(L);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 放到堆栈上可避免被gc,如果编译失败stack回缩，则可自动被gc（没有被其它obj引用的话 ） */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setptvalue2s&lt;/span&gt;(L, L-&amp;gt;top, f);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;incr_top&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;close_func&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lua_State *L = ls-&amp;gt;L;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Proto *f = fs-&amp;gt;f;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 关闭还处于激活状态的actvar(设置endpc) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;removevars&lt;/span&gt;(ls, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 自动补一个 OP_RETURN 指令 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_ret&lt;/span&gt;(fs, 0, 0);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* final return */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 释放多余的mem */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_reallocvector&lt;/span&gt;(L, f-&amp;gt;code, f-&amp;gt;sizecode, fs-&amp;gt;pc, Instruction);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;sizecode = fs-&amp;gt;pc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_reallocvector&lt;/span&gt;(L, f-&amp;gt;lineinfo, f-&amp;gt;sizelineinfo, fs-&amp;gt;pc, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;sizelineinfo = fs-&amp;gt;pc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_reallocvector&lt;/span&gt;(L, f-&amp;gt;k, f-&amp;gt;sizek, fs-&amp;gt;nk, TValue);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;sizek = fs-&amp;gt;nk;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_reallocvector&lt;/span&gt;(L, f-&amp;gt;p, f-&amp;gt;sizep, fs-&amp;gt;np, Proto *);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;sizep = fs-&amp;gt;np;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_reallocvector&lt;/span&gt;(L, f-&amp;gt;locvars, f-&amp;gt;sizelocvars, fs-&amp;gt;nlocvars, LocVar);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;sizelocvars = fs-&amp;gt;nlocvars;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_reallocvector&lt;/span&gt;(L, f-&amp;gt;upvalues, f-&amp;gt;sizeupvalues, f-&amp;gt;nups, TString *);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;sizeupvalues = f-&amp;gt;nups;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaG_checkcode&lt;/span&gt;(f));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 检查生成的字节码是否有明显的问题 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(fs-&amp;gt;bl == NULL);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 本子函数编译完毕，切换到母函数中去 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ls-&amp;gt;fs = fs-&amp;gt;prev;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* last token read was anchored(锚定) in defunct function; must reanchor(锚) it */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (fs) &lt;span style=&#34;color:#c34e00&#34;&gt;anchor_token&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;top -= 2;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* remove table and prototype from the stack */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Proto *&lt;span style=&#34;color:#c34e00&#34;&gt;luaY_parser&lt;/span&gt; (lua_State *L, ZIO *z, Mbuffer *buff, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *name) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; LexState lexstate;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; FuncState funcstate;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* mainFunc */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lexstate.buff = buff;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 设置input信息，但，buff在上面就设置了，有点意思吧，z和buff对于lexState是有点不同的 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_setinput&lt;/span&gt;(L, &amp;amp;lexstate, z, &lt;span style=&#34;color:#c34e00&#34;&gt;luaS_new&lt;/span&gt;(L, name));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 一个lua文件，编译模块将其当做一个函数来看待&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 函数原型 function (...)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **          end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** BNF funcbody ::= `(´ [parlist] `)´ block end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;open_func&lt;/span&gt;(&amp;amp;lexstate, &amp;amp;funcstate);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  funcstate.f-&amp;gt;is_vararg = VARARG_ISVARARG;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* main func. is always vararg，哈哈知道lua文件一般开头的local modName=...的语法支撑了吧 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(&amp;amp;lexstate);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* read first token */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;chunk&lt;/span&gt;(&amp;amp;lexstate);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;check&lt;/span&gt;(&amp;amp;lexstate, TK_EOS);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 直到编译到文件EOF才结束编译流程 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;close_func&lt;/span&gt;(&amp;amp;lexstate);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(lexstate.fs == NULL);&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* lexstate下不应该还有未编译完的funState了 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(funcstate.prev == NULL);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 已编译完的主函数上面还有其它函数，不可能的嘛 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(funcstate.f-&amp;gt;nups == 0);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 编译结束，主函数不应该有nups了 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; funcstate.f;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*============================================================*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* GRAMMAR RULES */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*============================================================*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* A.B, A:B &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 对前缀生成必要的估值指令，放入free&amp;#39;reg(若有必要)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 用上述值作为A,再和B一起生成新的VINDEXED表达式&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;field&lt;/span&gt; (LexState *ls, expdesc *v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* field -&amp;gt; [&amp;#39;.&amp;#39; | &amp;#39;:&amp;#39;] NAME */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc key;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **将前缀(a.b.c中的a.b)加载到reg中&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **若前缀已在寄存器中则无需处理(A=VLOCAL(a))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2anyreg&lt;/span&gt;(fs, v);&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls); &#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip the dot or colon */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;checkname&lt;/span&gt;(ls, &amp;amp;key);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 读取NAME这个域的常量exp并返回给key */&lt;/span&gt;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 生成新的VINDEXED表达式（求值指令，指令的目标寄存器尚未处理） */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_indexed&lt;/span&gt;(fs, v, &amp;amp;key);&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;yindex&lt;/span&gt; (LexState *ls, expdesc *v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* index -&amp;gt; &amp;#39;[&amp;#39; expr &amp;#39;]&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip the &amp;#39;[&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;expr&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2val&lt;/span&gt;(ls-&amp;gt;fs, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;checknext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;]&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** {======================================================================&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Rules for Constructors&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** =======================================================================&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 构造表   tbl {a, b, c=val, d.e} */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; ConsControl {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc *t;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* table descriptor 指代本表的expdesc */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc v;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* last list item read: 指代正在分析到的哪一个元素eg(b),对于c=val用不上v */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nh;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* total number of `record&amp;#39; elements */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; na;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* total number of array elements */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; tostore;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* number of array elements pending to be stored */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 形如 local tbl = { x = y, [a] = b,}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 中的x=1,这种指定tbl[k]=v的表达式&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;recfield&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; ConsControl *cc) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* recfield -&amp;gt; (NAME | `[&amp;#39;exp1`]&amp;#39;) = exp1 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; reg = ls-&amp;gt;fs-&amp;gt;freereg;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc key, val;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; rkkey;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 对key生成加载指令 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;t.token == TK_NAME) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaY_checklimit&lt;/span&gt;(fs, cc-&amp;gt;nh, MAX_INT, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;items in a constructor&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;checkname&lt;/span&gt;(ls, &amp;amp;key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ls-&amp;gt;t.token == &amp;#39;[&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;yindex&lt;/span&gt;(ls, &amp;amp;key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cc-&amp;gt;nh++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;checknext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 回填上述k的加载指令,将表达式的值SET到next&amp;#39;free&amp;#39;reg上 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rkkey = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2RK&lt;/span&gt;(fs, &amp;amp;key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 初始化表达式val */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;expr&lt;/span&gt;(ls, &amp;amp;val);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 先生成对val的LOAD_XXX加载指令，后生成OP_SETTABLE */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_SETTABLE, cc-&amp;gt;t-&amp;gt;u.s.info, rkkey, &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2RK&lt;/span&gt;(fs, &amp;amp;val));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;freereg = reg;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* free registers 释放表达式占用的临时寄存器 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* local tbl = {a,b,c,d}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 解析完毕b,关闭对b的解析&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;closelistfield&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; ConsControl *cc) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (cc-&amp;gt;v.k == VVOID) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* there is no list item */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2nextreg&lt;/span&gt;(fs, &amp;amp;cc-&amp;gt;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cc-&amp;gt;v.k = VVOID;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 释放表达式 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (cc-&amp;gt;tostore == LFIELDS_PER_FLUSH) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_setlist&lt;/span&gt;(fs, cc-&amp;gt;t-&amp;gt;u.s.info, cc-&amp;gt;na, cc-&amp;gt;tostore);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* flush */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cc-&amp;gt;tostore = 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no more items pending */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* local tbl = {a, b, c, d}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 结束d的解析后，调到这里 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 逻辑独立出来是因为函数调用作为表的最后一个元素和非最后一个元素，其期望对其返回值的个数是不一样的&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;lastlistfield&lt;/span&gt; (FuncState *fs, &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; ConsControl *cc) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (cc-&amp;gt;tostore == 0) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;hasmultret&lt;/span&gt;(cc-&amp;gt;v.k)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_setmultret&lt;/span&gt;(fs, &amp;amp;cc-&amp;gt;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_setlist&lt;/span&gt;(fs, cc-&amp;gt;t-&amp;gt;u.s.info, cc-&amp;gt;na, LUA_MULTRET);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cc-&amp;gt;na--;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* do not count last expression (unknown number of elements) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (cc-&amp;gt;v.k != VVOID)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2nextreg&lt;/span&gt;(fs, &amp;amp;cc-&amp;gt;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_setlist&lt;/span&gt;(fs, cc-&amp;gt;t-&amp;gt;u.s.info, cc-&amp;gt;na, cc-&amp;gt;tostore);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* tbl = {a,b, c = 100} 数组中单个field eg:a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;listfield&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; ConsControl *cc) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;expr&lt;/span&gt;(ls, &amp;amp;cc-&amp;gt;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaY_checklimit&lt;/span&gt;(ls-&amp;gt;fs, cc-&amp;gt;na, MAX_INT, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;items in a constructor&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cc-&amp;gt;na++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cc-&amp;gt;tostore++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;constructor&lt;/span&gt; (LexState *ls, expdesc *t) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* constructor -&amp;gt; ?? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line = ls-&amp;gt;linenumber;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; pc = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_NEWTABLE, 0, 0, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; ConsControl cc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cc.na = cc.nh = cc.tostore = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cc.t = t;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 初始化table的exp */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(t, VRELOCABLE, pc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(&amp;amp;cc.v, VVOID, 0);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no value (yet) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2nextreg&lt;/span&gt;(ls-&amp;gt;fs, t);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* fix it at stack top (for gc) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;checknext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(cc.v.k == VVOID || cc.tostore &amp;gt; 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;t.token == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 表被遍历完毕 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;closelistfield&lt;/span&gt;(fs, &amp;amp;cc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt;(ls-&amp;gt;t.token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_NAME: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* may be listfields or recfields */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lookahead&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;lookahead.token != &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* expression? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;listfield&lt;/span&gt;(ls, &amp;amp;cc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;recfield&lt;/span&gt;(ls, &amp;amp;cc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt;: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* constructor_item -&amp;gt; recfield */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;recfield&lt;/span&gt;(ls, &amp;amp;cc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* constructor_part -&amp;gt; listfield */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;listfield&lt;/span&gt;(ls, &amp;amp;cc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;testnext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;) || &lt;span style=&#34;color:#c34e00&#34;&gt;testnext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;check_match&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lastlistfield&lt;/span&gt;(fs, &amp;amp;cc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;SETARG_B&lt;/span&gt;(fs-&amp;gt;f-&amp;gt;code[pc], &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_int2fb&lt;/span&gt;(cc.na)); &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* set initial array size */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;SETARG_C&lt;/span&gt;(fs-&amp;gt;f-&amp;gt;code[pc], &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_int2fb&lt;/span&gt;(cc.nh));  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* set initial table size */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* }====================================================================== */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 解析函数的显式形参列表（对于modName:sub(x,y) 这种隐含的第一个self参数，在外面已被解析完毕&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;parlist&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* parlist -&amp;gt; [ param { `,&amp;#39; param } ] */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Proto *f = fs-&amp;gt;f;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nparams = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;is_vararg = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;t.token != &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* is `parlist&amp;#39; not empty? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (ls-&amp;gt;t.token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_NAME: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* param -&amp;gt; NAME */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvar&lt;/span&gt;(ls, &lt;span style=&#34;color:#c34e00&#34;&gt;str_checkname&lt;/span&gt;(ls), nparams++);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* adjustlocalvars 在下面调用：一次性调整到位 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_DOTS: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* param -&amp;gt; `...&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#if defined(LUA_COMPAT_VARARG)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;          &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* use `arg&amp;#39; as default name */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvarliteral&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;arg&amp;#34;&lt;/span&gt;, nparams++);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          f-&amp;gt;is_vararg = VARARG_HASARG | VARARG_NEEDSARG;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;          f-&amp;gt;is_vararg |= VARARG_ISVARARG;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_syntaxerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&amp;lt;name&amp;gt; or &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;LUA_QL&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34; expected&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (!f-&amp;gt;is_vararg &amp;amp;&amp;amp; &lt;span style=&#34;color:#c34e00&#34;&gt;testnext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里看得出来 ... 只能是最后一个形参 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;// function name() body end 显式形参为空&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;adjustlocalvars&lt;/span&gt;(ls, nparams);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  f-&amp;gt;numparams = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_byte&lt;/span&gt;(fs-&amp;gt;nactvar - (f-&amp;gt;is_vararg &amp;amp; VARARG_HASARG));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_reserveregs&lt;/span&gt;(fs, fs-&amp;gt;nactvar);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* reserve register for parameters */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 解析函数形参和函数体 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;body&lt;/span&gt; (LexState *ls, expdesc *e, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; needself, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* body -&amp;gt;  `(&amp;#39; parlist `)&amp;#39; chunk END */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState new_fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新ls中的fs变量，完成编译对象的切换 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;open_func&lt;/span&gt;(ls, &amp;amp;new_fs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 新函数从哪一方开始定义 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  new_fs.f-&amp;gt;linedefined = line;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* local name = function () 或者 local function name() 这两种函数定义格式对应的函数都是从‘(’开始，*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;checknext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里看得出来self将是本fs的第一个locvar，占用一个正常的locvar&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** Proto.numparams 中也包含self&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (needself) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 处理 function modName:sub() body end 这种情况，参考funcname()代码可知 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvarliteral&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;self&amp;#34;&lt;/span&gt;, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;adjustlocalvars&lt;/span&gt;(ls, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 解析显式形参 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;parlist&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;checknext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;chunk&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 函数定义结束于哪一行 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  new_fs.f-&amp;gt;lastlinedefined = ls-&amp;gt;linenumber;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;check_match&lt;/span&gt;(ls, TK_END, TK_FUNCTION, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;close_func&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;pushclosure&lt;/span&gt;(ls, &amp;amp;new_fs, e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 解析表达式，返回表达式中的项的数量 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;explist1&lt;/span&gt; (LexState *ls, expdesc *v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* explist1 -&amp;gt; expr { `,&amp;#39; expr } */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; n = 1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* at least one expression */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;expr&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;testnext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2nextreg&lt;/span&gt;(ls-&amp;gt;fs, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;expr&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    n++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; n;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* funcargs -&amp;gt; `(&amp;#39; [ explist1 ] `)&amp;#39; | constructor | STRING */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;funcargs&lt;/span&gt; (LexState *ls, expdesc *f) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc args;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; base, nparams;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line = ls-&amp;gt;linenumber;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (ls-&amp;gt;t.token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* funcargs -&amp;gt; `(&amp;#39; [ explist1 ] `)&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (line != ls-&amp;gt;lastline)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_syntaxerror&lt;/span&gt;(ls,&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;ambiguous syntax (function call x new statement)&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;t.token == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* arg list is empty? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        args.k = VVOID;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;explist1&lt;/span&gt;(ls, &amp;amp;args);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_setmultret&lt;/span&gt;(fs, &amp;amp;args);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;check_match&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* funcargs -&amp;gt; constructor */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;constructor&lt;/span&gt;(ls, &amp;amp;args);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_STRING: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* funcargs -&amp;gt; STRING */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;codestring&lt;/span&gt;(ls, &amp;amp;args, ls-&amp;gt;t.seminfo.ts);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* must use `seminfo&amp;#39; before `next&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_syntaxerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;function arguments expected&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(f-&amp;gt;k == VNONRELOC);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  base = f-&amp;gt;u.s.info;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* base register for call */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;hasmultret&lt;/span&gt;(args.k))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nparams = LUA_MULTRET;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* open call */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (args.k != VVOID)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2nextreg&lt;/span&gt;(fs, &amp;amp;args);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* close last argument */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nparams = fs-&amp;gt;freereg - (base+1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(f, VCALL, &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_CALL, base, nparams+1, 2));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_fixline&lt;/span&gt;(fs, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fs-&amp;gt;freereg = base+1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* call remove function and arguments and leaves&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;                            (unless changed) one result */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** {======================================================================&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Expression parsing&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** =======================================================================&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;prefixexp&lt;/span&gt; (LexState *ls, expdesc *v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* prefixexp -&amp;gt; NAME | &amp;#39;(&amp;#39; expr &amp;#39;)&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (ls-&amp;gt;t.token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line = ls-&amp;gt;linenumber;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;expr&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;check_match&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_dischargevars&lt;/span&gt;(ls-&amp;gt;fs, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_NAME: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 确定当前ls-&amp;gt;t.token的变量类型(VLOCAL,VGLOBAL还是VUPVAL？)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      **     填充expdesc.u.s.info信息&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      ** 读取下一个Token&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;singlevar&lt;/span&gt;(ls, v); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_syntaxerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;unexpected symbol&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* primary：基本的 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;primaryexp&lt;/span&gt; (LexState *ls, expdesc *v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* primaryexp -&amp;gt; prefixexp { `.&amp;#39; NAME | `[&amp;#39; exp `]&amp;#39; | `:&amp;#39; NAME funcargs | funcargs } */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;prefixexp&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (;;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (ls-&amp;gt;t.token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* field */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;field&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt;: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `[&amp;#39; exp1 `]&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        expdesc key;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2anyreg&lt;/span&gt;(fs, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;yindex&lt;/span&gt;(ls, &amp;amp;key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_indexed&lt;/span&gt;(fs, v, &amp;amp;key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `:&amp;#39; NAME funcargs */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        expdesc key;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;checkname&lt;/span&gt;(ls, &amp;amp;key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_self&lt;/span&gt;(fs, v, &amp;amp;key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;funcargs&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_STRING: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* funcargs 函数调用 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2nextreg&lt;/span&gt;(fs, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;funcargs&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 对表达式进行初始化，间接表达式则生成求src.val的指令, 等待回填dst.reg */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;simpleexp&lt;/span&gt; (LexState *ls, expdesc *v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* simpleexp -&amp;gt; NUMBER | STRING | NIL | true | false | ... |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;                  constructor | FUNCTION body | primaryexp */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (ls-&amp;gt;t.token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_NUMBER: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(v, VKNUM, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      v-&amp;gt;u.nval = ls-&amp;gt;t.seminfo.r;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 直接赋值NUMBER */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_STRING: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;codestring&lt;/span&gt;(ls, v, ls-&amp;gt;t.seminfo.ts);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_NIL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(v, VNIL, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_TRUE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(v, VTRUE, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_FALSE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(v, VFALSE, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_DOTS: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* vararg */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;check_condition&lt;/span&gt;(ls, fs-&amp;gt;f-&amp;gt;is_vararg,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;cannot use &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;LUA_QL&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34; outside a vararg function&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      fs-&amp;gt;f-&amp;gt;is_vararg &amp;amp;= ~VARARG_NEEDSARG;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* don&amp;#39;t need &amp;#39;arg&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(v, VVARARG, &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_VARARG, 0, 1, 0));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* constructor */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;constructor&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_FUNCTION: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;body&lt;/span&gt;(ls, v, 0, ls-&amp;gt;linenumber);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;primaryexp&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 返回TK可能的一元操作符TK */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; UnOpr &lt;span style=&#34;color:#c34e00&#34;&gt;getunopr&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; op) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (op) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_NOT: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_NOT;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_MINUS;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_LEN;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_NOUNOPR;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; BinOpr &lt;span style=&#34;color:#c34e00&#34;&gt;getbinopr&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; op) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (op) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_ADD;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_SUB;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_MUL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_DIV;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;%&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_MOD;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;^&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_POW;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_CONCAT: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_CONCAT;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_NE: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_NE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_EQ: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_EQ;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_LT;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_LE: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_LE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_GT;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_GE: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_GE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_AND: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_AND;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_OR: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_OR;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; OPR_NOBINOPR;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 操作符的优先级分左右：用于处理结合性？ */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lu_byte left;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* left priority for each binary operator */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lu_byte right; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* right priority */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} priority[] = {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ORDER OPR */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   {6, 6}, {6, 6}, {7, 7}, {7, 7}, {7, 7},  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `+&amp;#39; `-&amp;#39; `/&amp;#39; `%&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   {10, 9}, {5, 4},                 &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* power and concat (right associative) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   {3, 3}, {3, 3},                  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* equality and inequality */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   {3, 3}, {3, 3}, {3, 3}, {3, 3},  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* order */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   {2, 2}, {1, 1}                   &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* logical (and/or) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define UNARY_PRIORITY&#x9;8  &lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* priority for unary operators,一元操作符的优先级？ */&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** subexpr -&amp;gt; (simpleexp | unop subexpr) { binop subexpr }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** where `binop&amp;#39; is any binary operator with a priority higher than `limit&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 操作符表达式&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; BinOpr &lt;span style=&#34;color:#c34e00&#34;&gt;subexpr&lt;/span&gt; (LexState *ls, expdesc *v, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; limit) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BinOpr op;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UnOpr uop;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;enterlevel&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  uop = &lt;span style=&#34;color:#c34e00&#34;&gt;getunopr&lt;/span&gt;(ls-&amp;gt;t.token);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (uop != OPR_NOUNOPR) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;subexpr&lt;/span&gt;(ls, v, UNARY_PRIORITY);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_prefix&lt;/span&gt;(ls-&amp;gt;fs, uop, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;simpleexp&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* expand while operators have priorities higher than `limit&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  op = &lt;span style=&#34;color:#c34e00&#34;&gt;getbinopr&lt;/span&gt;(ls-&amp;gt;t.token);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (op != OPR_NOBINOPR &amp;amp;&amp;amp; priority[op].left &amp;gt; limit) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    expdesc v2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BinOpr nextop;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_infix&lt;/span&gt;(ls-&amp;gt;fs, op, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* read sub-expression with higher priority */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nextop = &lt;span style=&#34;color:#c34e00&#34;&gt;subexpr&lt;/span&gt;(ls, &amp;amp;v2, priority[op].right);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_posfix&lt;/span&gt;(ls-&amp;gt;fs, op, v, &amp;amp;v2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    op = nextop;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;leavelevel&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; op;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* return first untreated operator */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;expr&lt;/span&gt; (LexState *ls, expdesc *v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;subexpr&lt;/span&gt;(ls, v, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* }==================================================================== */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** {======================================================================&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Rules for Statements&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** =======================================================================&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* repeat&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**   statements&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** until( condition )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;block_follow&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (token) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* END和EOS还没理解 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_ELSE: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_ELSEIF: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_END:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_UNTIL: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_EOS:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;block&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* block -&amp;gt; chunk */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BlockCnt bl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;enterblock&lt;/span&gt;(fs, &amp;amp;bl, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;chunk&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(bl.breaklist == NO_JUMP);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;leaveblock&lt;/span&gt;(fs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** structure to chain all variables in the left-hand side of an&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** assignment&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; LHS_assign {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; LHS_assign *prev;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc v;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* variable (global, local, upvalue, or indexed) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** check whether, in an assignment to a local variable, the local variable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** is needed in a previous assignment (to a table). If so, save original&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** local value in a safe place and use this safe copy in the previous&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** assignment.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;check_conflict&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; LHS_assign *lh, expdesc *v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; extra = fs-&amp;gt;freereg;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* eventual position to save local variable */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; conflict = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (; lh; lh = lh-&amp;gt;prev) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (lh-&amp;gt;v.k == VINDEXED) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (lh-&amp;gt;v.u.s.info == v-&amp;gt;u.s.info) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* conflict? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        conflict = 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        lh-&amp;gt;v.u.s.info = extra;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* previous assignment will use safe copy */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (lh-&amp;gt;v.u.s.aux == v-&amp;gt;u.s.info) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* conflict? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        conflict = 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        lh-&amp;gt;v.u.s.aux = extra;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* previous assignment will use safe copy */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (conflict) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_MOVE, fs-&amp;gt;freereg, v-&amp;gt;u.s.info, 0);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* make copy */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_reserveregs&lt;/span&gt;(fs, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;assignment&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; LHS_assign *lh, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nvars) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc e;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;check_condition&lt;/span&gt;(ls, VLOCAL &amp;lt;= lh-&amp;gt;v.k &amp;amp;&amp;amp; lh-&amp;gt;v.k &amp;lt;= VINDEXED,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;syntax error&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;testnext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* assignment -&amp;gt; `,&amp;#39; primaryexp assignment */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; LHS_assign nv;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nv.prev = lh;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;primaryexp&lt;/span&gt;(ls, &amp;amp;nv.v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (nv.v.k == VLOCAL)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;check_conflict&lt;/span&gt;(ls, lh, &amp;amp;nv.v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaY_checklimit&lt;/span&gt;(ls-&amp;gt;fs, nvars, LUAI_MAXCCALLS - ls-&amp;gt;L-&amp;gt;nCcalls,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;variables in assignment&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;assignment&lt;/span&gt;(ls, &amp;amp;nv, nvars+1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* assignment -&amp;gt; `=&amp;#39; explist1 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nexps;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;checknext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nexps = &lt;span style=&#34;color:#c34e00&#34;&gt;explist1&lt;/span&gt;(ls, &amp;amp;e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (nexps != nvars) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;adjust_assign&lt;/span&gt;(ls, nvars, nexps, &amp;amp;e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (nexps &amp;gt; nvars)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ls-&amp;gt;fs-&amp;gt;freereg -= nexps - nvars;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* remove extra values */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_setoneret&lt;/span&gt;(ls-&amp;gt;fs, &amp;amp;e);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* close last expression */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_storevar&lt;/span&gt;(ls-&amp;gt;fs, &amp;amp;lh-&amp;gt;v, &amp;amp;e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* avoid default */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(&amp;amp;e, VNONRELOC, ls-&amp;gt;fs-&amp;gt;freereg-1);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* default assignment */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_storevar&lt;/span&gt;(ls-&amp;gt;fs, &amp;amp;lh-&amp;gt;v, &amp;amp;e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;cond&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* cond -&amp;gt; exp */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc v;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;expr&lt;/span&gt;(ls, &amp;amp;v);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* read condition */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (v.k == VNIL) v.k = VFALSE;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `falses&amp;#39; are all equal here */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_goiftrue&lt;/span&gt;(ls-&amp;gt;fs, &amp;amp;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; v.f;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;breakstat&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BlockCnt *bl = fs-&amp;gt;bl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; upval = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (bl &amp;amp;&amp;amp; !bl-&amp;gt;isbreakable) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    upval |= bl-&amp;gt;upval;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bl = bl-&amp;gt;previous;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!bl)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_syntaxerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;no loop to break&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (upval)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_CLOSE, bl-&amp;gt;nactvar, 0, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_concat&lt;/span&gt;(fs, &amp;amp;bl-&amp;gt;breaklist, &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_jump&lt;/span&gt;(fs));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;whilestat&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* whilestat -&amp;gt; WHILE cond DO block END */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; whileinit;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; condexit;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BlockCnt bl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip WHILE */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  whileinit = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_getlabel&lt;/span&gt;(fs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  condexit = &lt;span style=&#34;color:#c34e00&#34;&gt;cond&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;enterblock&lt;/span&gt;(fs, &amp;amp;bl, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;checknext&lt;/span&gt;(ls, TK_DO);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;block&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchlist&lt;/span&gt;(fs, &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_jump&lt;/span&gt;(fs), whileinit);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;check_match&lt;/span&gt;(ls, TK_END, TK_WHILE, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;leaveblock&lt;/span&gt;(fs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchtohere&lt;/span&gt;(fs, condexit);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* false conditions finish the loop */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;repeatstat&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* repeatstat -&amp;gt; REPEAT block UNTIL cond */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; condexit;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; repeat_init = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_getlabel&lt;/span&gt;(fs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BlockCnt bl1, bl2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;enterblock&lt;/span&gt;(fs, &amp;amp;bl1, 1);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* loop block */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;enterblock&lt;/span&gt;(fs, &amp;amp;bl2, 0);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* scope block */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip REPEAT */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;chunk&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;check_match&lt;/span&gt;(ls, TK_UNTIL, TK_REPEAT, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  condexit = &lt;span style=&#34;color:#c34e00&#34;&gt;cond&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* read condition (inside scope block) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!bl2.upval) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no upvalues? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;leaveblock&lt;/span&gt;(fs);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* finish scope */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchlist&lt;/span&gt;(ls-&amp;gt;fs, condexit, repeat_init);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* close the loop */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* complete semantics when there are upvalues */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;breakstat&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* if condition then break */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchtohere&lt;/span&gt;(ls-&amp;gt;fs, condexit);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else... */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;leaveblock&lt;/span&gt;(fs);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* finish scope... */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchlist&lt;/span&gt;(ls-&amp;gt;fs, &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_jump&lt;/span&gt;(fs), repeat_init);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* and repeat */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;leaveblock&lt;/span&gt;(fs);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* finish loop */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;exp1&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc e;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; k;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;expr&lt;/span&gt;(ls, &amp;amp;e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  k = e.k;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2nextreg&lt;/span&gt;(ls-&amp;gt;fs, &amp;amp;e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; k;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;forbody&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; base, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nvars, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; isnum) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* forbody -&amp;gt; DO block */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BlockCnt bl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; prep, endfor;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;adjustlocalvars&lt;/span&gt;(ls, 3);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* control variables */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;checknext&lt;/span&gt;(ls, TK_DO);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  prep = isnum ? &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeAsBx&lt;/span&gt;(fs, OP_FORPREP, base, NO_JUMP) : &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_jump&lt;/span&gt;(fs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;enterblock&lt;/span&gt;(fs, &amp;amp;bl, 0);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* scope for declared variables */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;adjustlocalvars&lt;/span&gt;(ls, nvars);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_reserveregs&lt;/span&gt;(fs, nvars);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;block&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;leaveblock&lt;/span&gt;(fs);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* end of scope for declared variables */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchtohere&lt;/span&gt;(fs, prep);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  endfor = (isnum) ? &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeAsBx&lt;/span&gt;(fs, OP_FORLOOP, base, NO_JUMP) :&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABC&lt;/span&gt;(fs, OP_TFORLOOP, base, 0, nvars);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_fixline&lt;/span&gt;(fs, line);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* pretend that `OP_FOR&amp;#39; starts the loop */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchlist&lt;/span&gt;(fs, (isnum ? endfor : &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_jump&lt;/span&gt;(fs)), prep + 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fornum&lt;/span&gt; (LexState *ls, TString *varname, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* fornum -&amp;gt; NAME = exp1,exp1[,exp1] forbody */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; base = fs-&amp;gt;freereg;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvarliteral&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;(for index)&amp;#34;&lt;/span&gt;, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvarliteral&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;(for limit)&amp;#34;&lt;/span&gt;, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvarliteral&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;(for step)&amp;#34;&lt;/span&gt;, 2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvar&lt;/span&gt;(ls, varname, 3);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;checknext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;exp1&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* initial value */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;checknext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;exp1&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* limit */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;testnext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;exp1&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* optional step */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* default step = 1 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_codeABx&lt;/span&gt;(fs, OP_LOADK, fs-&amp;gt;freereg, &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_numberK&lt;/span&gt;(fs, 1));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_reserveregs&lt;/span&gt;(fs, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;forbody&lt;/span&gt;(ls, base, line, 1, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;forlist&lt;/span&gt; (LexState *ls, TString *indexname) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* forlist -&amp;gt; NAME {,NAME} IN explist1 forbody */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc e;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nvars = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; base = fs-&amp;gt;freereg;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* create control variables */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvarliteral&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;(for generator)&amp;#34;&lt;/span&gt;, nvars++);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvarliteral&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;(for state)&amp;#34;&lt;/span&gt;, nvars++);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvarliteral&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;(for control)&amp;#34;&lt;/span&gt;, nvars++);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* create declared variables */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvar&lt;/span&gt;(ls, indexname, nvars++);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;testnext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvar&lt;/span&gt;(ls, &lt;span style=&#34;color:#c34e00&#34;&gt;str_checkname&lt;/span&gt;(ls), nvars++);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;checknext&lt;/span&gt;(ls, TK_IN);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  line = ls-&amp;gt;linenumber;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;adjust_assign&lt;/span&gt;(ls, 3, &lt;span style=&#34;color:#c34e00&#34;&gt;explist1&lt;/span&gt;(ls, &amp;amp;e), &amp;amp;e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_checkstack&lt;/span&gt;(fs, 3);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* extra space to call generator */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;forbody&lt;/span&gt;(ls, base, line, nvars - 3, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;forstat&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* forstat -&amp;gt; FOR (fornum | forlist) END */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TString *varname;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BlockCnt bl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;enterblock&lt;/span&gt;(fs, &amp;amp;bl, 1);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* scope for loop and control variables */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip `for&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  varname = &lt;span style=&#34;color:#c34e00&#34;&gt;str_checkname&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* first variable name */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (ls-&amp;gt;t.token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#c34e00&#34;&gt;fornum&lt;/span&gt;(ls, varname, line); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_IN: &lt;span style=&#34;color:#c34e00&#34;&gt;forlist&lt;/span&gt;(ls, varname); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_syntaxerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#c34e00&#34;&gt;LUA_QL&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34; or &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;LUA_QL&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34; expected&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;check_match&lt;/span&gt;(ls, TK_END, TK_FOR, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;leaveblock&lt;/span&gt;(fs);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* loop scope (`break&amp;#39; jumps to this point) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;test_then_block&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* test_then_block -&amp;gt; [IF | ELSEIF] cond THEN block */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; condexit;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip IF or ELSEIF */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  condexit = &lt;span style=&#34;color:#c34e00&#34;&gt;cond&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;checknext&lt;/span&gt;(ls, TK_THEN);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;block&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `then&amp;#39; part */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; condexit;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;ifstat&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ifstat -&amp;gt; IF cond THEN block {ELSEIF cond THEN block} [ELSE block] END */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; flist;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* false&amp;#39;list */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; escapelist = NO_JUMP;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 块结束的addr */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  flist = &lt;span style=&#34;color:#c34e00&#34;&gt;test_then_block&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* IF cond THEN block */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (ls-&amp;gt;t.token == TK_ELSEIF) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_concat&lt;/span&gt;(fs, &amp;amp;escapelist, &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_jump&lt;/span&gt;(fs));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchtohere&lt;/span&gt;(fs, flist);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flist = &lt;span style=&#34;color:#c34e00&#34;&gt;test_then_block&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ELSEIF cond THEN block */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;t.token == TK_ELSE) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_concat&lt;/span&gt;(fs, &amp;amp;escapelist, &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_jump&lt;/span&gt;(fs));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchtohere&lt;/span&gt;(fs, flist);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip ELSE (after patch, for correct line info) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;block&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `else&amp;#39; part */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_concat&lt;/span&gt;(fs, &amp;amp;escapelist, flist);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_patchtohere&lt;/span&gt;(fs, escapelist);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;check_match&lt;/span&gt;(ls, TK_END, TK_IF, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;localfunc&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc v, b;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* local function funA(...) end &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 注册locvar(函数名)到Proto.nlocvars,填充name信息，建立fs-&amp;gt;actvar[fs-&amp;gt;nactvars]到p.nlocvars的映射&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvar&lt;/span&gt;(ls, &lt;span style=&#34;color:#c34e00&#34;&gt;str_checkname&lt;/span&gt;(ls), 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 给表达式填个初值先 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;init_exp&lt;/span&gt;(&amp;amp;v, VLOCAL, fs-&amp;gt;freereg);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 上面新增了一个locvar,用掉了一个freereg，这里扩大点maxstacksize, 更新freereg */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_reserveregs&lt;/span&gt;(fs, 1);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* reserve reg:准备寄存器 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新fs-&amp;gt;nactvar, 填充上面新增的p.nlocvars变量的startpc */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;adjustlocalvars&lt;/span&gt;(ls, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;body&lt;/span&gt;(ls, &amp;amp;b, 0, ls-&amp;gt;linenumber);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_storevar&lt;/span&gt;(fs, &amp;amp;v, &amp;amp;b);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* debug information will only see the variable after this point! */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;getlocvar&lt;/span&gt;(fs, fs-&amp;gt;nactvar - 1).startpc = fs-&amp;gt;pc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;localstat&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; LOCAL NAME {`,&amp;#39; NAME} [`=&amp;#39; explist1] */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nvars = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nexps;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc e;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 登记左边的变量名到 Proto.locvars */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;new_localvar&lt;/span&gt;(ls, &lt;span style=&#34;color:#c34e00&#34;&gt;str_checkname&lt;/span&gt;(ls), nvars++);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;testnext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;testnext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nexps = &lt;span style=&#34;color:#c34e00&#34;&gt;explist1&lt;/span&gt;(ls, &amp;amp;e);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 解析表达式 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    e.k = VVOID;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nexps = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;adjust_assign&lt;/span&gt;(ls, nvars, nexps, &amp;amp;e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;adjustlocalvars&lt;/span&gt;(ls, nvars);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;funcname&lt;/span&gt; (LexState *ls, expdesc *v) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* funcname -&amp;gt; NAME {field} [`:&amp;#39; NAME] */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; needself = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;singlevar&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (ls-&amp;gt;t.token == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;field&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;t.token == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    needself = 1;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 需要给函数添加一个self参数 eg:           function modName:sub () body end */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;field&lt;/span&gt;(ls, v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; needself;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;funcstat&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* funcstat -&amp;gt; FUNCTION funcname body */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; needself;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc v, b;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip FUNCTION */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  needself = &lt;span style=&#34;color:#c34e00&#34;&gt;funcname&lt;/span&gt;(ls, &amp;amp;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;body&lt;/span&gt;(ls, &amp;amp;b, needself, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_storevar&lt;/span&gt;(ls-&amp;gt;fs, &amp;amp;v, &amp;amp;b);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_fixline&lt;/span&gt;(ls-&amp;gt;fs, line);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* definition `happens&amp;#39; in the first line */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 处理表达式stat */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;exprstat&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; func | assignment */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; LHS_assign v;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;primaryexp&lt;/span&gt;(ls, &amp;amp;v.v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (v.v.k == VCALL)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; func */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;SETARG_C&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getcode&lt;/span&gt;(fs, &amp;amp;v.v), 1);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* call statement uses no results */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; assignment */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    v.prev = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;assignment&lt;/span&gt;(ls, &amp;amp;v, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;retstat&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; RETURN explist */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FuncState *fs = ls-&amp;gt;fs;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expdesc e;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; first, nret;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* registers with returned values */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip RETURN */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;block_follow&lt;/span&gt;(ls-&amp;gt;t.token) || ls-&amp;gt;t.token == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    first = nret = 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* return no values */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nret = &lt;span style=&#34;color:#c34e00&#34;&gt;explist1&lt;/span&gt;(ls, &amp;amp;e);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* optional return values */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;hasmultret&lt;/span&gt;(e.k)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_setmultret&lt;/span&gt;(fs, &amp;amp;e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (e.k == VCALL &amp;amp;&amp;amp; nret == 1) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* tail call? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;SET_OPCODE&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getcode&lt;/span&gt;(fs,&amp;amp;e), OP_TAILCALL);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_A&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;getcode&lt;/span&gt;(fs,&amp;amp;e)) == fs-&amp;gt;nactvar);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      first = fs-&amp;gt;nactvar;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      nret = LUA_MULTRET;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* return all values */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (nret == 1)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* only one single value? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        first = &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2anyreg&lt;/span&gt;(fs, &amp;amp;e);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_exp2nextreg&lt;/span&gt;(fs, &amp;amp;e);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* values must go to the `stack&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        first = fs-&amp;gt;nactvar;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* return all `active&amp;#39; values */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(nret == fs-&amp;gt;freereg - first);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaK_ret&lt;/span&gt;(fs, first, nret);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;statement&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line = ls-&amp;gt;linenumber;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* may be needed for error messages */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (ls-&amp;gt;t.token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_IF: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; ifstat */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;ifstat&lt;/span&gt;(ls, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_WHILE: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; whilestat */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;whilestat&lt;/span&gt;(ls, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_DO: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; DO block END */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip DO */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;block&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;check_match&lt;/span&gt;(ls, TK_END, TK_DO, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_FOR: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; forstat */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;forstat&lt;/span&gt;(ls, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_REPEAT: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; repeatstat */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;repeatstat&lt;/span&gt;(ls, line);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_FUNCTION: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;funcstat&lt;/span&gt;(ls, line);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; funcstat */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_LOCAL: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; localstat */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip LOCAL */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;testnext&lt;/span&gt;(ls, TK_FUNCTION))  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* local function? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;  &#x9;** local function funName()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;  &#x9;** end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;  &#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;localfunc&lt;/span&gt;(ls);&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;localstat&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_RETURN: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; retstat */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;retstat&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* must be last statement */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_BREAK: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stat -&amp;gt; breakstat */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip BREAK */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;breakstat&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* must be last statement */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;exprstat&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* to avoid warnings */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;chunk&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* chunk -&amp;gt; { stat [`;&amp;#39;] } */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; islast = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;enterlevel&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (!islast &amp;amp;&amp;amp; !&lt;span style=&#34;color:#c34e00&#34;&gt;block_follow&lt;/span&gt;(ls-&amp;gt;t.token)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    islast = &lt;span style=&#34;color:#c34e00&#34;&gt;statement&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* statement后面的&amp;#39;;&amp;#39;是可选的 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;testnext&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(ls-&amp;gt;fs-&amp;gt;f-&amp;gt;maxstacksize &amp;gt;= ls-&amp;gt;fs-&amp;gt;freereg &amp;amp;&amp;amp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               ls-&amp;gt;fs-&amp;gt;freereg &amp;gt;= ls-&amp;gt;fs-&amp;gt;nactvar);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 释放上一个块占用的临时寄存器 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ls-&amp;gt;fs-&amp;gt;freereg = ls-&amp;gt;fs-&amp;gt;nactvar;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* free registers */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;leavelevel&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* }====================================================================== */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>lua源码注释 lparse.h</title>
      <link>http://shanks.link/blog/2021/06/08/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-lparse.h/</link>
      <pubDate>Tue, 08 Jun 2021 23:01:44 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/06/08/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-lparse.h/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** $Id: lparser.h,v 1.57.1.1 2007/12/27 13:02:25 roberto Exp $&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Lua Parser&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** See Copyright Notice in lua.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#ifndef lparser_h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define lparser_h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;llimits.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lobject.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lzio.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/**************************** 官方的BNF **********************************&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;chunk ::= {stat [`;´]} [laststat [`;´]]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;block ::= chunk&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;stat ::=  varlist `=´ explist | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; functioncall | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; do block end | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; while exp do block end | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; repeat block until exp | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; if exp then block {elseif exp then block} [else block] end | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; for Name `=´ exp `,´ exp [`,´ exp] do block end | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; for namelist in explist do block end | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; function funcname funcbody | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; local function Name funcbody | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; local namelist [`=´ explist] &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;laststat ::= return [explist] | break&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;funcname ::= Name {`.´ Name} [`:´ Name]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;varlist ::= var {`,´ var}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;var ::=  Name | prefixexp `[´ exp `]´ | prefixexp `.´ Name &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;namelist ::= Name {`,´ Name}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;explist ::= {exp `,´} exp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;exp ::=  nil | false | true | Number | String | `...´ | function | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; prefixexp | tableconstructor | exp binop exp | unop exp &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;prefixexp ::= var | functioncall | `(´ exp `)´&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;functioncall ::=  prefixexp args | prefixexp `:´ Name args &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;args ::=  `(´ [explist] `)´ | tableconstructor | String &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;function ::= function funcbody&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;funcbody ::= `(´ [parlist] `)´ block end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;parlist ::= namelist [`,´ `...´] | `...´&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;tableconstructor ::= `{´ [fieldlist] `}´&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;fieldlist ::= field {fieldsep field} [fieldsep]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;field ::= `[´ exp `]´ `=´ exp | Name `=´ exp | exp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;fieldsep ::= `,´ | `;´&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;binop ::= `+´ | `-´ | `*´ | `/´ | `^´ | `%´ | `..´ | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; `&amp;lt;´ | `&amp;lt;=´ | `&amp;gt;´ | `&amp;gt;=´ | `==´ | `~=´ | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; and | or&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;unop ::= `-´ | not | `#´&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**************************************************************************/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/**************************** 自己总结的BNF **********************************&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;chunk ::= {stat [`;´]}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;block ::= chunk&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;stat ::=  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; ifstat | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; whilestat | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; DO block END | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; forstat | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; repeat | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; funcstat | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; localstat |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; retstat |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; breaksat |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9; exprstat&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;localstat  &#x9;::= local fun | localstat‘&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;localstat&amp;#39; &#x9;::= LOCAL NAME {`,´ NAME } [`=´ explist1]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;explist1   &#x9;::= expr { `,&amp;#39; expr }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;expr &#x9;&#x9;::= subexpr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;subexpr &#x9;::= (simpleexp | unop subexpr) { binop subexpr }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;simpleexp &#x9;::= NUMBER | STRING | NIL | true | false | ... |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;                  constructor | FUNCTION body | primaryexp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;primaryexp &#x9;::= prefixexp { `.&amp;#39; NAME | `[&amp;#39; expr `]&amp;#39; | `:&amp;#39; NAME funcargs | funcargs }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;prefixexp &#x9;::= NAME | &amp;#39;(&amp;#39; expr &amp;#39;)&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;funcargs &#x9;::= `(&amp;#39; [ explist1 ] `)&amp;#39; | constructor | STRING&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;exprstat    := func | assignment&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;assignment &#x9;::= `,&amp;#39; primaryexp assignment |  `=&amp;#39; explist1 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;ifstat &#x9;&#x9;::= IF cond THEN block {ELSEIF cond THEN block} [ELSE block] END&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;cond &#x9;&#x9;::= expr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;test_then_block :: [IF | ELSEIF] cond THEN block&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;whilestat &#x9;::= WHILE cond DO block END&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;repeatstat &#x9;:: REPEAT block UNTIL cond&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;forstat &#x9;::= FOR (fornum | forlist) END&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;fornum &#x9;&#x9;::= NAME = exp1,exp1[,exp1] forbody&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;forlist &#x9;::= NAME {,NAME} IN explist1 forbody&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;forbody &#x9;::= DO block&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;funcstat &#x9;::= FUNCTION funcname body&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;funcname &#x9;::= NAME {field} [`:&amp;#39; NAME]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;field &#x9;&#x9;::= [&amp;#39;.&amp;#39; | &amp;#39;:&amp;#39;] NAME &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;body &#x9;&#x9;::=  `(&amp;#39; parlist `)&amp;#39; chunk END&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;parlist &#x9;:: [ param { `,&amp;#39; param } ] &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;param &#x9;&#x9;::= NAME | ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;constructor ::= {recfield|listfield}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;recfield &#x9;::= (NAME | `[&amp;#39;exp1`]&amp;#39;) = exp1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;listfield   ::= exp1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;exp1        ::= (exp)   ?&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;retstat ::= RETURN explist&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**************************************************************************/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Expression descriptor&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 表达式的&amp;#34;类型&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** VNONRELOC, VRELOCABLE表示表达式的reg信息(已被安排到指定的reg或可以重定位到任一reg)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 其它的类型：表达式的类型 相关函数 luaK_dischargevars&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;enum&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VVOID,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no value:表示表达式尚未进行评估，也可能表达式就是空 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VNIL,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VTRUE,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* true */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VFALSE,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* fales */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VK,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* info = index of constant in `k&amp;#39; 常量表达式 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VKNUM,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* nval = numerical value */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VLOCAL,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* info = local register */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VUPVAL,   &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* info = index of upvalue in `upvalues&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VGLOBAL,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* info = index of table; aux = index of global name in `k&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 索引表达式 eg: tbl(info).aux(aux) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VINDEXED,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* info = table register; aux = index register (or `k&amp;#39;) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 跳转表达式，常用于关系表达式 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VJMP,&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* info = instruction pc */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 表达式尚未加载到reg（目标reg尚未确定，可以放在栈的任意位置，只要能访问到）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** info:本指令在指令数组中的索引，方便后面回填本指令的目标地址寄存器(R(A))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VRELOCABLE,&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* info = instruction pc */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 表达式的值已被加载到reg中了，info:对应寄存器的idx */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VNONRELOC,&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* info = result register */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VCALL,&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* info = instruction pc: info表示exp对应的指令在指令f的指令数组中的下标，下同 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  VVARARG&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* info = instruction pc   ... 变参操作符 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} expkind;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; expdesc {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  expkind k;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 表达式类型，后面会更新为表达式占用寄存器的类型 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;union&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; { &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; info, aux; } s;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 随着k不同,info,aux表示的意义随之变化,具体看expkind的注释 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lua_Number nval;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 数值表达式的数值 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } u;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; t;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* patch list of `exit when true&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; f;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* patch list of `exit when false&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} expdesc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; upvaldesc {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lu_byte k;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lu_byte info;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} upvaldesc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; BlockCnt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* defined in lparser.c */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* state needed to generate code for a given function &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 编译阶段的func状态机，成品则是Proto&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; FuncState {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; lua_State *L;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* copy of the Lua state */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; FuncState *prev;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* enclosing function,先编译完子函数，才能编译父函数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; LexState *ls;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* lexical state */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Proto *f;  &#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* current function header */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; BlockCnt *bl;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* chain of current blocks */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; pc;  &#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 指向:下一个待生成的指令 next position to code (equivalent to `ncode&amp;#39;) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; lasttarget;   &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `pc&amp;#39; of last `jump target&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; jpc;  &#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* list of pending jumps to `pc&amp;#39;：指向下一个待生成的指令的待回填的跳转链表 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 存储常量kvar在对应的 Proto.k 常量数组中的下标的映射表 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** local var= &amp;#34;hello&amp;#34; , 常量 &amp;#34;hello&amp;#34; 存在Proto.k常量数组中的第0个位置处&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** h[&amp;#34;hello&amp;#34;] = 0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 查找常量过程如下 k=&amp;#34;hello&amp;#34;, 进入h表查找,找到v(0), 再用v到Proto.k中取值&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 参考函数 lcode.c addk&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Table *h;  &#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* table to find (and reuse) elements in `k&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nk;  &#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* number of elements in `k&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; np;  &#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* number of elements in `p&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 第一个可用的reg的索引，随着locvar的申请和释放，这个值不断变化&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 随着编译过程中临时占用寄存器的申请和释放，这个值也在不断变化&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **  local a = b + c 计算完b+c的结果要存放到一个临时寄存器中，赋值给a后，这个寄存器要释放&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 由于locvar的存在需要&amp;#34;始终&amp;#34;占用一个reg，所以freereg&amp;gt;=nactvar&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; freereg;  &#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* first free register */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 当前函数已使用的本地变量总和(下面的总和为6)，整个数组大小的定义在 Proto 的sizelocvars域中 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** do&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **   &#x9;local v1, v2, v3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** do&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **&#x9;local v1, v2, v3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** nlocvars:从1-&amp;gt;6, 这样每一个locvar都有一个唯一的 Proto.locvars中对应的信息，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  **    至于运行到某一行时，v1到底指代哪一个v1,可以从startpc,endpc中推断出来（调试库也是靠pc推断的哦？）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;short&lt;/span&gt; nlocvars;  &#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* number of elements in `locvars&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** declared-variable stack&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 当前激活的var的idx到f.locvars的映射 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;short&lt;/span&gt; actvar[LUAI_MAXVARS];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* number of active local variables：当前激活中的locvar数量&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 对于上面的nlocvars第二次声明local时，nactvar:从1-&amp;gt;3,因为离开第一个块后，块所属的locvar被释放了（变量的声明周期也结束了）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lu_byte nactvar;  &#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  upvaldesc upvalues[LUAI_MAXUPVALUES];  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* upvalues */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} FuncState;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LUAI_FUNC Proto *&lt;span style=&#34;color:#c34e00&#34;&gt;luaY_parser&lt;/span&gt; (lua_State *L, ZIO *z, Mbuffer *buff,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                            &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *name);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>lua源码分析4的执行</title>
      <link>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%904%E7%9A%84%E6%89%A7%E8%A1%8C/</link>
      <pubDate>Thu, 03 Jun 2021 19:40:49 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%904%E7%9A%84%E6%89%A7%E8%A1%8C/</guid>
      <description>&lt;h1 id=&#34;第3章-lua中函数调用的方法&#34;&gt;第3章 lua中函数调用的方法&lt;/h1&gt;&#xA;&lt;p&gt;前面，以及分析了lua中定义一个函数的方法，现在总结如下：&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;1、  将函数名作为局部变量存在局部变量表里，并在栈上开辟一个寄存器空间，在运行期，将新建一个closure，并存在已保留的寄存器里；&lt;/p&gt;</description>
    </item>
    <item>
      <title>lua源码分析3条件跳转</title>
      <link>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%903%E6%9D%A1%E4%BB%B6%E8%B7%B3%E8%BD%AC/</link>
      <pubDate>Thu, 03 Jun 2021 19:32:57 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%903%E6%9D%A1%E4%BB%B6%E8%B7%B3%E8%BD%AC/</guid>
      <description>&lt;h1 id=&#34;第2章-关于条件编译&#34;&gt;第2章 关于条件编译&lt;/h1&gt;&#xA;&lt;p&gt;​&#x9;&#x9;首先，解释一下，为什么题目叫做：条件编译。其实很简单，现在这一章要分析的是，if、while、repeat、for语句。这些语句有个什么特点呢？那就是，都要有条件判断。根据条件判断的结果，以决定是否执行，该如何执行。我不知道该怎么称呼这样的语句，就一致称其为：条件编译。因为这一章的重点是研究，条件对于中间码的生成造成的影响，以及如何生成中间码以实现这种条件判断。&#xA;​    &#x9;首先分析if then elseif then else then end句型。&#xA;​    &#x9;这个很简单，实际上是lua处理的很简单。&#xA;​    &#x9;当lua遇到了if这个关键字的时候，就开始调用ifstat()，首先，这是进入一个块。这个块这个东西和函数是相同的重要，因为它关系到一个变量的作用域的问题。块由block()函数处理。不过在此之前，要注意一个重要的事情，那就是条件判断语句。lua是怎么处理条件判断的呢？&#xA;​    &#x9;首先，lua会跳过if关键字，然后，会进入一个十分常用的函数：cond()，这个函数还是比较复杂的，我现在要再看一遍这个函数，还是心有余悸的。&#xA;​    &#x9;cond()这个函数比较短，我还是贴出来吧：&lt;/p&gt;</description>
    </item>
    <item>
      <title>lua源码分析2（局部函数的定义）</title>
      <link>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902%E5%B1%80%E9%83%A8%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89/</link>
      <pubDate>Thu, 03 Jun 2021 18:17:39 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902%E5%B1%80%E9%83%A8%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89/</guid>
      <description>&lt;h2 id=&#34;第二节-局部函数的声明&#34;&gt;第二节 局部函数的声明&lt;/h2&gt;&#xA;&lt;p&gt;​&#x9;&#x9;前面研究了局部变量的定义，下面就研究下，lua中局部函数定义的方法。&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;其中局部函数定义的语法是：&#xA;​&#x9;&#x9;local function FuncName (parlist) chunk END&#xA;​&#x9;首先，lua会检测到local function这两个关键字，知道后面是在定义局部函数，lua会跳过这两个关键字，分别用llex_next()和testnext()。testnext()和checknext()这两个函数的区别是，checknext()是期望后面是某个token，是的话就读取，如果不是的话，就会报错，而testnext()是检查后面是不是某个token，如果是就读取，不是的话也不会报错。&#xA;​    当跳过了local function这两个关键字。就到了局部函数函数名的地方了。这时，lua会把这个局部函数当作一个局部变量，为这个函数名字注册一个局部变量名。其中就用到了前面注册局部变量时用到的函数 newlocalvar()。这个函数在局部变量数字里增加一项，记录这个函数名。这里的记录并没有检查是否已经存在了这个局部变量。但是使用的时候，lua会从头开始遍历查找，也就是说第一次注册的这个局部变量会被使用。&#xA;​    如前所说，在语法解析的过程中，有一个数据结构非常重要，那就是expdesc，这个数据结构代表一个表达式。在局部函数定义的时候，会用到2个这样的数据结构，这里分别称为v和b。其中v代表这个函数，b代表body，也就是函数体。当解析到这里的时候，会初始化v，将其类型赋值为VLOCAL，v-&amp;gt;k = VLOCAL，并在里面记录当前空闲寄存器的位置，v-&amp;gt;u.s.info = fs-&amp;gt;freereg。&#xA;​    接下来就是将空闲寄存器指针加一，将局部变量的个数加一。&#xA;​    于是，就进入解析函数体的部分了，body()。&#xA;​    首先，新建了一个FuncState数据结构，通过open_func()函数，这个数据结构就是我们一直看到的ls-&amp;gt;fs这个fs。这个数据结构是在语法解析时用到的，代表一个函数，它有一个函数头，叫Proto，每个函数都以一个这样的头。每个函数记录自己的中间码，它存在于这个函数头Proto里面，具体就是ls-&amp;gt;fs-&amp;gt;f-&amp;gt;code[]数组里。在语法解析的过程中，整个lua程序就当作了一个函数，也就是第一个FuncState，也就是第一个ls-&amp;gt;fs，之后，遇到的每个定义的函数，都会新建一个FuncState，并链在ls-&amp;gt;fs上，也就是，所有的ls-&amp;gt;fs链成一个链表。而ls-&amp;gt;fs就是当前解析到的函数。&#xA;​    新建了这个函数结构FuncState后，便将其及其常量数组压入栈中。&#xA;​    之后便是解析参数列表和函数体了。现在先不管这些，因为先从整体对解析函数有个了解。假设我们的函数是这个样子：&#xA;​    local function FuncName () END；&#xA;​    也就是说，没有参数表，也没有函数体的一个最简单的函数。&#xA;​    当lua解析这个函数的时候，如前所说，FuncName会被注册进局部变量表中，并且会新建一个FuncState数据结构，将其链在ls-&amp;gt;fs上，并当作当前函数。&#xA;​    当lua检测到函数定义的语法都正确，也就是参数表包含在小括号()内，函数体以END结束，通过了检测，就会执行close_func()函数。&#xA;​    这个函数比较有意思，它里面包含了一些比较有趣的函数。其中第一个有趣的函数叫做removevar()，看字面意思是去除变量。是什么意思呢？是这么个意思：函数定义结束后，函数内部的变量是外部不看见的，所以，要从可见的地方去掉。这个函数就是处理这个情况的。它的做法很简单，就是把每个这个函数内的局部变量的endpc标记为当前pc。也就是说，到当前位置，当前代码以后，局部变量是不可见的。这里的可见度，作用域是与指令联系起来的，也就是说，从某条指令开始，局部变量可见，到某条指令结束，局部变量不可见。于是，便从当前可见域里remove了那个函数的局部变量。&#xA;​    然后会通过luaK_ret()函数，生成一条OP_RETURN指令。&#xA;​    最后，将这个函数从ls中踢掉，也就是ls-&amp;gt;fs = fs-&amp;gt;prev。到这里，这个函数算解析完了，但是，这个函数生成的指令码是在这个函数结构fs里面，现在踢掉了，当要调用的时候该怎么调用呢？&#xA;​    这是最后一个疑问，不过， body并没有结束，还有最后一个函数pushclosure()。看了这个函数，我们就会发现，其实，lua并没有把这个函数踢掉，而是把它保存在他的父函数里面。这里是这么回事：每个函数里面都可以定义函数，这个函数名首先会作为局部变量名保存在父函数的局部变量表里，当作其父函数的一个局部变量。然后，这个函数的结构FuncState会被保存在其父函数的内部函数数组里，也就是每个函数结构的头结构里面，fs-&amp;gt;f，都会有一个函数头数组，fs-&amp;gt;f-&amp;gt;p[]，其中包含着在这个函数内部定义的函数。&#xA;​    pushclosure()首先就会做这件事，也就是将函数结构保存在其父函数结构的fs-&amp;gt;f-&amp;gt;p[]里面。&#xA;​    然后，就会生成一条指令，OP_CLOSURE，说明这里定义了一个函数。这条指令是做什么的呢？&#xA;​    别忘了刚开始我们说的，一个局部函数定义，和局部变量定义是同样的，在栈里会保留一个空槽（寄存器），但是，那个寄存器里到底存的是什么呢？这个就要留在运行时回答了。当lua虚拟机运行到OP_CLOSURE的时候，就会新建一个Closure，并用这个Closure初始化那个预留的寄存器，也就是那个局部函数。&#xA;​    而刚开始的那两个expdesc数据结构，其中之一b，也就是那个代表body的，就是用来储存这个OP_CLOSURE指令了。而那个v，其v-&amp;gt;u.s.info存的是这个局部函数所存在的寄存器位置。这里，已经生成了一个OP_CLOSURE指令，但是，这条指令所执行时，生成的Closure存在栈的哪里呢？也就是，应该放在那个局部函数所对应的那个寄存器里。下面就是要完成这个操作的函数：luaK_storevar()。就把当初保存在e里面的寄存器位置保存在了那条指令OP_CLOSURE里面了。&#xA;​&#x9;这就是新建了一个局部函数，其实和局部变量差不多。写到现在，发现文章的架构太乱了，算是草稿吧，以后再改。&#xA;————————————————&#xA;版权声明：本文为CSDN博主「haxixi_keli」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。&#xA;原文链接：https://blog.csdn.net/haxixi_keli/article/details/3210446&lt;/p&gt;</description>
    </item>
    <item>
      <title>lua源码分析1（局部变量的定义）</title>
      <link>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E5%AE%9A%E4%B9%89/</link>
      <pubDate>Thu, 03 Jun 2021 16:51:33 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/06/03/lua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E5%AE%9A%E4%B9%89/</guid>
      <description>&lt;h1 id=&#34;第0节-一切从这里开始&#34;&gt;第0节 一切从这里开始&lt;/h1&gt;&#xA;&lt;p&gt;​&#x9;&#x9;Lua是边进行语法分析，边词法分析。其中，词法分析的模块是：llex。其对外暴露的接口是：llex_next()。并且，在整个语法分析、词法分析的过程中，只有一个唯一的全局实例：llex_state。在词法分析的过程中，lua会处理以下几种情况：&lt;/p&gt;</description>
    </item>
    <item>
      <title>lua源码注释-llex.c</title>
      <link>http://shanks.link/blog/2021/05/31/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-llex.c/</link>
      <pubDate>Mon, 31 May 2021 16:14:08 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/05/31/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-llex.c/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** $Id: llex.c,v 2.20.1.2 2009/11/23 14:58:22 roberto Exp $&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Lexical Analyzer&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** See Copyright Notice in lua.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;ctype.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;locale.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define llex_c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define LUA_CORE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lua.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ldo.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;llex.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lobject.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lparser.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lstate.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lstring.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ltable.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lzio.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define next(ls) (ls-&amp;gt;current = zgetc(ls-&amp;gt;z))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define currIsNewline(ls)&#x9;(ls-&amp;gt;current == &amp;#39;\n&amp;#39; || ls-&amp;gt;current == &amp;#39;\r&amp;#39;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ORDER RESERVED */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; luaX_tokens [] = {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;and&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;break&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;do&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;else&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;elseif&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;for&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;function&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;if&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;local&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;nil&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;not&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;or&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;repeat&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;return&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;then&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;until&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;while&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;..&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;==&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&amp;gt;=&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&amp;lt;=&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;~=&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&amp;lt;number&amp;gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&amp;lt;name&amp;gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&amp;lt;string&amp;gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&amp;lt;eof&amp;gt;&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NULL&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define save_and_next(ls) (save(ls, ls-&amp;gt;current), next(ls))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 将c存到ls-&amp;gt;buff中 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;save&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; c) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Mbuffer *b = ls-&amp;gt;buff;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (b-&amp;gt;n + 1 &amp;gt; b-&amp;gt;buffsize) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; newsize;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (b-&amp;gt;buffsize &amp;gt;= MAX_SIZET/2)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lexerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;lexical element too long&amp;#34;&lt;/span&gt;, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    newsize = b-&amp;gt;buffsize * 2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_resizebuffer&lt;/span&gt;(ls-&amp;gt;L, b, newsize);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  b-&amp;gt;buffer[b-&amp;gt;n++] = &lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt;, c);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 构建出关键字 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_init&lt;/span&gt; (lua_State *L) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i=0; i&amp;lt;NUM_RESERVED; i++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TString *ts = &lt;span style=&#34;color:#c34e00&#34;&gt;luaS_new&lt;/span&gt;(L, luaX_tokens[i]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaS_fix&lt;/span&gt;(ts);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* reserved words are never collected */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;strlen&lt;/span&gt;(luaX_tokens[i])+1 &amp;lt;= TOKEN_LEN);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ts-&amp;gt;tsv.reserved = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_byte&lt;/span&gt;(i+1);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* reserved word */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define MAXSRC          80&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *&lt;span style=&#34;color:#c34e00&#34;&gt;luaX_token2str&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (token &amp;lt; FIRST_RESERVED) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(token == &lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt;, token));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;iscntrl&lt;/span&gt;(token)) ? &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_pushfstring&lt;/span&gt;(ls-&amp;gt;L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;char(%d)&amp;#34;&lt;/span&gt;, token) :&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                              &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_pushfstring&lt;/span&gt;(ls-&amp;gt;L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;%c&amp;#34;&lt;/span&gt;, token);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; luaX_tokens[token-FIRST_RESERVED];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *&lt;span style=&#34;color:#c34e00&#34;&gt;txtToken&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_NAME:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_STRING:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TK_NUMBER:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;save&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_buffer&lt;/span&gt;(ls-&amp;gt;buff);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_token2str&lt;/span&gt;(ls, token);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lexerror&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *msg, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; buff[MAXSRC];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_chunkid&lt;/span&gt;(buff, &lt;span style=&#34;color:#c34e00&#34;&gt;getstr&lt;/span&gt;(ls-&amp;gt;source), MAXSRC);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  msg = &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_pushfstring&lt;/span&gt;(ls-&amp;gt;L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;%s:%d: %s&amp;#34;&lt;/span&gt;, buff, ls-&amp;gt;linenumber, msg);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (token)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_pushfstring&lt;/span&gt;(ls-&amp;gt;L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;%s near &amp;#34;&lt;/span&gt; LUA_QS, msg, &lt;span style=&#34;color:#c34e00&#34;&gt;txtToken&lt;/span&gt;(ls, token));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_throw&lt;/span&gt;(ls-&amp;gt;L, LUA_ERRSYNTAX);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_syntaxerror&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *msg) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lexerror&lt;/span&gt;(ls, msg, ls-&amp;gt;t.token);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TString *&lt;span style=&#34;color:#c34e00&#34;&gt;luaX_newstring&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *str, &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; l) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lua_State *L = ls-&amp;gt;L;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TString *ts = &lt;span style=&#34;color:#c34e00&#34;&gt;luaS_newlstr&lt;/span&gt;(L, str, l);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TValue *o = &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_setstr&lt;/span&gt;(L, ls-&amp;gt;fs-&amp;gt;h, ts);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* entry for `str&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(o)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setbvalue&lt;/span&gt;(o, 1);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* make sure `str&amp;#39; will not be collected */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_checkGC&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ts;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 读到单个换行符\n，\r，再多读一个字符，看是否是双字符的换行\n\r,\r\n */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;inclinenumber&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; old = ls-&amp;gt;current;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;currIsNewline&lt;/span&gt;(ls));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 当前是换行符 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 往后再读一个字符，看看不是不是\n\r和\r\n这种双字符的换行符（仅算一次换行） */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip `\n&amp;#39; or `\r&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;currIsNewline&lt;/span&gt;(ls) &amp;amp;&amp;amp; ls-&amp;gt;current != old)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip `\n\r&amp;#39; or `\r\n&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (++ls-&amp;gt;linenumber &amp;gt;= MAX_INT)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_syntaxerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;chunk has too many lines&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 初始化LexState，初始化ls-&amp;gt;buf,从ZIO读取第一个字符 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_setinput&lt;/span&gt; (lua_State *L, LexState *ls, ZIO *z, TString *source) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ls-&amp;gt;decpoint = &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ls-&amp;gt;L = L;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ls-&amp;gt;lookahead.token = TK_EOS;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no look-ahead token */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ls-&amp;gt;z = z;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ls-&amp;gt;fs = NULL;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 尚未开始编译函数，这里置NULL */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ls-&amp;gt;linenumber = 1;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 当前在第一行，亲 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ls-&amp;gt;lastline = 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ls-&amp;gt;source = source;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 申请属于ls-&amp;gt;buff的私有buff */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_resizebuffer&lt;/span&gt;(ls-&amp;gt;L, ls-&amp;gt;buff, LUA_MINBUFFER);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* initialize buffer */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* read first char */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** =======================================================&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** LEXICAL ANALYZER&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** =======================================================&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ls-&amp;gt;current和set字符集中的某个字符匹配吗 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;check_next&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *set) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;strchr&lt;/span&gt;(set, ls-&amp;gt;current))&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 将ls-&amp;gt;buff中的from字符替换层to字符 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;buffreplace&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; from, &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; to) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; n = &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_bufflen&lt;/span&gt;(ls-&amp;gt;buff);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *p = &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_buffer&lt;/span&gt;(ls-&amp;gt;buff);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (n--)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (p[n] == from) p[n] = to;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 数字字符串转换为数字时失败，尝试更换成本地区的数字字符小数点后再次尝试转换 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;trydecpoint&lt;/span&gt; (LexState *ls, SemInfo *seminfo) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* format error: try to update decimal point separator */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; lconv *cv = &lt;span style=&#34;color:#c34e00&#34;&gt;localeconv&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; old = ls-&amp;gt;decpoint;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ls-&amp;gt;decpoint = (cv ? cv-&amp;gt;decimal_point[0] : &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;buffreplace&lt;/span&gt;(ls, old, ls-&amp;gt;decpoint);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* try updated decimal separator */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;luaO_str2d&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_buffer&lt;/span&gt;(ls-&amp;gt;buff), &amp;amp;seminfo-&amp;gt;r)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* format error with correct decimal point: no more options */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;buffreplace&lt;/span&gt;(ls, ls-&amp;gt;decpoint, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* undo change (for error message) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lexerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;malformed number&amp;#34;&lt;/span&gt;, TK_NUMBER);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* LUA_NUMBER &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** .123这种  123或者科学计数法形式(1.99714E+13)的数字&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;read_numeral&lt;/span&gt; (LexState *ls, SemInfo *seminfo) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;isdigit&lt;/span&gt;(ls-&amp;gt;current));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 属于 [0,9] 集合？*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 读取第一部分 1.99714 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;isdigit&lt;/span&gt;(ls-&amp;gt;current) || ls-&amp;gt;current == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 读取第二部分 E+ */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;check_next&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;Ee&amp;#34;&lt;/span&gt;))  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `E&amp;#39;? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;check_next&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;+-&amp;#34;&lt;/span&gt;);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* optional exponent sign */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 读取第三部分 13 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;isalnum&lt;/span&gt;(ls-&amp;gt;current) || ls-&amp;gt;current == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;)&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里的_不太明白其含义 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 主动补\0,关闭字符串 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;save&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 不同国家不同的小数点 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;buffreplace&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, ls-&amp;gt;decpoint);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* follow locale for decimal point */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;luaO_str2d&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_buffer&lt;/span&gt;(ls-&amp;gt;buff), &amp;amp;seminfo-&amp;gt;r))  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* format error? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;trydecpoint&lt;/span&gt;(ls, seminfo); &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* try to update decimal point separator */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 尝试读取多行字符串的开头或结尾 --[{=}[ 或者 ]{=}] */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;skip_sep&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; count = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; s = ls-&amp;gt;current;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(s == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt; || s == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;]&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (ls-&amp;gt;current == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    count++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; (ls-&amp;gt;current == s) ? count : (-count) - 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 读取一个长字符串和&amp;#34;结尾控制符&amp;#34;(长注释或String的token)(同时更新linenumber) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;read_long_string&lt;/span&gt; (LexState *ls, SemInfo *seminfo, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; sep) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; cont = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt;)(cont);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* avoid warnings when `cont&amp;#39; is not used */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);  &#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip 2nd `[&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;currIsNewline&lt;/span&gt;(ls))  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* string starts with a newline? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;inclinenumber&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip it */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (;;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (ls-&amp;gt;current) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; EOZ:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lexerror&lt;/span&gt;(ls, (seminfo) ? &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;unfinished long string&amp;#34;&lt;/span&gt; :&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                   &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;unfinished long comment&amp;#34;&lt;/span&gt;, TK_EOS);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* to avoid warnings */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#if defined(LUA_COMPAT_LSTR)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;skip_sep&lt;/span&gt;(ls) == sep) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip 2nd `[&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          cont++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#if LUA_COMPAT_LSTR == 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (sep == 0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lexerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;nesting of [[...]] is deprecated&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;]&amp;#39;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;skip_sep&lt;/span&gt;(ls) == sep) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip 2nd `]&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#if defined(LUA_COMPAT_LSTR) &amp;amp;&amp;amp; LUA_COMPAT_LSTR == 2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;          cont--;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (sep == 0 &amp;amp;&amp;amp; cont &amp;gt;= 0) &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;goto&lt;/span&gt; endloop;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\r&amp;#39;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;save&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;);&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;inclinenumber&lt;/span&gt;(ls);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 注释的业务中也不能忘了linenumber */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!seminfo) &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_resetbuffer&lt;/span&gt;(ls-&amp;gt;buff);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* avoid wasting space */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (seminfo) &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } endloop:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* seminfo为null是注释逻辑，注释不用管里面的具体String，否则是一个正常的String的token，需将String保存 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (seminfo) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 2+sep:[{=}[ */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    seminfo-&amp;gt;ts = &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_newstring&lt;/span&gt;(ls, &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_buffer&lt;/span&gt;(ls-&amp;gt;buff) + (2 + sep),&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                     &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_bufflen&lt;/span&gt;(ls-&amp;gt;buff) - 2*(2 + sep));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 读一个&amp;#34;字符串&amp;#34;或&amp;#39;字符串&amp;#39;格式的字符串 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;read_string&lt;/span&gt; (LexState *ls, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; del, SemInfo *seminfo) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (ls-&amp;gt;current != del) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (ls-&amp;gt;current) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; EOZ:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lexerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;unfinished string&amp;#34;&lt;/span&gt;, TK_EOS);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* to avoid warnings */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\r&amp;#39;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lexerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;unfinished string&amp;#34;&lt;/span&gt;, TK_STRING);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* to avoid warnings */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\\&amp;#39;&lt;/span&gt;: {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 可能的转移序列 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; c;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* do not save the `\&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (ls-&amp;gt;current) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;: c = &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\a&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;: c = &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\b&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;: c = &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\f&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;n&amp;#39;&lt;/span&gt;: c = &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;: c = &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\r&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;: c = &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\t&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;v&amp;#39;&lt;/span&gt;: c = &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\v&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 本身就是一个换行符 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;:  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* go through */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\r&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#c34e00&#34;&gt;save&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#c34e00&#34;&gt;inclinenumber&lt;/span&gt;(ls); &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; EOZ: &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* will raise an error next loop */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;isdigit&lt;/span&gt;(ls-&amp;gt;current))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* handles \\, \&amp;#34;, \&amp;#39;, and \? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* \xxx */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              c = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                c = 10*c + (ls-&amp;gt;current-&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              } &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (++i&amp;lt;3 &amp;amp;&amp;amp; &lt;span style=&#34;color:#c34e00&#34;&gt;isdigit&lt;/span&gt;(ls-&amp;gt;current));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (c &amp;gt; UCHAR_MAX)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lexerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;escape sequence too large&amp;#34;&lt;/span&gt;, TK_STRING);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#c34e00&#34;&gt;save&lt;/span&gt;(ls, c);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;save&lt;/span&gt;(ls, c);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip delimiter(分隔符) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  seminfo-&amp;gt;ts = &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_newstring&lt;/span&gt;(ls, &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_buffer&lt;/span&gt;(ls-&amp;gt;buff) + 1,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                   &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_bufflen&lt;/span&gt;(ls-&amp;gt;buff) - 2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 从读取下一个字符token &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 从ZIO读取下一个token到seminfo,并返回TokenType(中途可能用到lx-&amp;gt;buff)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;llex&lt;/span&gt; (LexState *ls, SemInfo *seminfo) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_resetbuffer&lt;/span&gt;(ls-&amp;gt;buff);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (;;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (ls-&amp;gt;current) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\r&amp;#39;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;inclinenumber&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 单独的 - */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;current != &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else is a comment */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 单行OR多行注释? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;current == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; sep = &lt;span style=&#34;color:#c34e00&#34;&gt;skip_sep&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_resetbuffer&lt;/span&gt;(ls-&amp;gt;buff);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `skip_sep&amp;#39; may dirty the buffer */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (sep &amp;gt;= 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;read_long_string&lt;/span&gt;(ls, NULL, sep);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* long comment */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_resetbuffer&lt;/span&gt;(ls-&amp;gt;buff);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else short comment */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;currIsNewline&lt;/span&gt;(ls) &amp;amp;&amp;amp; ls-&amp;gt;current != EOZ)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt;: {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 长字符串: [{=}[ String ]{=}] */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; sep = &lt;span style=&#34;color:#c34e00&#34;&gt;skip_sep&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (sep &amp;gt;= 0) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 多行字符串开头 [{=}[ */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;read_long_string&lt;/span&gt;(ls, seminfo, sep);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; TK_STRING;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (sep == -1) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt;;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* [,others这样的开头 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lexerror&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;invalid long string delimiter&amp;#34;&lt;/span&gt;, TK_STRING);&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* [={=},others这样的开头 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;current != &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; { &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls); &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; TK_EQ; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;current != &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; { &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls); &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; TK_LE; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;current != &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; { &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls); &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; TK_GE; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;~&amp;#39;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;current != &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;~&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; { &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls); &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; TK_NE; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 短字符串 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;read_string&lt;/span&gt;(ls, ls-&amp;gt;current, seminfo);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; TK_STRING;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 看这个符号的解析，是一个深度优先的解析示例 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;check_next&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;check_next&lt;/span&gt;(ls, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; TK_DOTS;   &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ... */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; TK_CONCAT;   &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* .. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;isdigit&lt;/span&gt;(ls-&amp;gt;current)) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;read_numeral&lt;/span&gt;(ls, seminfo);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; TK_NUMBER;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; EOZ: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; TK_EOS;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;isspace&lt;/span&gt;(ls-&amp;gt;current)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(!&lt;span style=&#34;color:#c34e00&#34;&gt;currIsNewline&lt;/span&gt;(ls));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 换行符在前面就被解析掉了，这里不能再是换行符了,否则就重复了 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;isdigit&lt;/span&gt;(ls-&amp;gt;current)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;read_numeral&lt;/span&gt;(ls, seminfo);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; TK_NUMBER;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;isalpha&lt;/span&gt;(ls-&amp;gt;current) || ls-&amp;gt;current == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 标识符 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* identifier or reserved word */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          TString *ts;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;save_and_next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          } &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;isalnum&lt;/span&gt;(ls-&amp;gt;current) || ls-&amp;gt;current == &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里和上面的有一点差别 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          ts = &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_newstring&lt;/span&gt;(ls, &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_buffer&lt;/span&gt;(ls-&amp;gt;buff),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                  &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_bufflen&lt;/span&gt;(ls-&amp;gt;buff));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 关键或保留字符串 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ts-&amp;gt;tsv.reserved &amp;gt; 0)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* reserved word? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ts-&amp;gt;tsv.reserved - 1 + FIRST_RESERVED;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            seminfo-&amp;gt;ts = ts;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; TK_NAME;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; c = ls-&amp;gt;current;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;next&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; c;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* single-char tokens (+ - / ...) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_next&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ls-&amp;gt;lastline = ls-&amp;gt;linenumber&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 已有一个准备好的lookhead&amp;#39;token,则取出来用 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ls-&amp;gt;lookahead.token != TK_EOS) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* is there a look-ahead token? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ls-&amp;gt;t = ls-&amp;gt;lookahead;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* use this one */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ls-&amp;gt;lookahead.token = TK_EOS;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* and discharge it */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 读取一个token */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ls-&amp;gt;t.token = &lt;span style=&#34;color:#c34e00&#34;&gt;llex&lt;/span&gt;(ls, &amp;amp;ls-&amp;gt;t.seminfo);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* read next token */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 当前lookhead&amp;#39;token已过期，重新准备lookhead&amp;#39;token */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaX_lookahead&lt;/span&gt; (LexState *ls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(ls-&amp;gt;lookahead.token == TK_EOS);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ls-&amp;gt;lookahead.token = &lt;span style=&#34;color:#c34e00&#34;&gt;llex&lt;/span&gt;(ls, &amp;amp;ls-&amp;gt;lookahead.seminfo);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>lua源码注释-ldo.c</title>
      <link>http://shanks.link/blog/2021/05/28/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-ldo.c/</link>
      <pubDate>Fri, 28 May 2021 23:17:07 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/05/28/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-ldo.c/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** $Id: ldo.c,v 2.38.1.4 2012/01/18 02:27:10 roberto Exp $&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Stack and Call structure of Lua&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** See Copyright Notice in lua.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;setjmp.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define ldo_c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define LUA_CORE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lua.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ldebug.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ldo.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lfunc.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lgc.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lmem.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lobject.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lopcodes.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lparser.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lstate.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lstring.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ltable.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ltm.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lundump.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lvm.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lzio.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** {======================================================&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Error-recovery functions&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** =======================================================&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* chain list of long jump buffers */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; lua_longjmp {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; lua_longjmp *previous;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  luai_jmpbuf b;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;volatile&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; status;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* error code */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_seterrorobj&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; errcode, StkId oldtop) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (errcode) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_ERRMEM: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setsvalue2s&lt;/span&gt;(L, oldtop, &lt;span style=&#34;color:#c34e00&#34;&gt;luaS_newliteral&lt;/span&gt;(L, MEMERRMSG));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_ERRERR: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setsvalue2s&lt;/span&gt;(L, oldtop, &lt;span style=&#34;color:#c34e00&#34;&gt;luaS_newliteral&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;error in error handling&amp;#34;&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_ERRSYNTAX:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_ERRRUN: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, oldtop, L-&amp;gt;top - 1);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* error message on current top */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里结合 luaD_pcall 来一起来看 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;top = oldtop + 1;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* correct top */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 空闲的callInfo过多时，尝试压缩其空间 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;restore_stack_limit&lt;/span&gt; (lua_State *L) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(L-&amp;gt;stack_last - L-&amp;gt;stack == L-&amp;gt;stacksize - EXTRA_STACK - 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;size_ci &amp;gt; LUAI_MAXCALLS) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* there was an overflow? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; inuse = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_int&lt;/span&gt;(L-&amp;gt;ci - L-&amp;gt;base_ci);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (inuse + 1 &amp;lt; LUAI_MAXCALLS)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* can `undo&amp;#39; overflow? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_reallocCI&lt;/span&gt;(L, LUAI_MAXCALLS);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 回滚stack到初始状态！！！！ */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;resetstack&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; status) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这一下彻底回滚了 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;ci = L-&amp;gt;base_ci;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;base = L-&amp;gt;ci-&amp;gt;base;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaF_close&lt;/span&gt;(L, L-&amp;gt;base);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* close eventual pending closures */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_seterrorobj&lt;/span&gt;(L, status, L-&amp;gt;base);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;nCcalls = L-&amp;gt;baseCcalls;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;allowhook = 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;restore_stack_limit&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;errfunc = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;errorJmp = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 尝试调用异常处理函数 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 主要在luaG_errormsg中被间接调用&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_throw&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; errcode) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;errorJmp) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;errorJmp-&amp;gt;status = errcode;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* !!! 跳出去之前设置status */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;LUAI_THROW&lt;/span&gt;(L, L-&amp;gt;errorJmp); &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 正式跳出 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 没有设置errHdl，调用panic后退出进程 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;status = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_byte&lt;/span&gt;(errcode);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 无jump点了，在这里设置L的状态，有则由上层业务处理 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;G&lt;/span&gt;(L)-&amp;gt;panic) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;resetstack&lt;/span&gt;(L, errcode);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里对stack进行收尾 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;lua_unlock&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;G&lt;/span&gt;(L)-&amp;gt;&lt;span style=&#34;color:#c34e00&#34;&gt;panic&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;exit&lt;/span&gt;(EXIT_FAILURE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 保护模式下(longjump)调用C函数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 但发生错误，则调用了L-&amp;gt;errfunc后(若设置了)，后走到这里而不是直接退出进程&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** RETURN：执行流的执行结果，没有同步到L-&amp;gt;status中(由上层调用决定是否同步)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_rawrunprotected&lt;/span&gt; (lua_State *L, Pfunc f, &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *ud) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; lua_longjmp lj;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lj.status = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lj.previous = L-&amp;gt;errorJmp;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* chain new error handler */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;errorJmp = &amp;amp;lj;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;LUAI_TRY&lt;/span&gt;(L, &amp;amp;lj,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (*f)(L, ud);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  );&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;errorJmp = lj.previous;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* restore old error handler */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; lj.status;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* luaD_throw()中更新了status */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* }====================================================== */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* stack移动后更新upvalues,ci-list和L-&amp;gt;base */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;correctstack&lt;/span&gt; (lua_State *L, TValue *oldstack) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  CallInfo *ci;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  GCObject *up;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;top = (L-&amp;gt;top - oldstack) + L-&amp;gt;stack;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (up = L-&amp;gt;openupval; up != NULL; up = up-&amp;gt;gch.next)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;gco2uv&lt;/span&gt;(up)-&amp;gt;v = (&lt;span style=&#34;color:#c34e00&#34;&gt;gco2uv&lt;/span&gt;(up)-&amp;gt;v - oldstack) + L-&amp;gt;stack;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (ci = L-&amp;gt;base_ci; ci &amp;lt;= L-&amp;gt;ci; ci++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ci-&amp;gt;top = (ci-&amp;gt;top - oldstack) + L-&amp;gt;stack;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ci-&amp;gt;base = (ci-&amp;gt;base - oldstack) + L-&amp;gt;stack;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ci-&amp;gt;func = (ci-&amp;gt;func - oldstack) + L-&amp;gt;stack;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* L-&amp;gt;ci不用调整哈 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;base = (L-&amp;gt;base - oldstack) + L-&amp;gt;stack;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 重新调整stack的大小 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_reallocstack&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; newsize) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TValue *oldstack = L-&amp;gt;stack;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; realsize = newsize + 1 + EXTRA_STACK;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(L-&amp;gt;stack_last - L-&amp;gt;stack == L-&amp;gt;stacksize - EXTRA_STACK - 1);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 和stack_init()函数对应 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_reallocvector&lt;/span&gt;(L, L-&amp;gt;stack, L-&amp;gt;stacksize, realsize, TValue);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;stacksize = realsize;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;stack_last = L-&amp;gt;stack+newsize;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;correctstack&lt;/span&gt;(L, oldstack);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 调整callInfo链的大小 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_reallocCI&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; newsize) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  CallInfo *oldci = L-&amp;gt;base_ci;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_reallocvector&lt;/span&gt;(L, L-&amp;gt;base_ci, L-&amp;gt;size_ci, newsize, CallInfo);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;size_ci = newsize;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;ci = (L-&amp;gt;ci - oldci) + L-&amp;gt;base_ci;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;end_ci = L-&amp;gt;base_ci + L-&amp;gt;size_ci - 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_growstack&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; n) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (n &amp;lt;= L-&amp;gt;stacksize)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* double size is enough? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_reallocstack&lt;/span&gt;(L, 2*L-&amp;gt;stacksize);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_reallocstack&lt;/span&gt;(L, L-&amp;gt;stacksize + n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; CallInfo *&lt;span style=&#34;color:#c34e00&#34;&gt;growCI&lt;/span&gt; (lua_State *L) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;size_ci &amp;gt; LUAI_MAXCALLS)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* overflow while handling overflow? 嵌套调用层次太深了，直接报错，方便用户检查调用情况 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_throw&lt;/span&gt;(L, LUA_ERRERR);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_reallocCI&lt;/span&gt;(L, 2*L-&amp;gt;size_ci);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 简单粗暴，直接扩大一倍 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;size_ci &amp;gt; LUAI_MAXCALLS)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_runerror&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;stack overflow&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ++L-&amp;gt;ci;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; StkId &lt;span style=&#34;color:#c34e00&#34;&gt;callrethooks&lt;/span&gt; (lua_State *L, StkId firstResult) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ptrdiff_t&lt;/span&gt; fr = &lt;span style=&#34;color:#c34e00&#34;&gt;savestack&lt;/span&gt;(L, firstResult);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* next call may change stack */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_callhook&lt;/span&gt;(L, LUA_HOOKRET, -1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;f_isLua&lt;/span&gt;(L-&amp;gt;ci)) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Lua function? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; ((L-&amp;gt;hookmask &amp;amp; LUA_MASKRET) &amp;amp;&amp;amp; L-&amp;gt;ci-&amp;gt;tailcalls--) &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* tail calls */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_callhook&lt;/span&gt;(L, LUA_HOOKTAILRET, -1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;restorestack&lt;/span&gt;(L, fr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 调用钩子函数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_callhook&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; event, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; line) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lua_Hook hook = L-&amp;gt;hook;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (hook &amp;amp;&amp;amp; L-&amp;gt;allowhook) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;ptrdiff_t&lt;/span&gt; top = &lt;span style=&#34;color:#c34e00&#34;&gt;savestack&lt;/span&gt;(L, L-&amp;gt;top);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;ptrdiff_t&lt;/span&gt; ci_top = &lt;span style=&#34;color:#c34e00&#34;&gt;savestack&lt;/span&gt;(L, L-&amp;gt;ci-&amp;gt;top);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lua_Debug ar;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ar.event = event;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ar.currentline = line;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (event == LUA_HOOKTAILRET)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ar.i_ci = 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* tail call; no debug information about it */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ar.i_ci = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_int&lt;/span&gt;(L-&amp;gt;ci - L-&amp;gt;base_ci);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_checkstack&lt;/span&gt;(L, LUA_MINSTACK);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ensure minimum stack size */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;ci-&amp;gt;top = L-&amp;gt;top + LUA_MINSTACK;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(L-&amp;gt;ci-&amp;gt;top &amp;lt;= L-&amp;gt;stack_last);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;allowhook = 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* cannot call hooks inside a hook */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_unlock&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (*hook)(L, &amp;amp;ar);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 正式调用钩子函数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_lock&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(!L-&amp;gt;allowhook);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* !!!! 现场需恢复，别忘了，亲 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;allowhook = 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;ci-&amp;gt;top = &lt;span style=&#34;color:#c34e00&#34;&gt;restorestack&lt;/span&gt;(L, ci_top);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;top = &lt;span style=&#34;color:#c34e00&#34;&gt;restorestack&lt;/span&gt;(L, top);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**补齐固定形参(若实际传入的参数不够)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**将传给固定形参的值mv到top之上且纠正top&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**将剩下(若还有剩下)的参数留给变参...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; StkId &lt;span style=&#34;color:#c34e00&#34;&gt;adjust_varargs&lt;/span&gt; (lua_State *L, Proto *p, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; actual) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nfixargs = p-&amp;gt;numparams;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Table *htab = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  StkId base, fixed;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 传入的参数数量不够填补fixed参数的，直接补nil：至少得把fixed形参需要的个数补齐 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (; actual &amp;lt; nfixargs; ++actual)&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setnilvalue&lt;/span&gt;(L-&amp;gt;top++);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#if defined(LUA_COMPAT_VARARG)&#x9;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 将留给...的参数信息打包到额外的arg表中 */&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (p-&amp;gt;is_vararg &amp;amp; VARARG_NEEDSARG) { &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* compat. with old-style vararg? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nvar = actual - nfixargs;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* number of extra arguments */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(p-&amp;gt;is_vararg &amp;amp; VARARG_HASARG);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_checkGC&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_checkstack&lt;/span&gt;(L, p-&amp;gt;maxstacksize);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    htab = &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_new&lt;/span&gt;(L, nvar, 1);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* create `arg&amp;#39; table */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i=0; i&amp;lt;nvar; i++)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* put extra arguments into `arg&amp;#39; table */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2n&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_setnum&lt;/span&gt;(L, htab, i+1), L-&amp;gt;top - nvar + i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* store counter in field `n&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaH_setstr&lt;/span&gt;(L, htab, &lt;span style=&#34;color:#c34e00&#34;&gt;luaS_newliteral&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt;)), &lt;span style=&#34;color:#c34e00&#34;&gt;cast_num&lt;/span&gt;(nvar));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* move fixed parameters to final position */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fixed = L-&amp;gt;top - actual;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* first fixed argument */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  base = L-&amp;gt;top;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* final position of first argument */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 从第一个参数开始移动其值到被调函数的fixed‘arg域,直到给所有的fixed&amp;#39;arg赋值为止&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 如果还剩下多余的参数，则直接保留下来(留给变参...)，无需移动&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i=0; i&amp;lt;nfixargs; i++) {&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, L-&amp;gt;top++, fixed+i);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* !!!!这里移动了top指针 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setnilvalue&lt;/span&gt;(fixed+i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* add `arg&amp;#39; parameter */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (htab) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;sethvalue&lt;/span&gt;(L, L-&amp;gt;top++, htab);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;iswhite&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;obj2gco&lt;/span&gt;(htab)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; base;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 直接看代码 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; StkId &lt;span style=&#34;color:#c34e00&#34;&gt;tryfuncTM&lt;/span&gt; (lua_State *L, StkId func) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *tm = &lt;span style=&#34;color:#c34e00&#34;&gt;luaT_gettmbyobj&lt;/span&gt;(L, func, TM_CALL);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  StkId p;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ptrdiff_t&lt;/span&gt; funcr = &lt;span style=&#34;color:#c34e00&#34;&gt;savestack&lt;/span&gt;(L, func);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisfunction&lt;/span&gt;(tm))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_typeerror&lt;/span&gt;(L, func, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;call&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Open a hole inside the stack at `func&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (p = L-&amp;gt;top; p &amp;gt; func; p--) &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, p, p-1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;incr_top&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  func = &lt;span style=&#34;color:#c34e00&#34;&gt;restorestack&lt;/span&gt;(L, funcr);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* previous call may change stack */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, func, tm);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* tag method is the new function to be called */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; func;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define inc_ci(L) \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ((L-&amp;gt;ci == L-&amp;gt;end_ci) ? growCI(L) : \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;   (condhardstacktests(luaD_reallocCI(L, L-&amp;gt;size_ci)), ++L-&amp;gt;ci))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 先做调用前的准备工作，后进入函数调用(for C,not Lua)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** nresults:-1返回所有的返回值&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 0：不要返回值&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 1：期待一个返回值&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_precall&lt;/span&gt; (lua_State *L, StkId func, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nresults) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  LClosure *cl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ptrdiff_t&lt;/span&gt; funcr;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 当前调用函数的pc距离stack栈底的偏移量 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisfunction&lt;/span&gt;(func)) &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `func&amp;#39; is not a function? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    func = &lt;span style=&#34;color:#c34e00&#34;&gt;tryfuncTM&lt;/span&gt;(L, func);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* check the `function&amp;#39; tag method */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 随着新的调用产生,ci链/stack可能因为增长而移动位置&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 故不能记住绝地位置而记住相对位置，后面根据此值最终确定ci-&amp;gt;func &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  funcr = &lt;span style=&#34;color:#c34e00&#34;&gt;savestack&lt;/span&gt;(L, func);&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cl = &amp;amp;&lt;span style=&#34;color:#c34e00&#34;&gt;clvalue&lt;/span&gt;(func)-&amp;gt;l;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;ci-&amp;gt;savedpc = L-&amp;gt;savedpc;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 正式调用前，存档L-&amp;gt;savedpc至L-&amp;gt;ci-&amp;gt;savedpc */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!cl-&amp;gt;isC) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Lua function? prepare its call */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CallInfo *ci;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    StkId st, base;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Proto *p = cl-&amp;gt;p;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_checkstack&lt;/span&gt;(L, p-&amp;gt;maxstacksize);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    func = &lt;span style=&#34;color:#c34e00&#34;&gt;restorestack&lt;/span&gt;(L, funcr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!p-&amp;gt;is_vararg) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no varargs?(不是变参函数?即函数参数数量固定) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      base = func + 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;top &amp;gt; base + p-&amp;gt;numparams)&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 删除栈上多余的传入参数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        L-&amp;gt;top = base + p-&amp;gt;numparams;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* vararg function */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nargs = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_int&lt;/span&gt;(L-&amp;gt;top - func) - 1;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 计算实际传入的参数个数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      base = &lt;span style=&#34;color:#c34e00&#34;&gt;adjust_varargs&lt;/span&gt;(L, p, nargs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      func = &lt;span style=&#34;color:#c34e00&#34;&gt;restorestack&lt;/span&gt;(L, funcr);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* previous call may change the stack */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ci = &lt;span style=&#34;color:#c34e00&#34;&gt;inc_ci&lt;/span&gt;(L);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* now `enter&amp;#39; new function */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ci-&amp;gt;func = func;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;base = ci-&amp;gt;base = base;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里可以推导出L-&amp;gt;base----&amp;gt;L-&amp;gt;top之间的区域都是ci的私有栈空间(lua,c均如此) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ci-&amp;gt;top = L-&amp;gt;base + p-&amp;gt;maxstacksize;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(ci-&amp;gt;top &amp;lt;= L-&amp;gt;stack_last);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;savedpc = p-&amp;gt;code;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* starting point */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ci-&amp;gt;tailcalls = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ci-&amp;gt;nresults = nresults;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 新的函数的私有栈空间直接补nil(参数的区域除外) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (st = L-&amp;gt;top; st &amp;lt; ci-&amp;gt;top; st++)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setnilvalue&lt;/span&gt;(st);&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 最后调整L-&amp;gt;top使其指向本次ci的栈顶,对于Lua函数而言L-&amp;gt;Base----&amp;gt;(L-&amp;gt;Base+L-&amp;gt;maxstacksize)之间都是我私有的了，且是有效的&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;** C由于L-&amp;gt;top是动态变化的，故而L-&amp;gt;top的值被设置为传入参数后栈顶的位置，后面会因为push等函数而动态变化-&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;top = ci-&amp;gt;top;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;hookmask &amp;amp; LUA_MASKCALL) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      L-&amp;gt;savedpc++;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* hooks assume &amp;#39;pc&amp;#39; is already incremented */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_callhook&lt;/span&gt;(L, LUA_HOOKCALL, -1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      L-&amp;gt;savedpc--;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* correct &amp;#39;pc&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; PCRLUA;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* if is a C function, call it */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CallInfo *ci;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; n;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_checkstack&lt;/span&gt;(L, LUA_MINSTACK);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ensure minimum stack size */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 填充新的CallInfo */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ci = &lt;span style=&#34;color:#c34e00&#34;&gt;inc_ci&lt;/span&gt;(L);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* now `enter&amp;#39; new function */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ci-&amp;gt;func = &lt;span style=&#34;color:#c34e00&#34;&gt;restorestack&lt;/span&gt;(L, funcr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;base = ci-&amp;gt;base = ci-&amp;gt;func + 1;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* C函数没有Lua函数的变参问题，所以这里无需adjust_varargs() */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &amp;#34;OP_CALL指令&amp;#34;已经将L-&amp;gt;top指向了最后一个传入参数的上方 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ci-&amp;gt;top = L-&amp;gt;top + LUA_MINSTACK;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里和上面luaD_checkstack呼应 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(ci-&amp;gt;top &amp;lt;= L-&amp;gt;stack_last);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ci-&amp;gt;nresults = nresults;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;hookmask &amp;amp; LUA_MASKCALL)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_callhook&lt;/span&gt;(L, LUA_HOOKCALL, -1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_unlock&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;// L-&amp;gt;top已经在lvm中准备好了(call和vararg指令)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    n = (*&lt;span style=&#34;color:#c34e00&#34;&gt;curr_func&lt;/span&gt;(L)-&amp;gt;c.f)(L);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* do the actual call */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_lock&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (n &amp;lt; 0)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* yielding, co调用yield，co.yeild运行完毕了,co.yeild还不能释放ci-list信息，需等到母thread调用resume，将控制权转移到co，再在co.resume中luaD_poscall()才释放 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; PCRYIELD;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_poscall&lt;/span&gt;(L, L-&amp;gt;top - n);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 调整子C函数的返回值到指定位置并适配母函数的wanted(results) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; PCRC;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 函数调用结束后，处理实际返回值和期待返回值的匹配问题&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 也处理ci链的嵌套逻辑（本层ci结束往后退一层)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 即处理C函数调用,也处理Lua函数执行结束即将返回这两种情况&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 没有检测C函数说返回了n个参数，当实际上没有返回那么多参数的情况&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** RETURNS: wanted.cnt: 0:返回多个参数，1：返回0个，2：返回1个。。。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_poscall&lt;/span&gt; (lua_State *L, StkId firstResult) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  StkId res;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; wanted, i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  CallInfo *ci;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;hookmask &amp;amp; LUA_MASKRET)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    firstResult = &lt;span style=&#34;color:#c34e00&#34;&gt;callrethooks&lt;/span&gt;(L, firstResult);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ci = L-&amp;gt;ci--;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  res = ci-&amp;gt;func;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* res == final position of 1st result */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  wanted = ci-&amp;gt;nresults;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;base = (ci - 1)-&amp;gt;base;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* restore base */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;savedpc = (ci - 1)-&amp;gt;savedpc;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* restore savedpc */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* move results to correct place */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i = wanted; i != 0 &amp;amp;&amp;amp; firstResult &amp;lt; L-&amp;gt;top; i--)&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这个判断即处理非尾调用，又处理了尾调用 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, res++, firstResult++);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* wanted根据实际返回数量赋值 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (i-- &amp;gt; 0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setnilvalue&lt;/span&gt;(res++);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* local a, b, c = funcA(...), 针对 funcA的返回值不够则补nil */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** L-&amp;gt;top恢复到最后一个返回参数在stack的位置，这里和调用函数之前，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 将L-&amp;gt;top设置到最后一个传入参数在stack的位置相呼应了！！！&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 最终将L-&amp;gt;top恢复到ci-&amp;gt;top是由“OP_CALL”指令负责&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;top = res;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; (wanted - LUA_MULTRET);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 0 iff wanted == LUA_MULTRET */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Call a function (C or Lua). The function to be called is at *func.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** The arguments are on the stack, right after the function.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** When returns, all the results are on the stack, starting at the original&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** function position.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_call&lt;/span&gt; (lua_State *L, StkId func, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nResults) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (++L-&amp;gt;nCcalls &amp;gt;= LUAI_MAXCCALLS) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 调用层次太深，进入抛出异常 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;nCcalls == LUAI_MAXCCALLS)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_runerror&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;C stack overflow&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;nCcalls &amp;gt;= (LUAI_MAXCCALLS + (LUAI_MAXCCALLS&amp;gt;&amp;gt;3)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_throw&lt;/span&gt;(L, LUA_ERRERR);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* error while handing stack error */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luaD_precall&lt;/span&gt;(L, func, nResults) == PCRLUA)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* is a Lua function? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaV_execute&lt;/span&gt;(L, 1);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* call it, 这里的1是真的妙啊 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;nCcalls--;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_checkGC&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 协程co开始执行co.resume 母thread在lbaselib.auxresume()中交出CPU，等待子co返回 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;resume&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *ud) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  StkId firstArg = &lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(StkId, ud);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 没有传参时firstArg指向top,下面的firstArg&amp;gt;L-&amp;gt;base还是成立 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  CallInfo *ci = L-&amp;gt;ci;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;status == 0) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* start coroutine? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(ci == L-&amp;gt;base_ci);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 尚未有任何调用链ci生成(或co已运行完毕) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(firstArg &amp;gt; L-&amp;gt;base);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 至少还有个参数(是co.fun),意味着不是co运行完毕的状态，运行完毕后不能调用本函数了，co.fun都没有了，ci也是空的，ro不知道该怎么运行了不是 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 若是崭新的co第一次开始运行resume,则会生成相应的ci（co.initFun),再运行起来和普通的c.main中构建一个thread后第一次运行是一样的 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luaD_precall&lt;/span&gt;(L, firstArg - 1, LUA_MULTRET) != PCRLUA)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* resuming from previous yield */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(L-&amp;gt;status == LUA_YIELD);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 非YEILD状态，不能调用resume */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;status = 0;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* switch back status */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;f_isLua&lt;/span&gt;(ci)) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `common&amp;#39; yield? ci这里指向的是baselib.yield */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* finish interrupted execution of `OP_CALL&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(*((ci-1)-&amp;gt;savedpc - 1)) == OP_CALL ||&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(*((ci-1)-&amp;gt;savedpc - 1)) == OP_TAILCALL);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luaD_poscall&lt;/span&gt;(L, firstArg))  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* complete it... 结束上述说的baselib.yield的调用流程 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        L-&amp;gt;top = L-&amp;gt;ci-&amp;gt;top;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* and correct top if not multiple results,如果是 multiple results则由跟在后面的vararg或者setlist来调整L-&amp;gt;top(他们还需要用到L-&amp;gt;top来确定传入参数的个数呢,所以这里不能将其恢复到L-&amp;gt;ci-&amp;gt;top，) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* yielded inside a hook: just continue its execution */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      L-&amp;gt;base = L-&amp;gt;ci-&amp;gt;base;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaV_execute&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;cast_int&lt;/span&gt;(L-&amp;gt;ci - L-&amp;gt;base_ci));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里的nexeccalls值得好好推导一下 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;resume_error&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *msg) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;top = L-&amp;gt;ci-&amp;gt;base;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setsvalue2s&lt;/span&gt;(L, L-&amp;gt;top, &lt;span style=&#34;color:#c34e00&#34;&gt;luaS_new&lt;/span&gt;(L, msg));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;incr_top&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_unlock&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; LUA_ERRRUN;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LUA_API &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;lua_resume&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nargs) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; status;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_lock&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;status != LUA_YIELD &amp;amp;&amp;amp; (L-&amp;gt;status != 0 || L-&amp;gt;ci != L-&amp;gt;base_ci))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;resume_error&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;cannot resume non-suspended coroutine&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;nCcalls &amp;gt;= LUAI_MAXCCALLS)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;resume_error&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;C stack overflow&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luai_userstateresume&lt;/span&gt;(L, nargs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(L-&amp;gt;errfunc == 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;baseCcalls = ++L-&amp;gt;nCcalls;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 必须protected状态下call，不然协程出错，整个进程都会被关闭 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 本函数还没有为co生成ci链,resume中会生成co的ci调用链（如果是第一次resume）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  status = &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_rawrunprotected&lt;/span&gt;(L, resume, L-&amp;gt;top - nargs);&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (status != 0) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* error? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;status = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_byte&lt;/span&gt;(status);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* mark thread as `dead&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_seterrorobj&lt;/span&gt;(L, status, L-&amp;gt;top);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;ci-&amp;gt;top = L-&amp;gt;top;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 上面压入了errMsg这里更新下top */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(L-&amp;gt;nCcalls == L-&amp;gt;baseCcalls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    status = L-&amp;gt;status;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* coroutinue运行中出让则为 LUA_YIELD */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --L-&amp;gt;nCcalls;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_unlock&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; status;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LUA_API &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;lua_yield&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nresults) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luai_userstateyield&lt;/span&gt;(L, nresults);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_lock&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;nCcalls &amp;gt; L-&amp;gt;baseCcalls)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_runerror&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;attempt to yield across metamethod/C-call boundary&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;base = L-&amp;gt;top - nresults;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* protect stack slots below */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;status = LUA_YIELD;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_unlock&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; -1;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* note:这是一个特殊的值，用于标识从yield返回 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* old_top 指向被调用函数slot &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** KEYCODE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_pcall&lt;/span&gt; (lua_State *L, Pfunc func, &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *u,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#00f&#34;&gt;ptrdiff_t&lt;/span&gt; old_top, &lt;span style=&#34;color:#00f&#34;&gt;ptrdiff_t&lt;/span&gt; ef) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; status;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;short&lt;/span&gt; oldnCcalls = L-&amp;gt;nCcalls;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 存档当前的ci,以便发生错误恢复时使用 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ptrdiff_t&lt;/span&gt; old_ci = &lt;span style=&#34;color:#c34e00&#34;&gt;saveci&lt;/span&gt;(L, L-&amp;gt;ci);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里只能记住offset而不是绝对地址(call过程中ci可能会调整!) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lu_byte old_allowhooks = L-&amp;gt;allowhook;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ptrdiff_t&lt;/span&gt; old_errfunc = L-&amp;gt;errfunc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;errfunc = ef;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  status = &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_rawrunprotected&lt;/span&gt;(L, func, u);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 发生了错误，回滚到存档时刻 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (status != 0) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* an error occurred? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    StkId oldtop = &lt;span style=&#34;color:#c34e00&#34;&gt;restorestack&lt;/span&gt;(L, old_top);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaF_close&lt;/span&gt;(L, oldtop);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* close eventual pending closures */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_seterrorobj&lt;/span&gt;(L, status, oldtop);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 顺带correct了top */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;nCcalls = oldnCcalls;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;ci = &lt;span style=&#34;color:#c34e00&#34;&gt;restoreci&lt;/span&gt;(L, old_ci);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;base = L-&amp;gt;ci-&amp;gt;base;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;savedpc = L-&amp;gt;ci-&amp;gt;savedpc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    L-&amp;gt;allowhook = old_allowhooks;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;restore_stack_limit&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;errfunc = old_errfunc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; status;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Execute a protected parser.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; SParser {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* data to `f_parser&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ZIO *z;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Mbuffer buff;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* buffer to be used by the scanner */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *name;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;f_parser&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *ud) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Proto *tf;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Closure *cl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; SParser *p = &lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; SParser *, ud);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; c = &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_lookahead&lt;/span&gt;(p-&amp;gt;z);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_checkGC&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tf = ((c == LUA_SIGNATURE[0]) ? luaU_undump : luaY_parser)(L, p-&amp;gt;z,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                             &amp;amp;p-&amp;gt;buff, p-&amp;gt;name);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cl = &lt;span style=&#34;color:#c34e00&#34;&gt;luaF_newLclosure&lt;/span&gt;(L, tf-&amp;gt;nups, &lt;span style=&#34;color:#c34e00&#34;&gt;hvalue&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gt&lt;/span&gt;(L)));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 新生成的clouse的env直接来自gobal&amp;#39;table而不是上层函数的env */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cl-&amp;gt;l.p = tf;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i = 0; i &amp;lt; tf-&amp;gt;nups; i++)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* initialize eventual upvalues */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cl-&amp;gt;l.upvals[i] = &lt;span style=&#34;color:#c34e00&#34;&gt;luaF_newupval&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setclvalue&lt;/span&gt;(L, L-&amp;gt;top, cl);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;incr_top&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_protectedparser&lt;/span&gt; (lua_State *L, ZIO *z, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *name) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; SParser p;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; status;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  p.z = z; p.name = name;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_initbuffer&lt;/span&gt;(L, &amp;amp;p.buff);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  status = &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_pcall&lt;/span&gt;(L, f_parser, &amp;amp;p, &lt;span style=&#34;color:#c34e00&#34;&gt;savestack&lt;/span&gt;(L, L-&amp;gt;top), L-&amp;gt;errfunc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_freebuffer&lt;/span&gt;(L, &amp;amp;p.buff);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; status;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Lua 5.1 Reference Manual</title>
      <link>http://shanks.link/blog/2021/05/26/lua-5.1-reference-manual/</link>
      <pubDate>Wed, 26 May 2021 15:31:07 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/05/26/lua-5.1-reference-manual/</guid>
      <description>&lt;p&gt;Lua 5.1 Reference Manual&#xA;by Roberto Ierusalimschy, Luiz Henrique de Figueiredo, Waldemar Celes&lt;/p&gt;&#xA;&lt;p&gt;Copyright © 2006–2012 Lua.org, PUC-Rio. Freely available under the terms of the Lua license.&lt;/p&gt;&#xA;&lt;p&gt;contents · index · other versions · english · português · español · deutsch&#xA;1 – Introduction&#xA;Lua is an extension programming language designed to support general procedural programming with data description facilities. It also offers good support for object-oriented programming, functional programming, and data-driven programming. Lua is intended to be used as a powerful, light-weight scripting language for any program that needs one. Lua is implemented as a library, written in clean C (that is, in the common subset of ANSI C and C++).&lt;/p&gt;</description>
    </item>
    <item>
      <title>lua源码注释-lvm.c</title>
      <link>http://shanks.link/blog/2021/05/23/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-lvm.c/</link>
      <pubDate>Sun, 23 May 2021 23:07:16 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/05/23/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-lvm.c/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/shankusu2017/lua&#34;&gt;github链接&lt;/a&gt; lua515子域&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** $Id: lvm.c,v 2.63.1.5 2011/08/17 20:43:11 roberto Exp $&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Lua virtual machine&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** See Copyright Notice in lua.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define lvm_c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define LUA_CORE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lua.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ldebug.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ldo.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lfunc.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lgc.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lobject.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lopcodes.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lstate.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lstring.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ltable.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ltm.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lvm.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* limit for table tag-method chains (to avoid loops) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define MAXTAGLOOP&#x9;100&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* number,string--&amp;gt;number */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *&lt;span style=&#34;color:#c34e00&#34;&gt;luaV_tonumber&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *obj, TValue *n) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lua_Number num;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnumber&lt;/span&gt;(obj)) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; obj;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisstring&lt;/span&gt;(obj) &amp;amp;&amp;amp; &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_str2d&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;svalue&lt;/span&gt;(obj), &amp;amp;num)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(n, num);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; n;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* number-&amp;gt;string */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaV_tostring&lt;/span&gt; (lua_State *L, StkId obj) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnumber&lt;/span&gt;(obj))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; s[LUAI_MAXNUMBER2STR];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lua_Number n = &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(obj);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_number2str&lt;/span&gt;(s, n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setsvalue2s&lt;/span&gt;(L, obj, &lt;span style=&#34;color:#c34e00&#34;&gt;luaS_new&lt;/span&gt;(L, s));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 判断调试MASK是否设置，以及相关条件是否已满足，满足则进入钩子函数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;traceexec&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; Instruction *pc) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lu_byte mask = L-&amp;gt;hookmask;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; Instruction *oldpc = L-&amp;gt;savedpc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;savedpc = pc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; ((mask &amp;amp; LUA_MASKCOUNT) &amp;amp;&amp;amp; L-&amp;gt;hookcount == 0) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 执行了指定数量的pc，调用指定的钩子函数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;resethookcount&lt;/span&gt;(L);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_callhook&lt;/span&gt;(L, LUA_HOOKCOUNT, -1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (mask &amp;amp; LUA_MASKLINE) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* LUA_MASKLINE不是说执行到了某一行，具体的意思看下面的代码 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Proto *p = &lt;span style=&#34;color:#c34e00&#34;&gt;ci_func&lt;/span&gt;(L-&amp;gt;ci)-&amp;gt;l.p;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; npc = &lt;span style=&#34;color:#c34e00&#34;&gt;pcRel&lt;/span&gt;(pc, p);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; newline = &lt;span style=&#34;color:#c34e00&#34;&gt;getline&lt;/span&gt;(p, npc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* call linehook when enter a new function, when jump back (loop),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;       or when enter a new line */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (npc == 0 || pc &amp;lt;= oldpc || newline != &lt;span style=&#34;color:#c34e00&#34;&gt;getline&lt;/span&gt;(p, &lt;span style=&#34;color:#c34e00&#34;&gt;pcRel&lt;/span&gt;(oldpc, p)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_callhook&lt;/span&gt;(L, LUA_HOOKLINE, newline);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 调用元方法，将结果返回给res */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;callTMres&lt;/span&gt; (lua_State *L, StkId res, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *f,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *p1, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *p2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;ptrdiff_t&lt;/span&gt; result = &lt;span style=&#34;color:#c34e00&#34;&gt;savestack&lt;/span&gt;(L, res);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, L-&amp;gt;top, f);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* push function */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, L-&amp;gt;top+1, p1);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 1st argument */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, L-&amp;gt;top+2, p2);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 2nd argument */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_checkstack&lt;/span&gt;(L, 3);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;top += 3;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_call&lt;/span&gt;(L, L-&amp;gt;top - 3, 1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  res = &lt;span style=&#34;color:#c34e00&#34;&gt;restorestack&lt;/span&gt;(L, result);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;top--;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, res, L-&amp;gt;top);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;callTM&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *f, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *p1,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *p2, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *p3) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, L-&amp;gt;top, f);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* push function */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, L-&amp;gt;top+1, p1);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 1st argument */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, L-&amp;gt;top+2, p2);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 2nd argument */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, L-&amp;gt;top+3, p3);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 3th argument */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_checkstack&lt;/span&gt;(L, 4);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L-&amp;gt;top += 4;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_call&lt;/span&gt;(L, L-&amp;gt;top - 4, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaV_gettable&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *t, TValue *key, StkId val) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; loop;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (loop = 0; loop &amp;lt; MAXTAGLOOP; loop++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *tm;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttistable&lt;/span&gt;(t)) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `t&amp;#39; is a table? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Table *h = &lt;span style=&#34;color:#c34e00&#34;&gt;hvalue&lt;/span&gt;(t);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *res = &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_get&lt;/span&gt;(h, key); &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* do a primitive get */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(res) ||  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* result is no nil? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (tm = &lt;span style=&#34;color:#c34e00&#34;&gt;fasttm&lt;/span&gt;(L, h-&amp;gt;metatable, TM_INDEX)) == NULL) { &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* or no TM? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, val, res);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else will try the tag method */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(tm = &lt;span style=&#34;color:#c34e00&#34;&gt;luaT_gettmbyobj&lt;/span&gt;(L, t, TM_INDEX)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_typeerror&lt;/span&gt;(L, t, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisfunction&lt;/span&gt;(tm)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;callTMres&lt;/span&gt;(L, val, tm, t, key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    t = tm;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else repeat with `tm&amp;#39; */&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_runerror&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;loop in gettable&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaV_settable&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *t, TValue *key, StkId val) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; loop;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TValue temp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (loop = 0; loop &amp;lt; MAXTAGLOOP; loop++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *tm;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttistable&lt;/span&gt;(t)) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `t&amp;#39; is a table? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Table *h = &lt;span style=&#34;color:#c34e00&#34;&gt;hvalue&lt;/span&gt;(t);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      TValue *oldval = &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_set&lt;/span&gt;(L, h, key); &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* do a primitive set */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(oldval) ||  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* result is no nil? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (tm = &lt;span style=&#34;color:#c34e00&#34;&gt;fasttm&lt;/span&gt;(L, h-&amp;gt;metatable, TM_NEWINDEX)) == NULL) { &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* or no TM? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2t&lt;/span&gt;(L, oldval, val);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        h-&amp;gt;flags = 0;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新flags:假设所有的tm都存在 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_barriert&lt;/span&gt;(L, h, val);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else will try the tag method */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(tm = &lt;span style=&#34;color:#c34e00&#34;&gt;luaT_gettmbyobj&lt;/span&gt;(L, t, TM_NEWINDEX)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_typeerror&lt;/span&gt;(L, t, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisfunction&lt;/span&gt;(tm)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;callTM&lt;/span&gt;(L, tm, t, key, val);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else repeat with `tm&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setobj&lt;/span&gt;(L, &amp;amp;temp, tm);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* avoid pointing inside table (may rehash) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    t = &amp;amp;temp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_runerror&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;loop in settable&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 同上callTM，针对tblA+tblB这种两个操作数的，尝试调用特定元方法 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;call_binTM&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *p1, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *p2,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       StkId res, TMS event) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *tm = &lt;span style=&#34;color:#c34e00&#34;&gt;luaT_gettmbyobj&lt;/span&gt;(L, p1, event);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* try first operand */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(tm))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tm = &lt;span style=&#34;color:#c34e00&#34;&gt;luaT_gettmbyobj&lt;/span&gt;(L, p2, event);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* try second operand */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(tm)) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;callTMres&lt;/span&gt;(L, res, tm, p1, p2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* only for userdata */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *&lt;span style=&#34;color:#c34e00&#34;&gt;get_compTM&lt;/span&gt; (lua_State *L, Table *mt1, Table *mt2,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                  TMS event) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *tm1 = &lt;span style=&#34;color:#c34e00&#34;&gt;fasttm&lt;/span&gt;(L, mt1, event);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *tm2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (tm1 == NULL) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; NULL;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no metamethod */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (mt1 == mt2) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; tm1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* same metatables =&amp;gt; same metamethods */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tm2 = &lt;span style=&#34;color:#c34e00&#34;&gt;fasttm&lt;/span&gt;(L, mt2, event);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (tm2 == NULL) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; NULL;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no metamethod */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luaO_rawequalObj&lt;/span&gt;(tm1, tm2))  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* same metamethods? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; tm1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 元方法：比较操作 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;call_orderTM&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *p1, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *p2,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         TMS event) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *tm1 = &lt;span style=&#34;color:#c34e00&#34;&gt;luaT_gettmbyobj&lt;/span&gt;(L, p1, event);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *tm2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(tm1)) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; -1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no metamethod? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tm2 = &lt;span style=&#34;color:#c34e00&#34;&gt;luaT_gettmbyobj&lt;/span&gt;(L, p2, event);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;luaO_rawequalObj&lt;/span&gt;(tm1, tm2))  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* different metamethods? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; -1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;callTMres&lt;/span&gt;(L, L-&amp;gt;top, tm1, p1, p2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; !&lt;span style=&#34;color:#c34e00&#34;&gt;l_isfalse&lt;/span&gt;(L-&amp;gt;top);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;l_strcmp&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TString *ls, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TString *rs) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *l = &lt;span style=&#34;color:#c34e00&#34;&gt;getstr&lt;/span&gt;(ls);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; ll = ls-&amp;gt;tsv.len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *r = &lt;span style=&#34;color:#c34e00&#34;&gt;getstr&lt;/span&gt;(rs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; lr = rs-&amp;gt;tsv.len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (;;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; temp = &lt;span style=&#34;color:#c34e00&#34;&gt;strcoll&lt;/span&gt;(l, r);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 依环境变量 LC_COLLATE 所指定的文字排列次序来比较 s1 和 s2 字符串 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (temp != 0) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; temp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* strings are equal up to a `\0&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; len = &lt;span style=&#34;color:#c34e00&#34;&gt;strlen&lt;/span&gt;(l);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* index of first `\0&amp;#39; in both strings */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (len == lr)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* r is finished? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; (len == ll) ? 0 : 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (len == ll)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* l is finished? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; -1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* l is smaller than r (because r is not finished) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* both strings longer than `len&amp;#39;; go on comparing (after the `\0&amp;#39;) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      len++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      l += len; ll -= len; r += len; lr -= len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 比较指令 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaV_lessthan&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *l, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *r) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; res;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttype&lt;/span&gt;(l) != &lt;span style=&#34;color:#c34e00&#34;&gt;ttype&lt;/span&gt;(r))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_ordererror&lt;/span&gt;(L, l, r);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnumber&lt;/span&gt;(l))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numlt&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(l), &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(r));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisstring&lt;/span&gt;(l))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;l_strcmp&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;rawtsvalue&lt;/span&gt;(l), &lt;span style=&#34;color:#c34e00&#34;&gt;rawtsvalue&lt;/span&gt;(r)) &amp;lt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; ((res = &lt;span style=&#34;color:#c34e00&#34;&gt;call_orderTM&lt;/span&gt;(L, l, r, TM_LT)) != -1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; res;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_ordererror&lt;/span&gt;(L, l, r);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;lessequal&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *l, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *r) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; res;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttype&lt;/span&gt;(l) != &lt;span style=&#34;color:#c34e00&#34;&gt;ttype&lt;/span&gt;(r))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_ordererror&lt;/span&gt;(L, l, r);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnumber&lt;/span&gt;(l))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numle&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(l), &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(r));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisstring&lt;/span&gt;(l))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;l_strcmp&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;rawtsvalue&lt;/span&gt;(l), &lt;span style=&#34;color:#c34e00&#34;&gt;rawtsvalue&lt;/span&gt;(r)) &amp;lt;= 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; ((res = &lt;span style=&#34;color:#c34e00&#34;&gt;call_orderTM&lt;/span&gt;(L, l, r, TM_LE)) != -1)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* first try `le&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; res;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; ((res = &lt;span style=&#34;color:#c34e00&#34;&gt;call_orderTM&lt;/span&gt;(L, r, l, TM_LT)) != -1)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else try `lt&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; !res;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_ordererror&lt;/span&gt;(L, l, r);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaV_equalval&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *t1, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *t2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *tm;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;ttype&lt;/span&gt;(t1) == &lt;span style=&#34;color:#c34e00&#34;&gt;ttype&lt;/span&gt;(t2));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttype&lt;/span&gt;(t1)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TNIL: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TNUMBER: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numeq&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(t1), &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(t2));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TBOOLEAN: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;bvalue&lt;/span&gt;(t1) == &lt;span style=&#34;color:#c34e00&#34;&gt;bvalue&lt;/span&gt;(t2);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* true must be 1 !! */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TLIGHTUSERDATA: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;pvalue&lt;/span&gt;(t1) == &lt;span style=&#34;color:#c34e00&#34;&gt;pvalue&lt;/span&gt;(t2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TUSERDATA: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;uvalue&lt;/span&gt;(t1) == &lt;span style=&#34;color:#c34e00&#34;&gt;uvalue&lt;/span&gt;(t2)) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      tm = &lt;span style=&#34;color:#c34e00&#34;&gt;get_compTM&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;uvalue&lt;/span&gt;(t1)-&amp;gt;metatable, &lt;span style=&#34;color:#c34e00&#34;&gt;uvalue&lt;/span&gt;(t2)-&amp;gt;metatable,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         TM_EQ);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* will try TM */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TTABLE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;hvalue&lt;/span&gt;(t1) == &lt;span style=&#34;color:#c34e00&#34;&gt;hvalue&lt;/span&gt;(t2)) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      tm = &lt;span style=&#34;color:#c34e00&#34;&gt;get_compTM&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;hvalue&lt;/span&gt;(t1)-&amp;gt;metatable, &lt;span style=&#34;color:#c34e00&#34;&gt;hvalue&lt;/span&gt;(t2)-&amp;gt;metatable, TM_EQ);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* will try TM */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;gcvalue&lt;/span&gt;(t1) == &lt;span style=&#34;color:#c34e00&#34;&gt;gcvalue&lt;/span&gt;(t2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (tm == NULL) &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no TM? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;callTMres&lt;/span&gt;(L, L-&amp;gt;top, tm, t1, t2);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* call TM */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; !&lt;span style=&#34;color:#c34e00&#34;&gt;l_isfalse&lt;/span&gt;(L-&amp;gt;top);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 从last开始，一共链接total个slot          */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaV_concat&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; total, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; last) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    StkId top = L-&amp;gt;base + last + 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; n = 2;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* number of elements handled in this pass (at least 2) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!(&lt;span style=&#34;color:#c34e00&#34;&gt;ttisstring&lt;/span&gt;(top-2) || &lt;span style=&#34;color:#c34e00&#34;&gt;ttisnumber&lt;/span&gt;(top-2)) || !&lt;span style=&#34;color:#c34e00&#34;&gt;tostring&lt;/span&gt;(L, top-1)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;call_binTM&lt;/span&gt;(L, top-2, top-1, top-2, TM_CONCAT))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_concaterror&lt;/span&gt;(L, top-2, top-1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;tsvalue&lt;/span&gt;(top-1)-&amp;gt;len == 0)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* second op is empty? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt;)&lt;span style=&#34;color:#c34e00&#34;&gt;tostring&lt;/span&gt;(L, top - 2);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* result is first op (as string) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* at least two string values; get as many as possible */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; tl = &lt;span style=&#34;color:#c34e00&#34;&gt;tsvalue&lt;/span&gt;(top-1)-&amp;gt;len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *buffer;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* collect total length */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (n = 1; n &amp;lt; total &amp;amp;&amp;amp; &lt;span style=&#34;color:#c34e00&#34;&gt;tostring&lt;/span&gt;(L, top-n-1); n++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; l = &lt;span style=&#34;color:#c34e00&#34;&gt;tsvalue&lt;/span&gt;(top-n-1)-&amp;gt;len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (l &amp;gt;= MAX_SIZET - tl) &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_runerror&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;string length overflow&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        tl += l;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      buffer = &lt;span style=&#34;color:#c34e00&#34;&gt;luaZ_openspace&lt;/span&gt;(L, &amp;amp;&lt;span style=&#34;color:#c34e00&#34;&gt;G&lt;/span&gt;(L)-&amp;gt;buff, tl);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      tl = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i=n; i&amp;gt;0; i--) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* concat all strings */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; l = &lt;span style=&#34;color:#c34e00&#34;&gt;tsvalue&lt;/span&gt;(top-i)-&amp;gt;len;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;memcpy&lt;/span&gt;(buffer+tl, &lt;span style=&#34;color:#c34e00&#34;&gt;svalue&lt;/span&gt;(top-i), l);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        tl += l;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setsvalue2s&lt;/span&gt;(L, top-n, &lt;span style=&#34;color:#c34e00&#34;&gt;luaS_newlstr&lt;/span&gt;(L, buffer, tl));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    total -= n-1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* got `n&amp;#39; strings to create 1 new */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    last -= n-1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (total &amp;gt; 1);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* repeat until only 1 result left */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;Arith&lt;/span&gt; (lua_State *L, StkId ra, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *rb,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *rc, TMS op) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TValue tempb, tempc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *b, *c;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; ((b = &lt;span style=&#34;color:#c34e00&#34;&gt;luaV_tonumber&lt;/span&gt;(rb, &amp;amp;tempb)) != NULL &amp;amp;&amp;amp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (c = &lt;span style=&#34;color:#c34e00&#34;&gt;luaV_tonumber&lt;/span&gt;(rc, &amp;amp;tempc)) != NULL) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lua_Number nb = &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(b), nc = &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(c);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (op) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TM_ADD: &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(ra, &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numadd&lt;/span&gt;(nb, nc)); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TM_SUB: &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(ra, &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numsub&lt;/span&gt;(nb, nc)); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TM_MUL: &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(ra, &lt;span style=&#34;color:#c34e00&#34;&gt;luai_nummul&lt;/span&gt;(nb, nc)); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TM_DIV: &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(ra, &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numdiv&lt;/span&gt;(nb, nc)); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TM_MOD: &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(ra, &lt;span style=&#34;color:#c34e00&#34;&gt;luai_nummod&lt;/span&gt;(nb, nc)); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TM_POW: &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(ra, &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numpow&lt;/span&gt;(nb, nc)); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; TM_UNM: &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(ra, &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numunm&lt;/span&gt;(nb)); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(0); &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;call_binTM&lt;/span&gt;(L, rb, rc, ra, op))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_aritherror&lt;/span&gt;(L, rb, rc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** some macros for common tasks in `luaV_execute&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define runtime_check(L, c)&#x9;{ if (!(c)) break; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 提取指令中A,B,C的值 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define RA(i)&#x9;(base+GETARG_A(i))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* to be used after possible stack reallocation */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define RB(i)&#x9;check_exp(getBMode(GET_OPCODE(i)) == OpArgR, base+GETARG_B(i))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define RC(i)&#x9;check_exp(getCMode(GET_OPCODE(i)) == OpArgR, base+GETARG_C(i))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define RKB(i)&#x9;check_exp(getBMode(GET_OPCODE(i)) == OpArgK, \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;ISK(GETARG_B(i)) ? k+INDEXK(GETARG_B(i)) : base+GETARG_B(i))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define RKC(i)&#x9;check_exp(getCMode(GET_OPCODE(i)) == OpArgK, \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;ISK(GETARG_C(i)) ? k+INDEXK(GETARG_C(i)) : base+GETARG_C(i))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define KBx(i)&#x9;check_exp(getBMode(GET_OPCODE(i)) == OpArgK, k+GETARG_Bx(i))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define dojump(L,pc,i)&#x9;{(pc) += (i); luai_threadyield(L);}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* x可能触发新的frame，这里保存和恢复“部分现场”配合下面的execute一起看 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** pc:为何要存档呢？这是一个局部变量，且是相对frame有效，若切换execute则pc作为上一个execute的局部变量保存起来了，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**    所以为啥要保存这个变量呢？&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** base: {x}可能修改stack,造成base记录的本frame的base失效，故而这里要刷新base&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define Protect(x)&#x9;{ L-&amp;gt;savedpc = pc; {x;}; base = L-&amp;gt;base; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这个宏有意思哈 */&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define arith_op(op,tm) { \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;        TValue *rb = RKB(i); \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;        TValue *rc = RKC(i); \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;        if (ttisnumber(rb) &amp;amp;&amp;amp; ttisnumber(rc)) { \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;          lua_Number nb = nvalue(rb), nc = nvalue(rc); \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;          setnvalue(ra, op(nb, nc)); \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;        } \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;        else \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;          Protect(Arith(L, ra, rb, rc, tm)); \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** KEYCODE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** nexeccalls:Lua连续调用的层次&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** eg: c(0)-&amp;gt;Lua(1)-&amp;gt;Lua(2)-&amp;gt;c()-&amp;gt;Lua(1)-&amp;gt;Lua(2)-&amp;gt;Lua(3)-&amp;gt;c(0)-&amp;gt;Lua(1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 某次Lua调用结束，--nexeccalls，如果nexeccalls==0，表示当前lua调用链结束了，需要跳出luaV_execute函数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 大于0表示本Lua调用结束后，上一层必然还是Lua函数，需要进入reentry点&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaV_execute&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nexeccalls) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  LClosure *cl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  StkId base;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  TValue *k;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; Instruction *pc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; reentry:  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* entry point for new (callInfo,frame) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;isLua&lt;/span&gt;(L-&amp;gt;ci));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* C函数frame的执行不在这里，亲! */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* KEYCODE vm执行的关键参数:base,top,pc,savedpc, closure,k, L-&amp;gt;ci,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 后续因为call和return等切换调用栈时，必须正确处理上述参数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** !!!!!!!! L-&amp;gt;top没有在这里更新，这点要有印象，resason:类似funA(funB())一个函数(frame)运行完毕时的某些状态eg:L-&amp;gt;top&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 对上下文的frame可能有影响，所以这里没有更新L-&amp;gt;top，而是让有关业务(return,call...)自行处理&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  pc = L-&amp;gt;savedpc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cl = &amp;amp;&lt;span style=&#34;color:#c34e00&#34;&gt;clvalue&lt;/span&gt;(L-&amp;gt;ci-&amp;gt;func)-&amp;gt;l;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  base = L-&amp;gt;base;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  k = cl-&amp;gt;p-&amp;gt;k;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* locvars 仅在编译阶段/调试库中有效，虚拟机运行阶段无效(已编码到pc中) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* main loop of interpreter */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (;;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; Instruction i = *pc++;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 等效：*(pc++) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    StkId ra;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 运行钩子逻辑 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; ((L-&amp;gt;hookmask &amp;amp; (LUA_MASKLINE | LUA_MASKCOUNT)) &amp;amp;&amp;amp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (--L-&amp;gt;hookcount == 0 || L-&amp;gt;hookmask &amp;amp; LUA_MASKLINE)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;traceexec&lt;/span&gt;(L, pc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;status == LUA_YIELD) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* did hook yield? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        L-&amp;gt;savedpc = pc - 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      base = L-&amp;gt;base;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* warning!! several(某些) calls may realloc the stack and invalidate `ra&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ra = &lt;span style=&#34;color:#c34e00&#34;&gt;RA&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(base == L-&amp;gt;base &amp;amp;&amp;amp; L-&amp;gt;base == L-&amp;gt;ci-&amp;gt;base);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(base &amp;lt;= L-&amp;gt;top &amp;amp;&amp;amp; L-&amp;gt;top &amp;lt;= L-&amp;gt;stack + L-&amp;gt;stacksize);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* luaG_checkopenop的用途对照上面L-&amp;gt;top的注释看就明白了 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(L-&amp;gt;top == L-&amp;gt;ci-&amp;gt;top || &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_checkopenop&lt;/span&gt;(i));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(i)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_MOVE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, ra, &lt;span style=&#34;color:#c34e00&#34;&gt;RB&lt;/span&gt;(i));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_LOADK: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, ra, &lt;span style=&#34;color:#c34e00&#34;&gt;KBx&lt;/span&gt;(i));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_LOADBOOL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setbvalue&lt;/span&gt;(ra, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(i));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_C&lt;/span&gt;(i)) pc++;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* skip next instruction (if C) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_LOADNIL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TValue *rb = &lt;span style=&#34;color:#c34e00&#34;&gt;RB&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;setnilvalue&lt;/span&gt;(rb--);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (rb &amp;gt;= ra);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_GETUPVAL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; b = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, ra, cl-&amp;gt;upvals[b]-&amp;gt;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_GETGLOBAL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TValue g;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TValue *rb = &lt;span style=&#34;color:#c34e00&#34;&gt;KBx&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;sethvalue&lt;/span&gt;(L, &amp;amp;g, cl-&amp;gt;env);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;ttisstring&lt;/span&gt;(rb));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 全局变量名类型必须是TString */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaV_gettable&lt;/span&gt;(L, &amp;amp;g, rb, ra));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_GETTABLE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaV_gettable&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;RB&lt;/span&gt;(i), &lt;span style=&#34;color:#c34e00&#34;&gt;RKC&lt;/span&gt;(i), ra));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_SETGLOBAL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TValue g;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;sethvalue&lt;/span&gt;(L, &amp;amp;g, cl-&amp;gt;env);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;ttisstring&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;KBx&lt;/span&gt;(i)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaV_settable&lt;/span&gt;(L, &amp;amp;g, &lt;span style=&#34;color:#c34e00&#34;&gt;KBx&lt;/span&gt;(i), ra));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_SETUPVAL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        UpVal *uv = cl-&amp;gt;upvals[&lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(i)];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setobj&lt;/span&gt;(L, uv-&amp;gt;v, ra);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_barrier&lt;/span&gt;(L, uv, ra);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_SETTABLE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaV_settable&lt;/span&gt;(L, ra, &lt;span style=&#34;color:#c34e00&#34;&gt;RKB&lt;/span&gt;(i), &lt;span style=&#34;color:#c34e00&#34;&gt;RKC&lt;/span&gt;(i)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_NEWTABLE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; b = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; c = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_C&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;sethvalue&lt;/span&gt;(L, ra, &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_new&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_fb2int&lt;/span&gt;(b), &lt;span style=&#34;color:#c34e00&#34;&gt;luaO_fb2int&lt;/span&gt;(c)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaC_checkGC&lt;/span&gt;(L));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_SELF: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        StkId rb = &lt;span style=&#34;color:#c34e00&#34;&gt;RB&lt;/span&gt;(i);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 拿到self.sub中的self指代的表 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, ra+1, rb);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 将上述表self存起来 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaV_gettable&lt;/span&gt;(L, rb, &lt;span style=&#34;color:#c34e00&#34;&gt;RKC&lt;/span&gt;(i), ra)); &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 计算self.sub的值 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_ADD: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;arith_op&lt;/span&gt;(luai_numadd, TM_ADD);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_SUB: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;arith_op&lt;/span&gt;(luai_numsub, TM_SUB);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_MUL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;arith_op&lt;/span&gt;(luai_nummul, TM_MUL);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_DIV: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;arith_op&lt;/span&gt;(luai_numdiv, TM_DIV);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_MOD: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;arith_op&lt;/span&gt;(luai_nummod, TM_MOD);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_POW: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;arith_op&lt;/span&gt;(luai_numpow, TM_POW);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_UNM: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TValue *rb = &lt;span style=&#34;color:#c34e00&#34;&gt;RB&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnumber&lt;/span&gt;(rb)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          lua_Number nb = &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(rb);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(ra, &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numunm&lt;/span&gt;(nb));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;Arith&lt;/span&gt;(L, ra, rb, rb, TM_UNM));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_NOT: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; res = &lt;span style=&#34;color:#c34e00&#34;&gt;l_isfalse&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;RB&lt;/span&gt;(i));  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* next assignment may change this value */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setbvalue&lt;/span&gt;(ra, res);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_LEN: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *rb = &lt;span style=&#34;color:#c34e00&#34;&gt;RB&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttype&lt;/span&gt;(rb)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TTABLE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(ra, &lt;span style=&#34;color:#c34e00&#34;&gt;cast_num&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaH_getn&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;hvalue&lt;/span&gt;(rb))));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TSTRING: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(ra, &lt;span style=&#34;color:#c34e00&#34;&gt;cast_num&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;tsvalue&lt;/span&gt;(rb)-&amp;gt;len));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* try metamethod */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;call_binTM&lt;/span&gt;(L, rb, luaO_nilobject, ra, TM_LEN))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_typeerror&lt;/span&gt;(L, rb, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;get length of&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_CONCAT: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; b = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; c = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_C&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaV_concat&lt;/span&gt;(L, c-b+1, c); &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_checkGC&lt;/span&gt;(L));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;RA&lt;/span&gt;(i), base+b);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_JMP: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;dojump&lt;/span&gt;(L, pc, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_sBx&lt;/span&gt;(i));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* KEYCODE 重点，难点，代表性的指令 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;  &#x9;** if ((RK(B) == RK(C)) ~= A) then pc++&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;  &#x9;** OP_EQ后面紧跟着是跳转指令，这里猜测，跳转的值Bx应该短1，因为后面又进行了pc++&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;  &#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_EQ: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TValue *rb = &lt;span style=&#34;color:#c34e00&#34;&gt;RKB&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TValue *rc = &lt;span style=&#34;color:#c34e00&#34;&gt;RKC&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;equalobj&lt;/span&gt;(L, rb, rc) == &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_A&lt;/span&gt;(i))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;dojump&lt;/span&gt;(L, pc, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_sBx&lt;/span&gt;(*pc));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pc++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_LT: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luaV_lessthan&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;RKB&lt;/span&gt;(i), &lt;span style=&#34;color:#c34e00&#34;&gt;RKC&lt;/span&gt;(i)) == &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_A&lt;/span&gt;(i))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;dojump&lt;/span&gt;(L, pc, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_sBx&lt;/span&gt;(*pc));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pc++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_LE: {&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;lessequal&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;RKB&lt;/span&gt;(i), &lt;span style=&#34;color:#c34e00&#34;&gt;RKC&lt;/span&gt;(i)) == &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_A&lt;/span&gt;(i))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;dojump&lt;/span&gt;(L, pc, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_sBx&lt;/span&gt;(*pc));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pc++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_TEST: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;l_isfalse&lt;/span&gt;(ra) != &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_C&lt;/span&gt;(i))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;dojump&lt;/span&gt;(L, pc, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_sBx&lt;/span&gt;(*pc));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pc++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_TESTSET: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TValue *rb = &lt;span style=&#34;color:#c34e00&#34;&gt;RB&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;l_isfalse&lt;/span&gt;(rb) != &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_C&lt;/span&gt;(i)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, ra, rb);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;dojump&lt;/span&gt;(L, pc, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_sBx&lt;/span&gt;(*pc));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pc++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_CALL: {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1)) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; b = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(i);&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 传入参数个数，          B:0：...  1：0个，2：1个，3：2个依次类推 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nresults = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_C&lt;/span&gt;(i) - 1;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 期待的返回值个数 C:0(...), 1:(期待返回0个)，2:(期待返回1个) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 注解99: 当传入的参数数量明确时，设置L-&amp;gt;top告知被调用函数确切的传入参数数量,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;        ** 不明确时，OP_VARARG(fun(...))/&#x9;RETURN.B(funA(funB())等指令中已确定了top的位置，这里不能也不用再更改设置(否则L-&amp;gt;top!=实际传入的参数位置)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;        ** &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;        ** L-&amp;gt;top都是指向了最后一个参数的&amp;#34;位置&amp;#34;,也是告知被调用函数，我已经准备好了你要的参数且top指针已指到相应的位置了&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;        */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (b != 0) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;L-&amp;gt;top = ra+b;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else previous instruction set top */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        L-&amp;gt;savedpc = pc;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 记下原本接下来要执行的下一条指令，等待new&amp;#39;frame运行结束后，继续运行本frame */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luaD_precall&lt;/span&gt;(L, ra, nresults)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; PCRLUA: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            nexeccalls++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 若子函数(frame)是Lua，这里continue才真正开始执行子函数(frame)的opcode */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;goto&lt;/span&gt; reentry;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* restart luaV_execute over new Lua function */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; PCRC: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* it was a C function (`precall&amp;#39; called it); adjust results */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 注解100: C调用结束时luaD_poscall已经将所有的返回值填充到RA开头的addr上,L-&amp;gt;top指向最后一个返回值&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;    ** 期待返回值个数确定时eg:local a,b = fun()，luaD_poscall函数自动赋值了a,b，L-&amp;gt;top已经完成了使命&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;    **     故而这里将其复原。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;    ** 期待返回个数不确定时eg:local t = {fun()}或funA(funB())，这种情况下L-&amp;gt;top指向的最后一个返回值地址，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;    **     将被下一条指令setlist(B=0)或callA(B=0)用于计算传入参数的个数，所以不能复原(下一条指令要用到)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;    */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (nresults &amp;gt;= 0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;L-&amp;gt;top = L-&amp;gt;ci-&amp;gt;top;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            base = L-&amp;gt;base;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 调用过程中stack可能变化而移动，故而重新获取最新的(L-&amp;gt;ci-&amp;gt;base==L-&amp;gt;base)的base，下同 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 子函数(frame)为c,luaD_precall的返回意味着子函数(frame)已运行完毕，相关参数也调整完毕&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;&#x9;** 这里接着运行母函数(frame)的紧跟着OP_CALL后面的下一条指令 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* yield,交出lua的执行权 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_TAILCALL: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* A B C return R(A)(R(A+1), ... ,R(A+B-1)) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; b = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (b != 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;L-&amp;gt;top = ra+b;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else previous instruction set top */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* return fun(...) 前面的OP_VARARG指令设置好了L-&amp;gt;top */&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        L-&amp;gt;savedpc = pc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_C&lt;/span&gt;(i) - 1 == LUA_MULTRET);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 尾调用的定义中：必须返回其调用返回的所有值，所以这里C必须为0 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luaD_precall&lt;/span&gt;(L, ra, LUA_MULTRET)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; PCRLUA: {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 画图，代码不难，看懂它们 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* tail call: put new frame in place of previous one */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            CallInfo *ci = L-&amp;gt;ci - 1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* previous frame */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; aux;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            StkId func = ci-&amp;gt;func;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            StkId pfunc = (ci+1)-&amp;gt;func;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* previous function index */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;openupval) &lt;span style=&#34;color:#c34e00&#34;&gt;luaF_close&lt;/span&gt;(L, ci-&amp;gt;base);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            L-&amp;gt;base = ci-&amp;gt;base = ci-&amp;gt;func + ((ci+1)-&amp;gt;base - pfunc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ！！！！移动后func指向的地址不变，但值改变了（由母函数变成了被尾调用的子函数) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (aux = 0; pfunc+aux &amp;lt; L-&amp;gt;top; aux++)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* move frame down */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, func+aux, pfunc+aux);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ci-&amp;gt;top = L-&amp;gt;top = func+aux;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* correct top */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(L-&amp;gt;top == L-&amp;gt;base + &lt;span style=&#34;color:#c34e00&#34;&gt;clvalue&lt;/span&gt;(func)-&amp;gt;l.p-&amp;gt;maxstacksize);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ci-&amp;gt;savedpc = L-&amp;gt;savedpc;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里也要更新 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ci-&amp;gt;tailcalls++;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* one more call lost */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            L-&amp;gt;ci--;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* remove new frame */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;goto&lt;/span&gt; reentry;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; PCRC: {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* it was a C function (`precall&amp;#39; called it) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            base = L-&amp;gt;base;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* restore base */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* yield */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_RETURN: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* return R(A), ... ,R(A+B-2) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; b = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(i);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 0：返回所有值，1：返回0个值，2：返回1个值 ... */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (b != 0) &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* b==0其它的指令argvar等已处理好top,eg:(return ...)或者return(a, fun()) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;L-&amp;gt;top = ra+b-1;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 以便确定返回值的确切个数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (L-&amp;gt;openupval) &lt;span style=&#34;color:#c34e00&#34;&gt;luaF_close&lt;/span&gt;(L, base);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        L-&amp;gt;savedpc = pc;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        b = &lt;span style=&#34;color:#c34e00&#34;&gt;luaD_poscall&lt;/span&gt;(L, ra);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 将子函数的返回值移到指定地方，并适配母函数的result要求 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* lua调用结束，返回值已经按照移动到指定的位置(本fun的addr)，且L-&amp;gt;top指向了最后一个返回值的位置(可以用来计算返回值的个数)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;   这里直接return，将CPU交换到母C函数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (--nexeccalls == 0)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* was previous function running `here&amp;#39;? Lua层面的调用结束了，结束lua的execute的执行，返回到C */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no: return */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* yes: continue its execution */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (b) &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 同上注解100，请往上翻阅 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;  &#x9;L-&amp;gt;top = L-&amp;gt;ci-&amp;gt;top;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;isLua&lt;/span&gt;(L-&amp;gt;ci)); &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* return后，lua连续调用链还没结束，那么上一层必然是个lua函数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(*((L-&amp;gt;ci)-&amp;gt;savedpc - 1)) == OP_CALL);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 上一个指令必然是call */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;goto&lt;/span&gt; reentry;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 切回到母lua的execute的frame */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_FORLOOP: {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 先看 OP_FORPREP 指令 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        lua_Number step = &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(ra+2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        lua_Number idx = &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numadd&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(ra), step); &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* increment index */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        lua_Number limit = &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(ra+1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luai_numlt&lt;/span&gt;(0, step) ? &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numle&lt;/span&gt;(idx, limit)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                : &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numle&lt;/span&gt;(limit, idx)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;dojump&lt;/span&gt;(L, pc, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_sBx&lt;/span&gt;(i));  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* jump back */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(ra, idx);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* update internal index... */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(ra+3, idx);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ...and external index 这个idx才是暴露给for循环里面的i(for i = 0; 10; 1) */&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_FORPREP: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *init = ra;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *plimit = ra+1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *pstep = ra+2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        L-&amp;gt;savedpc = pc;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* next steps may throw errors */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;tonumber&lt;/span&gt;(init, ra))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_runerror&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;LUA_QL&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;for&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34; initial value must be a number&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;tonumber&lt;/span&gt;(plimit, ra+1))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_runerror&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;LUA_QL&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;for&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34; limit must be a number&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;tonumber&lt;/span&gt;(pstep, ra+2))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_runerror&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;LUA_QL&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;for&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34; step must be a number&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(ra, &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numsub&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(ra), &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(pstep)));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里提前-=step */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;dojump&lt;/span&gt;(L, pc, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_sBx&lt;/span&gt;(i));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 跳到cond判断那里 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_TFORLOOP: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 编译模块保证了ra+3是个有意义的参数 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;  &#x9;** next函数会吃掉传入的参数，所以这里CP了一份&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;    */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 结合 http://shankusu.me/lua/ANo-FrillsIntroductiontoLua51VMInstructions/ 文档来看，更容易理解 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        StkId cb = ra + 3;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* call base */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, cb+2, ra+2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, cb+1, ra+1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, cb, ra);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        L-&amp;gt;top = cb+3;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* func. + 2 args (state and index) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaD_call&lt;/span&gt;(L, cb, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_C&lt;/span&gt;(i)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        L-&amp;gt;top = L-&amp;gt;ci-&amp;gt;top;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cb = &lt;span style=&#34;color:#c34e00&#34;&gt;RA&lt;/span&gt;(i) + 3;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* previous call may change the stack */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(cb)) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* continue loop? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, cb-1, cb);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* save control variable */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;dojump&lt;/span&gt;(L, pc, &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_sBx&lt;/span&gt;(*pc));  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* jump back */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pc++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_SETLIST: {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* local t = {...} 本指令之前可能会有一条vararg或local t2={fun(...)}产生的OP_CALL，所以结合vararg来理解本block的代码 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* A B C&#x9;R(A)[(C-1)*FPF+i] := R(A+i), 1 &amp;lt;= i &amp;lt;= B */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; n = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; c = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_C&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; last;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Table *h;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (n == 0) {&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          n = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_int&lt;/span&gt;(L-&amp;gt;top - ra) - 1;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 计算确切的参数个数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          L-&amp;gt;top = L-&amp;gt;ci-&amp;gt;top;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* OP_VARARG指令L-&amp;gt;top已经指向了{...}不定参数的最后一个slot的位置以便求n,这里将其复原 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (c == 0) c = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_int&lt;/span&gt;(*pc++);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这行代码最好有个印象 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;runtime_check&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;ttistable&lt;/span&gt;(ra));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 编译模块出错了 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        h = &lt;span style=&#34;color:#c34e00&#34;&gt;hvalue&lt;/span&gt;(ra);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        last = ((c-1)*LFIELDS_PER_FLUSH) + n;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 计算当前能确定的数组下标的最大值 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (last &amp;gt; h-&amp;gt;sizearray)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* needs more space?  数组区域大小不够，需扩展*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_resizearray&lt;/span&gt;(L, h, last);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* pre-alloc it at once */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (; n &amp;gt; 0; n--) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          TValue *val = ra+n;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2t&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_setnum&lt;/span&gt;(L, h, last--), val);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_barriert&lt;/span&gt;(L, h, val);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_CLOSE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* close all variables in the stack up to (&amp;gt;=) R(A) 编译模块如何确定参数A？*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;luaF_close&lt;/span&gt;(L, ra);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_CLOSURE: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* A Bx&#x9;R(A) := closure(KPROTO[Bx], R(A), ... ,R(A+n)) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Proto *p;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Closure *ncl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nup, j;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        p = cl-&amp;gt;p-&amp;gt;p[&lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_Bx&lt;/span&gt;(i)];&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 找到对应的proto */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        nup = p-&amp;gt;nups;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ncl = &lt;span style=&#34;color:#c34e00&#34;&gt;luaF_newLclosure&lt;/span&gt;(L, nup, cl-&amp;gt;env);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ncl-&amp;gt;l.p = p;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 下面的block尚未完全看懂 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (j=0; j&amp;lt;nup; j++, pc++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(*pc) == OP_GETUPVAL)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ncl-&amp;gt;l.upvals[j] = cl-&amp;gt;upvals[&lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(*pc)];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;GET_OPCODE&lt;/span&gt;(*pc) == OP_MOVE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ncl-&amp;gt;l.upvals[j] = &lt;span style=&#34;color:#c34e00&#34;&gt;luaF_findupval&lt;/span&gt;(L, base + &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(*pc));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setclvalue&lt;/span&gt;(L, ra, ncl);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaC_checkGC&lt;/span&gt;(L));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; OP_VARARG: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* A B&#x9;R(A), R(A+1), ..., R(A+B-1) = vararg */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; b = &lt;span style=&#34;color:#c34e00&#34;&gt;GETARG_B&lt;/span&gt;(i) - 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; j;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        CallInfo *ci = L-&amp;gt;ci;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; n = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_int&lt;/span&gt;(ci-&amp;gt;base - ci-&amp;gt;func) - cl-&amp;gt;p-&amp;gt;numparams - 1;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 本次函数调用传入的不定参数的个数eg: funA(a,b, ...) funA */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (b == LUA_MULTRET) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#c34e00&#34;&gt;Protect&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaD_checkstack&lt;/span&gt;(L, n));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          ra = &lt;span style=&#34;color:#c34e00&#34;&gt;RA&lt;/span&gt;(i);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* previous call may change the stack */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          b = n;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 出现在 local tbl = {...} 或者 funA(...) 需要拷贝所有的不定参数的地方 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 为可能即将到来的C/lua函数调用做准备，(L-&amp;gt;top-func可知即将发生的函数调用实际上有多少个传入参数) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;  ** &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;  ** local tbl={...} OP_SETLIST指令也用到了L-&amp;gt;top，故而可以推断出，这里L-&amp;gt;top标记了实际上...携带的参数个数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;  ** 以便其它指令能准确的执行(主要是获取..参数个数)，这里将实际传入的参数个数通过L-&amp;gt;top计算好，避免其它指令再去计算一遍&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;  ** 其它指令用完L-&amp;gt;top后需将其复原&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          L-&amp;gt;top = ra + n; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 将不定参数赋值给指定的对象？？？&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;** local a, b = ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;** 不定参数数量不足则补nil&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;&#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (j = 0; j &amp;lt; b; j++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (j &amp;lt; n) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 本函数的不定参数的个数还能满足ra+j代表的dst寄存器 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;setobjs2s&lt;/span&gt;(L, ra + j, ci-&amp;gt;base - n + j);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;setnilvalue&lt;/span&gt;(ra + j);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* local a, b = ... 本函数实际上只收到了一个不定参数，那么不足的部分(b)就要补nil值了 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>lua源码注释-ltable.c</title>
      <link>http://shanks.link/blog/2021/05/20/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-ltable.c/</link>
      <pubDate>Thu, 20 May 2021 23:44:58 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/05/20/lua%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A-ltable.c/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/shankusu2017/lua&#34;&gt;github链接&lt;/a&gt; lua515子域&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** $Id: ltable.c,v 2.32.1.2 2007/12/28 15:32:23 roberto Exp $&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Lua tables (hash)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** See Copyright Notice in lua.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Implementation of tables (aka(又名) arrays, objects, or hash tables).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Tables keep its elements in two parts: an array part and a hash part.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Non-negative integer keys are all candidates(考虑) to be kept in the array&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** part. The actual size of the array is the largest `n&amp;#39; such that at&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** least half the slots between 0 and n are in use.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Hash uses a mix of chained scatter（分散） table with Brent&amp;#39;s variation.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** A main invariant(不变的) of these tables is that, if an element is not&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** in its main position (i.e. the `original&amp;#39; position that its hash gives&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** to it), then the colliding(碰撞的) element is in its own main position.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Hence even when the load factor reaches 100%, performance remains good.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 和lstring的闭散列不同，这里采用的是开散列算法                    https://blog.csdn.net/Boring_Wednesday/article/details/80316884&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** 结合gc流程和table&amp;#39;insert的流程来看&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** tbl[k]=nil,若k仅被此表引用,则此k会被gc回收,for中进行tbl[k]=nil的操作，并不会修改影响表遍历的完整性&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** next函数有对此进行了专门的处理(deadkey)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** tbl[k]=nil后，node经过gc后被标记为deadkey,在此之前resize之前，此node是个&amp;#34;正常的node&amp;#34;，可以被复用&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** gc被标记为deadkey后，进入了dead流程，是一个deadkey了。没作用了&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define ltable_c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define LUA_CORE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lua.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ldebug.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ldo.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lgc.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lmem.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lobject.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;lstate.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;#34;ltable.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** max size of array part is 2^MAXBITS&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#if LUAI_BITSINT &amp;gt; 26&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define MAXBITS&#x9;&#x9;26&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#else&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define MAXBITS&#x9;&#x9;(LUAI_BITSINT-2)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define MAXASIZE&#x9;(1 &amp;lt;&amp;lt; MAXBITS)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define hashpow2(t,n)      (gnode(t, lmod((n), sizenode(t))))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define hashstr(t,str)  hashpow2(t, (str)-&amp;gt;tsv.hash)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define hashboolean(t,p)        hashpow2(t, p)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** for some types, it is better to avoid modulus by power of 2, as&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** they tend to have many 2 factors.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define hashmod(t,n)&#x9;(gnode(t, ((n) % ((sizenode(t)-1)|1))))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define hashpointer(t,p)&#x9;hashmod(t, IntPoint(p))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** number of ints inside a lua_Number&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define numints&#x9;&#x9;cast_int(sizeof(lua_Number)/sizeof(int))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define dummynode&#x9;&#x9;(&amp;amp;dummynode_)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; Node dummynode_ = {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {{NULL}, LUA_TNIL},  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* value */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {{{NULL}, LUA_TNIL, NULL}}  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* key */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** hash for lua_Numbers&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; Node *&lt;span style=&#34;color:#c34e00&#34;&gt;hashnum&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; Table *t, lua_Number n) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; a[numints];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luai_numeq&lt;/span&gt;(n, 0))  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* avoid problems with -0 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;gnode&lt;/span&gt;(t, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;memcpy&lt;/span&gt;(a, &amp;amp;n, &lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(a));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i = 1; i &amp;lt; numints; i++) a[0] += a[i];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;hashmod&lt;/span&gt;(t, a[0]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** returns the `main&amp;#39; position of an element in a table (that is, the index&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** of its hash value)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; Node *&lt;span style=&#34;color:#c34e00&#34;&gt;mainposition&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; Table *t, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttype&lt;/span&gt;(key)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TNUMBER:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;hashnum&lt;/span&gt;(t, &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(key));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TSTRING:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;hashstr&lt;/span&gt;(t, &lt;span style=&#34;color:#c34e00&#34;&gt;rawtsvalue&lt;/span&gt;(key));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TBOOLEAN:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;hashboolean&lt;/span&gt;(t, &lt;span style=&#34;color:#c34e00&#34;&gt;bvalue&lt;/span&gt;(key));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TLIGHTUSERDATA:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;hashpointer&lt;/span&gt;(t, &lt;span style=&#34;color:#c34e00&#34;&gt;pvalue&lt;/span&gt;(key));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;hashpointer&lt;/span&gt;(t, &lt;span style=&#34;color:#c34e00&#34;&gt;gcvalue&lt;/span&gt;(key));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** returns the index for `key&amp;#39; if `key&amp;#39; is an appropriate(合适的) key to live in&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** the array part of the table, -1 otherwise.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;arrayindex&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnumber&lt;/span&gt;(key)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lua_Number n = &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; k;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_number2int&lt;/span&gt;(k, n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luai_numeq&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;cast_num&lt;/span&gt;(k), n))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; k;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; -1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* `key&amp;#39; did not match some condition */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** returns the index of a `key&amp;#39; for table traversals(遍历). First goes all&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** elements in the array part, then elements in the hash part. The&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** beginning of a traversal is signalled by -1.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;findindex&lt;/span&gt; (lua_State *L, Table *t, StkId key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(key)) { &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 下面i++后，开始从数组的第一个slot开始匹配 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; -1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* first iteration */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  i = &lt;span style=&#34;color:#c34e00&#34;&gt;arrayindex&lt;/span&gt;(key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (0 &amp;lt; i &amp;amp;&amp;amp; i &amp;lt;= t-&amp;gt;sizearray)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* is `key&amp;#39; inside array part? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; i-1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* yes; that&amp;#39;s the index (corrected to C) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Node *n = &lt;span style=&#34;color:#c34e00&#34;&gt;mainposition&lt;/span&gt;(t, key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* check whether `key&amp;#39; is somewhere in the chain */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* key may be dead already, but it is ok to use it in `next&amp;#39; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      **&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      ** for k,v pair(tbl) do&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      **      tbl[k] = nil&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      **      可能的gc导致出现DEADKEY&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      ** end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      **&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      ** LUA_TDEADKEY的key对应的mem可能被释放了，所以这里可能gcvalue(gkey(n) == gcvalue(key)) 这个判断不准确，要使其准确的前提是mem不释放，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      ** 上面for循环中k保持了对其引用所以不会导致mem释放，其它环境下调用tbl.next(deadKey)因为不确定mem是否被释放所以结果是未定义的，我的妈妈咪耶，搞明白了吗&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      ** &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      ** 不管是lua还是C调用,tbl[k]=nil导致deadkey，但k的存在使key对应的gc内存不被释放(k还引用着它呢)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      ** C中调用tbl[k]=nil导致死键后，top-=2,key也被抛弃，如果stack还有其它的slot引用key则key对应的内存&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      ** 不会被释放，也可以再次利用key调用next,如果statck中没有其它的slot引用该key，则对应的内存可能会被释放&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;      ** 但key也不存在了，故而gcvalue(gkey(n)==gcvalue(key))中的key也不存在了，该判断就不可能成立了&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luaO_rawequalObj&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;key2tval&lt;/span&gt;(n), key) ||&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 支持lua中的在next中tbl[k]=nil的操作后，k-&amp;gt;k.next */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            (&lt;span style=&#34;color:#c34e00&#34;&gt;ttype&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gkey&lt;/span&gt;(n)) == LUA_TDEADKEY &amp;amp;&amp;amp; &lt;span style=&#34;color:#c34e00&#34;&gt;iscollectable&lt;/span&gt;(key) &amp;amp;&amp;amp; &lt;span style=&#34;color:#c34e00&#34;&gt;gcvalue&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gkey&lt;/span&gt;(n)) == &lt;span style=&#34;color:#c34e00&#34;&gt;gcvalue&lt;/span&gt;(key))) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        i = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_int&lt;/span&gt;(n - &lt;span style=&#34;color:#c34e00&#34;&gt;gnode&lt;/span&gt;(t, 0));  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* key index in hash table */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* hash elements are numbered after array ones */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; i + t-&amp;gt;sizearray;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; n = &lt;span style=&#34;color:#c34e00&#34;&gt;gnext&lt;/span&gt;(n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_runerror&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;invalid key to &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;LUA_QL&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;next&amp;#34;&lt;/span&gt;));  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* key not found */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* to avoid warnings */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_next&lt;/span&gt; (lua_State *L, Table *t, StkId key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#c34e00&#34;&gt;findindex&lt;/span&gt;(L, t, key);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* find original element */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里先来个i++,配合着上面的findindex，就形成了如果传入的是nil，则从数组第一个slot开始查找&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 如果传入的是前面找到的oldKey，则在oldKey的下一个slot开始匹配,符合next函数定义&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i++; i &amp;lt; t-&amp;gt;sizearray; i++) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* try first array part */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&amp;amp;t-&amp;gt;array[i])) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* a non-nil value? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(key, &lt;span style=&#34;color:#c34e00&#34;&gt;cast_num&lt;/span&gt;(i+1));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* c下表从0开始，lua从1开始，所以这里要补1 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, key+1, &amp;amp;t-&amp;gt;array[i]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i -= t-&amp;gt;sizearray; i &amp;lt; &lt;span style=&#34;color:#c34e00&#34;&gt;sizenode&lt;/span&gt;(t); i++) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* then hash part */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gval&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gnode&lt;/span&gt;(t, i)))) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* a non-nil value? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, key, &lt;span style=&#34;color:#c34e00&#34;&gt;key2tval&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gnode&lt;/span&gt;(t, i)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setobj2s&lt;/span&gt;(L, key+1, &lt;span style=&#34;color:#c34e00&#34;&gt;gval&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gnode&lt;/span&gt;(t, i)));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no more elements */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** {=============================================================&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Rehash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** ==============================================================&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;computesizes&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nums[], &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; *narray) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; twotoi;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 2^i */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; a = 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* number of elements smaller than 2^i */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; na = 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* number of elements to go to array part */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; n = 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* optimal size for array part */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i = 0, twotoi = 1; twotoi/2 &amp;lt; *narray; i++, twotoi *= 2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (nums[i] &amp;gt; 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      a += nums[i];&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 加上当前区间 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 截至到当前区间.left，利用率超过了1/2，存个档 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (a &amp;gt; twotoi/2) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* more than half elements present? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        n = twotoi;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* optimal size (till now) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        na = a;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* all elements smaller than n will go to array part */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 所有已存在的元素都已统计完毕，无需再往后面统计了(nums[i+]及后面都是0了)，这里提前跳出 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (a == *narray) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* all elements already counted */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  *narray = n;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(*narray/2 &amp;lt;= na &amp;amp;&amp;amp; na &amp;lt;= *narray);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; na;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;countint&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *key, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; *nums) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; k = &lt;span style=&#34;color:#c34e00&#34;&gt;arrayindex&lt;/span&gt;(key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (0 &amp;lt; k &amp;amp;&amp;amp; k &amp;lt;= MAXASIZE) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* is `key&amp;#39; an appropriate array index? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nums[&lt;span style=&#34;color:#c34e00&#34;&gt;ceillog2&lt;/span&gt;(k)]++;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* count as such */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;numusearray&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; Table *t, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; *nums) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; lg;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; ttlg;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 2^lg */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; ause = 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* summation of `nums&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i = 1;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* count to traverse all array keys */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (lg=0, ttlg=1; lg&amp;lt;=MAXBITS; lg++, ttlg*=2) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* for each slice */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; lc = 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* counter */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; lim = ttlg;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (lim &amp;gt; t-&amp;gt;sizearray) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      lim = t-&amp;gt;sizearray;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* adjust upper limit */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (i &amp;gt; lim)&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 下面的for循环中i提前++了。所以这里要对其评估 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no more elements to count */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* count elements in range (2^(lg-1), 2^lg] */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (; i &amp;lt;= lim; i++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&amp;amp;t-&amp;gt;array[i-1]))&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里要-1,因为C的下标从0开始 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        lc++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nums[lg] += lc;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新区间内used的数量 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ause += lc;&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新总的used数量 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; ause;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 返回 array中used的总数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新node中int的key到nums和pnasize中，返回node中key的总数 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;numusehash&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; Table *t, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; *nums, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; *pnasize) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; totaluse = 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* total number of elements */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; ause = 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* summation of `nums&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#c34e00&#34;&gt;sizenode&lt;/span&gt;(t);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (i--) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Node *n = &amp;amp;t-&amp;gt;node[i];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gval&lt;/span&gt;(n))) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里没有判断gkey而是gval!!! */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ause += &lt;span style=&#34;color:#c34e00&#34;&gt;countint&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;key2tval&lt;/span&gt;(n), nums);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      totaluse++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  *pnasize += ause;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; totaluse;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;setarrayvector&lt;/span&gt; (lua_State *L, Table *t, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; size) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_reallocvector&lt;/span&gt;(L, t-&amp;gt;array, t-&amp;gt;sizearray, size, TValue);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i=t-&amp;gt;sizearray; i&amp;lt;size; i++)&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 多出来的数组部分填nil */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#c34e00&#34;&gt;setnilvalue&lt;/span&gt;(&amp;amp;t-&amp;gt;array[i]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  t-&amp;gt;sizearray = size;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 按照新的node区大小size，申请新内存且将其全部set-nil */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;setnodevector&lt;/span&gt; (lua_State *L, Table *t, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; size) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; lsize;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (size == 0) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* no elements to hash part? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    t-&amp;gt;node = &lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(Node *, dummynode);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* use common `dummynode&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lsize = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lsize = &lt;span style=&#34;color:#c34e00&#34;&gt;ceillog2&lt;/span&gt;(size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (lsize &amp;gt; MAXBITS)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_runerror&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;table overflow&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    size = &lt;span style=&#34;color:#c34e00&#34;&gt;twoto&lt;/span&gt;(lsize);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    t-&amp;gt;node = &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_newvector&lt;/span&gt;(L, size, Node);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i=0; i&amp;lt;size; i++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Node *n = &lt;span style=&#34;color:#c34e00&#34;&gt;gnode&lt;/span&gt;(t, i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;gnext&lt;/span&gt;(n) = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setnilvalue&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gkey&lt;/span&gt;(n));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setnilvalue&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gval&lt;/span&gt;(n));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  t-&amp;gt;lsizenode = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_byte&lt;/span&gt;(lsize);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  t-&amp;gt;lastfree = &lt;span style=&#34;color:#c34e00&#34;&gt;gnode&lt;/span&gt;(t, size);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* all positions are free */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* nasize:调整后的数组大小&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** nhsize:调整后node部分的元素个数 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;resize&lt;/span&gt; (lua_State *L, Table *t, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nasize, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nhsize) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; oldasize = t-&amp;gt;sizearray;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; oldhsize = t-&amp;gt;lsizenode;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Node *nold = t-&amp;gt;node;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* save old hash ... */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (nasize &amp;gt; oldasize)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* array part must grow? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setarrayvector&lt;/span&gt;(L, t, nasize);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* create new hash part with appropriate size &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  ** 准备好全新的node，以便下面调整array时，接收array中溢出的slot&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setnodevector&lt;/span&gt;(L, t, nhsize);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (nasize &amp;lt; oldasize) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* array part must shrink? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    t-&amp;gt;sizearray = nasize;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* re-insert elements from vanishing slice */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i=nasize; i&amp;lt;oldasize; i++) {&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* new的array-size下将数组溢出的slot移动到node区域去 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&amp;amp;t-&amp;gt;array[i]))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;setobjt2t&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_setnum&lt;/span&gt;(L, t, i+1), &amp;amp;t-&amp;gt;array[i]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* shrink array */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_reallocvector&lt;/span&gt;(L, t-&amp;gt;array, oldasize, nasize, TValue);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* re-insert elements from hash part */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i = &lt;span style=&#34;color:#c34e00&#34;&gt;twoto&lt;/span&gt;(oldhsize) - 1; i &amp;gt;= 0; i--) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Node *old = nold+i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gval&lt;/span&gt;(old)))&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里没拿gkey判断!!       */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setobjt2t&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_set&lt;/span&gt;(L, t, &lt;span style=&#34;color:#c34e00&#34;&gt;key2tval&lt;/span&gt;(old)), &lt;span style=&#34;color:#c34e00&#34;&gt;gval&lt;/span&gt;(old));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (nold != dummynode)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_freearray&lt;/span&gt;(L, nold, &lt;span style=&#34;color:#c34e00&#34;&gt;twoto&lt;/span&gt;(oldhsize), Node);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* free old array */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 供lvm调用，一次到位申请对应的array区域的内存 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_resizearray&lt;/span&gt; (lua_State *L, Table *t, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nasize) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nsize = (t-&amp;gt;node == dummynode) ? 0 : &lt;span style=&#34;color:#c34e00&#34;&gt;sizenode&lt;/span&gt;(t);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;resize&lt;/span&gt;(L, t, nasize, nsize);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 尝试插入新的key(ek时发现空间不足，从而rehash) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;rehash&lt;/span&gt; (lua_State *L, Table *t, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *ek) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nasize, na;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nums[MAXBITS+1];  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* nums[i] = number of keys between 2^(i-1) and 2^i */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; totaluse;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 所有元素总和 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i=0; i&amp;lt;=MAXBITS; i++) nums[i] = 0;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* reset counts */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  nasize = &lt;span style=&#34;color:#c34e00&#34;&gt;numusearray&lt;/span&gt;(t, nums);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* count keys in array part */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  totaluse = nasize;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* all those keys are integer keys */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  totaluse += &lt;span style=&#34;color:#c34e00&#34;&gt;numusehash&lt;/span&gt;(t, nums, &amp;amp;nasize);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* count keys in hash part */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* count extra key */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  nasize += &lt;span style=&#34;color:#c34e00&#34;&gt;countint&lt;/span&gt;(ek, nums);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  totaluse++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* compute new size for array part */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  na = &lt;span style=&#34;color:#c34e00&#34;&gt;computesizes&lt;/span&gt;(nums, &amp;amp;nasize);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 计算下最优解下的nasize，以及即将落在array中的数量(na) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* resize the table to new computed sizes */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;resize&lt;/span&gt;(L, t, nasize, totaluse - na);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** }=============================================================&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Table *&lt;span style=&#34;color:#c34e00&#34;&gt;luaH_new&lt;/span&gt; (lua_State *L, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; narray, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; nhash) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Table *t = &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_new&lt;/span&gt;(L, Table);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_link&lt;/span&gt;(L, &lt;span style=&#34;color:#c34e00&#34;&gt;obj2gco&lt;/span&gt;(t), LUA_TTABLE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  t-&amp;gt;metatable = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  t-&amp;gt;flags = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_byte&lt;/span&gt;(~0);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 新表，tag&amp;#39;method都不存在 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* temporary values (kept only if some malloc fails) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  t-&amp;gt;array = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  t-&amp;gt;sizearray = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* n的0次幂==1，这里不能简单的t-&amp;gt;node==NULL */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  t-&amp;gt;lsizenode = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  t-&amp;gt;node = &lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(Node *, dummynode);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setarrayvector&lt;/span&gt;(L, t, narray);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;setnodevector&lt;/span&gt;(L, t, nhash);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; t;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_free&lt;/span&gt; (lua_State *L, Table *t) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (t-&amp;gt;node != dummynode)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_freearray&lt;/span&gt;(L, t-&amp;gt;node, &lt;span style=&#34;color:#c34e00&#34;&gt;sizenode&lt;/span&gt;(t), Node);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_freearray&lt;/span&gt;(L, t-&amp;gt;array, t-&amp;gt;sizearray, TValue);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaM_free&lt;/span&gt;(L, t);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; Node *&lt;span style=&#34;color:#c34e00&#34;&gt;getfreepos&lt;/span&gt; (Table *t) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (t-&amp;gt;lastfree-- &amp;gt; t-&amp;gt;node) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gkey&lt;/span&gt;(t-&amp;gt;lastfree)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; t-&amp;gt;lastfree;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; NULL;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* could not find a free place */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** inserts a new key into a hash table; first, check whether key&amp;#39;s main &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** position is free. If not, check whether colliding node is in its main &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** position or not: if it is not, move colliding node to an empty place and &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** put new key in its main position; otherwise (colliding node is in its main &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** position), new key goes to an empty position. &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; TValue *&lt;span style=&#34;color:#c34e00&#34;&gt;newkey&lt;/span&gt; (lua_State *L, Table *t, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Node *mp = &lt;span style=&#34;color:#c34e00&#34;&gt;mainposition&lt;/span&gt;(t, key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gval&lt;/span&gt;(mp)) || mp == dummynode) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Node *othern;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Node *n = &lt;span style=&#34;color:#c34e00&#34;&gt;getfreepos&lt;/span&gt;(t);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* get a free place */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (n == NULL) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* cannot find a free place? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;rehash&lt;/span&gt;(L, t, key);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* grow table */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_set&lt;/span&gt;(L, t, key);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* re-insert key into grown table */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(n != dummynode);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* mp==dummynode时，getfreepos必然返回NULL,不应该走到这里 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    othern = &lt;span style=&#34;color:#c34e00&#34;&gt;mainposition&lt;/span&gt;(t, &lt;span style=&#34;color:#c34e00&#34;&gt;key2tval&lt;/span&gt;(mp));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (othern != mp) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* is colliding node out of its main position? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* yes; move colliding node into free position */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;gnext&lt;/span&gt;(othern) != mp) othern = &lt;span style=&#34;color:#c34e00&#34;&gt;gnext&lt;/span&gt;(othern);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* find previous */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 更新下链表 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;gnext&lt;/span&gt;(othern) = n;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* redo the chain with `n&amp;#39; in place of `mp&amp;#39; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      *n = *mp;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* copy colliding node into free pos. (mp-&amp;gt;next also goes) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;gnext&lt;/span&gt;(mp) = NULL;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* now `mp&amp;#39; is free */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;setnilvalue&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gval&lt;/span&gt;(mp));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* key在下面设置 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* colliding node is in its own main position */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* new node will go into free position */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;gnext&lt;/span&gt;(n) = &lt;span style=&#34;color:#c34e00&#34;&gt;gnext&lt;/span&gt;(mp);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* chain new position */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;gnext&lt;/span&gt;(mp) = n;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      mp = n;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;gkey&lt;/span&gt;(mp)-&amp;gt;value = key-&amp;gt;value; &lt;span style=&#34;color:#c34e00&#34;&gt;gkey&lt;/span&gt;(mp)-&amp;gt;tt = key-&amp;gt;tt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;luaC_barriert&lt;/span&gt;(L, t, key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c34e00&#34;&gt;lua_assert&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gval&lt;/span&gt;(mp)));&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* new的node，其val必然是一个崭新的，必须为nil */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;gval&lt;/span&gt;(mp);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** search function for integers&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *&lt;span style=&#34;color:#c34e00&#34;&gt;luaH_getnum&lt;/span&gt; (Table *t, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* (1 &amp;lt;= key &amp;amp;&amp;amp; key &amp;lt;= t-&amp;gt;sizearray) */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 如果key为负数，按照C的int-&amp;gt;uint规则，转换的结果将是一个巨大的数，故而下面判断为false */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt;, key-1) &amp;lt; &lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt;, t-&amp;gt;sizearray))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &amp;amp;t-&amp;gt;array[key-1];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lua_Number nk = &lt;span style=&#34;color:#c34e00&#34;&gt;cast_num&lt;/span&gt;(key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Node *n = &lt;span style=&#34;color:#c34e00&#34;&gt;hashnum&lt;/span&gt;(t, nk);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* check whether `key&amp;#39; is somewhere in the chain */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 由于Value是union,故而可能n=nk但！！！！！ n对应的value的type和nk.对应的value不相等的情况&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;   ** 所以这里必须要有个ttisnumber的判断 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#x9;   */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnumber&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gkey&lt;/span&gt;(n)) &amp;amp;&amp;amp; &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numeq&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gkey&lt;/span&gt;(n)), nk))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;gval&lt;/span&gt;(n);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* that&amp;#39;s it */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 如果key已存在于tbl，则必然在mp&amp;#39;link上，故而这里可以遍历列表来查找，下同 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &#x9;n = &lt;span style=&#34;color:#c34e00&#34;&gt;gnext&lt;/span&gt;(n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; luaO_nilobject;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** search function for strings&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *&lt;span style=&#34;color:#c34e00&#34;&gt;luaH_getstr&lt;/span&gt; (Table *t, TString *key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Node *n = &lt;span style=&#34;color:#c34e00&#34;&gt;hashstr&lt;/span&gt;(t, key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* check whether `key&amp;#39; is somewhere in the chain */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里ttisstring(gkey(n))的判断排除掉已经被gc标记为deadkey的key,和上面的value相等但type不相等的情况&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  &#x9;** 如果运行了tbl[key]=nil，再到调用本函数之前，gc还没来得及将其node标记为deadkey,且还没调用resize&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  &#x9;** 则是复用该node&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;  &#x9;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisstring&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gkey&lt;/span&gt;(n)) &amp;amp;&amp;amp; &lt;span style=&#34;color:#c34e00&#34;&gt;rawtsvalue&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;gkey&lt;/span&gt;(n)) == key)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;gval&lt;/span&gt;(n);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* that&amp;#39;s it */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;n = &lt;span style=&#34;color:#c34e00&#34;&gt;gnext&lt;/span&gt;(n);&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; luaO_nilobject;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** main search function&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *&lt;span style=&#34;color:#c34e00&#34;&gt;luaH_get&lt;/span&gt; (Table *t, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttype&lt;/span&gt;(key)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TNIL: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; luaO_nilobject;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TSTRING: &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_getstr&lt;/span&gt;(t, &lt;span style=&#34;color:#c34e00&#34;&gt;rawtsvalue&lt;/span&gt;(key));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; LUA_TNUMBER: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; k;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      lua_Number n = &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;lua_number2int&lt;/span&gt;(k, n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luai_numeq&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;cast_num&lt;/span&gt;(k), &lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(key))) &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* index is int? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_getnum&lt;/span&gt;(t, k);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* use specialized version */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else go through */&lt;/span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 所以这里没有break,看懂了吗？ 非int的，走到default分支去了 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Node *n = &lt;span style=&#34;color:#c34e00&#34;&gt;mainposition&lt;/span&gt;(t, key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt; {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* check whether `key&amp;#39; is somewhere in the chain */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;luaO_rawequalObj&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;key2tval&lt;/span&gt;(n), key))&#x9;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 这里必须rawequlObj进行type==type的判断，以忽略掉deadKey的Node,以及union带来的影响 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;gval&lt;/span&gt;(n);  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* that&amp;#39;s it */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; n = &lt;span style=&#34;color:#c34e00&#34;&gt;gnext&lt;/span&gt;(n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; luaO_nilobject;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TValue *&lt;span style=&#34;color:#c34e00&#34;&gt;luaH_set&lt;/span&gt; (lua_State *L, Table *t, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *p = &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_get&lt;/span&gt;(t, key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  t-&amp;gt;flags = 0;&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 如果本tbl当作meta，那么set后可能其tag有更新，这里索性假设所有的tag&amp;#39;methods都更新了，假设所有的tag&amp;#39;methaod都有了 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (p != luaO_nilobject)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(TValue *, p);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(key)) &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_runerror&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;table index is nil&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnumber&lt;/span&gt;(key) &amp;amp;&amp;amp; &lt;span style=&#34;color:#c34e00&#34;&gt;luai_numisnan&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;nvalue&lt;/span&gt;(key)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#c34e00&#34;&gt;luaG_runerror&lt;/span&gt;(L, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;table index is NaN&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;newkey&lt;/span&gt;(L, t, key);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 构造新的slot */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TValue *&lt;span style=&#34;color:#c34e00&#34;&gt;luaH_setnum&lt;/span&gt; (lua_State *L, Table *t, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *p = &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_getnum&lt;/span&gt;(t, key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (p != luaO_nilobject)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(TValue *, p);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TValue k;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setnvalue&lt;/span&gt;(&amp;amp;k, &lt;span style=&#34;color:#c34e00&#34;&gt;cast_num&lt;/span&gt;(key));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;newkey&lt;/span&gt;(L, t, &amp;amp;k);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TValue *&lt;span style=&#34;color:#c34e00&#34;&gt;luaH_setstr&lt;/span&gt; (lua_State *L, Table *t, TString *key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *p = &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_getstr&lt;/span&gt;(t, key);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* key现存，则直接返回node&amp;#39;key */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (p != luaO_nilobject)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(TValue *, p);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TValue k;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;setsvalue&lt;/span&gt;(L, &amp;amp;k, key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;newkey&lt;/span&gt;(L, t, &amp;amp;k);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 没有则构造一个new&amp;#39;node出来，其中node.key=key,并返回其node.val */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;unbound_search&lt;/span&gt; (Table *t, &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; j) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i = j;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* i is zero or a present index */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  j++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* find `i&amp;#39; and `j&amp;#39; such that i is present and j is not */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaH_getnum&lt;/span&gt;(t, j))) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    i = j;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    j *= 2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (j &amp;gt; &lt;span style=&#34;color:#c34e00&#34;&gt;cast&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt;, MAX_INT)) {  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* overflow? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* table was built with bad purposes: resort to linear search */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      i = 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (!&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaH_getnum&lt;/span&gt;(t, i))) i++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; i - 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* now do a binary search between them */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (j - i &amp;gt; 1) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; m = (i+j)/2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;luaH_getnum&lt;/span&gt;(t, m))) j = m;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; i = m;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Try to find a boundary in table `t&amp;#39;. A `boundary&amp;#39; is an integer index&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** such that t[i] is non-nil and t[i+1] is nil (and 0 if t[1] is nil).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_getn&lt;/span&gt; (Table *t) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; j = t-&amp;gt;sizearray;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (j &amp;gt; 0 &amp;amp;&amp;amp; &lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&amp;amp;t-&amp;gt;array[j - 1])) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* there is a boundary in the array part: (binary) search for it */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (j - i &amp;gt; 1) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; m = (i+j)/2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;ttisnil&lt;/span&gt;(&amp;amp;t-&amp;gt;array[m - 1])) j = m;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; i = m;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* else must find a boundary in hash part */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (t-&amp;gt;node == dummynode)  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* hash part is empty? */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; j;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* that is easy... */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;unbound_search&lt;/span&gt;(t, j);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#if defined(LUA_DEBUG)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Node *&lt;span style=&#34;color:#c34e00&#34;&gt;luaH_mainposition&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; Table *t, &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; TValue *key) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;mainposition&lt;/span&gt;(t, key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;luaH_isdummy&lt;/span&gt; (Node *n) { &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; n == dummynode; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>The Complete Syntax of Lua51</title>
      <link>http://shanks.link/blog/2021/05/19/the-complete-syntax-of-lua51/</link>
      <pubDate>Wed, 19 May 2021 12:27:54 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/05/19/the-complete-syntax-of-lua51/</guid>
      <description>&lt;p&gt;Here is the complete syntax of Lua in extended BNF. (It does not describe operator precedences.)&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bnf&#34; data-lang=&#34;bnf&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;chunk ::= {stat [`;´]} [laststat [`;´]]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;block ::= chunk&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;stat ::=  varlist `=´ explist | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9; functioncall | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9; do block end | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9; while exp do block end | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9; repeat block until exp | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9; if exp then block {elseif exp then block} [else block] end | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9; for Name `=´ exp `,´ exp [`,´ exp] do block end | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9; for namelist in explist do block end | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9; function funcname funcbody | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9; local function Name funcbody | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9; local namelist [`=´ explist] &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;laststat ::= return [explist] | break&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;funcname ::= Name {`.´ Name} [`:´ Name]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;varlist ::= var {`,´ var}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;var ::=  Name | prefixexp `[´ exp `]´ | prefixexp `.´ Name &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;namelist ::= Name {`,´ Name}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;explist ::= {exp `,´} exp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;exp ::=  nil | false | true | Number | String | `...´ | function | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9; prefixexp | tableconstructor | exp binop exp | unop exp &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;prefixexp ::= var | functioncall | `(´ exp `)´&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;functioncall ::=  prefixexp args | prefixexp `:´ Name args &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;args ::=  `(´ [explist] `)´ | tableconstructor | String &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;function ::= function funcbody&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;funcbody ::= `(´ [parlist] `)´ block end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;parlist ::= namelist [`,´ `...´] | `...´&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;tableconstructor ::= `{´ [fieldlist] `}´&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;fieldlist ::= field {fieldsep field} [fieldsep]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;field ::= `[´ exp `]´ `=´ exp | Name `=´ exp | exp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;fieldsep ::= `,´ | `;´&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;binop ::= `+´ | `-´ | `*´ | `/´ | `^´ | `%´ | `..´ | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9; `&amp;lt;´ | `&amp;lt;=´ | `&amp;gt;´ | `&amp;gt;=´ | `==´ | `~=´ | &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9; and | or&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;unop ::= `-´ | not | `#´&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>A No-Frills Introduction to Lua 5.1 VM Instructions</title>
      <link>http://shanks.link/blog/2021/05/19/a-no-frills-introduction-to-lua-5.1-vm-instructions/</link>
      <pubDate>Wed, 19 May 2021 11:58:46 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/05/19/a-no-frills-introduction-to-lua-5.1-vm-instructions/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h2 id=&#34;a-no-frills-introduction-to-lua-51-vm-instructions&#34;&gt;A No-Frills Introduction to Lua 5.1 VM Instructions&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;by Kein-Hong Man, esq. &amp;lt;khman AT users.sf.net&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Version 0.1, 20060313&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;&#x9;为了检索指令描述，本人额外做了添加特定的前缀OP_处理，eg: MOVE&amp;mdash;-&amp;gt;OP_MOVE，以便在阅读lvm.c中的源码时能快速在本文档中找到相关注解。&lt;/p&gt;</description>
    </item>
    <item>
      <title>lua源码阅读之旅-具体排期</title>
      <link>http://shanks.link/blog/2021/05/17/lua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E6%97%85-%E5%85%B7%E4%BD%93%E6%8E%92%E6%9C%9F/</link>
      <pubDate>Mon, 17 May 2021 12:39:24 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/05/17/lua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E6%97%85-%E5%85%B7%E4%BD%93%E6%8E%92%E6%9C%9F/</guid>
      <description>&lt;p&gt;​&#x9;&#x9;开篇规划了整理思路，跨度比较大，不利于把控进度，这篇做一个以week为单位的周期安排，以便有效的利用时间和及时复盘自己的学习计划。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;资料&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;5.10-16 《A No-Frills Introduction to Lua 5.1 VM Instructions.pdf》&lt;/li&gt;&#xA;&lt;li&gt;5.17-23《计算机程序的构造和解释》&lt;/li&gt;&#xA;&lt;li&gt;5.24-30 本网站上面的lua相关文章&lt;/li&gt;&#xA;&lt;/ol&gt;&lt;/blockquote&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;源码&lt;/p&gt;</description>
    </item>
    <item>
      <title>lua源码阅读之旅-再次启航</title>
      <link>http://shanks.link/blog/2021/05/10/lua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E6%97%85-%E5%86%8D%E6%AC%A1%E5%90%AF%E8%88%AA/</link>
      <pubDate>Mon, 10 May 2021 15:45:22 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/05/10/lua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E6%97%85-%E5%86%8D%E6%AC%A1%E5%90%AF%E8%88%AA/</guid>
      <description>&lt;p&gt;​&#x9;&#x9;第一次阅读lua源码从2019元旦，哪一年阅读计划失败，去年又心血来潮，尝试阅读，结果又是失败，今年再次重拾这个计划。&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;&#x9;作为本系列文章的开篇，这里回顾下上两次阅读的经历和本次的一些想法，所谓前事不忘后事之师。&lt;/p&gt;</description>
    </item>
    <item>
      <title>云风的Blog-Lua GC的源码解剖6</title>
      <link>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%966/</link>
      <pubDate>Fri, 09 Apr 2021 01:12:23 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%966/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.codingnow.com/2011/04/lua_gc_6.html&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;lua-gc-的源码剖析-6-完结&#34;&gt;Lua GC 的源码剖析 (6) 完结&lt;/h3&gt;&#xA;&lt;p&gt;GC 中最繁杂的 mark 部分已经谈完了。剩下的东西很简单。今天一次可以写完。&lt;/p&gt;&#xA;&lt;p&gt;sweep 分两个步骤，一个是清理字符串，另一个是清理其它对象。看代码，lgc.c 573 行：&lt;/p&gt;</description>
    </item>
    <item>
      <title>云风的Blog-Lua GC的源码解剖5</title>
      <link>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%965/</link>
      <pubDate>Fri, 09 Apr 2021 01:10:11 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%965/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.codingnow.com/2011/03/lua_gc_5.html&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;lua-gc-的源码剖析-5&#34;&gt;Lua GC 的源码剖析 (5)&lt;/h3&gt;&#xA;&lt;p&gt;今天来说说 write barrier 。&lt;/p&gt;&#xA;&lt;p&gt;在 GC 的扫描过程中，由于分步执行，难免会出现少描了一半时，那些已经被置黑的对象又被修改，需要重新标记的情况。这就需要在改写对象时，建立 write barrier 。在扫描过程中触发 write barrier 的操作影响的对象被正确染色，或是把需要再染色的对象记录下来，留到 mark 的最后阶段 atomic 完成。&lt;/p&gt;</description>
    </item>
    <item>
      <title>云风的Blog-Lua GC的源码解剖4</title>
      <link>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%964/</link>
      <pubDate>Fri, 09 Apr 2021 01:08:59 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%964/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.codingnow.com/2011/03/lua_gc_4.html&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;lua-gc-的源码剖析-4&#34;&gt;Lua GC 的源码剖析 (4)&lt;/h3&gt;&#xA;&lt;p&gt;今天来看一下 mark 过程是怎样实现的。&lt;/p&gt;&#xA;&lt;p&gt;所有的 GC 流程，都从 singlestep 函数开始。singlestep 就是一个最简单的状态机。GC 状态简单的从一个状态切换到下一个状态，循环不止。状态标识放在 global state 的 gcstate 域中。这一点前面谈过。&lt;/p&gt;</description>
    </item>
    <item>
      <title>云风的Blog-Lua GC的源码解剖3</title>
      <link>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%963/</link>
      <pubDate>Fri, 09 Apr 2021 01:07:31 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%963/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.codingnow.com/2011/03/lua_gc_3.html&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;lua-gc-的源码剖析-3&#34;&gt;Lua GC 的源码剖析 (3)&lt;/h3&gt;&#xA;&lt;p&gt;有了前几天的基础，我们可以从顶向下来读 lua gc 部分的代码了。&lt;/p&gt;&#xA;&lt;p&gt;我们知道，lua 对外的 API 中，一切个 gc 打交道的都通过 &lt;code&gt;lua_gc&lt;/code&gt; 。C 语言构建系统时，一般不讲设计模式。但模式还是存在的。若要按《设计模式》中的分类，这应该归于 Facade 模式。代码在 lapi.c 的 895 行：&lt;/p&gt;</description>
    </item>
    <item>
      <title>云风的Blog-Lua GC的源码解剖2</title>
      <link>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%962/</link>
      <pubDate>Fri, 09 Apr 2021 01:05:52 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%962/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.codingnow.com/2011/03/lua_gc_2.html&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;lua-gc-的源码剖析-2&#34;&gt;Lua GC 的源码剖析 (2)&lt;/h3&gt;&#xA;&lt;p&gt;早期的 Lua GC 采用的是 stop the world 的实现。一旦发生 gc 就需要等待整个 gc 流程走完。如果你用 lua 处理较少量数据，或是数据增删不频繁，这样做不是问题。但当处理的数据量变大时，对于实时性要求较高的应用，比如网络游戏服务器，这个代价则是不可忽略的。lua 本身是个很精简的系统，但不代表处理的数据量也一定很小。&lt;/p&gt;</description>
    </item>
    <item>
      <title>云风的Blog-Lua GC的源码解剖1</title>
      <link>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%961/</link>
      <pubDate>Fri, 09 Apr 2021 01:03:52 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/09/%E4%BA%91%E9%A3%8E%E7%9A%84blog-lua-gc%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E5%89%961/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.codingnow.com/2011/03/lua_gc_1.html&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;lua-gc-的源码剖析-1&#34;&gt;Lua GC 的源码剖析 (1)&lt;/h3&gt;&#xA;&lt;p&gt;最近发现在大数据量的 lua 环境中，GC 占据了很多的 CPU 。差不多是整个 CPU 时间的 20% 左右。希望着手改进。这样，必须先对 lua 的 gc 算法极其实现有一个详尽的理解。我之前读过 lua 的源代码，由于 lua 源码版本变迁，这个工作还需要再做一次。这次我重新阅读了 lua 5.1.4 的源代码。从今天起，做一个笔记，详细分析一下 lua 的 gc 是如何实现的。阅读代码整整花掉了我一天时间。但写出来恐怕比阅读时间更长。我会分几天写在 blog 上。&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建Lua解释器Part11：Upvalue</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part11upvalue/</link>
      <pubDate>Thu, 08 Apr 2021 23:31:51 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part11upvalue/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://manistein.club/&#34;&gt;本文转载自Manistein&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;构建lua解释器part11upvalue&#34;&gt;构建Lua解释器Part11：Upvalue&lt;/h1&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;​    本章，我将深入探讨lua的upvalue机制。在写这篇博客之前，我已经自己动手实现了这个机制，并且将其提交到了github仓库&lt;a href=&#34;https://github.com/Manistein/dummylua-tutorial&#34;&gt;dummylua&lt;/a&gt;上了。为了专注于upvalue机制本身的讨论，本章不会展示大量的代码细节，尽量在抽象层面来论述。&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建Lua解释器Part10：userdata</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part10userdata/</link>
      <pubDate>Thu, 08 Apr 2021 23:30:06 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part10userdata/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://manistein.club/&#34;&gt;本文转载自Manistein&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;构建lua解释器part10userdata&#34;&gt;构建Lua解释器Part10：userdata&lt;/h1&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;​    本章节，我开始对&lt;a href=&#34;https://github.com/Manistein/dummylua-tutorial&#34;&gt;dummylua&lt;/a&gt;的userdata的设计与实现，进行论述。它的大体设计与实现，仍然是仿照了lua5.3的标准，由于，所有的内容，都是我自己理解后，重新实现，因此在一些实现细节上略有不同，但是整体设计思路遵循了lua的设计思想。本章的篇幅不会很长，因为userdata这个部分并不是非常复杂，因此我这里也会速战速决，将userdata的一些核心思想论述清楚，就将本章完结。&lt;/p&gt;&#xA;&lt;h1 id=&#34;userdata的数据结构&#34;&gt;userdata的数据结构&lt;/h1&gt;&#xA;&lt;p&gt;​    userdata是用来存放，用户自定义的数据结构实例的，userdata的种类有两种，一种是lightuserdata，还有一种则是full userdata。light userdata是Value结构中的一个变量类型，本质是一个void* 指针&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建Lua解释器Part9：metatable</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part9metatable/</link>
      <pubDate>Thu, 08 Apr 2021 23:27:50 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part9metatable/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://manistein.club/&#34;&gt;本文转载自Manistein&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;构建lua解释器part9metatable&#34;&gt;构建Lua解释器Part9：metatable&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;Posted on December 8, 2020&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;​    本章，我们将进入到metatable的探索之中。由于这块本身比较简单，而且我也不打算罗列代码细节，因此本章的篇幅不会很大。只是对一些我认为比较关键的部分，进行说明。首先，本章的主要任务，首先是简要介绍metatable是做什么的，然后简要说明一下，它如何被设置，接着介绍metatable的访问域，双目运算操作域、单目运算操作域等。最后会告诉读者，本章的实现逻辑位于dummylua工程的哪些部位。&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建Lua解释器Part8：构建完整的语法分析器(下)</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part8%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4%E7%9A%84%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E4%B8%8B/</link>
      <pubDate>Thu, 08 Apr 2021 23:20:30 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part8%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4%E7%9A%84%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E4%B8%8B/</guid>
      <description>&lt;h1 id=&#34;构建lua解释器part8构建完整的语法分析器下&#34;&gt;构建Lua解释器Part8：构建完整的语法分析器(下)&lt;/h1&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;​    前面，我已经用3篇blog的巨大篇幅，详细论述了Lua编译模块的一些基本知识。其中，Part5通过一个简单的打印hello world的例子，论述了编译出来的虚拟机指令，如何存到Proto结构中，最后再通过虚拟机执行的流程。Part6详细论述了，词法分析器的设计与实现。而Part7则论述了，expression的编译流程。本章，将作为Lua内置编译器论述的最后一个部分。往后的部分，将不再涉及编译相关的内容。当然，经历这篇，相信读者能够完全理解Lua内置编译器的设计与实现，个人认为完整度还是比较高的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建Lua解释器Part7：构建完整的语法分析器(上)</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part7%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4%E7%9A%84%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E4%B8%8A/</link>
      <pubDate>Thu, 08 Apr 2021 22:58:42 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part7%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%95%B4%E7%9A%84%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E4%B8%8A/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://manistein.club/&#34;&gt;本文转载自Manistein&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;构建lua解释器part7构建完整的语法分析器上&#34;&gt;构建Lua解释器Part7：构建完整的语法分析器(上)&lt;/h1&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;​    在上一章里，我完成了词法分析器的设计与实现的论述，接下来我要继续论述语法分析器的设计与实现。限于篇幅，我将会把语法分析器分为两个部分来论述，本章为上部，下一章为下部。本章将会重新复习编译器的构造，并且论述编译流程，以及lua的parser所涉及的编译相关的内容，最后通过阐述虚拟机相关指令的实现，作为结尾。本章所涉及的代码，全部在&lt;a href=&#34;https://github.com/Manistein/dummylua-tutorial&#34;&gt;dummylua&lt;/a&gt;工程里，欢迎star。另外，如果你喜欢我写的文章，喜欢讨论技术，欢迎加入我创建的群：QQ185017593&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建Lua解释器Part6：脚本运行基础架构的设计与实现</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part6%E8%84%9A%E6%9C%AC%E8%BF%90%E8%A1%8C%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 08 Apr 2021 14:43:42 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part6%E8%84%9A%E6%9C%AC%E8%BF%90%E8%A1%8C%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://manistein.club/post/program/let-us-build-a-lua-interpreter/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part6/&#34;&gt;本文转载自Manistein&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;​    构建Lua解释器Part5，对Lua解释器进行了整体介绍，并且以一个hello world程序为例子，给读者一个初步的概念。通过那一篇，我们知道了编译器至少要包括词法分析其和语法分析器，而本篇，我将集中时间和精力，用来介绍和讲解Lua词法分析器的设计与实现，实际上，它是对Part5词法分析器部分的一个补充。本文所指的词法分析器，是参照Lua-5.3这个版本的源码，并且亲自动手实现和测试过，它也已经被整合到&lt;a href=&#34;https://github.com/Manistein/dummylua-tutorial&#34;&gt;dummylua&lt;/a&gt;这个工程中，欢迎大家star。由于整个词法分析是我自己重新实现，因此不会在所有的细节上和官方lua保持一致，最后由于本人水平有限，如有写的不正确的地方，欢迎大家批评指正。此外，我已经建了一个qq群(QQ:185017593)，有兴趣参与技术讨论的同学可以加进来。&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建Lua解释器Part5：脚本运行基础架构的设计与实现</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part5%E8%84%9A%E6%9C%AC%E8%BF%90%E8%A1%8C%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 08 Apr 2021 13:02:42 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part5%E8%84%9A%E6%9C%AC%E8%BF%90%E8%A1%8C%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://manistein.club/post/program/let-us-build-a-lua-interpreter/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part5/&#34;&gt;本文转载自Manistein&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;在经过漫长的准备，我终于完成了《构建Lua解释器》系列的第五部分的代码编写，并且通过了预定的测试。本篇我将对&lt;a href=&#34;https://github.com/Manistein/dummylua-tutorial&#34;&gt;dummylua&lt;/a&gt;项目中的脚本运行基础架构的设计与实现进行介绍和解析，它包括了lua编译器基础架构以及虚拟机基础架构。过去4个部分的开发，为本部分提供了坚实且必要的基础，本篇将为编译与运行lua脚本搭建最基础的架构，后续内容将在此架构上继续填充与丰富，本部分，我们的目标是编译并运行如下所示的一段脚本代码：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-- lua script&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-- test file is in scripts/part05_test.lua&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;图 1&#xA;尽管这是一段简单的脚本代码，但是我们要达到目标，需要设计与实现虚拟机基础架构，编译器基础架构以及标准库加载机制等，本身所涉及的工作内容并不轻松，我们需要在原有C语言的工程里实现这些内容，而最终我们的测试用例的C语言代码将像如下所示那样：&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建Lua解释器Part4：Table设计与实现</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part4table%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 08 Apr 2021 12:42:31 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part4table%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://manistein.club/post/program/let-us-build-a-lua-interpreter/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part4/&#34;&gt;本文转载自Manistein&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;本篇我将对dummylua中Table的设计和实现进行介绍和说明。本文的目的旨在梳理清dummylua项目Table的数据结构和运作流程，该部分深度参考了lua-5.3.4的Table设计与实现，由于所有的细节是我自己根据理解重新实现，因此不会在所有的设计细节上和官方lua保持一致，但是遵循了基本的设计思路。&#xA;Table是Lua语言中举足轻重的组成部分，掌握和理解它具有战略意义，这也是实现Lua虚拟机的基础所在，本文首先介绍dummylua项目Table的数据结构，然后在概念上介绍一些基本的操作流程，如创建、resize、查询、插入和迭代等操作。&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建Lua解释器Part3：String设计与实现</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part3string%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 08 Apr 2021 12:28:49 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part3string%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://manistein.club/post/program/let-us-build-a-lua-interpreter/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part3/&#34;&gt;本文转载自Manistein&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;上一章节我介绍了dummylua项目的gc的设计原理和实现方式，该部分我基本是仿造了官方lua-5.3.4的做法。本章节，我将为大家带来dummylua项目TString的设计实现讲解。和以往任何一篇一样，本篇我也是基本遵循lua-5.3的设计思想，但由于实现是我凭理解自己手动实现，因此不会在所有的细节上和官方lua保持一致。&#xA;任何一门语言都要支持字符串，lua也一样，本章将从lua string的数据结构开始阐述，然后深入其他细节进行阐述，并试图揭露这些设计的历史背景和原因，由于本人能力有限，如有不当之处想要指明，或是想和我一起讨论，欢迎加Q群与我讨论(QQ185017593)，我是群主，欢迎大家的到来。&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建Lua解释器Part2：Garbage Collection基础架构</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part2garbage-collection%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Thu, 08 Apr 2021 11:18:57 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part2garbage-collection%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://manistein.club/post/program/let-us-build-a-lua-interpreter/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part2/&#34;&gt;本文转载自Manistein&amp;rsquo;s Blog&#xA;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;上一篇我已经设计和实现了Lua解释器最基础的基本数据结构，实现了纯C函数在栈中的调用流程，以及保护模式调用函数等内容，今天要介绍的则是Lua解释器的GC基础架构。Garbage Collection机制，可能是让人们听之不寒而栗的机制，都说GC很复杂，需要花费大量时间去消化和理解，那为什么要在本系列的第2篇就早早引入？做这个决定并非一时冲动之举，而是经过思考后而决定的。之前在阅读了云风大神翻译的《编程之魂》第7章[1]，这篇关于对Lua设计者的访谈记录中，作者有这么说过：&lt;/p&gt;</description>
    </item>
    <item>
      <title>构建Lua解释器Part1：虚拟机的基础--Lua基本数据结构、栈和基于栈的C函数调用的设计与实现</title>
      <link>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part1%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%9F%BA%E7%A1%80--lua%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A0%88%E5%92%8C%E5%9F%BA%E4%BA%8E%E6%A0%88%E7%9A%84c%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 08 Apr 2021 10:44:15 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/08/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part1%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%9F%BA%E7%A1%80--lua%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A0%88%E5%92%8C%E5%9F%BA%E4%BA%8E%E6%A0%88%E7%9A%84c%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://manistein.club/post/program/let-us-build-a-lua-interpreter/%E6%9E%84%E5%BB%BAlua%E8%A7%A3%E9%87%8A%E5%99%A8part1/&#34;&gt;本文转载自Manistein&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;从本篇开始，我们正式进入到Lua解释器的开发阶段（这是一个遵循Lua5.3标准的项目）。本篇并不直接接入到设计和实现语法分析器和词法分析器的阶段，而是先设计和实现Lua虚拟机的基础数据结构（包括Lua最基本的数据结构，如基本数据类型，表示虚拟机状态的global_State和lua_State结构，在函数调用中扮演重要角色的CallInfo结构等）以及设计和实现基于栈的C函数调用流程。这些都是理解后面虚拟机运作的基础。由于这是一个仿制项目，为了和官方版本做区分，就称之为dummylua，后面要称呼本项目时，一律用dummylua来表示。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C4：4个函数，528行代码实现可自举的 C语言编译器</title>
      <link>http://shanks.link/blog/2021/04/06/c44%E4%B8%AA%E5%87%BD%E6%95%B0528%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8F%AF%E8%87%AA%E4%B8%BE%E7%9A%84-c%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E5%99%A8/</link>
      <pubDate>Tue, 06 Apr 2021 23:10:47 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/06/c44%E4%B8%AA%E5%87%BD%E6%95%B0528%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8F%AF%E8%87%AA%E4%B8%BE%E7%9A%84-c%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E5%99%A8/</guid>
      <description></description>
    </item>
    <item>
      <title>lua源码阅读顺序-建议</title>
      <link>http://shanks.link/blog/2021/04/06/lua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E9%A1%BA%E5%BA%8F-%E5%BB%BA%E8%AE%AE/</link>
      <pubDate>Tue, 06 Apr 2021 22:51:18 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/06/lua%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E9%A1%BA%E5%BA%8F-%E5%BB%BA%E8%AE%AE/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.reddit.com/comments/63hth/ask_reddit_which_oss_codebases_out_there_are_so/c02pxbp&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;recommended-reading-order&#34;&gt;Recommended reading order:&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;lmathlib.c, lstrlib.c: get familiar with the external C API. Don&amp;rsquo;t bother with the pattern matcher though. Just the easy functions.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;lapi.c: Check how the API is implemented internally. Only skim this to get a feeling for the code. Cross-reference to lua.h and luaconf.h as needed.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;lobject.h: tagged values and object representation. skim through this first. you&amp;rsquo;ll want to keep a window with this file open all the time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lua虚拟机指令介绍</title>
      <link>http://shanks.link/blog/2021/04/06/lua%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A4%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Tue, 06 Apr 2021 22:51:17 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/06/lua%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A4%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;p&gt;作者：nicochen，腾讯 IEG 游戏开发工程师&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;本文从一个简单示例入手，详细讲解 Lua 字节码文件的存储结构及各字段含义，进而引出 Lua 虚拟机指令集和运行时的核心数据结构 Lua State，最后解释 Lua 虚拟机的 47 条指令如何在 Lua State 上运作的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua52内部实现:GC3</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0gc3/</link>
      <pubDate>Tue, 06 Apr 2021 12:57:07 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0gc3/</guid>
      <description>&lt;h1 id=&#34;gc步骤&#34;&gt;GC步骤&lt;/h1&gt;&#xA;&lt;p&gt;global_State中的gcstate记录了当前incremental gc的执行状态。根据执行状态，整个gc过程被分为很多步执行。&lt;/p&gt;&#xA;&lt;h1 id=&#34;gcspause&#34;&gt;GCSpause&lt;/h1&gt;&#xA;&lt;p&gt;GCSpause状态标志着当前没有开始gc。gc一旦开始，第一步要做的就是标识所有的root对象。root对象包括global_State引用的mainthread对象，registry table，全局的metatable和上次gc所产生的还没有进行finalize的垃圾对象。标识工作就是将white对象设置成gray，是通过函数reallymarkobject进行的。reallymarkobject会根据不同的对象作不同的处理。&#xA;对于string对象，本身没有对其它对象的引用，就可以立即设置成black，无需等待后面的遍历。对于userdata对象，只会引用到一个metatable和env，所以直接mark后也可以立即设置成black。对于upvalue对象，直接mark引用的对象。所有root对象会被设置成gray状态，等待下一步的propagate。第一步完成后，gc状态会切换成GCSpropagate。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua52内部实现:GC2</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0gc2/</link>
      <pubDate>Tue, 06 Apr 2021 12:51:11 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0gc2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yuanlin2008/article/details/8684869&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;gcobject&#34;&gt;GCObject&lt;/h1&gt;&#xA;&lt;p&gt;Lua使用union GCObject来表示所有的垃圾回收对象：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;182 &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;183 ** Union of all collectable objects&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;184 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;185 &lt;span style=&#34;color:#00f&#34;&gt;union&lt;/span&gt; GCObject {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;186   GCheader gch;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* common header */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;187   &lt;span style=&#34;color:#00f&#34;&gt;union&lt;/span&gt; TString ts;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;188   &lt;span style=&#34;color:#00f&#34;&gt;union&lt;/span&gt; Udata u;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;189   &lt;span style=&#34;color:#00f&#34;&gt;union&lt;/span&gt; Closure cl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;190   &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; Table h;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;191   &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; Proto p;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;192   &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; UpVal uv;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;193   &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; lua_State th;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* thread */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;194 };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这就相当于在C++中，将所有的GC对象从GCheader派生，他们都共享GCheader。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua5.2内部实现:Garbage Collection(1) 原理</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0garbage-collection1-%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 06 Apr 2021 12:45:04 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0garbage-collection1-%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yuanlin2008/article/details/8558103&#34;&gt;原文链接&lt;/a&gt;&#xA;Lua5.2采用垃圾回收机制对所有的lua对象(GCObject)进行管理。Lua虚拟机会定期运行GC，释放掉已经不再被被引用到的lua对象。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua52内部实现-Function</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-function/</link>
      <pubDate>Tue, 06 Apr 2021 12:42:56 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-function/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yuanlin2008/article/details/8313434&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;基本概念&#xA;Lua函数引入了很多functional programming的概念，这些概念使得Lua函数在使用上可谓“功能强大，简洁统一”，非常符合程序员的“审美观”。&#xA;函数在Lua中属于“带有词法范围的一类值”(first-class values with proper lexical scoping)。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua52内部实现:TString</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0tstring/</link>
      <pubDate>Tue, 06 Apr 2021 12:41:56 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0tstring/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/yuanlin2008/article/details/8423923&#34;&gt;原文链接&lt;/a&gt;&#xA;Lua使用TString结构体代表一个字符串对象。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;** Header for string value; string bytes follow the end of this structure&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;union&lt;/span&gt; TString {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  L_Umaxalign dummy;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ensures maximum alignment for strings */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CommonHeader;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lu_byte extra;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* reserved words for short strings; &amp;#34;has hash&amp;#34; for longs */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; hash;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; len;  &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* number of characters in string */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } tsv;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} TString;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;hash用来记录字符串对应的哈希值，len用来记录字符串长度。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua52内部实现-编译系统4-表达式分类</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F4-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%86%E7%B1%BB/</link>
      <pubDate>Tue, 06 Apr 2021 11:59:59 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F4-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%86%E7%B1%BB/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yuanlin2008/article/details/8534583&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;常量表达式&#34;&gt;常量表达式&lt;/h1&gt;&#xA;&lt;p&gt;常量表达式在Lua用来表示&amp;quot;nil&amp;quot;，“true”，“false”，字符串和数字的值。在BNF中常量表达式属于终结符，也就是语法解析的最底端，在simpleexp函数中被解析出来，并创建对应类型的expdesc对象。VNIL，VTRUE和VFALSE这三个类型本身就对应3个固定的值，没有什么额外的数据。VKNUM类型代表数字常量，需要在nval中存放从词法分析中得到的lua_Number。VK类型用来表示一个通常意义上的常量表达式，使用info来存储他所代表的常量值在常量表中的id。字符串常量就被直接创建成VK类型，然后将其对应的字符串值保存到常量表中，并将id保存到info中。&#xA;由于常量表达式的值是一个常量，所以本身不需要生成任何用于估值计算的指令，完全为高层语义的指令生成提供服务。当高层语义要将常量装入一个寄存器时，比如local a＝&amp;ldquo;foo&amp;rdquo;，会调用discharge2reg函数，生成OP_LOADK指令。Lua中的很多指令都可以直接使用常量作为操作数，比如算数指令。当高层语义要将常量当作其他指令的参数时，会调用luaK_exp2RK函数，返回这个常量对应的id。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua52内部实现-编译系统3-表达式</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F3-%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Tue, 06 Apr 2021 11:51:50 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F3-%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>&lt;p&gt;​&#x9;&#x9;表达式(expression)在编程语言中代表一个可以返回值的语法单位，比如常量表达式，变量表达式，函数调用表达式，算术、关系和逻辑表达式等等。对于函数式编程语言来说，几乎所有的语句都是表达式，可以被估值。而对于命令式语言，一般会将语句分成表达式和陈述语句(statement)。表达式可以被估值，而普通的陈述语句用来执行命令。根据具体的语法，这两种类型不一定会有明确的界限。比如在C中，a = b既是一个用来赋值的陈述语句，又是一个表达式，而作为表达式的结果是最终的a值。所以，像c = a = b这样的语句是成立的，意思是将a = b作为表达式，并将值赋给c。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua52内部实现-编译系统2-跳转的处理</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F2-%E8%B7%B3%E8%BD%AC%E7%9A%84%E5%A4%84%E7%90%86/</link>
      <pubDate>Tue, 06 Apr 2021 11:45:14 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F2-%E8%B7%B3%E8%BD%AC%E7%9A%84%E5%A4%84%E7%90%86/</guid>
      <description>&lt;p&gt;​&#x9;跳转用来控制程序的指令流程。Lua使用OP_JMP指令来执行一个跳转，有关OP_JMP的详细介绍，可以参见《虚拟机指令》。跳转可以分为条件跳转和非条件跳转。非条件跳转比较简单，我们可以先从这里入手。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua52内部实现-编译系统1-概述</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F1-%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Tue, 06 Apr 2021 11:35:26 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F1-%E6%A6%82%E8%BF%B0/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yuanlin2008/article/details/8486463&#34;&gt;原文链接&lt;/a&gt;&#xA;Lua是一个轻量级高效率的语言。这种轻量级和高效率不仅体现在它本身虚拟机的运行效率上，而且也体现在他整个的编译系统的实现上。因为绝大多数的lua脚本需要运行期动态的加载编译，如果编译过程本身非常耗时，或者占用很多的内存，也同样会影响到整体的运行效率，使你感觉这个语言不够“动态”。正是因为编译系统实现的非常出色，我们在实际使用lua时基本感觉不到这个过程的存在。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(8) LOOP</title>
      <link>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A48-loop/</link>
      <pubDate>Tue, 06 Apr 2021 00:04:49 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/06/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A48-loop/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/yuanlin2008/article/details/8505183&#34;&gt;原文链接&lt;/a&gt;&#xA;Lua5.2种除了for循环之外，其他的各种循环都使用关系和逻辑指令，配合JMP指令来完成。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;local&lt;/span&gt; a = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt;(a &amp;lt; 10) &lt;span style=&#34;color:#00f&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a = a + 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        1       [1]     LOADK           0 -1    ; 0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        2       [2]     LT              0 0 -2  ; - 10&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        3       [2]     JMP             0 2     ; to 6&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        4       [3]     ADD             0 0 -3  ; - 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        5       [3]     JMP             0 -4    ; to 2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        6       [4]     RETURN          0 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第二行使用LT对寄存器0和敞亮10进行比较，如果小于成立，跳过第三行的JMP，运行第四行的ADD指令，将a加1，然后运行第五行的JMP，跳转回第二行，重新判断条件。如果小于不成立，则直接运行下一个JMP指令，跳转到第六行结束。&#xA;对于for循环，Lua5.2使用了两套专门的指令，分别对应numeric for loop和generic for loop。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(7) 关系和逻辑指令</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A47-%E5%85%B3%E7%B3%BB%E5%92%8C%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Mon, 05 Apr 2021 23:57:32 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A47-%E5%85%B3%E7%B3%BB%E5%92%8C%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yuanlin2008/article/details/8504200&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name&#x9;args&#x9;desc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OP_JMP&#x9;A sBx&#x9;pc+=sBx; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (A) close all upvalues &amp;gt;= R(A) + 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;JMP执行一个跳转，sBx表示跳转的偏移位置，被加到当前指向下一指令的指令指针上。如果sBx为0，表示没有任何跳转；1表示跳过下一个指令；-1表示重新执行当前指令。如果A&amp;gt;0，表示需要关闭所有从寄存器A+1开始的所有local变量。实际执行的关闭操作只对upvalue有效。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(6）FUNCTION</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A46function/</link>
      <pubDate>Mon, 05 Apr 2021 23:49:45 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A46function/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yuanlin2008/article/details/8494636&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;name    args    desc&#xA;OP_CALL    A B C    A B C   R(A), &amp;hellip; ,R(A+C-2) := R(A)(R(A+1), &amp;hellip; ,R(A+B-1))&#xA;CALL执行一个函数调用。寄存器A中存放函数对象，所有参数按顺序放置在A后面的寄存器中。B－1表示参数个数 。如果参数列表的最后一个表达式是变长的，则B会设置为0，表示使用A＋1到当前栈顶作为参数。函数调用的返回值会按顺序存放在从寄存器A开始的C-1个寄存器中。如果C为0,表示返回值的个数由函数决定。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(5）Arithmetic</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A45arithmetic/</link>
      <pubDate>Mon, 05 Apr 2021 23:16:09 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A45arithmetic/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/pyf09/article/details/92852103&#34;&gt;原文链接&lt;/a&gt;&#xA;name    args    desc&#xA;OP_ADD    A B C    R(A) := RK(B) + RK(C)&#xA;OP_SUB    A B C    R(A) := RK(B) - RK(C)&#xA;OP_MUL    A B C    R(A) := RK(B) * RK(C)&#xA;OP_DIV    A B C    R(A) := RK(B) / RK(C)&#xA;OP_MOD    A B C    R(A) := RK(B) % RK(C)&#xA;OP_POW    A B C    R(A) := RK(B) ^ RK(C)&#xA;上表中的指令都是与lua本身的二元操作符一一对应的标准3地址指令。B和C两个操作数计算的结果存入A中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(4) Table</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A44-table/</link>
      <pubDate>Mon, 05 Apr 2021 22:22:31 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A44-table/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yuanlin2008/article/details/8493104&#34;&gt;原文链接&lt;/a&gt;&#xA;name&#x9;args&#x9;desc&#xA;OP_NEWTABLE&#x9;A B C&#x9;R(A) := {} (size = B,C)&#xA;NEWTABLE在寄存器A处创建一个table对象。B和C分别用来存储这个table数组部分和hash部分的初始大小。初始大小是在编译期计算出来并生成到这个指令中的，目的是使接下来对table的初始化填充不会造成rehash而影响效率。B和C使用“floating point byte”的方法来表示成(eeeeexxx)的二进制形式，其实际值为(1xxx) * 2^(eeeee-1)。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(3) Upvalues &amp; Globals</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A43-upvalues-globals/</link>
      <pubDate>Mon, 05 Apr 2021 22:20:15 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A43-upvalues-globals/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yuanlin2008/article/details/8491144&#34;&gt;原文链接&lt;/a&gt;&#xA;在编译期，如果要访问变量a时，会依照以下的顺序决定变量a的类型：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;a是当前函数的local变量&lt;/li&gt;&#xA;&lt;li&gt;a是外层函数的local变量，那么a是当前函数的upvalue&lt;/li&gt;&#xA;&lt;li&gt;a是全局变量&#xA;local变量本身就存在于当前的register中，所有的指令都可以直接使用它的id来访问。而对于upvalue，lua则有专门的指令负责获取和设置。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;全局变量在lua5.1中也是使用专门的指令，而5.2对这一点做了改变。Lua5.2种没有专门针对全局变量的指令，而是把全局表放到最外层函数的名字为&amp;quot;_ENV&amp;quot;的upvalue中。对于全局变量a，相当于编译期帮你改成了_ENV.a来进行访问。&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua5.2内部实现:虚拟机指令(2) MOVE &amp; LOAD</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A42-move-load/</link>
      <pubDate>Mon, 05 Apr 2021 22:07:13 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua5.2%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A42-move-load/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yuanlin2008/article/details/8491112&#34;&gt;原文链接&lt;/a&gt;&#xA;| name&#x9;  | args&#x9;| desc        |&#xA;| OP_MOVE |&#x9;A B&#x9;    | R(A) := R(B) |&#xA;OP_MOVE用来将寄存器B中的值拷贝到寄存器A中。由于Lua是register based vm，大部分的指令都是直接对寄存器进行操作，而不需要对数据进行压栈和弹栈，所以需要OP_MOVE指令的地方并不多。最直接的使用之处就是将一个local变量复制给另一个local变量时:&lt;/p&gt;</description>
    </item>
    <item>
      <title>探索Lua52内部实现-虚拟机指令1概述</title>
      <link>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A41%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Mon, 05 Apr 2021 21:38:47 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/05/%E6%8E%A2%E7%B4%A2lua52%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A41%E6%A6%82%E8%BF%B0/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yuanlin2008/article/details/8423951&#34;&gt;原文链接&lt;/a&gt;&#xA;Lua一直把虚拟机执行代码的效率作为一个非常重要的设计目标。而采用什么样的指令系统的对于虚拟机的执行效率来说至关重要。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Stack based vs Register based VM&lt;/strong&gt;&#xA;根据指令获取操作数方式的不同，我们可以把虚拟机的实现分为stack based和register based。&lt;/p&gt;</description>
    </item>
    <item>
      <title>lua的历史与演进</title>
      <link>http://shanks.link/blog/2021/04/05/lua%E7%9A%84%E5%8E%86%E5%8F%B2%E4%B8%8E%E6%BC%94%E8%BF%9B/</link>
      <pubDate>Mon, 05 Apr 2021 20:08:32 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/05/lua%E7%9A%84%E5%8E%86%E5%8F%B2%E4%B8%8E%E6%BC%94%E8%BF%9B/</guid>
      <description>&lt;p&gt;lua的优点：&lt;/p&gt;&#xA;&lt;p&gt;可移植性&#xA;容易嵌入&#xA;体积小&#xA;高效率&#xA;这些优点都来自于lua的设计目标：简洁。从Scheme获得了很多灵感，包括匿名函数，合理的语义域概念&lt;/p&gt;&#xA;&lt;h1 id=&#34;3-lua前身&#34;&gt;3 lua前身&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;巴西被商贸限制，引入计算机软件和硬件受限，巴西人有强烈的民族情绪去创造自己的软件。三名作者都是同一个实验室Tecgraf的，这个实验室与很多工业实体有合作关系。成立的头十年，重点是创造交互性的图形软件，帮助合作伙伴进行设计。巴西石油公司是其中一个重要伙伴。有大量的遗留数据需要处理。于是诞生了DEL，一个领域专用语言，主要用来描述数据流图的数据的。后来人们对DEL需求越来越多，不止是一门简单的数据描述语言可以解决的了。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
