<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nginx on 愿星光伴随你左右</title>
    <link>http://shanks.link/categories/nginx/</link>
    <description>Recent content in Nginx on 愿星光伴随你左右</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 28 Oct 2021 20:57:17 +0000</lastBuildDate>
    <atom:link href="http://shanks.link/categories/nginx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>FFI</title>
      <link>http://shanks.link/blog/2021/10/28/ffi/</link>
      <pubDate>Thu, 28 Oct 2021 20:57:17 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/28/ffi/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://moonbingbing.gitbooks.io/openresty-best-practices/content/lua/FFI.html&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;FFI 库，是 LuaJIT 中最重要的一个扩展库。它允许从纯 Lua 代码调用外部 C 函数，使用 C 数据结构。有了它，就不用再像 Lua 标准 &lt;code&gt;math&lt;/code&gt; 库一样，编写 Lua 扩展库。把开发者从开发 Lua 扩展 C 库（语言/功能绑定库）的繁重工作中释放出来。学习完本小节对开发纯 &lt;code&gt;ffi&lt;/code&gt; 的库是有帮助的，像 &lt;a href=&#34;https://github.com/openresty/lua-resty-lrucache&#34;&gt;lru-resty-lrucache&lt;/a&gt; 中的 &lt;code&gt;pureffi.lua&lt;/code&gt;，这个纯 &lt;code&gt;ffi&lt;/code&gt; 库非常高效地完成了 lru 缓存策略。&lt;/p&gt;</description>
    </item>
    <item>
      <title>nginx整体介绍</title>
      <link>http://shanks.link/blog/2021/10/08/nginx%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 08 Oct 2021 23:47:37 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/08/nginx%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/muhy/&#34;&gt;转载自永恒的留忆&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;nginx是什么&#34;&gt;Nginx是什么？&lt;/h1&gt;&#xA;&lt;p&gt;Nginx就是反向代理服务器。&lt;/p&gt;&#xA;&lt;p&gt;首先我们先来看看什么是代理服务器，代理服务器一般是指局域网内部的机器通过代理服务发送请求到互联网上的服务器，代理服务器一般作用于客户端。比如GoAgent，FQ神器。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
