<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法题 on Golang入门指南</title>
    <link>http://shanks.link/categories/%E7%AE%97%E6%B3%95%E9%A2%98/</link>
    <description>Recent content in 算法题 on Golang入门指南</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 25 Aug 2021 01:04:23 +0800</lastBuildDate>
    <atom:link href="http://shanks.link/categories/%E7%AE%97%E6%B3%95%E9%A2%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>两数字之和</title>
      <link>http://shanks.link/blog/2021/08/25/%E4%B8%A4%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Wed, 25 Aug 2021 01:04:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/08/25/%E4%B8%A4%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/</guid>
      <description>&lt;h3 id=&#34;场景描述&#34;&gt;场景描述&lt;/h3&gt;&#xA;&lt;p&gt;给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。&lt;/p&gt;&#xA;&lt;p&gt;你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。&lt;/p&gt;</description>
    </item>
    <item>
      <title>单链表-反转</title>
      <link>http://shanks.link/blog/2021/08/25/%E5%8D%95%E9%93%BE%E8%A1%A8-%E5%8F%8D%E8%BD%AC/</link>
      <pubDate>Wed, 25 Aug 2021 00:56:24 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/08/25/%E5%8D%95%E9%93%BE%E8%A1%A8-%E5%8F%8D%E8%BD%AC/</guid>
      <description>&lt;h3 id=&#34;问题描述&#34;&gt;问题描述&lt;/h3&gt;&#xA;&lt;p&gt;给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。&#xA;&lt;img src=&#34;http://shanks.link/img/%E9%93%BE%E8%A1%A8-%E5%8D%95%E9%93%BE%E8%A1%A8-%E5%8F%8D%E8%BD%AC/1.jpg&#34; alt=&#34;示范输入&#34;&gt;&#xA;&lt;img src=&#34;http://shanks.link/img/%E9%93%BE%E8%A1%A8-%E5%8D%95%E9%93%BE%E8%A1%A8-%E5%8F%8D%E8%BD%AC/2.png&#34; alt=&#34;示范输入&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;解答代码&#34;&gt;解答代码&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * Definition for singly-linked list.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * struct ListNode {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; *     int val;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; *     struct ListNode *next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; * };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; ListNode* &lt;span style=&#34;color:#c34e00&#34;&gt;reverseList&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; ListNode* head){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; ListNode *pre = NULL, *cur =  head, *next = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (cur) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        next = cur-&amp;gt;next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur-&amp;gt;next = pre;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pre = cur;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur = next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; pre;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
