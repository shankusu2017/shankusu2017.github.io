<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c on Golang编程语言知识介绍</title>
    <link>http://shanks.link/categories/c/</link>
    <description>Recent content in c on Golang编程语言知识介绍</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 24 Jan 2024 10:33:20 +0800</lastBuildDate><atom:link href="http://shanks.link/categories/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>c语言打印调用栈及解析</title>
      <link>http://shanks.link/blog/2024/01/24/c%E8%AF%AD%E8%A8%80%E6%89%93%E5%8D%B0%E8%B0%83%E7%94%A8%E6%A0%88%E5%8F%8A%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 24 Jan 2024 10:33:20 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2024/01/24/c%E8%AF%AD%E8%A8%80%E6%89%93%E5%8D%B0%E8%B0%83%E7%94%A8%E6%A0%88%E5%8F%8A%E8%A7%A3%E6%9E%90/</guid>
      <description>相关头文件 #include &amp;lt;execinfo.h&amp;gt;int backtrace(void **buffer, int size); char **backtrace_symbols(void *const *buffer, int size); void backtrace_symbols_fd(void *const *buffer, int size, int fd); 示例代码 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;execinfo.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; void fun1(); void fun2(); void fun3(); void fun4(); void fun5(); void fun6(); void print_callstack(); int main() { fun6(); return 0; } void fun1() { print_callstack(); } void fun2() { fun1(); } void fun3() { fun2(); } void</description>
    </item>
    
    <item>
      <title>代码阅读——十个C开源项目</title>
      <link>http://shanks.link/blog/2023/09/22/%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB%E5%8D%81%E4%B8%AAc%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Fri, 22 Sep 2023 14:58:44 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2023/09/22/%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB%E5%8D%81%E4%B8%AAc%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</guid>
      <description>Webbench Webbench是一个在linux下使用的非常简单的网站压测工具。它使用fork()模拟多个客户端同时访问我们设定的URL，测试网站在压力</description>
    </item>
    
    <item>
      <title>Linux线程与信号</title>
      <link>http://shanks.link/blog/2023/09/22/linux%E7%BA%BF%E7%A8%8B%E4%B8%8E%E4%BF%A1%E5%8F%B7/</link>
      <pubDate>Fri, 22 Sep 2023 10:13:44 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2023/09/22/linux%E7%BA%BF%E7%A8%8B%E4%B8%8E%E4%BF%A1%E5%8F%B7/</guid>
      <description>信号与线程的关系 POSIX标准对多线程情况下的信号机制提出了一些要求： 信号处理函数必须在多线程进程的所有线程之间共享， 但是每个线程要有自己的</description>
    </item>
    
    <item>
      <title>sendmsg 和 recvmsg 函数</title>
      <link>http://shanks.link/blog/2023/09/22/sendmsg-%E5%92%8C-recvmsg-%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 22 Sep 2023 10:13:44 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2023/09/22/sendmsg-%E5%92%8C-recvmsg-%E5%87%BD%E6%95%B0/</guid>
      <description>基础介绍 最通用的I/O函数，只要设置好参数，read、readv、recv、recvfrom和write、writev、send、sendt</description>
    </item>
    
    <item>
      <title>C语言 获取随机数</title>
      <link>http://shanks.link/blog/2023/09/21/c%E8%AF%AD%E8%A8%80-%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E6%95%B0/</link>
      <pubDate>Thu, 21 Sep 2023 17:36:44 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2023/09/21/c%E8%AF%AD%E8%A8%80-%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E6%95%B0/</guid>
      <description>srand()和rand() 声明 #include &amp;lt;stdlib.h&amp;gt;int rand(void); int rand_r(unsigned int *seedp); //线程安全版本 void srand(unsigned int seed); 实例 #include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;time.h&amp;gt; int main() { srand((unsigned)time(NULL)); for(int i = 0; i &amp;lt; 10;i++ ) printf(&amp;#34;%d = %u\n&amp;#34;,i,rand()); return 0; } 二次随机 srand((unsigned)time(NULL)); int RanMe1 = rand() % 1000000;</description>
    </item>
    
    <item>
      <title>CMakeLists.txt注释</title>
      <link>http://shanks.link/blog/2022/10/19/cmakelists.txt%E6%B3%A8%E9%87%8A/</link>
      <pubDate>Wed, 19 Oct 2022 10:00:20 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/10/19/cmakelists.txt%E6%B3%A8%E9%87%8A/</guid>
      <description>单行注释：使用“#” 多行注释：使用“#[[ ]]” 以下图为例 以上内容转载自互联网，若有侵权请联系站长删除</description>
    </item>
    
    <item>
      <title>C语言获取系统时间并转换成字符串</title>
      <link>http://shanks.link/blog/2022/10/19/c%E8%AF%AD%E8%A8%80%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E5%B9%B6%E8%BD%AC%E6%8D%A2%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Wed, 19 Oct 2022 09:10:37 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/10/19/c%E8%AF%AD%E8%A8%80%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E5%B9%B6%E8%BD%AC%E6%8D%A2%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>#include &amp;lt;time.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; int main(int argc, char *argv[]) { time_t tt = time(0); char buf[32] = {0}; strftime(buf, sizeof(buf), &amp;#34;%Y-%m-%d %H:%M:%S&amp;#34;, localtime(&amp;amp;tt)); return 0; }</description>
    </item>
    
    <item>
      <title>printf函数输出指定长度</title>
      <link>http://shanks.link/blog/2022/10/18/printf%E5%87%BD%E6%95%B0%E8%BE%93%E5%87%BA%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6/</link>
      <pubDate>Tue, 18 Oct 2022 17:36:08 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/10/18/printf%E5%87%BD%E6%95%B0%E8%BE%93%E5%87%BA%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6/</guid>
      <description>原样输出字符串: printf(&amp;quot;%s&amp;quot;, str); 输出指定长度的字符串, 超长时不截断, 不足时右对齐: printf(&amp;quot;%Ns&amp;quot;, str); &amp;ndash;N 为指定长度的10进制数值 输出指定长度的字符串, 超长时不截断, 不足</description>
    </item>
    
    <item>
      <title>自定义print、log函数 以及自动加入__FILE__ __FUNCTION__ __LINE__ 等信息</title>
      <link>http://shanks.link/blog/2022/10/17/%E8%87%AA%E5%AE%9A%E4%B9%89printlog%E5%87%BD%E6%95%B0-%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%8A%A8%E5%8A%A0%E5%85%A5__file__-__function__-__line__-%E7%AD%89%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Mon, 17 Oct 2022 16:12:44 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/10/17/%E8%87%AA%E5%AE%9A%E4%B9%89printlog%E5%87%BD%E6%95%B0-%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%8A%A8%E5%8A%A0%E5%85%A5__file__-__function__-__line__-%E7%AD%89%E4%BF%A1%E6%81%AF/</guid>
      <description>自定义参数的实现 void dlog(char *format, ...) { char buf[2048]; va_list args; va_start(args, format); vsprintf(buf, format, args); va_end(args); write(fd, buf); /* 输出到指定 fd */ return; } 自动加入调用位置信息的宏定义 #define log(format, ...) dlog(&amp;#34;%-7s %-10s %-3d &amp;#34;format, __FILE__, __FUNCTION__, __LINE__, ##__VA_ARGS__)</description>
    </item>
    
    <item>
      <title>linux ucontext族函数的原理及使用</title>
      <link>http://shanks.link/blog/2021/10/28/linux-ucontext%E6%97%8F%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 28 Oct 2021 20:02:45 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/28/linux-ucontext%E6%97%8F%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      <description>原文链接 ucontext函数族 这里的context族是偏向底层的，其实底层就是通过汇编来实现的，但是我们使用的时候就和平常使用变量和函数一样</description>
    </item>
    
    <item>
      <title>C&#43;&#43;面试常见问题</title>
      <link>http://shanks.link/blog/2021/07/20/c-%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 20 Jul 2021 14:43:48 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/20/c-%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>extern关键字的作用 置于变量或函数前，用于标示变量或函数的定义在别的文件中，提示编译器遇到此变量和函数时在其他模块中寻找其定义。它只要有</description>
    </item>
    
    <item>
      <title>setjmp和longjmp函数使用详解</title>
      <link>http://shanks.link/blog/2021/04/14/setjmp%E5%92%8Clongjmp%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 14 Apr 2021 00:08:43 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/14/setjmp%E5%92%8Clongjmp%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</guid>
      <description>转载自大米粒的blog 在网上看到的，觉得很有用，copy过来的。 非局部跳转语句&amp;mdash;setjmp和longjmp函数。非局部指的是，</description>
    </item>
    
    <item>
      <title>c语言运算符和优先级</title>
      <link>http://shanks.link/blog/2000/01/01/c%E8%AF%AD%E8%A8%80%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7/</link>
      <pubDate>Sat, 01 Jan 2000 10:33:20 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2000/01/01/c%E8%AF%AD%E8%A8%80%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7/</guid>
      <description>运算符的优先级：Ｃ语言中，运算符的运算优先级共分为15 级。1 级最高，15级最低。在表达式中，优先级较高的先于优先级较低的进行运算。而在一个运</description>
    </item>
    
  </channel>
</rss>
