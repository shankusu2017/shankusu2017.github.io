<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on Golang入门指南</title>
    <link>http://shanks.link/categories/c/</link>
    <description>Recent content in C on Golang入门指南</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 16 Dec 2024 16:42:27 +0800</lastBuildDate>
    <atom:link href="http://shanks.link/categories/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>sqlite 设计与实现</title>
      <link>http://shanks.link/blog/2024/12/16/sqlite-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 16 Dec 2024 16:42:27 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/12/16/sqlite-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;&lt;strong&gt;COPY RIGHT&lt;/strong&gt;&#xA;以下相关内容的版权为 Sibsankar Haldar 所有，仅供学习研究只用，未获得原始作者的授权时不可有任何侵权行为；&lt;/p&gt;&#xA;&lt;h1 id=&#34;第一章-计算机系统概论&#34;&gt;第一章 计算机系统概论&lt;/h1&gt;&#xA;&lt;h1 id=&#34;第二章-sqlite概述&#34;&gt;第二章 SQLite概述&lt;/h1&gt;&#xA;&lt;h3 id=&#34;学术目标&#34;&gt;学术目标&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;SQLite数据库系统及其功能&lt;/li&gt;&#xA;&lt;li&gt;SQLite支持哪些显著特性&lt;/li&gt;&#xA;&lt;li&gt;SQLite如何将表存储在数据库文件中&lt;/li&gt;&#xA;&lt;li&gt;如何编写、编译和执行SQLite应用程序&lt;/li&gt;&#xA;&lt;li&gt;一些最常用的SQLite API&lt;/li&gt;&#xA;&lt;li&gt;模块化的SQLite体系结构&lt;/li&gt;&#xA;&lt;li&gt;SQLite的限制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;章节概要&#34;&gt;章节概要&lt;/h3&gt;&#xA;&lt;p&gt;        SQLite是一个小型的、零配置的、定制的、可嵌入的、线程安全的、易于维护的、面向事务的、基于SQL的关系数据库管理系统。它将整个数据库存储在包含所有表和索引的单个文件中。它将所有表组织成单独的B+树，并将索引组织成B树。它支持核心事务属性，即原子性、一致性、隔离性和持久性。它使用基于锁的并发控制方案和基于日志的恢复方案。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux进程间通信7：数据报套接字 socket()、bind()、sendto()、recvfrom()、close()</title>
      <link>http://shanks.link/blog/2024/04/16/linux%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A17%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%A5%97%E6%8E%A5%E5%AD%97-socketbindsendtorecvfromclose/</link>
      <pubDate>Tue, 16 Apr 2024 14:28:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/04/16/linux%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A17%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%A5%97%E6%8E%A5%E5%AD%97-socketbindsendtorecvfromclose/</guid>
      <description>&lt;p&gt;前一篇文章，&lt;a href=&#34;http://shanks.link/blog/2024/04/16/linux%e8%bf%9b%e7%a8%8b%e9%97%b4%e9%80%9a%e4%bf%a16-%e6%b5%81%e5%a5%97%e6%8e%a5%e5%ad%97-socketbindlistenacceptconnectreadwriteclose/&#34;&gt;Linux进程间通信——使用流套接字&lt;/a&gt;介绍了一些有关socket（套接字）的一些基本内容，并讲解了流套接字的使用，这篇文章将会给大家讲讲，数据报套接字的使用。&lt;/p&gt;&#xA;&lt;h3 id=&#34;一简单回顾什么是数据报套接字&#34;&gt;一、简单回顾——什么是数据报套接字&lt;/h3&gt;&#xA;&lt;p&gt;socket，即套接字是一种通信机制，凭借这种机制，客户/服务器（即要进行通信的进程）系统的开发工作既可以在本地单机上进行，也可以跨网络进行。也就是说它可以让不在同一台计算机但通过网络连接计算机上的进程进行通信。也因为这样，套接字明确地将客户端和服务器区分开来。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux进程间通信6 流套接字 socket bind listen accept connect read write close</title>
      <link>http://shanks.link/blog/2024/04/16/linux%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A16-%E6%B5%81%E5%A5%97%E6%8E%A5%E5%AD%97-socket-bind-listen-accept-connect-read-write-close/</link>
      <pubDate>Tue, 16 Apr 2024 11:53:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/04/16/linux%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A16-%E6%B5%81%E5%A5%97%E6%8E%A5%E5%AD%97-socket-bind-listen-accept-connect-read-write-close/</guid>
      <description>&lt;p&gt;前面说到的进程间的通信，所通信的进程都是在同一台计算机上的，而使用socket进行通信的进程可以是同一台计算机的进程，也是可以是通过网络连接起来的不同计算机上的进程。通常我们使用socket进行网络编程，这里将会简单地讲述如何使用socket进行简单的网络编程。&lt;/p&gt;</description>
    </item>
    <item>
      <title>进程间通信5 消息队列 msgget、msgsend、msgrcv、msgctl</title>
      <link>http://shanks.link/blog/2024/04/16/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A15-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-msggetmsgsendmsgrcvmsgctl/</link>
      <pubDate>Tue, 16 Apr 2024 11:41:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/04/16/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A15-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-msggetmsgsendmsgrcvmsgctl/</guid>
      <description>&lt;p&gt;下面来说说如何用不用消息队列来进行进程间的通信，消息队列与命名管道有很多相似之处。有关命名管道的更多内容可以参阅我的另一篇文章：&lt;a href=&#34;http://shanks.link/blog/2024/04/16/%e8%bf%9b%e7%a8%8b%e9%97%b4%e9%80%9a%e4%bf%a12-%e6%9c%89%e5%90%8d%e7%ae%a1%e9%81%93/&#34;&gt;Linux进程间通信 &amp;ndash; 使用命名管道&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>进程间通信4 共享内存 shmget shmat shmdt shmctl</title>
      <link>http://shanks.link/blog/2024/04/16/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A14-%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98-shmget-shmat-shmdt-shmctl/</link>
      <pubDate>Tue, 16 Apr 2024 11:19:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/04/16/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A14-%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98-shmget-shmat-shmdt-shmctl/</guid>
      <description>&lt;p&gt;下面将讲解进程间通信的另一种方式，使用共享内存。&lt;/p&gt;&#xA;&lt;h3 id=&#34;一什么是共享内存&#34;&gt;一、什么是共享内存&lt;/h3&gt;&#xA;&lt;p&gt;顾名思义，共享内存就是允许两个不相关的进程访问同一个逻辑内存。共享内存是在两个正在运行的进程之间共享和传递数据的一种非常有效的方式。不同进程之间共享的内存通常安排为同一段物理内存。进程可以将同一段共享内存连接到它们自己的地址空间中，所有进程都可以访问共享内存中的地址，就好像它们是由用C语言函数malloc()分配的内存一样。而如果某个进程向共享内存写入数据，所做的改动将立即影响到可以访问同一段共享内存的任何其他进程。&lt;/p&gt;</description>
    </item>
    <item>
      <title>进程间通信3 信号量 semget、semop、semctl</title>
      <link>http://shanks.link/blog/2024/04/16/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A13-%E4%BF%A1%E5%8F%B7%E9%87%8F-semgetsemopsemctl/</link>
      <pubDate>Tue, 16 Apr 2024 10:49:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/04/16/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A13-%E4%BF%A1%E5%8F%B7%E9%87%8F-semgetsemopsemctl/</guid>
      <description>&lt;p&gt;这篇文章将讲述别一种进程间通信的机制——信号量。注意请不要把它与之前所说的信号混淆起来，信号与信号量是不同的两种事物。有关信号的更多内容，可以阅读我的另一篇文章：&lt;a href=&#34;http://www.cnblogs.com/52php/p/5813867.html&#34;&gt;Linux进程间通信 &amp;ndash; 信号&lt;/a&gt;。下面就进入信号量的讲解。&lt;/p&gt;</description>
    </item>
    <item>
      <title>进程间通信2 有名管道 mkfifo、open、read、close</title>
      <link>http://shanks.link/blog/2024/04/16/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A12-%E6%9C%89%E5%90%8D%E7%AE%A1%E9%81%93-mkfifoopenreadclose/</link>
      <pubDate>Tue, 16 Apr 2024 09:56:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/04/16/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A12-%E6%9C%89%E5%90%8D%E7%AE%A1%E9%81%93-mkfifoopenreadclose/</guid>
      <description>&lt;p&gt;在前一篇文章—— &lt;a href=&#34;http://shanks.link/blog/2024/04/15/%e8%bf%9b%e7%a8%8b%e9%97%b4%e9%80%9a%e4%bf%a12-%e5%8c%bf%e5%90%8d%e7%ae%a1%e9%81%93/&#34;&gt;Linux进程间通信 &amp;ndash; 使用匿名管道&lt;/a&gt; 中，我们看到了如何使用匿名管道来在进程之间传递数据，同时也看到了这个方式的一个缺陷，就是这些进程都由一个共同的祖先进程启动，这给我们在不相关的的进程之间交换数据带来了不方便。这里将会介绍进程的另一种通信方式——命名管道，来解决不相关进程间的通信问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>进程间通信2 匿名管道 popen、pclose、pipe、close、dup、dup2</title>
      <link>http://shanks.link/blog/2024/04/15/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A12-%E5%8C%BF%E5%90%8D%E7%AE%A1%E9%81%93-popenpclosepipeclosedupdup2/</link>
      <pubDate>Mon, 15 Apr 2024 17:17:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/04/15/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A12-%E5%8C%BF%E5%90%8D%E7%AE%A1%E9%81%93-popenpclosepipeclosedupdup2/</guid>
      <description>&lt;p&gt;在前面，介绍了一种进程间的通信方式：使用信号，我们创建通知事件，并通过它引起响应，但传递的信息只是一个信号值。这里将介绍另一种进程间通信的方式——匿名管道，通过它进程间可以交换更多有用的数据。&lt;/p&gt;</description>
    </item>
    <item>
      <title>进程间通信1 信号  signal、sigaction</title>
      <link>http://shanks.link/blog/2024/04/15/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A11-%E4%BF%A1%E5%8F%B7-signalsigaction/</link>
      <pubDate>Mon, 15 Apr 2024 16:51:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/04/15/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A11-%E4%BF%A1%E5%8F%B7-signalsigaction/</guid>
      <description>&lt;h3 id=&#34;一什么是信号&#34;&gt;一、什么是信号&lt;/h3&gt;&#xA;&lt;p&gt;用过Windows的我们都知道，当我们无法正常结束一个程序时，可以用任务管理器强制结束这个进程，但这其实是怎么实现的呢？同样的功能在Linux上是通过生成信号和捕获信号来实现的，运行中的进程捕获到这个信号然后作出一定的操作并最终被终止。&lt;/p&gt;</description>
    </item>
    <item>
      <title>进程间通信1 信号之信号集函数 sigemptyset()、sigprocmask()、sigpending()、sigsuspend()</title>
      <link>http://shanks.link/blog/2024/04/15/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A11-%E4%BF%A1%E5%8F%B7%E4%B9%8B%E4%BF%A1%E5%8F%B7%E9%9B%86%E5%87%BD%E6%95%B0-sigemptysetsigprocmasksigpendingsigsuspend/</link>
      <pubDate>Mon, 15 Apr 2024 16:51:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/04/15/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A11-%E4%BF%A1%E5%8F%B7%E4%B9%8B%E4%BF%A1%E5%8F%B7%E9%9B%86%E5%87%BD%E6%95%B0-sigemptysetsigprocmasksigpendingsigsuspend/</guid>
      <description>&lt;p&gt;我们已经知道，我们可以通过信号来终止进程，也可以通过信号来在进程间进行通信，程序也可以通过指定信号的关联处理函数来改变信号的默认处理方式，也可以屏蔽某些信号，使其不能传递给进程。那么我们应该如何设定我们需要处理的信号，我们不需要处理哪些信号等问题呢？信号集函数就是帮助我们解决这些问题的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PIPE 管道</title>
      <link>http://shanks.link/blog/2024/03/20/pipe-%E7%AE%A1%E9%81%93/</link>
      <pubDate>Wed, 20 Mar 2024 14:58:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/03/20/pipe-%E7%AE%A1%E9%81%93/</guid>
      <description>&lt;h3 id=&#34;官方参考手册&#34;&gt;官方参考手册&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://manpages.courier-mta.org/htmlman7/pipe.7.html&#34;&gt;https://manpages.courier-mta.org/htmlman7/pipe.7.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;示例代码&#34;&gt;示例代码&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;// O_NOATIME 宏定义的扩展要求&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define _GNU_SOURCE 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#undef _GNU_SOURCE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;pthread.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;sys/time.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;linux/unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;assert.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;limits.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; pip[2];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c34e00&#34;&gt;sleep_select&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; sec)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; timeval timeout;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    timeout.tv_usec = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    timeout.tv_sec = sec;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;select&lt;/span&gt;(0, NULL, NULL, NULL, &amp;amp;timeout);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;*&lt;span style=&#34;color:#c34e00&#34;&gt;thread_read&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *userdata)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; data[5] = {0};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; ret;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;p0: %d&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, pip[0]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;p1: %d&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, pip[1]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fd_set fds;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;FD_ZERO&lt;/span&gt;(&amp;amp;fds);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;FD_SET&lt;/span&gt;(pip[0], &amp;amp;fds);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; timeval timeout = {10, 0};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ret = &lt;span style=&#34;color:#c34e00&#34;&gt;select&lt;/span&gt;(pip[0] + 1, &amp;amp;fds, NULL, NULL, &amp;amp;timeout);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ret &amp;lt; 0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;select error&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (ret == 0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;// printf(&amp;#34;no fd ready\n&amp;#34;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;FD_ISSET&lt;/span&gt;(pip[0], &amp;amp;fds) &amp;gt; 0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#c34e00&#34;&gt;read&lt;/span&gt;(pip[0], data, 5);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;data: %s&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, data);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c34e00&#34;&gt;thread_write&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;thread_write&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; data[] = &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;pipe-data&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;sleep_select&lt;/span&gt;(1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;write&lt;/span&gt;(pip[1], data, &lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(data));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 单次写入的数据长度超过 PIPE_BUF 时， 内核不保证写入的原子性*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(data) &amp;gt; PIPE_BUF)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;warn data is too long&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *argv[])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; data[] = &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;pthread_t&lt;/span&gt; id;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;pipe&lt;/span&gt;(pip))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;pipe error&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;exit&lt;/span&gt;(-1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;p0: %d&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, pip[0]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;p1: %d&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, pip[1]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;fcntl&lt;/span&gt;(pip[0], F_SETFL, O_NOATIME); &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 提高性能 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;fcntl&lt;/span&gt;(pip[1], F_SETFL, O_NOATIME);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c34e00&#34;&gt;pthread_create&lt;/span&gt;(&amp;amp;id, NULL, thread_read, NULL))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;create thread error&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;exit&lt;/span&gt;(-1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;pthread id = %x&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, id);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;pthread_create&lt;/span&gt;(&amp;amp;id, NULL, thread_write, NULL);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;// signal(SIGUSR1, mysignal);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c34e00&#34;&gt;sleep_select&lt;/span&gt;(2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;pthread_join&lt;/span&gt;(id, NULL);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;基本介绍&#34;&gt;基本介绍&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;无名管道(4)：通过管道同步进程&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;通过管道同步进程&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;管道其实就是一个文件&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PIPE通信应用&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;通过管道同步进程&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;管道自带同步互斥机制：&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;管道的内核实现：fs/pipe.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;通过内核的锁、等待队列等机制实现&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Write操作可能会阻塞进程&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;当内存缓冲区已满被读进程锁定&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;直到所有数据被写入到管道为止&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Read操作进程可能会阻塞进程&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;读进程可以休眠在等待队列&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;直到所有子进程都关闭了管道的写入端描述符为止&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;父进程的写入端描述符也要关闭，否则父进程读管道时也会被阻塞&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;只有当所有的写端描述符都已关闭，且管道中的数据都被读出，对读端描述符调用read函数才会返回0(即读到EOF标志)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;当所有的读取端和写入端都关闭，管道才能被销毁&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;管道缓冲区设置&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;管道缓冲区&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;管道对应的内存缓冲区大小&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PIPE_BUF的容量是有限的：默认是65536字节&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;在不同OS下PIPE_BUF大小设置不同：在limits.h头文件中定义&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;写入管道的数据超过PIPE_BUF大小，内核会分割几块传输&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;最大值/proc/sys/fs/pipe-maxsize&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;查看打开的管道文件：cat /proc/PID/fd&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;设置缓冲区大小&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;特权用户：可以修改上限值&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;设置缓冲区大小：fcntl(fd, F_SETPIPE, size)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/Scroll_C/article/details/123414270&#34;&gt;参考资料连接&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>c语言打印调用栈及解析</title>
      <link>http://shanks.link/blog/2024/01/24/c%E8%AF%AD%E8%A8%80%E6%89%93%E5%8D%B0%E8%B0%83%E7%94%A8%E6%A0%88%E5%8F%8A%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 24 Jan 2024 10:33:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/24/c%E8%AF%AD%E8%A8%80%E6%89%93%E5%8D%B0%E8%B0%83%E7%94%A8%E6%A0%88%E5%8F%8A%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;h3 id=&#34;相关头文件&#34;&gt;相关头文件&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;execinfo.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;backtrace&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; **buffer, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; **&lt;span style=&#34;color:#c34e00&#34;&gt;backtrace_symbols&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; *buffer, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;backtrace_symbols_fd&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; *buffer, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; size, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; fd);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;示例代码&#34;&gt;示例代码&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;execinfo.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fun1&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fun2&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fun3&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fun4&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fun5&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fun6&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;print_callstack&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;main&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;fun6&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fun1&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;print_callstack&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fun2&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;fun1&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fun3&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;fun2&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fun4&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;fun3&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fun5&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;fun4&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;fun6&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;fun5&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;print_callstack&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; size = 32;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *array[32];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; stack_num = &lt;span style=&#34;color:#c34e00&#34;&gt;backtrace&lt;/span&gt;(array, size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; **stacktrace = NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;%s begin&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, __func__);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;stacktrace = (&lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt;**)&lt;span style=&#34;color:#c34e00&#34;&gt;backtrace_symbols&lt;/span&gt;(array, stack_num);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt; (i = 0; i &amp;lt; stack_num; i++)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, stacktrace[i]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;free&lt;/span&gt;(stacktrace);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;%s end&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, __func__);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;对应输出&#34;&gt;对应输出&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[~]$ gcc test.c &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[~]$ ./a.out &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print_callstack begin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./a.out() [0x4006f8]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./a.out() [0x400680]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./a.out() [0x400690]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./a.out() [0x4006a0]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./a.out() [0x4006b0]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./a.out() [0x4006c0]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./a.out() [0x4006d0]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./a.out() [0x40066b]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/lib64/libc.so.6(__libc_start_main+0xf5) [0x7f523b25ec05]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./a.out() [0x400599]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print_callstack end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[~]$ nm -n a.out &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 U backtrace@@GLIBC_2.2.5&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 U backtrace_symbols@@GLIBC_2.2.5&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 U free@@GLIBC_2.2.5&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 w __gmon_start__&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 w _ITM_deregisterTMCloneTable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 w _ITM_registerTMCloneTable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 w _Jv_RegisterClasses&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 U __libc_start_main@@GLIBC_2.2.5&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 U printf@@GLIBC_2.2.5&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 U puts@@GLIBC_2.2.5&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000000004004d0 T _init&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400570 T _start&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000000004005a0 t deregister_tm_clones&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000000004005d0 t register_tm_clones&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400610 t __do_global_dtors_aux&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400630 t frame_dummy&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;000000000040065d T main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400672 T fun1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400682 T fun2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400692 T fun3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000000004006a2 T fun4&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000000004006b2 T fun5&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000000004006c2 T fun6&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000000004006d2 T print_callstack&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400790 T __libc_csu_init&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400800 T __libc_csu_fini&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400804 T _fini&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400810 R _IO_stdin_used&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400818 R __dso_handle&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400840 r __func__.2719&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000400a90 r __FRAME_END__&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000600e10 t __frame_dummy_init_array_entry&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000600e10 t __init_array_start&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000600e18 t __do_global_dtors_aux_fini_array_entry&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000600e18 t __init_array_end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000600e20 d __JCR_END__&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000600e20 d __JCR_LIST__&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000600e28 d _DYNAMIC&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601000 d _GLOBAL_OFFSET_TABLE_&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601050 D __data_start&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601050 W data_start&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601054 B __bss_start&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601054 b completed.6344&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601054 D _edata&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601058 B _end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000000601058 D __TMC_END__&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[~]$ &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;说明&#34;&gt;说明&lt;/h3&gt;&#xA;&lt;p&gt;根据调用栈的地址到符号表地址中查找，&lt;/p&gt;</description>
    </item>
    <item>
      <title>代码阅读——十个C开源项目</title>
      <link>http://shanks.link/blog/2023/09/22/%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB%E5%8D%81%E4%B8%AAc%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Fri, 22 Sep 2023 14:58:44 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/22/%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB%E5%8D%81%E4%B8%AAc%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Webbench&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Webbench是一个在linux下使用的非常简单的网站压测工具。它使用fork()模拟多个客户端同时访问我们设定的URL，测试网站在压力下工作的性能，最多可以模拟3万个并发连接去测试网站的负载能力。Webbench使用C语言编写, 代码实在太简洁，源码加起来不到600行。下载链接：&lt;a href=&#34;https://cloud.tencent.com/developer/tools/blog-entry?target=http%3A%2F%2Fhome.tiscali.cz%2F~cz210552%2Fwebbench.html&#34;&gt;Web Bench Homepage&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux线程与信号</title>
      <link>http://shanks.link/blog/2023/09/22/linux%E7%BA%BF%E7%A8%8B%E4%B8%8E%E4%BF%A1%E5%8F%B7/</link>
      <pubDate>Fri, 22 Sep 2023 10:13:44 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/22/linux%E7%BA%BF%E7%A8%8B%E4%B8%8E%E4%BF%A1%E5%8F%B7/</guid>
      <description>&lt;h3 id=&#34;信号与线程的关系&#34;&gt;&lt;strong&gt;信号与线程的关系&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;POSIX标准对&lt;a href=&#34;https://so.csdn.net/so/search?q=%E5%A4%9A%E7%BA%BF%E7%A8%8B&amp;amp;spm=1001.2101.3001.7020&#34;&gt;多线程&lt;/a&gt;情况下的信号机制提出了一些要求：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;信号处理函数必须在多线程进程的&lt;strong&gt;所有线程之间共享&lt;/strong&gt;， 但是每个线程要有自己的挂起信号集合和阻塞信号掩码。&lt;/li&gt;&#xA;&lt;li&gt;POSIX函数kill/sigqueue必须面向进程， 而不是进程下的某个特定的线程。&lt;/li&gt;&#xA;&lt;li&gt;每个发给多线程应用的信号仅递送给一个线程， 这个线程是由内核从不会阻塞该信号的线程中****随意选出来****的。&lt;/li&gt;&#xA;&lt;li&gt;如果发送一个致命信号到多线程， 那么内核将杀死该应用的所有线程， 而不仅仅是接收信号的那个线程。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这些就是POSIX标准提出的要求， Linux也要遵循这些要求， 那它是怎么做到的呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>sendmsg 和 recvmsg 函数</title>
      <link>http://shanks.link/blog/2023/09/22/sendmsg-%E5%92%8C-recvmsg-%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 22 Sep 2023 10:13:44 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/22/sendmsg-%E5%92%8C-recvmsg-%E5%87%BD%E6%95%B0/</guid>
      <description>&lt;h3 id=&#34;基础介绍&#34;&gt;基础介绍&lt;/h3&gt;&#xA;&lt;p&gt;  最通用的I/O函数，只要设置好参数，read、readv、&lt;a href=&#34;https://so.csdn.net/so/search?q=recv&amp;amp;spm=1001.2101.3001.7020&#34;&gt;recv&lt;/a&gt;、recvfrom和write、writev、send、sendto等函数都可以对应换成这两个函数来调用。同时，各种输出函数调用也可以替换成&lt;code&gt;sendmsg&lt;/code&gt;调用。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ssize_t&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;recvmsg&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; sockfd, &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; msghdr *msg, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; flags);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ssizt_t&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;sendmsg&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; sockfd, &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; msghdr *msg, &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; flags);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;大部分参数都在 &lt;code&gt;msghdr&lt;/code&gt;结构中&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; iovec&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{                   &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Scatter/gather array items */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *iov_base; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Starting address */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; iov_len; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* Number of bytes to transfer */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; msghdr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *msg_name;        &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* optional address */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;socklen_t&lt;/span&gt; msg_namelen; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* size of address */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; iovec *msg_iov; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* scatter/gather array */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; msg_iovlen;   &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* # elements in msg_iov */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; *msg_control;   &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ancillary data, see below */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;size_t&lt;/span&gt; msg_controllen; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* ancillary data buffer len */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; msg_flags;         &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* flags on received message */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;struct msghdr&lt;/code&gt; 结构体参数说明：&lt;/p&gt;</description>
    </item>
    <item>
      <title>C语言 获取随机数</title>
      <link>http://shanks.link/blog/2023/09/21/c%E8%AF%AD%E8%A8%80-%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E6%95%B0/</link>
      <pubDate>Thu, 21 Sep 2023 17:36:44 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/21/c%E8%AF%AD%E8%A8%80-%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E6%95%B0/</guid>
      <description>&lt;h2 id=&#34;srand和rand&#34;&gt;srand()和rand()&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;声明&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;rand&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;rand_r&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; *seedp);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;//线程安全版本&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;srand&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; seed);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;实例&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;time.h&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;main&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;srand&lt;/span&gt;((&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt;)&lt;span style=&#34;color:#c34e00&#34;&gt;time&lt;/span&gt;(NULL)); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; 10;i++ ) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;%d = %u&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;,i,&lt;span style=&#34;color:#c34e00&#34;&gt;rand&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;二次随机&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c34e00&#34;&gt;srand&lt;/span&gt;((&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt;)&lt;span style=&#34;color:#c34e00&#34;&gt;time&lt;/span&gt;(NULL));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; RanMe1 = &lt;span style=&#34;color:#c34e00&#34;&gt;rand&lt;/span&gt;() % 1000000;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c34e00&#34;&gt;srand&lt;/span&gt;(RanMe1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; RanMe2 = &lt;span style=&#34;color:#c34e00&#34;&gt;rand&lt;/span&gt;() % 1000000;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;srandom和random&#34;&gt;srandom()和random()&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;声明&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;random&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;srandom&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; seed);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;random_r&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; random_data *buf, &lt;span style=&#34;color:#00f&#34;&gt;int32_t&lt;/span&gt; *result);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;srandom_r&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; seed, &lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; random_data *buf);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;实例&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;time.h&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;main&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;srandom&lt;/span&gt;(&lt;span style=&#34;color:#c34e00&#34;&gt;time&lt;/span&gt;(0));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; 10;i++ ) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;%d = %u&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;,i,&lt;span style=&#34;color:#c34e00&#34;&gt;random&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;rand-与random的区别&#34;&gt;rand 与random的区别&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/iicyl/article/details/60603092&#34;&gt;https://blog.csdn.net/iicyl/article/details/60603092&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>CMakeLists.txt注释</title>
      <link>http://shanks.link/blog/2022/10/19/cmakelists.txt%E6%B3%A8%E9%87%8A/</link>
      <pubDate>Wed, 19 Oct 2022 10:00:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/19/cmakelists.txt%E6%B3%A8%E9%87%8A/</guid>
      <description>&lt;p&gt;单行注释：使用“#”&#xA;多行注释：使用“#[[ ]]”&#xA;以下图为例&#xA;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200211213228606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lNV01f,size_16,color_FFFFFF,t_70&#34; alt=&#34;注释前&#34;&gt;&#xA;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200211213255746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lNV01f,size_16,color_FFFFFF,t_70&#34; alt=&#34;注释后&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/YMWM_/article/details/104270409&#34;&gt;以上内容转载自互联网，若有侵权请联系站长删除&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>C语言获取系统时间并转换成字符串</title>
      <link>http://shanks.link/blog/2022/10/19/c%E8%AF%AD%E8%A8%80%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E5%B9%B6%E8%BD%AC%E6%8D%A2%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Wed, 19 Oct 2022 09:10:37 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/19/c%E8%AF%AD%E8%A8%80%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E5%B9%B6%E8%BD%AC%E6%8D%A2%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *argv[]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#00f&#34;&gt;time_t&lt;/span&gt; tt = &lt;span style=&#34;color:#c34e00&#34;&gt;time&lt;/span&gt;(0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; buf[32] = {0};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#c34e00&#34;&gt;strftime&lt;/span&gt;(buf, &lt;span style=&#34;color:#00f&#34;&gt;sizeof&lt;/span&gt;(buf), &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;%Y-%m-%d %H:%M:%S&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c34e00&#34;&gt;localtime&lt;/span&gt;(&amp;amp;tt));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>printf函数输出指定长度</title>
      <link>http://shanks.link/blog/2022/10/18/printf%E5%87%BD%E6%95%B0%E8%BE%93%E5%87%BA%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6/</link>
      <pubDate>Tue, 18 Oct 2022 17:36:08 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/18/printf%E5%87%BD%E6%95%B0%E8%BE%93%E5%87%BA%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6/</guid>
      <description>&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;原样输出字符串:&#xA;printf(&amp;quot;%s&amp;quot;, str);&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;输出指定长度的字符串, 超长时不截断, 不足时右对齐:&#xA;printf(&amp;quot;%Ns&amp;quot;, str);       &amp;ndash;N 为指定长度的10进制数值&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;输出指定长度的字符串, 超长时不截断, 不足时左对齐:&#xA;printf(&amp;quot;%-Ns&amp;quot;, str);      &amp;ndash;N 为指定长度的10进制数值&lt;/p&gt;</description>
    </item>
    <item>
      <title>自定义print、log函数 以及自动加入__FILE__ __FUNCTION__ __LINE__ 等信息</title>
      <link>http://shanks.link/blog/2022/10/17/%E8%87%AA%E5%AE%9A%E4%B9%89printlog%E5%87%BD%E6%95%B0-%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%8A%A8%E5%8A%A0%E5%85%A5__file__-__function__-__line__-%E7%AD%89%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Mon, 17 Oct 2022 16:12:44 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/17/%E8%87%AA%E5%AE%9A%E4%B9%89printlog%E5%87%BD%E6%95%B0-%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%8A%A8%E5%8A%A0%E5%85%A5__file__-__function__-__line__-%E7%AD%89%E4%BF%A1%E6%81%AF/</guid>
      <description>&lt;h3 id=&#34;自定义参数的实现&#34;&gt;自定义参数的实现&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c34e00&#34;&gt;dlog&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; *format, ...)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; buf[2048];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; out[2048]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;va_list args;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;va_start&lt;/span&gt;(args, format);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;vsprintf&lt;/span&gt;(buf, format, args);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#c34e00&#34;&gt;va_end&lt;/span&gt;(args);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;sprintf&lt;/span&gt;(out, &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;0x4741e2a7 %s&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;&lt;/span&gt;, buf);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 加上标识符和换行符 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c34e00&#34;&gt;write&lt;/span&gt;(fd, out);&#x9;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* 输出到指定 fd */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;自动加入调用位置信息的宏定义&#34;&gt;自动加入调用位置信息的宏定义&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define log(format, ...) dlog(&amp;#34;%-7s %-10s %-3d &amp;#34;format, __FILE__, __FUNCTION__, __LINE__, ##__VA_ARGS__)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>linux ucontext族函数的原理及使用</title>
      <link>http://shanks.link/blog/2021/10/28/linux-ucontext%E6%97%8F%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 28 Oct 2021 20:02:45 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/28/linux-ucontext%E6%97%8F%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_44443986/article/details/117739157&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;ucontext函数族&#34;&gt;ucontext函数族&lt;/h1&gt;&#xA;&lt;p&gt;这里的context族是偏向底层的，其实底层就是通过汇编来实现的，但是我们使用的时候就和平常使用变量和函数一样使用就行，因为大佬们已经将它们封装成C库里了的&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43;面试常见问题</title>
      <link>http://shanks.link/blog/2021/07/20/c-%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 20 Jul 2021 14:43:48 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/07/20/c-%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;h4 id=&#34;extern关键字的作用&#34;&gt;extern关键字的作用&lt;/h4&gt;&#xA;&lt;p&gt;置于变量或函数前，用于标示变量或函数的定义在别的文件中，提示编译器遇到此变量和函数时在其他模块中寻找其定义。它只要有两个作用：&lt;/p&gt;&#xA;&lt;p&gt;    当它与“C”一起连用的时候，如：extern &amp;ldquo;C&amp;rdquo; void fun(int a,int b);则告诉编译器在编译fun这个函数时候按着C的规矩去翻译，而不是C++的（这与C++的重载有关，C++语言支持函数重载，C语言不支持函数重载，函数被C++编译器编译后在库中的名字与C语言的不同）&#xA;    当extern不与“C”在一起修饰变量或函数时，如：extern int g_Int；它的作用就是声明函数或全局变量的作用范围的关键字，其声明的函数和变量可以在本模块或其他模块中使用。记住它是一个声明不是定义!也就是说B模块(编译单元)要是引用模块(编译单元)A中定义的全局变量或函数时，它只要包含A模块的头文件即可,在编译阶段，模块B虽然找不到该函数或变量，但它不会报错，它会在连接时从模块A生成的目标代码中找到此函数。&lt;/p&gt;</description>
    </item>
    <item>
      <title>setjmp和longjmp函数使用详解</title>
      <link>http://shanks.link/blog/2021/04/14/setjmp%E5%92%8Clongjmp%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 14 Apr 2021 00:08:43 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/14/setjmp%E5%92%8Clongjmp%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/chenyiming_1990/article/details/8683413&#34;&gt;转载自大米粒的blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;在网上看到的，觉得很有用，copy过来的。&lt;/p&gt;&#xA;&lt;p&gt;非局部跳转语句&amp;mdash;setjmp和longjmp函数。非局部指的是，这不是由普通C语言goto，语句在一个函数内实施的跳转，而是在栈上跳过若干调用帧，返回到当前函数调用路径上的某一个函数中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>c语言运算符和优先级</title>
      <link>http://shanks.link/blog/2000/01/01/c%E8%AF%AD%E8%A8%80%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7/</link>
      <pubDate>Sat, 01 Jan 2000 10:33:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2000/01/01/c%E8%AF%AD%E8%A8%80%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7/</guid>
      <description>&lt;p&gt;运算符的优先级：Ｃ语言中，运算符的运算优先级共分为15 级。1 级最高，15级最低。在表达式中，优先级较高的先于优先级较低的进行运算。而在一个运算量两侧的&lt;a href=&#34;https://so.csdn.net/so/search?q=%E8%BF%90%E7%AE%97%E7%AC%A6&amp;amp;spm=1001.2101.3001.7020&#34;&gt;运算符&lt;/a&gt;优先级相同时，则按运算符的结合性所规定的结合方向处理。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
