<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c on Golang编程语言知识介绍</title>
    <link>http://shanks.link/categories/c/</link>
    <description>Recent content in c on Golang编程语言知识介绍</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 09 May 2025 22:41:30 +0800</lastBuildDate><atom:link href="http://shanks.link/categories/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>sqlite 设计与实现</title>
      <link>http://shanks.link/blog/2025/05/09/sqlite-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 09 May 2025 22:41:30 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2025/05/09/sqlite-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>COPY RIGHT 以下相关内容的版权为 Sibsankar Haldar 所有，仅供学习研究只用，未获得原始作者的授权时不可有任何侵权行为； 第一章 计算机系统概论 第二章 SQLite概述 学术</description>
    </item>
    
    <item>
      <title>Linux进程间通信7：数据报套接字 socket()、bind()、sendto()、recvfrom()、close()</title>
      <link>http://shanks.link/blog/2024/04/16/linux%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A17%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%A5%97%E6%8E%A5%E5%AD%97-socketbindsendtorecvfromclose/</link>
      <pubDate>Tue, 16 Apr 2024 14:28:20 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2024/04/16/linux%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A17%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%A5%97%E6%8E%A5%E5%AD%97-socketbindsendtorecvfromclose/</guid>
      <description>前一篇文章，Linux进程间通信——使用流套接字介绍了一些有关socket（套接字）的一些基本内容，并讲解了流套接字的使用，这篇文章将会给大</description>
    </item>
    
    <item>
      <title>Linux进程间通信6 流套接字 socket bind listen accept connect read write close</title>
      <link>http://shanks.link/blog/2024/04/16/linux%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A16-%E6%B5%81%E5%A5%97%E6%8E%A5%E5%AD%97-socket-bind-listen-accept-connect-read-write-close/</link>
      <pubDate>Tue, 16 Apr 2024 11:53:20 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2024/04/16/linux%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A16-%E6%B5%81%E5%A5%97%E6%8E%A5%E5%AD%97-socket-bind-listen-accept-connect-read-write-close/</guid>
      <description>前面说到的进程间的通信，所通信的进程都是在同一台计算机上的，而使用socket进行通信的进程可以是同一台计算机的进程，也是可以是通过网络连接</description>
    </item>
    
    <item>
      <title>进程间通信5 消息队列 msgget、msgsend、msgrcv、msgctl</title>
      <link>http://shanks.link/blog/2024/04/16/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A15-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-msggetmsgsendmsgrcvmsgctl/</link>
      <pubDate>Tue, 16 Apr 2024 11:41:20 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2024/04/16/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A15-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-msggetmsgsendmsgrcvmsgctl/</guid>
      <description>下面来说说如何用不用消息队列来进行进程间的通信，消息队列与命名管道有很多相似之处。有关命名管道的更多内容可以参阅我的另一篇文章：Linux进</description>
    </item>
    
    <item>
      <title>进程间通信4 共享内存 shmget shmat shmdt shmctl</title>
      <link>http://shanks.link/blog/2024/04/16/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A14-%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98-shmget-shmat-shmdt-shmctl/</link>
      <pubDate>Tue, 16 Apr 2024 11:19:20 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2024/04/16/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A14-%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98-shmget-shmat-shmdt-shmctl/</guid>
      <description>下面将讲解进程间通信的另一种方式，使用共享内存。 一、什么是共享内存 顾名思义，共享内存就是允许两个不相关的进程访问同一个逻辑内存。共享内存是在</description>
    </item>
    
    <item>
      <title>进程间通信3 信号量 semget、semop、semctl</title>
      <link>http://shanks.link/blog/2024/04/16/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A13-%E4%BF%A1%E5%8F%B7%E9%87%8F-semgetsemopsemctl/</link>
      <pubDate>Tue, 16 Apr 2024 10:49:20 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2024/04/16/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A13-%E4%BF%A1%E5%8F%B7%E9%87%8F-semgetsemopsemctl/</guid>
      <description>这篇文章将讲述别一种进程间通信的机制——信号量。注意请不要把它与之前所说的信号混淆起来，信号与信号量是不同的两种事物。有关信号的更多内容，可</description>
    </item>
    
    <item>
      <title>进程间通信2 有名管道 mkfifo、open、read、close</title>
      <link>http://shanks.link/blog/2024/04/16/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A12-%E6%9C%89%E5%90%8D%E7%AE%A1%E9%81%93-mkfifoopenreadclose/</link>
      <pubDate>Tue, 16 Apr 2024 09:56:20 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2024/04/16/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A12-%E6%9C%89%E5%90%8D%E7%AE%A1%E9%81%93-mkfifoopenreadclose/</guid>
      <description>在前一篇文章—— Linux进程间通信 &amp;ndash; 使用匿名管道 中，我们看到了如何使用匿名管道来在进程之间传递数据，同时也看到了这个方式的一个缺陷，就是这</description>
    </item>
    
    <item>
      <title>进程间通信2 匿名管道 popen、pclose、pipe、close、dup、dup2</title>
      <link>http://shanks.link/blog/2024/04/15/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A12-%E5%8C%BF%E5%90%8D%E7%AE%A1%E9%81%93-popenpclosepipeclosedupdup2/</link>
      <pubDate>Mon, 15 Apr 2024 17:17:20 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2024/04/15/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A12-%E5%8C%BF%E5%90%8D%E7%AE%A1%E9%81%93-popenpclosepipeclosedupdup2/</guid>
      <description>在前面，介绍了一种进程间的通信方式：使用信号，我们创建通知事件，并通过它引起响应，但传递的信息只是一个信号值。这里将介绍另一种进程间通信的方</description>
    </item>
    
    <item>
      <title>进程间通信1 信号  signal、sigaction</title>
      <link>http://shanks.link/blog/2024/04/15/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A11-%E4%BF%A1%E5%8F%B7-signalsigaction/</link>
      <pubDate>Mon, 15 Apr 2024 16:51:20 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2024/04/15/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A11-%E4%BF%A1%E5%8F%B7-signalsigaction/</guid>
      <description>一、什么是信号 用过Windows的我们都知道，当我们无法正常结束一个程序时，可以用任务管理器强制结束这个进程，但这其实是怎么实现的呢？同样的</description>
    </item>
    
    <item>
      <title>进程间通信1 信号之信号集函数 sigemptyset()、sigprocmask()、sigpending()、sigsuspend()</title>
      <link>http://shanks.link/blog/2024/04/15/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A11-%E4%BF%A1%E5%8F%B7%E4%B9%8B%E4%BF%A1%E5%8F%B7%E9%9B%86%E5%87%BD%E6%95%B0-sigemptysetsigprocmasksigpendingsigsuspend/</link>
      <pubDate>Mon, 15 Apr 2024 16:51:20 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2024/04/15/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A11-%E4%BF%A1%E5%8F%B7%E4%B9%8B%E4%BF%A1%E5%8F%B7%E9%9B%86%E5%87%BD%E6%95%B0-sigemptysetsigprocmasksigpendingsigsuspend/</guid>
      <description>我们已经知道，我们可以通过信号来终止进程，也可以通过信号来在进程间进行通信，程序也可以通过指定信号的关联处理函数来改变信号的默认处理方式，也</description>
    </item>
    
    <item>
      <title>PIPE 管道</title>
      <link>http://shanks.link/blog/2024/03/20/pipe-%E7%AE%A1%E9%81%93/</link>
      <pubDate>Wed, 20 Mar 2024 14:58:20 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2024/03/20/pipe-%E7%AE%A1%E9%81%93/</guid>
      <description>官方参考手册 https://manpages.courier-mta.org/htmlman7/pipe.7.html 示例代码 // O_NOATIME 宏定义的扩展要求 #define _GNU_SOURCE 1 #include &amp;lt;fcntl.h&amp;gt;#undef _GNU_SOURCE #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;pthread.h&amp;gt;#include &amp;lt;sys/time.h&amp;gt;#include &amp;lt;sys/types.h&amp;gt;#include &amp;lt;sys/stat.h&amp;gt;#include &amp;lt;linux/unistd.h&amp;gt;#include &amp;lt;assert.h&amp;gt;#include &amp;lt;limits.h&amp;gt; static int pip[2]; void sleep_select(int sec) { struct timeval timeout; timeout.tv_usec = 0; timeout.tv_sec = sec; select(0, NULL, NULL, NULL, &amp;amp;timeout); } static void *thread_read(void *userdata) { char data[5] = {0};</description>
    </item>
    
    <item>
      <title>c语言打印调用栈及解析</title>
      <link>http://shanks.link/blog/2024/01/24/c%E8%AF%AD%E8%A8%80%E6%89%93%E5%8D%B0%E8%B0%83%E7%94%A8%E6%A0%88%E5%8F%8A%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 24 Jan 2024 10:33:20 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2024/01/24/c%E8%AF%AD%E8%A8%80%E6%89%93%E5%8D%B0%E8%B0%83%E7%94%A8%E6%A0%88%E5%8F%8A%E8%A7%A3%E6%9E%90/</guid>
      <description>相关头文件 #include &amp;lt;execinfo.h&amp;gt;int backtrace(void **buffer, int size); char **backtrace_symbols(void *const *buffer, int size); void backtrace_symbols_fd(void *const *buffer, int size, int fd); 示例代码 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;execinfo.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; void fun1(); void fun2(); void fun3(); void fun4(); void fun5(); void fun6(); void print_callstack(); int main() { fun6(); return 0; } void fun1() { print_callstack(); } void fun2() { fun1(); } void fun3() { fun2(); } void</description>
    </item>
    
    <item>
      <title>代码阅读——十个C开源项目</title>
      <link>http://shanks.link/blog/2023/09/22/%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB%E5%8D%81%E4%B8%AAc%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Fri, 22 Sep 2023 14:58:44 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2023/09/22/%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB%E5%8D%81%E4%B8%AAc%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</guid>
      <description>Webbench Webbench是一个在linux下使用的非常简单的网站压测工具。它使用fork()模拟多个客户端同时访问我们设定的URL，测试网站在压力</description>
    </item>
    
    <item>
      <title>Linux线程与信号</title>
      <link>http://shanks.link/blog/2023/09/22/linux%E7%BA%BF%E7%A8%8B%E4%B8%8E%E4%BF%A1%E5%8F%B7/</link>
      <pubDate>Fri, 22 Sep 2023 10:13:44 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2023/09/22/linux%E7%BA%BF%E7%A8%8B%E4%B8%8E%E4%BF%A1%E5%8F%B7/</guid>
      <description>信号与线程的关系 POSIX标准对多线程情况下的信号机制提出了一些要求： 信号处理函数必须在多线程进程的所有线程之间共享， 但是每个线程要有自己的</description>
    </item>
    
    <item>
      <title>sendmsg 和 recvmsg 函数</title>
      <link>http://shanks.link/blog/2023/09/22/sendmsg-%E5%92%8C-recvmsg-%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 22 Sep 2023 10:13:44 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2023/09/22/sendmsg-%E5%92%8C-recvmsg-%E5%87%BD%E6%95%B0/</guid>
      <description>基础介绍 最通用的I/O函数，只要设置好参数，read、readv、recv、recvfrom和write、writev、send、sendt</description>
    </item>
    
    <item>
      <title>C语言 获取随机数</title>
      <link>http://shanks.link/blog/2023/09/21/c%E8%AF%AD%E8%A8%80-%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E6%95%B0/</link>
      <pubDate>Thu, 21 Sep 2023 17:36:44 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2023/09/21/c%E8%AF%AD%E8%A8%80-%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E6%95%B0/</guid>
      <description>srand()和rand() 声明 #include &amp;lt;stdlib.h&amp;gt;int rand(void); int rand_r(unsigned int *seedp); //线程安全版本 void srand(unsigned int seed); 实例 #include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;time.h&amp;gt; int main() { srand((unsigned)time(NULL)); for(int i = 0; i &amp;lt; 10;i++ ) printf(&amp;#34;%d = %u\n&amp;#34;,i,rand()); return 0; } 二次随机 srand((unsigned)time(NULL)); int RanMe1 = rand() % 1000000;</description>
    </item>
    
    <item>
      <title>CMakeLists.txt注释</title>
      <link>http://shanks.link/blog/2022/10/19/cmakelists.txt%E6%B3%A8%E9%87%8A/</link>
      <pubDate>Wed, 19 Oct 2022 10:00:20 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/10/19/cmakelists.txt%E6%B3%A8%E9%87%8A/</guid>
      <description>单行注释：使用“#” 多行注释：使用“#[[ ]]” 以下图为例 以上内容转载自互联网，若有侵权请联系站长删除</description>
    </item>
    
    <item>
      <title>C语言获取系统时间并转换成字符串</title>
      <link>http://shanks.link/blog/2022/10/19/c%E8%AF%AD%E8%A8%80%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E5%B9%B6%E8%BD%AC%E6%8D%A2%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Wed, 19 Oct 2022 09:10:37 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/10/19/c%E8%AF%AD%E8%A8%80%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E5%B9%B6%E8%BD%AC%E6%8D%A2%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>#include &amp;lt;time.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; int main(int argc, char *argv[]) { time_t tt = time(0); char buf[32] = {0}; strftime(buf, sizeof(buf), &amp;#34;%Y-%m-%d %H:%M:%S&amp;#34;, localtime(&amp;amp;tt)); return 0; }</description>
    </item>
    
    <item>
      <title>printf函数输出指定长度</title>
      <link>http://shanks.link/blog/2022/10/18/printf%E5%87%BD%E6%95%B0%E8%BE%93%E5%87%BA%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6/</link>
      <pubDate>Tue, 18 Oct 2022 17:36:08 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/10/18/printf%E5%87%BD%E6%95%B0%E8%BE%93%E5%87%BA%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6/</guid>
      <description>原样输出字符串: printf(&amp;quot;%s&amp;quot;, str); 输出指定长度的字符串, 超长时不截断, 不足时右对齐: printf(&amp;quot;%Ns&amp;quot;, str); &amp;ndash;N 为指定长度的10进制数值 输出指定长度的字符串, 超长时不截断, 不足</description>
    </item>
    
    <item>
      <title>自定义print、log函数 以及自动加入__FILE__ __FUNCTION__ __LINE__ 等信息</title>
      <link>http://shanks.link/blog/2022/10/17/%E8%87%AA%E5%AE%9A%E4%B9%89printlog%E5%87%BD%E6%95%B0-%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%8A%A8%E5%8A%A0%E5%85%A5__file__-__function__-__line__-%E7%AD%89%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Mon, 17 Oct 2022 16:12:44 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/10/17/%E8%87%AA%E5%AE%9A%E4%B9%89printlog%E5%87%BD%E6%95%B0-%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%8A%A8%E5%8A%A0%E5%85%A5__file__-__function__-__line__-%E7%AD%89%E4%BF%A1%E6%81%AF/</guid>
      <description>自定义参数的实现 void dlog(char *format, ...) { char buf[2048]; char out[2048] va_list args; va_start(args, format); vsprintf(buf, format, args); va_end(args); sprintf(out, &amp;#34;0x4741e2a7 %s\n&amp;#34;, buf); /* 加上标识符和换行符 */ write(fd, out); /* 输出到指定 fd */ return; } 自动加入调用位置信息的宏定义 #define log(format, ...) dlog(&amp;#34;%-7s</description>
    </item>
    
    <item>
      <title>linux ucontext族函数的原理及使用</title>
      <link>http://shanks.link/blog/2021/10/28/linux-ucontext%E6%97%8F%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 28 Oct 2021 20:02:45 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/10/28/linux-ucontext%E6%97%8F%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      <description>原文链接 ucontext函数族 这里的context族是偏向底层的，其实底层就是通过汇编来实现的，但是我们使用的时候就和平常使用变量和函数一样</description>
    </item>
    
    <item>
      <title>C&#43;&#43;面试常见问题</title>
      <link>http://shanks.link/blog/2021/07/20/c-%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 20 Jul 2021 14:43:48 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/20/c-%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>extern关键字的作用 置于变量或函数前，用于标示变量或函数的定义在别的文件中，提示编译器遇到此变量和函数时在其他模块中寻找其定义。它只要有</description>
    </item>
    
    <item>
      <title>setjmp和longjmp函数使用详解</title>
      <link>http://shanks.link/blog/2021/04/14/setjmp%E5%92%8Clongjmp%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 14 Apr 2021 00:08:43 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/14/setjmp%E5%92%8Clongjmp%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</guid>
      <description>转载自大米粒的blog 在网上看到的，觉得很有用，copy过来的。 非局部跳转语句&amp;mdash;setjmp和longjmp函数。非局部指的是，</description>
    </item>
    
    <item>
      <title>c语言运算符和优先级</title>
      <link>http://shanks.link/blog/2000/01/01/c%E8%AF%AD%E8%A8%80%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7/</link>
      <pubDate>Sat, 01 Jan 2000 10:33:20 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2000/01/01/c%E8%AF%AD%E8%A8%80%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7/</guid>
      <description>运算符的优先级：Ｃ语言中，运算符的运算优先级共分为15 级。1 级最高，15级最低。在表达式中，优先级较高的先于优先级较低的进行运算。而在一个运</description>
    </item>
    
  </channel>
</rss>
