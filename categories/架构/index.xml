<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>架构 on Golang入门指南</title>
    <link>http://shanks.link/categories/%E6%9E%B6%E6%9E%84/</link>
    <description>Recent content in 架构 on Golang入门指南</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 12 May 2023 11:13:52 +0800</lastBuildDate>
    <atom:link href="http://shanks.link/categories/%E6%9E%B6%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CPU 是如何读写内存的</title>
      <link>http://shanks.link/blog/2023/05/12/cpu-%E6%98%AF%E5%A6%82%E4%BD%95%E8%AF%BB%E5%86%99%E5%86%85%E5%AD%98%E7%9A%84/</link>
      <pubDate>Fri, 12 May 2023 11:13:52 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/05/12/cpu-%E6%98%AF%E5%A6%82%E4%BD%95%E8%AF%BB%E5%86%99%E5%86%85%E5%AD%98%E7%9A%84/</guid>
      <description>&lt;h2 id=&#34;谁来告诉cpu读写内存&#34;&gt;&lt;strong&gt;谁来告诉CPU读写内存&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;我们第一个要搞清楚的问题是：谁来告诉CPU去读写内存？答案很明显，是程序员，更具体的是编译器。CPU只是按照指令按部就班的执行，机器指令从哪里来的呢？是编译器生成的，程序员通过高级语言编写程序，编译器将其翻译为机器指令，机器指令来告诉CPU去读写内存。在精简指令集架构下会有特定的机器指令，Load/Store指令来读写内存，以x86为代表的复杂指令集架构下没有特定的访存指令。精简指令集下，一条机器指令操作的数据必须来存放在寄存器中，不能直接操作内存数据，因此RISC下，数据必须先从内存搬运到寄存器，这就是为什么RISC下会有特定的Load/Store访存指令，明白了吧。&lt;/p&gt;</description>
    </item>
    <item>
      <title>架构理解总结</title>
      <link>http://shanks.link/blog/2022/04/24/%E6%9E%B6%E6%9E%84%E7%90%86%E8%A7%A3%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 24 Apr 2022 18:46:17 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/24/%E6%9E%B6%E6%9E%84%E7%90%86%E8%A7%A3%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.modb.pro/db/247774&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;一怎么理解架构&#34;&gt;一、怎么理解架构？&lt;/h1&gt;&#xA;&lt;p&gt;假如给你一个项目开发，你会怎么开始它？对于这个问题，我想很多猿友们都应该经历过吧。很多时候，我们会直接开干，让自己快速的进入 coding 状态。&lt;/p&gt;&#xA;&lt;p&gt;然而一旦遇上稍微有点规模，比如涉及到多个业务功能的开发，那大概率会在开发过程中经常的怀疑自己，甚至产生推倒重来的想法；又或者眼看就要交付了，只能将错就错，修修补补。最后，一个让人揪心的系统又诞生了。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
