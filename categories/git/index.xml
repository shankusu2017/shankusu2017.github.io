<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on 程序员的小天地</title>
    <link>http://shanks.link/categories/git/</link>
    <description>Recent content in Git on 程序员的小天地</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 24 Jan 2024 11:38:54 +0800</lastBuildDate>
    <atom:link href="http://shanks.link/categories/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git分支管理策略</title>
      <link>http://shanks.link/blog/2024/01/24/git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/</link>
      <pubDate>Wed, 24 Jan 2024 11:38:54 +0800</pubDate>
      <guid>http://shanks.link/blog/2024/01/24/git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/</guid>
      <description>&lt;p&gt;作者： &lt;a href=&#34;http://www.ruanyifeng.com/&#34;&gt;阮一峰&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;如果你严肃对待编程，就必定会使用&amp;quot;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2008/12/a_visual_guide_to_version_control.html&#34;&gt;版本管理系统&lt;/a&gt;&amp;quot;（Version Control System）。&lt;/p&gt;&#xA;&lt;p&gt;眼下最流行的&amp;quot;版本管理系统&amp;quot;，非&lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt;莫属。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/git/bg2012070501.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;相比同类软件，Git有很多优点。其中很显著的一点，就是版本的分支（branch）和合并（merge）十分方便。有些传统的版本管理软件，分支操作实际上会生成一份现有代码的物理拷贝，而Git只生成一个指向当前版本（又称&amp;quot;快照&amp;quot;）的指针，因此非常快捷易用。&lt;/p&gt;</description>
    </item>
    <item>
      <title> .gitignore File – How to Ignore Files and Folders in Git .gitignore 文件——如何在 Git 中忽略文件和文件夹</title>
      <link>http://shanks.link/blog/2023/09/08/.gitignore-file-how-to-ignore-files-and-folders-in-git-.gitignore-%E6%96%87%E4%BB%B6%E5%A6%82%E4%BD%95%E5%9C%A8-git-%E4%B8%AD%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9/</link>
      <pubDate>Fri, 08 Sep 2023 17:30:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/08/.gitignore-file-how-to-ignore-files-and-folders-in-git-.gitignore-%E6%96%87%E4%BB%B6%E5%A6%82%E4%BD%95%E5%9C%A8-git-%E4%B8%AD%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9/</guid>
      <description>&lt;p&gt;&lt;strong&gt;原文：&lt;/strong&gt; &lt;a href=&#34;https://www.freecodecamp.org/news/gitignore-file-how-to-ignore-files-and-folders-in-git/&#34;&gt;.gitignore File – How to Ignore Files and Folders in Git&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Git 是一个流行的版本控制系统。开发人员通过它可以在项目上进行协作。&lt;/p&gt;&#xA;&lt;p&gt;Git 允许你跟踪你在一段时间内对项目所做的修改。除此之外，如果你想撤销某个改动，它还可以让你恢复到以前的版本。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git 清除历史记录</title>
      <link>http://shanks.link/blog/2022/10/24/git-%E6%B8%85%E9%99%A4%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 24 Oct 2022 10:37:52 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/24/git-%E6%B8%85%E9%99%A4%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/</guid>
      <description>&lt;h1 id=&#34;git-清除所有历史记录&#34;&gt;Git 清除所有历史记录&lt;/h1&gt;&#xA;&lt;h5 id=&#34;1-进入仓库拉一个分支比如名为-latest_branch&#34;&gt;1. 进入仓库，拉一个分支比如名为 latest_branch&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git checkout --orphan latest_branch&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;–orphan 创建一个无任何历史记录的孤儿分支&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;2-添加所有文件到上述分支并提交一次&#34;&gt;2. 添加所有文件到上述分支并提交一次&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add -A&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -am &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#39;initial commit&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;3-删除-master-分支&#34;&gt;3. 删除 master 分支&lt;/h5&gt;&#xA;&lt;p&gt;登录后复制&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to fix ‘fatal: refusing to merge unrelated histories’ Git error</title>
      <link>http://shanks.link/blog/2022/10/24/how-to-fix-fatal-refusing-to-merge-unrelated-histories-git-error/</link>
      <pubDate>Mon, 24 Oct 2022 10:02:49 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/24/how-to-fix-fatal-refusing-to-merge-unrelated-histories-git-error/</guid>
      <description>&lt;h2 id=&#34;what-is-the-fatal-refusing-to-merge-unrelated-histories-error&#34;&gt;What is the ‘fatal: refusing to merge unrelated histories’ error?&lt;/h2&gt;&#xA;&lt;p&gt;The &lt;code&gt;fatal: refusing to merge histories&lt;/code&gt; error is a fairly common Git error. It appears when a developer tries to merge two unrelated projects into a single branch.&lt;/p&gt;&#xA;&lt;p&gt;This error appears when the branch has its commit histories and tags incompatible with the pull request or clone.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pushing a branch to Bitbucket fails with the error, &#34;refspec matches more than one&#34;.</title>
      <link>http://shanks.link/blog/2022/10/21/pushing-a-branch-to-bitbucket-fails-with-the-error-refspec-matches-more-than-one./</link>
      <pubDate>Fri, 21 Oct 2022 14:51:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/21/pushing-a-branch-to-bitbucket-fails-with-the-error-refspec-matches-more-than-one./</guid>
      <description>&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;&#xA;&lt;p&gt;The error &amp;ldquo;refspec matches more than one&amp;rdquo; is shown while pushing a branch to Bitbucket.&lt;/p&gt;&#xA;&lt;p&gt;This occurs because there is more than one &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Internals-Git-References&#34;&gt;Git ref&lt;/a&gt; that matches the ref name specified in the push command.&lt;/p&gt;&#xA;&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;&#xA;&lt;p&gt;Suppose a repo has a &lt;a href=&#34;https://git-scm.com/docs/git-branch&#34;&gt;branch&lt;/a&gt; and a &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Basics-Tagging&#34;&gt;tag&lt;/a&gt; with the same name, &amp;ldquo;&lt;code&gt;dev&lt;/code&gt;&amp;rdquo;.&lt;/p&gt;&#xA;&lt;p&gt;When an attempt is made to push the &amp;ldquo;dev&amp;rdquo; branch to the remote, the error &amp;ldquo;&lt;code&gt;refspec matches more than one&lt;/code&gt;&amp;rdquo; will be shown and the push fails.&lt;/p&gt;</description>
    </item>
    <item>
      <title>同步master代码到分支</title>
      <link>http://shanks.link/blog/2022/10/14/%E5%90%8C%E6%AD%A5master%E4%BB%A3%E7%A0%81%E5%88%B0%E5%88%86%E6%94%AF/</link>
      <pubDate>Fri, 14 Oct 2022 09:37:59 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/14/%E5%90%8C%E6%AD%A5master%E4%BB%A3%E7%A0%81%E5%88%B0%E5%88%86%E6%94%AF/</guid>
      <description>&lt;h2 id=&#34;第一步&#34;&gt;第一步：&lt;/h2&gt;&#xA;&lt;p&gt;如果分支(将此分支暂命名为dev)有修改，则先提交修改的内容，如果没有，直接跳到第二步&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;git &lt;a href=&#34;https://so.csdn.net/so/search?q=commit&amp;amp;spm=1001.2101.3001.7020&#34;&gt;commit&lt;/a&gt; -m “fix bug”&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;第二步&#34;&gt;第二步：&lt;/h2&gt;&#xA;&lt;p&gt;切换到master分支下&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;git checkout master&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;第三步&#34;&gt;第三步：&lt;/h2&gt;&#xA;&lt;p&gt;将远程的master代码pull到本地&lt;/p&gt;</description>
    </item>
    <item>
      <title>将Git存储库从一个平台fork到另外一个平台</title>
      <link>http://shanks.link/blog/2022/10/08/%E5%B0%86git%E5%AD%98%E5%82%A8%E5%BA%93%E4%BB%8E%E4%B8%80%E4%B8%AA%E5%B9%B3%E5%8F%B0fork%E5%88%B0%E5%8F%A6%E5%A4%96%E4%B8%80%E4%B8%AA%E5%B9%B3%E5%8F%B0/</link>
      <pubDate>Sat, 08 Oct 2022 18:04:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/08/%E5%B0%86git%E5%AD%98%E5%82%A8%E5%BA%93%E4%BB%8E%E4%B8%80%E4%B8%AA%E5%B9%B3%E5%8F%B0fork%E5%88%B0%E5%8F%A6%E5%A4%96%E4%B8%80%E4%B8%AA%E5%B9%B3%E5%8F%B0/</guid>
      <description>&lt;h4 id=&#34;从github到github&#34;&gt;从github到github&lt;/h4&gt;&#xA;&lt;p&gt;打开你想fork的项目界面，点击fork按钮即可将此项目fork到你的github账户上;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/%E8%BF%90%E7%BB%B4/github2github.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;在不同的平台之间fork&#34;&gt;在不同的平台之间fork&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在平台B上新建一个空的仓库 eg：git@github.com:shankusu2017/uhttpd-openwrt.git，并 clone 到本机上；&lt;/li&gt;&#xA;&lt;li&gt;在本机上将新创建的仓库的&amp;quot;上游&amp;quot;设置为你原本想 fork 的地址 eg：git remote add upstream &lt;a href=&#34;https://git.openwrt.org/project/uhttpd.git&#34;&gt;https://git.openwrt.org/project/uhttpd.git&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;将平台A的上游代码同步到本机上 git pull upstream master&lt;/li&gt;&#xA;&lt;li&gt;将本机上最新的代码提交到自己的平台B仓库中 git push origin master&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;同步上游的tags&#34;&gt;同步上游的tags&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;拉取上游平台A上的的tags:  git fetch upstream&lt;/li&gt;&#xA;&lt;li&gt;提交到自己的平台B上 git push &amp;ndash;tags&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/ternence_hsu/article/details/113531510&#34;&gt;以上内容转载自网友的blog，如有侵权请联系站长&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git生成patch和打patch</title>
      <link>http://shanks.link/blog/2022/09/29/git%E7%94%9F%E6%88%90patch%E5%92%8C%E6%89%93patch/</link>
      <pubDate>Thu, 29 Sep 2022 16:12:32 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/29/git%E7%94%9F%E6%88%90patch%E5%92%8C%E6%89%93patch/</guid>
      <description>&lt;h1 id=&#34;git生成patch和打patch&#34;&gt;git生成patch和打patch&lt;/h1&gt;&#xA;&lt;p&gt;日常开发与合作过程中，对于code生成patch和打patch(应用patch)成为经常需要做的事情，使用方法（直接给出一些examples）：&lt;/p&gt;</description>
    </item>
    <item>
      <title>git git@github.com: Permission denied (publickey)</title>
      <link>http://shanks.link/blog/2021/12/13/git-git@github.com-permission-denied-publickey/</link>
      <pubDate>Mon, 13 Dec 2021 19:38:35 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/12/13/git-git@github.com-permission-denied-publickey/</guid>
      <description>&lt;p&gt;前言&lt;/p&gt;&#xA;&lt;p&gt;背着 Air，背了好长时间，挤地铁，背着感觉不仅仅是一个 Air，更是希望，压力以及动力。&lt;/p&gt;&#xA;&lt;p&gt;随着项目一期差不多了，我的 MBP 也该派上用场啦。&lt;/p&gt;&#xA;&lt;p&gt;早期 LZ 在 MBP 上只是简单配置了 Git 的名称，今天在 Clone Github 遇到如下问题：&lt;/p&gt;</description>
    </item>
    <item>
      <title>git查看文件的历史提交信息</title>
      <link>http://shanks.link/blog/2021/12/13/git%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E7%9A%84%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Mon, 13 Dec 2021 10:22:35 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/12/13/git%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E7%9A%84%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF/</guid>
      <description>&lt;p&gt;工作中我们有时候想要查看某一个文件的历史提交版本,]&lt;/p&gt;&#xA;&lt;p&gt;还想看都修改过那些内容,那么这两个简单的命令就会帮到你了,&lt;/p&gt;&#xA;&lt;p&gt;话不多说,comeBaby&amp;hellip;&amp;hellip;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git远程仓库地址变更本地如何修改</title>
      <link>http://shanks.link/blog/2021/12/13/git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80%E5%8F%98%E6%9B%B4%E6%9C%AC%E5%9C%B0%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9/</link>
      <pubDate>Mon, 13 Dec 2021 10:17:13 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/12/13/git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80%E5%8F%98%E6%9B%B4%E6%9C%AC%E5%9C%B0%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9/</guid>
      <description>&lt;p&gt;公司搬移， 作为git仓库的服务器IP地址变了。 本地代码挺多，重新检出太占时间，可以修改一个什么配置让我本地仓库和新的远程仓库建立关联吗， 答案是肯定的！&lt;/p&gt;</description>
    </item>
    <item>
      <title>git忽略文件权限和所有者</title>
      <link>http://shanks.link/blog/2021/12/13/git%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E5%92%8C%E6%89%80%E6%9C%89%E8%80%85/</link>
      <pubDate>Mon, 13 Dec 2021 10:15:26 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/12/13/git%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E5%92%8C%E6%89%80%E6%9C%89%E8%80%85/</guid>
      <description>&lt;p&gt;在发布项目到线上时，很多时候需要修改文件的权限，如果是使用git版本管理软件来发布的话，那么下次更新线上文件的时候就会提示文件冲突。明明文件没有修改，为什么会冲突呢？原来git把文件权限也算作文件差异的一部分。下面笔者自己做了个简单的例子来演示这种情况。&lt;/p&gt;</description>
    </item>
    <item>
      <title>git squash用法</title>
      <link>http://shanks.link/blog/2021/12/13/git-squash%E7%94%A8%E6%B3%95/</link>
      <pubDate>Mon, 13 Dec 2021 10:24:32 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/12/13/git-squash%E7%94%A8%E6%B3%95/</guid>
      <description>&lt;p&gt;在开发一个功能的时候会反复的提交代码，会造成一个功能有很多次提交，在我们要向master做分支合并的时候，就会出现很多commits，在合并以后同一个功能的commits就会很多，导致我们无法清晰的知道这个功能关联的commit有哪些，这个squash就是优化我们的commits信息，让我们的版本仓库看起来简洁明了，功能点一目了然：&#xA;使用比较简单，比如我想将本地开发分支的内容合并到master主线分支上，并且期望将一个功能的所有提交压缩成一个commit；&lt;/p&gt;</description>
    </item>
    <item>
      <title>git常用命令</title>
      <link>http://shanks.link/blog/2021/10/19/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 19 Oct 2021 11:12:49 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/10/19/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>&lt;h1 id=&#34;git-config&#34;&gt;git config&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# 显示当前的Git配置&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git config --list&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# 编辑Git配置文件&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git config -e [--global]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# 设置提交代码时的用户信息&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git config [--global] user.name &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;[name]&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git config [--global] user.email &lt;span style=&#34;color:#009c00&#34;&gt;&amp;#34;[email address]&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;git-workflow&#34;&gt;git workflow&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2012/07/git.html&#34;&gt;http://www.ruanyifeng.com/blog/2012/07/git.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2015/08/git-use-process.html&#34;&gt;http://www.ruanyifeng.com/blog/2015/08/git-use-process.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2015/12/git-workflow.html?bsh_bid=2219775734&#34;&gt;http://www.ruanyifeng.com/blog/2015/12/git-workflow.html?bsh_bid=2219775734&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2019/12/git-undo.html&#34;&gt;http://www.ruanyifeng.com/blog/2019/12/git-undo.html&lt;/a&gt;  撤销提交&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html&#34;&gt;http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html&lt;/a&gt;   撰写commit&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git远程操作详解</title>
      <link>http://shanks.link/blog/2021/07/09/git%E8%BF%9C%E7%A8%8B%E6%93%8D%E4%BD%9C%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 09 Jul 2021 11:27:46 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/07/09/git%E8%BF%9C%E7%A8%8B%E6%93%8D%E4%BD%9C%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;p&gt;作者： &lt;a href=&#34;https://www.ruanyifeng.com/&#34;&gt;阮一峰&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;日期： &lt;a href=&#34;https://www.ruanyifeng.com/blog/2014/06/&#34;&gt;2014年6月12日&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/Git&#34;&gt;Git&lt;/a&gt;是目前最流行的&lt;a href=&#34;https://www.ruanyifeng.com/blog/2008/12/a_visual_guide_to_version_control.html&#34;&gt;版本管理系统&lt;/a&gt;，学会Git几乎成了开发者的必备技能。&lt;/p&gt;&#xA;&lt;p&gt;Git有很多优势，其中之一就是远程操作非常简便。本文详细介绍5个Git命令，它们的概念和用法，理解了这些内容，你就会完全掌握Git远程操作。&lt;/p&gt;</description>
    </item>
    <item>
      <title>github 慢 github.io 访问不了</title>
      <link>http://shanks.link/blog/2021/05/13/github-%E6%85%A2-github.io-%E8%AE%BF%E9%97%AE%E4%B8%8D%E4%BA%86/</link>
      <pubDate>Thu, 13 May 2021 19:04:18 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/05/13/github-%E6%85%A2-github.io-%E8%AE%BF%E9%97%AE%E4%B8%8D%E4%BA%86/</guid>
      <description>&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;使用国内镜像&lt;/p&gt;&#xA;&lt;p&gt;​    目前已知Github国内镜像网站有 &lt;a href=&#34;github.com.cnpmjs.org&#34;&gt;github.com.cnpmjs.org&lt;/a&gt; 和 &lt;a href=&#34;git.sdut.me/&#34;&gt;git.sdut.me/&lt;/a&gt; 。速度根据各地情况而定，在clone某个项目的时候将 &lt;code&gt;github.com&lt;/code&gt; 替换为 &lt;code&gt;github.com.cnpmjs.org&lt;/code&gt; 即可。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;使用国外的dns查询最新的github的ip地址后修改hosts&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
