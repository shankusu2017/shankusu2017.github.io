<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>P4 on 程序员的小天地</title>
    <link>http://shanks.link/categories/p4/</link>
    <description>Recent content in P4 on 程序员的小天地</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 15 Sep 2023 17:38:00 +0800</lastBuildDate>
    <atom:link href="http://shanks.link/categories/p4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>P4 学习笔记（六）- 实战网络层，自定义拓扑结构</title>
      <link>http://shanks.link/blog/2023/09/15/p4-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD-%E5%AE%9E%E6%88%98%E7%BD%91%E7%BB%9C%E5%B1%82%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8B%93%E6%89%91%E7%BB%93%E6%9E%84/</link>
      <pubDate>Fri, 15 Sep 2023 17:38:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/15/p4-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD-%E5%AE%9E%E6%88%98%E7%BD%91%E7%BB%9C%E5%B1%82%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8B%93%E6%89%91%E7%BB%93%E6%9E%84/</guid>
      <description>&lt;p&gt;上一篇 &lt;a href=&#34;https://zhuanlan.zhihu.com/p/350287119&#34;&gt;P4 学习笔记（五）- 实战链路层&lt;/a&gt; 里面我们实战练习了链路层的 Learning Switch，简单体验了一下和 control plane 通过 clone 和 digest 通信的过程。这篇文章，我们会练习配置一个自定义的网络拓扑结构和网络层的路由。在之前的练习的基础上，我们会接触到的新知识点有：&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4 学习笔记（五）- 实战链路层</title>
      <link>http://shanks.link/blog/2023/09/15/p4-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94-%E5%AE%9E%E6%88%98%E9%93%BE%E8%B7%AF%E5%B1%82/</link>
      <pubDate>Fri, 15 Sep 2023 17:37:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/15/p4-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94-%E5%AE%9E%E6%88%98%E9%93%BE%E8%B7%AF%E5%B1%82/</guid>
      <description>&lt;p&gt;上一篇 &lt;a href=&#34;https://zhuanlan.zhihu.com/p/348919109&#34;&gt;P4 学习笔记（四）- 实战 Reflector &amp;amp; Repeater&lt;/a&gt; 里面我们实战练习了最基础的两个例子，实现了网络包的镜像和转发，简单理解了实际开发过程中要配置的文件和使用的工具。这篇文章我们用三个例子循序渐进的学习链路层的交换机用 P4 应该如何实现。&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4 学习笔记（四）- 实战 Reflector &amp; Repeater</title>
      <link>http://shanks.link/blog/2023/09/15/p4-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B-%E5%AE%9E%E6%88%98-reflector-repeater/</link>
      <pubDate>Fri, 15 Sep 2023 17:32:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/15/p4-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B-%E5%AE%9E%E6%88%98-reflector-repeater/</guid>
      <description>&lt;p&gt;为了能够更好的练习 P4 这门语言，这一篇文章我们一起配置一下环境，实战两个简单的练习项目。&lt;/p&gt;&#xA;&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/348919109/edit#env&#34;&gt;环境配置&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/348919109/edit#reflector&#34;&gt;Packet Reflector&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/348919109/edit#file&#34;&gt;文件描述&lt;/a&gt;&lt;/em&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/348919109/edit#step&#34;&gt;开发步骤&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/348919109/edit#reflector-solution&#34;&gt;解决方案&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/348919109/edit#repeater&#34;&gt;Packet Repeater&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;环境配置&#34;&gt;环境配置&lt;/h2&gt;&#xA;&lt;p&gt;一个完整的 P4 开发环境里，我们需要编译 P4 的代码（用 p4c 编译[&lt;a href=&#34;https://zhuanlan.zhihu.com/p/348919109#ref_1&#34;&gt;1]&lt;/a&gt;），把编译好的文件跑在软件交换机上（我们会用 bmv2[&lt;a href=&#34;https://zhuanlan.zhihu.com/p/348919109#ref_2&#34;&gt;2]&lt;/a&gt;），在创建的虚拟网络拓扑结构中验证我们实现的逻辑是否是正确的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4 学习笔记（三）- 控制逻辑与完整的工作流</title>
      <link>http://shanks.link/blog/2023/09/15/p4-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89-%E6%8E%A7%E5%88%B6%E9%80%BB%E8%BE%91%E4%B8%8E%E5%AE%8C%E6%95%B4%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81/</link>
      <pubDate>Fri, 15 Sep 2023 17:29:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/15/p4-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89-%E6%8E%A7%E5%88%B6%E9%80%BB%E8%BE%91%E4%B8%8E%E5%AE%8C%E6%95%B4%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/p4/v2-44181095885c0948cfa27e421011bef4_1440w.webp&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;P4 workflow.&lt;/p&gt;&#xA;&lt;p&gt;上一篇&lt;a href=&#34;https://zhuanlan.zhihu.com/p/346936899&#34;&gt;P4 学习笔记（二）- 基础语法和 Parser&lt;/a&gt;里面我们已经看到了 P4 workflow 中第一个部分—— Deparser。这一篇文章我们一起学习一下剩下的两个部分。其中 P4 里最主要的部分就是 Match-Action Pipeline 了，这部分是实现各种不同 protocol 花式转发逻辑的精髓。我们从三个方面学习一下，也就是：&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4 学习笔记（二）- 基础语法和 Parser</title>
      <link>http://shanks.link/blog/2023/09/15/p4-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%92%8C-parser/</link>
      <pubDate>Fri, 15 Sep 2023 17:22:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/15/p4-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%92%8C-parser/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;h2 id=&#34;oerview&#34;&gt;Oerview&lt;/h2&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;这一篇文章，我们会从学习以下几个部分。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;P4 的基本数据类型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;P4 的基本语法&lt;/li&gt;&#xA;&lt;li&gt;Parser&lt;/li&gt;&#xA;&lt;li&gt;小结&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;h2 id=&#34;p4-的基本数据类型&#34;&gt;P4 的基本数据类型&lt;/h2&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;和很多静态的语言类似，P4 最基本的数据类型放在了下面，P4 不支持的数据类型有 float（浮点）和 string（字符串）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4 学习笔记（一）- 导论</title>
      <link>http://shanks.link/blog/2023/09/15/p4-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80-%E5%AF%BC%E8%AE%BA/</link>
      <pubDate>Fri, 15 Sep 2023 17:21:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/15/p4-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80-%E5%AF%BC%E8%AE%BA/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;导言&#34;&gt;导言&lt;/h2&gt;&#xA;&lt;p&gt;这几年 Programmable Hardwares（可编程硬件）越来越重要了。大家比较熟悉的可能有 FPGA 在 Machine Learning 领域针对一些特别的算法进行计算加速，包括谷歌的 TPU、苹果 M1 芯片里面的神经网络计算单元，都是在 FPGA 上面做 prototype 测试之后才做成 ASIC 产品发布出来的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>一流企业做标准：英特尔收购Barefoot背后的逻辑 P4 系列转载之 一</title>
      <link>http://shanks.link/blog/2023/09/15/%E4%B8%80%E6%B5%81%E4%BC%81%E4%B8%9A%E5%81%9A%E6%A0%87%E5%87%86%E8%8B%B1%E7%89%B9%E5%B0%94%E6%94%B6%E8%B4%ADbarefoot%E8%83%8C%E5%90%8E%E7%9A%84%E9%80%BB%E8%BE%91-p4-%E7%B3%BB%E5%88%97%E8%BD%AC%E8%BD%BD%E4%B9%8B-%E4%B8%80/</link>
      <pubDate>Fri, 15 Sep 2023 16:58:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/15/%E4%B8%80%E6%B5%81%E4%BC%81%E4%B8%9A%E5%81%9A%E6%A0%87%E5%87%86%E8%8B%B1%E7%89%B9%E5%B0%94%E6%94%B6%E8%B4%ADbarefoot%E8%83%8C%E5%90%8E%E7%9A%84%E9%80%BB%E8%BE%91-p4-%E7%B3%BB%E5%88%97%E8%BD%AC%E8%BD%BD%E4%B9%8B-%E4%B8%80/</guid>
      <description>&lt;p&gt;今年6月，英特尔宣布收购一家名为“Barefoot”的公司，旨在帮助英特尔的数据中心部门“更好的应对云数据中心客户的不断变化的各类需求”。伴随着收购，Barefoot的CEO兼总裁，Craig Barratt博士（下图右）被任命为英特尔数据中心部门旗下“互联事业部（connectivity group）”的总经理，负责英特尔以太网控制器、网卡、交换芯片等一系列网络互联产品。&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4 Runtime和p4 info 系列转载 8</title>
      <link>http://shanks.link/blog/2023/09/12/p4-runtime%E5%92%8Cp4-info-%E7%B3%BB%E5%88%97%E8%BD%AC%E8%BD%BD-8/</link>
      <pubDate>Tue, 12 Sep 2023 11:24:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/12/p4-runtime%E5%92%8Cp4-info-%E7%B3%BB%E5%88%97%E8%BD%AC%E8%BD%BD-8/</guid>
      <description>&lt;h2 id=&#34;p4runtime&#34;&gt;p4runtime&lt;/h2&gt;&#xA;&lt;p&gt;P4 Runtime是一套基于Protobuf以及gRPC框架上的协议，通过P4runtime，SDN控制器可以控制能够支援p4的设备。&lt;/p&gt;&#xA;&lt;p&gt;p4runtime当前由p4 API workgroup指定，主要来自于barefoot公司。&lt;/p&gt;</description>
    </item>
    <item>
      <title>利用p4实现ipv6转发实验 系列转载 7</title>
      <link>http://shanks.link/blog/2023/09/12/%E5%88%A9%E7%94%A8p4%E5%AE%9E%E7%8E%B0ipv6%E8%BD%AC%E5%8F%91%E5%AE%9E%E9%AA%8C-%E7%B3%BB%E5%88%97%E8%BD%AC%E8%BD%BD-7/</link>
      <pubDate>Tue, 12 Sep 2023 11:23:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/12/%E5%88%A9%E7%94%A8p4%E5%AE%9E%E7%8E%B0ipv6%E8%BD%AC%E5%8F%91%E5%AE%9E%E9%AA%8C-%E7%B3%BB%E5%88%97%E8%BD%AC%E8%BD%BD-7/</guid>
      <description>&lt;h3 id=&#34;写在前面&#34;&gt;写在前面&lt;/h3&gt;&#xA;&lt;p&gt;只是作为一个入门p4的实验尝试，借用了一些即成的运行代码。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;p4代码&#34;&gt;p4代码&lt;/h3&gt;&#xA;&lt;p&gt;/&lt;strong&gt;p4_16,v1_model&lt;/strong&gt;/&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/p4/1329608-20190222152127575-1085498091.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/p4/1329608-20190222152330056-343296360.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&amp;lt;core.p4&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&amp;lt;v1model.p4&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; bit&amp;lt;16&amp;gt; TYPE_IPV6 = 0x08DD;//ipv6在以太网中的id&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; /*HEADERS*/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; typedef bit&amp;lt;9&amp;gt; egressSpec_t;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; typedef bit&amp;lt;48&amp;gt; macAddr_t;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; header ethernet_t{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     macAddr_t dstAddr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     macAddr_t srcAddr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     bit&amp;lt;16&amp;gt; etherType;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; header ipv6_t{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     bit&amp;lt;4&amp;gt; version;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     bit&amp;lt;8&amp;gt; trafficClass;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     bit&amp;lt;20&amp;gt; flowLabel;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     bit&amp;lt;16&amp;gt; payLoadLen;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     bit&amp;lt;8&amp;gt; nextHdr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     bit&amp;lt;8&amp;gt; hopLimit;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     bit&amp;lt;128&amp;gt; srcAddr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     bit&amp;lt;128&amp;gt; dstAddr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; struct metadata{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; struct headers{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ethernet_t ethernet;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ipv6_t ipv6;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; /*PARSER*/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; parser MyParser(packet_in packet,out headers hdr,inout metadata meta,inout standard_metadata_t standard_metadata){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     state start{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         transition parse_ethernet;//start开始先以底层eth解析&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     state parse_ethernet{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         packet.extract(hdr.ethernet);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         transition select(hdr.ethernet.etherType){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             TYPE_IPV6:parse_ipv6;//转至ipv6解析&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             default:accept;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     state parse_ipv6{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         packet.extract(hdr.ipv6);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         transition accept;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; /*CHECKSUM VERIFICATION*/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;control MyVerifyChecksum(inout headers hdr,inout metadata meta){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    apply{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; /*INGRESS PROCESSING*/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; control MyIngress(inout headers hdr,inout metadata meta,inout standard_metadata_t standard_metadata){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     action drop(){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         mark_to_drop();//将要丢弃的包标记为丢弃&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     action ipv6_forward(macAddr_t dstAddr,egressSpec_t port){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         standard_metadata.egress_spec = port;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         hdr.ethernet.srcAddr = hdr.ethernet.dstAddr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         hdr.ethernet.dstAddr = dstAddr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         hdr.ipv6.hopLimit = hdr.ipv6.hopLimit - 1;//这个类似ipv4中ttl，为0时就超时&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     table ipv6_lpm{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         key = {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             hdr.ipv6.dstAddr: lpm;//lpm是最长前缀匹配，exact完全匹配，ternary三元匹配&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         actions = {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             ipv6_forward;//转发&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             drop;//丢弃&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             NoAction;//空动作&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         size = 1024;//流表项容量&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         default_action = drop();//table miss则丢弃&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     apply{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt;(hdr.ipv6.isValid()){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             ipv6_lpm.apply();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; /*EGRESS PROCESSING*/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; control MyEgress(inout headers hdr,inout metadata meta,inout standard_metadata_t standard_metadata){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     apply{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; /*CHECKSUM COMPUTATION*/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; control MyComputeChecksum(inout headers hdr,inout metadata meta){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     apply{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; /*DEPARSER*/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; control MyDeparser(packet_out packet,in headers hdr){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     apply{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         packet.emit(hdr.ethernet);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         packet.emit(hdr.ipv6);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; /*SWITCH*/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; V1Switch(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; MyParser(),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; MyVerifyChecksum(),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; MyIngress(),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; MyEgress(),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; MyComputeChecksum(),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; MyDeparser()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; )main;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h3 id=&#34;实验拓扑&#34;&gt;实验拓扑&lt;/h3&gt;&#xA;&lt;p&gt;这里实验的拓扑用来最简单的一个交换机下挂两个主机，交换机是bmv2。其json文件书写如下： 交换机s1的流表项通过s1-commands.txt文件定义。&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4语法（5） Package 系列转载 6</title>
      <link>http://shanks.link/blog/2023/09/12/p4%E8%AF%AD%E6%B3%955-package-%E7%B3%BB%E5%88%97%E8%BD%AC%E8%BD%BD-6/</link>
      <pubDate>Tue, 12 Sep 2023 10:48:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/12/p4%E8%AF%AD%E6%B3%955-package-%E7%B3%BB%E5%88%97%E8%BD%AC%E8%BD%BD-6/</guid>
      <description>&lt;h2 id=&#34;package&#34;&gt;Package&lt;/h2&gt;&#xA;&lt;p&gt;对于package这个概念，类似于将一个框架中各组成部件以一个规律进行打包，以正常运转。&lt;/p&gt;&#xA;&lt;p&gt;基于一个架构去编写一个新的pipeline的时候，需要先了解初始化的时候需要提供那些东西，parser，ingress或一些校验的模块。&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4语法（4）Control block  转载系列 5</title>
      <link>http://shanks.link/blog/2023/09/12/p4%E8%AF%AD%E6%B3%954control-block-%E8%BD%AC%E8%BD%BD%E7%B3%BB%E5%88%97-5/</link>
      <pubDate>Tue, 12 Sep 2023 10:45:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/12/p4%E8%AF%AD%E6%B3%954control-block-%E8%BD%AC%E8%BD%BD%E7%B3%BB%E5%88%97-5/</guid>
      <description>&lt;h2 id=&#34;control-block&#34;&gt;Control block&lt;/h2&gt;&#xA;&lt;p&gt;Control block之中用于放置设计好的Table和Action。&lt;/p&gt;&#xA;&lt;p&gt;可以把control block认为是pipeline的一个模板，之前用的v1model中就是ingress和egress。 不同的架构中的control block格式不同。 其主要的功能就是知道每一个封包经过的table顺序以及采用的规则（触发条件等）。还能放置一些其他的功能部件，例如计数器counter等。&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4语法（3）Table，Action 转载系列 4</title>
      <link>http://shanks.link/blog/2023/09/12/p4%E8%AF%AD%E6%B3%953tableaction-%E8%BD%AC%E8%BD%BD%E7%B3%BB%E5%88%97-4/</link>
      <pubDate>Tue, 12 Sep 2023 10:40:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/12/p4%E8%AF%AD%E6%B3%953tableaction-%E8%BD%AC%E8%BD%BD%E7%B3%BB%E5%88%97-4/</guid>
      <description>&lt;h2 id=&#34;table&#34;&gt;Table&lt;/h2&gt;&#xA;&lt;p&gt;table是p4的匹配——动作表，定义了匹配字段（key）、动作（action）和一些其他相关属性。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/p4/1329608-20190302163135525-821980990.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;其处理数据包的流程：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Key construction.建立其匹配字段&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4 语法之 Parser 转载系列 3</title>
      <link>http://shanks.link/blog/2023/09/12/p4-%E8%AF%AD%E6%B3%95%E4%B9%8B-parser-%E8%BD%AC%E8%BD%BD%E7%B3%BB%E5%88%97-3/</link>
      <pubDate>Tue, 12 Sep 2023 10:25:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/12/p4-%E8%AF%AD%E6%B3%95%E4%B9%8B-parser-%E8%BD%AC%E8%BD%BD%E7%B3%BB%E5%88%97-3/</guid>
      <description>&lt;p&gt;这里参考学习了：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://p4.org/p4-spec/docs/P4-16-v1.1.0-spec.html&#34;&gt;P4语言规范&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;parser&#34;&gt;Parser&lt;/h2&gt;&#xA;&lt;h3 id=&#34;关于parser&#34;&gt;关于parser&lt;/h3&gt;&#xA;&lt;p&gt;在P4程序中，有着大量的首部（header）和首部实例，但每次只有部分首部实例会对数据包进行操作，而parser会用于生成描述数据包进行哪些匹配动作操作的中间表示（Intermediate Representation），这些解析后表示规定了对数据包生效的实例，可以认为是一组对数据包生效的实例的集合。&lt;/p&gt;</description>
    </item>
    <item>
      <title>基础数据类型和Header-转载系列 2</title>
      <link>http://shanks.link/blog/2023/09/12/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8Cheader-%E8%BD%AC%E8%BD%BD%E7%B3%BB%E5%88%97-2/</link>
      <pubDate>Tue, 12 Sep 2023 09:49:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/12/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8Cheader-%E8%BD%AC%E8%BD%BD%E7%B3%BB%E5%88%97-2/</guid>
      <description>&lt;p&gt;文章学习自：&lt;a href=&#34;https://www.sdnlab.com/17882.html&#34;&gt;P4语言编程详解&lt;/a&gt;&#xA;由于原文有一点的年份，所以也继续阅读了相关的最新规范。&#xA;&lt;a href=&#34;https://p4.org/p4-spec/docs/P4-16-v1.1.0-spec.html&#34;&gt;P4语言规范&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;基础数据类型&#34;&gt;基础数据类型&lt;/h2&gt;&#xA;&lt;h3 id=&#34;布尔型bool&#34;&gt;布尔型（bool）&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;运算符&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;and&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;双目运算符，结果为布尔型&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;or&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;双目运算符，结果为布尔型&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;not&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;单目运算符，结果为布尔型&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;==，!=&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;相等或不等，结果为布尔型&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;无符号整型bit&#34;&gt;无符号整型（bit）&lt;/h3&gt;&#xA;&lt;p&gt;又称之为位串（bit-string），对位串进行数学运算的时候，位串长度必须是8的整数倍。&lt;/p&gt;</description>
    </item>
    <item>
      <title>用P4对数据平面进行编程-转载系列 1</title>
      <link>http://shanks.link/blog/2023/09/12/%E7%94%A8p4%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%B9%B3%E9%9D%A2%E8%BF%9B%E8%A1%8C%E7%BC%96%E7%A8%8B-%E8%BD%AC%E8%BD%BD%E7%B3%BB%E5%88%97-1/</link>
      <pubDate>Tue, 12 Sep 2023 09:39:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/12/%E7%94%A8p4%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%B9%B3%E9%9D%A2%E8%BF%9B%E8%A1%8C%E7%BC%96%E7%A8%8B-%E8%BD%AC%E8%BD%BD%E7%B3%BB%E5%88%97-1/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;关于题目，对数据平面进行编程，在之前读过the road to SDN，软件定义网络的思想在于数控分离，其对网络行为的编程暂时只局限于网络控制平面。其转发平面在很大程度上受制于功能固定的包处理硬件。而P4语言的出现就是为了完全摆脱网络数据平面的束缚。P4被称作为完全可编程南向编程接口，其提出的目的就是为了解决Openflow编程能力不足及其设计本身所存在的可拓展性差的难题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenFlow协议之殇？</title>
      <link>http://shanks.link/blog/2023/09/08/openflow%E5%8D%8F%E8%AE%AE%E4%B9%8B%E6%AE%87/</link>
      <pubDate>Fri, 08 Sep 2023 17:47:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/08/openflow%E5%8D%8F%E8%AE%AE%E4%B9%8B%E6%AE%87/</guid>
      <description>&lt;h1 id=&#34;openflow协议之殇&#34;&gt;OpenFlow协议之殇？&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.douban.com/people/SDNLAB/&#34;&gt;&lt;img src=&#34;https://img1.doubanio.com/icon/u102948857-7.jpg&#34; alt=&#34;SDNLAB&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.douban.com/people/SDNLAB/&#34;&gt;SDNLAB&lt;/a&gt; 2015-07-16 13:17:28&lt;/p&gt;&#xA;&lt;p&gt;在过去，OpenFlow一度是SDN的代名词，只要是SDN出现的地方就不得不谈到OpenFlow。不过现今，SDN似乎对OpenFlow并不是很热情，在谈论SDN时，OpenFlow也不再是标配了。这个曾经的唯一选择究竟遇到了什么，难道这是OpenFlow协议之殇？&lt;/p&gt;</description>
    </item>
    <item>
      <title>从P4 WORKSHOP 2021看P4的发展趋势</title>
      <link>http://shanks.link/blog/2023/09/08/%E4%BB%8Ep4-workshop-2021%E7%9C%8Bp4%E7%9A%84%E5%8F%91%E5%B1%95%E8%B6%8B%E5%8A%BF/</link>
      <pubDate>Fri, 08 Sep 2023 17:41:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/08/%E4%BB%8Ep4-workshop-2021%E7%9C%8Bp4%E7%9A%84%E5%8F%91%E5%B1%95%E8%B6%8B%E5%8A%BF/</guid>
      <description>&lt;h1 id=&#34;p4-概述&#34;&gt;P4 概述&lt;/h1&gt;&#xA;&lt;p&gt;2013年， 当时还在德州仪器（TI）的 Pat Bosshart，联合斯坦福Nick、微软研究院的 George 等人在SIGCOMM上提出了一种RMT交换机实现，其实现了网络协议的自定义解析，自定义匹配、处理、转发，这个就是现在Intel Tofino 芯片的原型。但当时相关网络编程语言与编译器还未完善。&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4的产业应用之路</title>
      <link>http://shanks.link/blog/2023/09/06/p4%E7%9A%84%E4%BA%A7%E4%B8%9A%E5%BA%94%E7%94%A8%E4%B9%8B%E8%B7%AF/</link>
      <pubDate>Wed, 06 Sep 2023 16:05:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/06/p4%E7%9A%84%E4%BA%A7%E4%B8%9A%E5%BA%94%E7%94%A8%E4%B9%8B%E8%B7%AF/</guid>
      <description>&lt;p&gt;P4（Programming Protocol-Independent Packet Processors）是一种开源的、数据面的高级编程语言，专为编程可重构网络而设计。P4自诞生以来便引起了学术界与工业界的广泛关注，不仅各大顶级会议和期刊上P4 相关的学术论文大量涌现，谷歌、AT&amp;amp;T、阿里巴巴、腾讯等在内的超过 100 家世界知名大型公司也已加入 P4 语言联盟，产业界掀起了P4应用与探索的浪潮。&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4语言详解</title>
      <link>http://shanks.link/blog/2023/09/06/p4%E8%AF%AD%E8%A8%80%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 06 Sep 2023 15:27:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/06/p4%E8%AF%AD%E8%A8%80%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;p&gt;在文章《&lt;a href=&#34;https://www.sdnlab.com/17795.html&#34;&gt;P4:开创数据平面可编程时代&lt;/a&gt;》中介绍了P4的架构特性、交换机结构以及P4程序的工作原理，本篇为大家介绍P4语言编码及规范，从编码角度去理解P4程序的工作流程。&lt;/p&gt;&#xA;&lt;h1 id=&#34;源码目录结构&#34;&gt;源码目录结构&lt;/h1&gt;&#xA;&lt;p&gt;P4项目源码可以在github上直接获取（https://github.com/p4lang）。P4项目由很多个单独的模块组成，每个模块就是一个子项目，下面分别简单介绍一下各模块的功能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4编程理论与实践——实践篇</title>
      <link>http://shanks.link/blog/2023/09/06/p4%E7%BC%96%E7%A8%8B%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E5%AE%9E%E8%B7%B5%E7%AF%87/</link>
      <pubDate>Wed, 06 Sep 2023 10:48:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/06/p4%E7%BC%96%E7%A8%8B%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E5%AE%9E%E8%B7%B5%E7%AF%87/</guid>
      <description>&lt;h2 id=&#34;本文内容简介&#34;&gt;本文内容简介&lt;/h2&gt;&#xA;&lt;p&gt;本文首先向大家简单介绍在学习P4过程中需要用到的工具。&lt;strong&gt;本文的主要特色是让对P4感兴趣的大家不费吹灰之力的在工作，学习之余，快速搭建完善的P4实验环境并开始第一个P4实验。&lt;strong&gt;本文的更新日期是&lt;/strong&gt;2018年10月8日&lt;/strong&gt;，使用相对于大多数教程来说较新的P4环境，本文提供两种搭建环境的方法，它们的特点如下：&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4编程理论与实践——理论篇</title>
      <link>http://shanks.link/blog/2023/09/06/p4%E7%BC%96%E7%A8%8B%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E7%90%86%E8%AE%BA%E7%AF%87/</link>
      <pubDate>Wed, 06 Sep 2023 10:37:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/06/p4%E7%BC%96%E7%A8%8B%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E7%90%86%E8%AE%BA%E7%AF%87/</guid>
      <description>&lt;p&gt;&lt;strong&gt;简介：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;由于对SDN充满着兴趣，在学习了一段时间OpenFlow之后，一次偶然的机会接触到了P4。P4可以实现很多新的Idea，但是无奈于国内的实践资料太少了（有些资料似乎比较陈旧了）。唯一的学习来源是官网的英文实例教程，但是摸索起来很费时间。因此本人打算把自己的探索经验，写成一个专题，和大家分享，学习，交流。着重点是实践而非理论，有不正确的地方欢迎批评指正。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1小时学会P4-16编程基础</title>
      <link>http://shanks.link/blog/2023/08/25/1%E5%B0%8F%E6%97%B6%E5%AD%A6%E4%BC%9Ap4-16%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Fri, 25 Aug 2023 14:27:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/08/25/1%E5%B0%8F%E6%97%B6%E5%AD%A6%E4%BC%9Ap4-16%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://bbs.huaweicloud.com/community/usersnew/id_1556361681406159&#34;&gt;荷包蛋好吃&lt;/a&gt; 发表于 2021/07/29 19:23:24&lt;/p&gt;&#xA;&lt;h1 id=&#34;p4开源项目&#34;&gt;P4开源项目&lt;/h1&gt;&#xA;&lt;p&gt;P4项目源码可以在github上直接获取（https://github.com/p4lang）。&lt;/p&gt;&#xA;&lt;h2 id=&#34;项目关系&#34;&gt;项目关系&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;项目关系&lt;/strong&gt;如下：&#xA;&lt;img src=&#34;http://shanks.link/img/p4/image_641.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;高级语言层：高级抽象的P4语言编写程序&lt;/li&gt;&#xA;&lt;li&gt;前端编译器：对高级语言进行与目标无关的语义分析并生产中间表示&lt;/li&gt;&#xA;&lt;li&gt;中间表示层：高级语言中间表示，可转换成多种其他语言&lt;/li&gt;&#xA;&lt;li&gt;后端编译器：将中间表示转换为目标平台机器码&lt;/li&gt;&#xA;&lt;li&gt;目标对象层：受控制硬件/软件设备&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;项目功能&#34;&gt;项目功能&lt;/h2&gt;&#xA;&lt;p&gt;P4项目由很多个单独的模块组成，每个模块就是一个子项目，&lt;strong&gt;各子项目功能&lt;/strong&gt;介绍如下：&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4 参考资料</title>
      <link>http://shanks.link/blog/2000/01/24/p4-%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</link>
      <pubDate>Mon, 24 Jan 2000 17:22:00 +0800</pubDate>
      <guid>http://shanks.link/blog/2000/01/24/p4-%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</guid>
      <description>&lt;h3 id=&#34;p4-官网&#34;&gt;P4 官网&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://p4.org/&#34;&gt;https://p4.org/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/p4lang&#34;&gt;https://github.com/p4lang&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://open-nfp.org/&#34;&gt;https://open-nfp.org/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;p4-demo&#34;&gt;P4-demo&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/osinstom/p4-demos&#34;&gt;https://github.com/osinstom/p4-demos&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/jafingerhut/p4-guide&#34;&gt;https://github.com/jafingerhut/p4-guide&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://open-nfp.org/resources/&#34;&gt;https://open-nfp.org/resources/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;others&#34;&gt;others&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://open-nfp.org/dataplanes-ebpf/technical-papers/&#34;&gt;https://open-nfp.org/dataplanes-ebpf/technical-papers/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/open-nfpsw&#34;&gt;https://github.com/open-nfpsw&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
