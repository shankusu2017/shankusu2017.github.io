<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IT on Golang编程语言知识介绍</title>
    <link>http://shanks.link/categories/it/</link>
    <description>Recent content in IT on Golang编程语言知识介绍</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 23 Jan 2024 11:53:23 +0800</lastBuildDate><atom:link href="http://shanks.link/categories/it/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GDB的调试原理</title>
      <link>http://shanks.link/blog/2024/01/23/gdb%E7%9A%84%E8%B0%83%E8%AF%95%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 23 Jan 2024 11:53:23 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2024/01/23/gdb%E7%9A%84%E8%B0%83%E8%AF%95%E5%8E%9F%E7%90%86/</guid>
      <description>GDB是如何实现的，对于这个问题，在面试中也遇到过一次，我真的不懂，只能整理一下文章和资料 当我们启动gdb程序之后，会执行下面的操作： ：通过</description>
    </item>
    
    <item>
      <title>为什么pthread_cond_wait需要互斥锁mutex作为参数</title>
      <link>http://shanks.link/blog/2024/01/22/%E4%B8%BA%E4%BB%80%E4%B9%88pthread_cond_wait%E9%9C%80%E8%A6%81%E4%BA%92%E6%96%A5%E9%94%81mutex%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0/</link>
      <pubDate>Mon, 22 Jan 2024 17:35:23 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2024/01/22/%E4%B8%BA%E4%BB%80%E4%B9%88pthread_cond_wait%E9%9C%80%E8%A6%81%E4%BA%92%E6%96%A5%E9%94%81mutex%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0/</guid>
      <description>为什么pthread_cond_wait需要互斥锁mutex作为参数 pthread_cond_wait需要互斥锁mutex作为参数的原因：当</description>
    </item>
    
    <item>
      <title>thrift 之 go 入门 Getting Started with Thrift Go</title>
      <link>http://shanks.link/blog/2023/12/08/thrift-%E4%B9%8B-go-%E5%85%A5%E9%97%A8-getting-started-with-thrift-go/</link>
      <pubDate>Fri, 08 Dec 2023 16:20:09 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2023/12/08/thrift-%E4%B9%8B-go-%E5%85%A5%E9%97%A8-getting-started-with-thrift-go/</guid>
      <description>下载、安装 thrift 编译器 thrift 编译器的下载连接 https://thrift.apache.org/downloa 这里注意下版本 将下载的编译器放到系统的可执行目录下，并去掉版本信息， eg: thrift-0.19.0.exe 改为 thrift.exe go 安装 thrift 包 go get github.com/apache/thrift@0.19.0 #这里的</description>
    </item>
    
    <item>
      <title>thrift 备忘录 thrift memorandum</title>
      <link>http://shanks.link/blog/2023/12/08/thrift-%E5%A4%87%E5%BF%98%E5%BD%95-thrift-memorandum/</link>
      <pubDate>Fri, 08 Dec 2023 14:10:09 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2023/12/08/thrift-%E5%A4%87%E5%BF%98%E5%BD%95-thrift-memorandum/</guid>
      <description>下载 thrift 编译器的下载连接 https://thrift.apache.org/download 版本 上述下载的编译器版本要和后续引用的 thrift 头文件的版本对应，比如这里下载的是 0.19.0 版本，后续引用头文件 github.com/apache/thrift 或者 git.apache.org/thrift.git 需要 git checkout 0.19.0 多</description>
    </item>
    
    <item>
      <title>体系化认识 RPC</title>
      <link>http://shanks.link/blog/2023/12/07/%E4%BD%93%E7%B3%BB%E5%8C%96%E8%AE%A4%E8%AF%86-rpc/</link>
      <pubDate>Thu, 07 Dec 2023 16:14:09 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2023/12/07/%E4%BD%93%E7%B3%BB%E5%8C%96%E8%AE%A4%E8%AF%86-rpc/</guid>
      <description>RPC（Remote Procedure Call），即远程过程调用，是一个分布式系统间通信的必备技术。 RPC 最核心要解决的问题就是在分布式系统间，如何执行另外一个</description>
    </item>
    
    <item>
      <title>RADIUS简介</title>
      <link>http://shanks.link/blog/2023/12/06/radius%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 06 Dec 2023 11:44:09 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2023/12/06/radius%E7%AE%80%E4%BB%8B/</guid>
      <description>什么是RADIUS？ RADIUS（Remote Authentication Dial In User Service，远程用户拨号认证）协议是一种分布式的、客户端/服务器结构的信息交互协议</description>
    </item>
    
    <item>
      <title> 写给工程师的十条精进原则</title>
      <link>http://shanks.link/blog/2022/09/29/%E5%86%99%E7%BB%99%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E5%8D%81%E6%9D%A1%E7%B2%BE%E8%BF%9B%E5%8E%9F%E5%88%99/</link>
      <pubDate>Thu, 29 Sep 2022 20:15:23 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/09/29/%E5%86%99%E7%BB%99%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E5%8D%81%E6%9D%A1%E7%B2%BE%E8%BF%9B%E5%8E%9F%E5%88%99/</guid>
      <description>引言 时间回到8年前，我人生中第一份实习的工作，是在某互联网公司的无线搜索部做一个C++工程师。当时的我可谓意气风发，想要大干一场，结果第一次</description>
    </item>
    
    <item>
      <title>工作中如何做好技术积累</title>
      <link>http://shanks.link/blog/2022/09/29/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/</link>
      <pubDate>Thu, 29 Sep 2022 19:48:32 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/09/29/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/</guid>
      <description>引言 古人云：“活到老，学到老。”互联网算是最辛苦的行业之一，“加班”对工程师来说已是“家常便饭”，同时互联网技术又日新月异，很多工程师都疲于</description>
    </item>
    
    <item>
      <title>工程师的基本功是什么？该如何练习？</title>
      <link>http://shanks.link/blog/2022/09/29/%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8A%9F%E6%98%AF%E4%BB%80%E4%B9%88%E8%AF%A5%E5%A6%82%E4%BD%95%E7%BB%83%E4%B9%A0/</link>
      <pubDate>Thu, 29 Sep 2022 19:43:45 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/09/29/%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8A%9F%E6%98%AF%E4%BB%80%E4%B9%88%E8%AF%A5%E5%A6%82%E4%BD%95%E7%BB%83%E4%B9%A0/</guid>
      <description>在美团有一句老话，叫做“苦练基本功”。美团创始人王兴解读的基本功是业务和管理的基本动作。只要能把基本功扎实练好，就能产生巨大价值。然而滴水石</description>
    </item>
    
    <item>
      <title>Compare And Swap（CAS）原理分析</title>
      <link>http://shanks.link/blog/2022/09/29/compare-and-swapcas%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 29 Sep 2022 18:26:01 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/09/29/compare-and-swapcas%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</guid>
      <description>1 什么是CAS？ 1.1 加锁和CAS解决原子性问题的不同原理 首先看如下代码： package com.nrsc.ch2.cas; import java.util.ArrayList; import java.util.List; public class CasDemo { //共享资源 static int i = 0; public static void increase() { i++; } public static void main(String[] args) throws InterruptedException</description>
    </item>
    
    <item>
      <title>磁盘那些事</title>
      <link>http://shanks.link/blog/2022/09/29/%E7%A3%81%E7%9B%98%E9%82%A3%E4%BA%9B%E4%BA%8B/</link>
      <pubDate>Thu, 29 Sep 2022 16:31:09 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/09/29/%E7%A3%81%E7%9B%98%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid>
      <description>背景 计算机硬件性能在过去十年间的发展普遍遵循摩尔定律，通用计算机的CPU主频早已超过3GHz，内存也进入了普及DDR4的时代。然而传统硬盘虽</description>
    </item>
    
  </channel>
</rss>
