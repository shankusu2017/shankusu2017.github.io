<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenWrt on Golang入门指南</title>
    <link>http://shanks.link/categories/openwrt/</link>
    <description>Recent content in OpenWrt on Golang入门指南</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 26 Apr 2023 16:05:48 +0800</lastBuildDate>
    <atom:link href="http://shanks.link/categories/openwrt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>华硕AC系列固件重打包与后门植入</title>
      <link>http://shanks.link/blog/2023/04/26/%E5%8D%8E%E7%A1%95ac%E7%B3%BB%E5%88%97%E5%9B%BA%E4%BB%B6%E9%87%8D%E6%89%93%E5%8C%85%E4%B8%8E%E5%90%8E%E9%97%A8%E6%A4%8D%E5%85%A5/</link>
      <pubDate>Wed, 26 Apr 2023 16:05:48 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/04/26/%E5%8D%8E%E7%A1%95ac%E7%B3%BB%E5%88%97%E5%9B%BA%E4%BB%B6%E9%87%8D%E6%89%93%E5%8C%85%E4%B8%8E%E5%90%8E%E9%97%A8%E6%A4%8D%E5%85%A5/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.wangan.com/p/11v7268daa23ddd6&#34;&gt;以下内容转载自&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;写在前面：华硕 AC 系列固件设备数量很多，，这篇文章对华硕 AC 系列固件进行了分析，并研究了其重打包方法。本篇文章以华硕 AC3200 固件为例。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;1. 固件解包及基本结构解析&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>小米固件mkxqimage</title>
      <link>http://shanks.link/blog/2023/04/26/%E5%B0%8F%E7%B1%B3%E5%9B%BA%E4%BB%B6mkxqimage/</link>
      <pubDate>Wed, 26 Apr 2023 15:47:52 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/04/26/%E5%B0%8F%E7%B1%B3%E5%9B%BA%E4%BB%B6mkxqimage/</guid>
      <description>&lt;h1 id=&#34;小米固件工具mkxqimage&#34;&gt;小米固件工具mkxqimage&lt;/h1&gt;&#xA;&lt;p&gt;小米基于 trx 改了个打包解包固件的工具&lt;/p&gt;&#xA;&lt;h1 id=&#34;小米固件工具mkxqimage-1&#34;&gt;小米固件工具mkxqimage&lt;/h1&gt;&#xA;&lt;p&gt;小米自己改了个打包解包固件的工具，基于 trx 改的（本质上还是 trx 格式），加了 RSA 验证和解包功能，路由系统里自带：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Usage:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkxqimg [-o outfile] [-p private_key] [-f file] [-f file [-f file [-f file ]]]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        [-x file]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        [-I]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;固件打包&#34;&gt;固件打包&lt;/h2&gt;&#xA;&lt;p&gt;小米官方在打包固件时用RSA私钥计算出固件的RSA签名，小米路由器下载固件后用RSA公钥来验证RSA签名，有效地防止固件被篡改。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Netgear固件分析与后门植入</title>
      <link>http://shanks.link/blog/2023/04/26/netgear%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90%E4%B8%8E%E5%90%8E%E9%97%A8%E6%A4%8D%E5%85%A5/</link>
      <pubDate>Wed, 26 Apr 2023 15:24:52 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/04/26/netgear%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90%E4%B8%8E%E5%90%8E%E9%97%A8%E6%A4%8D%E5%85%A5/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.secpulse.com/archives/160480.html&#34;&gt;以下内容转载自&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;记录对netgear XR300路由器固件分析以及重新打包过程&lt;/p&gt;&#xA;&lt;p&gt;文章亮点就是 全方面的讲解了固件重打包的流程，从怎么分析到实际操作都进行了讲解，并且根据固件的分层结构，详细介绍了每层数据的具体处理方法&lt;/p&gt;</description>
    </item>
    <item>
      <title>华硕路由器添加固件后门</title>
      <link>http://shanks.link/blog/2023/04/26/%E5%8D%8E%E7%A1%95%E8%B7%AF%E7%94%B1%E5%99%A8%E6%B7%BB%E5%8A%A0%E5%9B%BA%E4%BB%B6%E5%90%8E%E9%97%A8/</link>
      <pubDate>Wed, 26 Apr 2023 15:15:42 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/04/26/%E5%8D%8E%E7%A1%95%E8%B7%AF%E7%94%B1%E5%99%A8%E6%B7%BB%E5%8A%A0%E5%9B%BA%E4%BB%B6%E5%90%8E%E9%97%A8/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://cn-sec.com/archives/92207.html&#34;&gt;以下内容转载自&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;概述&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;在进行IoT漏洞利用的过程中，后利用阶段为了扩展利用效果和加强红队攻防对抗的能力，固件级别的后门（BackDoor）是非常重要的。&lt;/p&gt;&#xA;&lt;p&gt;极光无限维阵专家团队基于对华硕路由器漏洞的研究，对华硕无线路由器固件进行了深入解析，&lt;strong&gt;我们得出以下结论：直接在固件中添加后门命令，路由器前台进行固件更新即可植入固件级别的后门。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>D-Bus系列入门</title>
      <link>http://shanks.link/blog/2022/11/16/d-bus%E7%B3%BB%E5%88%97%E5%85%A5%E9%97%A8/</link>
      <pubDate>Wed, 16 Nov 2022 11:43:52 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/11/16/d-bus%E7%B3%BB%E5%88%97%E5%85%A5%E9%97%A8/</guid>
      <description>&lt;h2 id=&#34;背景知识&#34;&gt;背景知识&lt;/h2&gt;&#xA;&lt;p&gt;有很多IPC（interprocess communication ） ，用于不同的解决方案：CORBA 是用于面向对象编程中复杂的 IPC 的一个强大的解决方案。 DCOP 是一个较轻量级的 IPC 框架，功能较少，但是可以很好地集成到 K 桌面环境中。SOAP 和 XML-RPC 设计用于 Web 服务，因而使用 HTTP 作为其传输协议。 D-BUS 设计用于桌面应用程序和 OS 通信。D-Bus(其中D原先是代表桌面“Desktop” 的意思)，即：用于桌面操作系统的通信总线。 现在逐渐被引入到嵌入式系统中，不过名字还是保留原先的叫法而已。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenWrt 安装Git</title>
      <link>http://shanks.link/blog/2022/11/02/openwrt-%E5%AE%89%E8%A3%85git/</link>
      <pubDate>Wed, 02 Nov 2022 15:30:38 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/11/02/openwrt-%E5%AE%89%E8%A3%85git/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;安装git软件,ssh相关的组件&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;opkg update&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;opkg install git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;opkg install openssh-keygen&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;opkg install openssh-client&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>luci的框架和认识</title>
      <link>http://shanks.link/blog/2022/10/24/luci%E7%9A%84%E6%A1%86%E6%9E%B6%E5%92%8C%E8%AE%A4%E8%AF%86/</link>
      <pubDate>Mon, 24 Oct 2022 16:22:06 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/24/luci%E7%9A%84%E6%A1%86%E6%9E%B6%E5%92%8C%E8%AE%A4%E8%AF%86/</guid>
      <description>&lt;p&gt;官网：&lt;/p&gt;&#xA;&lt;p&gt;有关luci的各个方面，你几乎都可以从这里获得，当然，只是浅显的获得，luci的文档写的还算比较全，但是写的稍显简略，开始看的时候会有一点不知所措。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Luci实现框架</title>
      <link>http://shanks.link/blog/2022/10/24/luci%E5%AE%9E%E7%8E%B0%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Mon, 24 Oct 2022 15:24:05 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/24/luci%E5%AE%9E%E7%8E%B0%E6%A1%86%E6%9E%B6/</guid>
      <description>&lt;h2 id=&#34;1总述&#34;&gt;1.总述&lt;/h2&gt;&#xA;&lt;p&gt;上一篇总结了uhttpd的工作方式，openwrt中利用它作为web服务器，实现客户端web页面配置功能。对于request处理方式，采用的是cgi，而所用的cgi程序就是luci，工作框架如下图所示：&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenWrt Luci页面如何配置底部按钮（返回、保存、复位）</title>
      <link>http://shanks.link/blog/2022/10/24/openwrt-luci%E9%A1%B5%E9%9D%A2%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%BA%95%E9%83%A8%E6%8C%89%E9%92%AE%E8%BF%94%E5%9B%9E%E4%BF%9D%E5%AD%98%E5%A4%8D%E4%BD%8D/</link>
      <pubDate>Mon, 24 Oct 2022 13:52:34 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/24/openwrt-luci%E9%A1%B5%E9%9D%A2%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%BA%95%E9%83%A8%E6%8C%89%E9%92%AE%E8%BF%94%E5%9B%9E%E4%BF%9D%E5%AD%98%E5%A4%8D%E4%BD%8D/</guid>
      <description>&lt;p&gt;在&lt;a href=&#34;https://so.csdn.net/so/search?q=OpenWrt&amp;amp;spm=1001.2101.3001.7020&#34;&gt;OpenWrt&lt;/a&gt;开发过程中，会用到不同风格的页面，比如有的是配置页面，有的是状态页面&#xA;而状态页面是不需要保存按钮的&lt;/p&gt;&#xA;&lt;p&gt;如何屏蔽保存按钮，增加返回按钮呢？&lt;/p&gt;&#xA;&lt;p&gt;OpenWrt Luci&lt;a href=&#34;https://so.csdn.net/so/search?q=%E6%A1%86%E6%9E%B6&amp;amp;spm=1001.2101.3001.7020&#34;&gt;框架&lt;/a&gt;已经做了很好的封装，只需要配置相关变量即可。&lt;/p&gt;&#xA;&lt;p&gt;而luci的footer页面采用了模板，我们可以在controller中增加字段定义即可屏蔽底部按钮&#xA;底部按钮有以下几种&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenWrt 系统UCI详解(Lua、C语言调用uci接口实例)</title>
      <link>http://shanks.link/blog/2022/10/24/openwrt-%E7%B3%BB%E7%BB%9Fuci%E8%AF%A6%E8%A7%A3luac%E8%AF%AD%E8%A8%80%E8%B0%83%E7%94%A8uci%E6%8E%A5%E5%8F%A3%E5%AE%9E%E4%BE%8B/</link>
      <pubDate>Mon, 24 Oct 2022 13:37:08 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/24/openwrt-%E7%B3%BB%E7%BB%9Fuci%E8%AF%A6%E8%A7%A3luac%E8%AF%AD%E8%A8%80%E8%B0%83%E7%94%A8uci%E6%8E%A5%E5%8F%A3%E5%AE%9E%E4%BE%8B/</guid>
      <description>&lt;h2 id=&#34;uci简介&#34;&gt;UCI简介&lt;/h2&gt;&#xA;&lt;p&gt;&amp;ldquo;uci&amp;quot;是&amp;quot;Unified &lt;a href=&#34;https://so.csdn.net/so/search?q=Configuration&amp;amp;spm=1001.2101.3001.7020&#34;&gt;Configuration&lt;/a&gt; Interface&amp;rdquo;(统一配置界面)的缩写,用于OpenWrt整个系统的配置集中化。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenWrt Luci流程分析</title>
      <link>http://shanks.link/blog/2022/10/21/openwrt-luci%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 21 Oct 2022 18:33:49 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/21/openwrt-luci%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h1 id=&#34;页面请求&#34;&gt;页面请求：&lt;/h1&gt;&#xA;&lt;h4 id=&#34;代码结构&#34;&gt;代码结构&lt;/h4&gt;&#xA;&lt;p&gt;在openwrt文件系统中，lua语言的代码不要编译，类似一种脚本语言被执行，还有一些uhttpd服务器的主目录，它们是：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/www/index.html&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cgi-bin/luci&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;luci-static/xxx/xx.css、js、gif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/lib/lua/nixio.so、uci.so&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;luci/http.lua、dispatcher.lua、core…&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;controller/xxx.lua&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model/xxx.lua&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;view/xxx.lua&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;界面显示&#34;&gt;界面显示&lt;/h2&gt;&#xA;&lt;p&gt;网页请求格式基本都如下所示：，说明处理都在服务器的默认网站下的/cgi-bin/luci文件进行处理。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Openwrt 编译x86镜像</title>
      <link>http://shanks.link/blog/2022/10/21/openwrt-%E7%BC%96%E8%AF%91x86%E9%95%9C%E5%83%8F/</link>
      <pubDate>Fri, 21 Oct 2022 17:24:58 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/21/openwrt-%E7%BC%96%E8%AF%91x86%E9%95%9C%E5%83%8F/</guid>
      <description>&lt;p&gt;有些同学可能想学习&lt;a href=&#34;https://so.csdn.net/so/search?q=openwrt&amp;amp;spm=1001.2101.3001.7020&#34;&gt;openwrt&lt;/a&gt;系统，但手头又没有嵌入式板子，是编译和运行系统，然后再增加自己的功能。下面介绍如何编译openwrt系统后再虚拟机下运行。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;下载openwrt最新代码&#xA;在&lt;a href=&#34;https://so.csdn.net/so/search?q=github&amp;amp;spm=1001.2101.3001.7020&#34;&gt;github&lt;/a&gt;上搜索openwrt，找到下载地址https://github.com/openwrt/openwrt.git&lt;/li&gt;&#xA;&lt;li&gt;在&lt;a href=&#34;https://so.csdn.net/so/search?q=ubuntu&amp;amp;spm=1001.2101.3001.7020&#34;&gt;ubuntu&lt;/a&gt;下执行命令克隆openwrt源码&#xA;git clone &lt;a href=&#34;https://github.com/openwrt/openwrt.git&#34;&gt;https://github.com/openwrt/openwrt.git&lt;/a&gt;&#xA;3.&#xA;执行以下命令更新包&#xA;./scripts/feeds update -a&#xA;./scripts/feeds install -a&#xA;更新package，否则luci等package通过make menuconfig 不能显示&#xA;4.配置目标系统&#xA;make menuconfig&#xA;选择平台为X86&#xA;&lt;img src=&#34;https://img-blog.csdn.net/20180115144643330?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZHh0MTEwNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&#34; alt=&#34;这里写图片描述&#34;&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;选择vmdk目标文件格式&lt;/p&gt;</description>
    </item>
    <item>
      <title>Openwrt LuCI UCI（三）</title>
      <link>http://shanks.link/blog/2022/10/21/openwrt-luci-uci%E4%B8%89/</link>
      <pubDate>Fri, 21 Oct 2022 16:53:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/21/openwrt-luci-uci%E4%B8%89/</guid>
      <description>&lt;h3 id=&#34;uci简介&#34;&gt;UCI简介&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;UCI是Unified Configuration Interface的缩写，翻译成中文就是统一配置接口，用途就是为OpenWrt提供一个集中控制的接口。&lt;/li&gt;&#xA;&lt;li&gt;配置接口启动流程：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;① 启动脚本 /etc/init.d/xxx；&lt;/li&gt;&#xA;&lt;li&gt;② 启动脚本通过UCI分析库从 /etc/config/xxx 获得启动参数；&lt;/li&gt;&#xA;&lt;li&gt;③ 启动脚本完成正常启动。&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/openwrt/20200111121815937.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Openwrt LuCI CBI（二）</title>
      <link>http://shanks.link/blog/2022/10/21/openwrt-luci-cbi%E4%BA%8C/</link>
      <pubDate>Fri, 21 Oct 2022 15:38:14 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/21/openwrt-luci-cbi%E4%BA%8C/</guid>
      <description>&lt;h3 id=&#34;一cbi控件类型汇总&#34;&gt;一、CBI控件类型汇总&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CBI模型是描述UCI配置文件结构的Lua文件，并且CBI解析器将lua文件转为HTML呈现给用户 。&lt;/li&gt;&#xA;&lt;li&gt;所有 CBI 模型文件必须返回类型为 luci.cbi.Map 的对象。&lt;/li&gt;&#xA;&lt;li&gt;CBI 模型文件的范围由 luci.cbi 模块的内容和 luci.i18n 的转换函数自动扩展。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;名称&lt;/th&gt;&#xA;          &lt;th&gt;描述&lt;/th&gt;&#xA;          &lt;th&gt;继承自&lt;/th&gt;&#xA;          &lt;th&gt;模板&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;NamedSection&lt;/td&gt;&#xA;          &lt;td&gt;A fixed configuration section defined by its name&lt;/td&gt;&#xA;          &lt;td&gt;NamedSection = class(AbstractSection)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/nsection&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;TypedSection&lt;/td&gt;&#xA;          &lt;td&gt;A (set of) configuration section(s) defined by the type&lt;/td&gt;&#xA;          &lt;td&gt;TypedSection = class(AbstractSection)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/tsection&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Node&lt;/td&gt;&#xA;          &lt;td&gt;Node pseudo abstract class&lt;/td&gt;&#xA;          &lt;td&gt;Node = class()&lt;/td&gt;&#xA;          &lt;td&gt;cbi/node&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Template&lt;/td&gt;&#xA;          &lt;td&gt;A simple template element&lt;/td&gt;&#xA;          &lt;td&gt;Template = class(Node)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Map&lt;/td&gt;&#xA;          &lt;td&gt;A map describing a configuration file&lt;/td&gt;&#xA;          &lt;td&gt;Map = class(Node)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/map&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Compound&lt;/td&gt;&#xA;          &lt;td&gt;Container&lt;/td&gt;&#xA;          &lt;td&gt;Compound = class(Node)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/compound&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Delegator&lt;/td&gt;&#xA;          &lt;td&gt;Node controller&lt;/td&gt;&#xA;          &lt;td&gt;Delegator = class(Node)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/delegator&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;SimpleForm&lt;/td&gt;&#xA;          &lt;td&gt;A Simple non-UCI form&lt;/td&gt;&#xA;          &lt;td&gt;SimpleForm = class(Node)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/simpleform&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Form&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Form = class(SimpleForm)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;AbstractSection&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;AbstractSection = class(Node)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;SimpleSection&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;SimpleSection = class(AbstractSection)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/nullsection&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Table&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Table = class(AbstractSection)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/tblsection&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;AbstractValue&lt;/td&gt;&#xA;          &lt;td&gt;An abstract Value Type&lt;/td&gt;&#xA;          &lt;td&gt;AbstractValue = class(Node)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Value&lt;/td&gt;&#xA;          &lt;td&gt;A one-line value&lt;/td&gt;&#xA;          &lt;td&gt;Value = class(AbstractValue)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/value&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;DummyValue&lt;/td&gt;&#xA;          &lt;td&gt;This does nothing except being there&lt;/td&gt;&#xA;          &lt;td&gt;DummyValue = class(AbstractValue)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/dvalue&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Flag&lt;/td&gt;&#xA;          &lt;td&gt;A flag being enabled or disabled&lt;/td&gt;&#xA;          &lt;td&gt;Flag = class(AbstractValue)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/fvalue&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;ListValue&lt;/td&gt;&#xA;          &lt;td&gt;A one-line value predefined in a list&lt;/td&gt;&#xA;          &lt;td&gt;ListValue = class(AbstractValue)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/lvalue&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;MultiValue&lt;/td&gt;&#xA;          &lt;td&gt;Multiple delimited values&lt;/td&gt;&#xA;          &lt;td&gt;MultiValue = class(AbstractValue)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/mvalue&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;StaticList&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;StaticList = class(MultiValue)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;DynamicList&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;DynamicList = class(AbstractValue)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/dynlist&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;TextValue&lt;/td&gt;&#xA;          &lt;td&gt;A multi-line value&lt;/td&gt;&#xA;          &lt;td&gt;TextValue = class(AbstractValue)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/tvalue&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Button&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Button = class(AbstractValue)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/button&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;FileUpload&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;FileUpload = class(AbstractValue)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/upload&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;FileBrowser&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;FileBrowser = class(AbstractValue)&lt;/td&gt;&#xA;          &lt;td&gt;cbi/browser&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Page&lt;/td&gt;&#xA;          &lt;td&gt;A simple node&lt;/td&gt;&#xA;          &lt;td&gt;Page = class(Node)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;二cbi常用控件用法详解&#34;&gt;二、CBI常用控件用法详解&lt;/h3&gt;&#xA;&lt;h4 id=&#34;21-class-map-config-title-description&#34;&gt;2.1 class Map (config, title, description)&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;This is the root object of the model.。&lt;/li&gt;&#xA;&lt;li&gt;模型的根对象&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;参数说明:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Openwrt LuCI 入门（一）</title>
      <link>http://shanks.link/blog/2022/10/20/openwrt-luci-%E5%85%A5%E9%97%A8%E4%B8%80/</link>
      <pubDate>Thu, 20 Oct 2022 20:15:14 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/20/openwrt-luci-%E5%85%A5%E9%97%A8%E4%B8%80/</guid>
      <description>&lt;h3 id=&#34;luci基本概念&#34;&gt;LuCI基本概念&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;UCI 是 &lt;a href=&#34;https://so.csdn.net/so/search?q=Openwrt&amp;amp;spm=1001.2101.3001.7020&#34;&gt;Openwrt&lt;/a&gt; 中为实现所有系统配置的一个统一接口，英文名 &lt;code&gt;Unified Configuration Interface&lt;/code&gt;，即统一配置接口。轻量级 LUA 语言的官方版本只包括一个精简的核心和最基本的库。这使得 LUA 体积小、启动速度快，从而适合嵌入在别的程序里。 LuCI 即是这两个项目的合体，可以实现路由的网页配置界面。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenWrt netifd学习笔记</title>
      <link>http://shanks.link/blog/2022/10/20/openwrt-netifd%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 20 Oct 2022 18:15:36 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/20/openwrt-netifd%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;h1 id=&#34;netifd简介&#34;&gt;Netifd简介&lt;/h1&gt;&#xA;&lt;p&gt;Netifd是&lt;a href=&#34;https://so.csdn.net/so/search?q=OpenWrt&amp;amp;spm=1001.2101.3001.7020&#34;&gt;OpenWrt&lt;/a&gt;中用于进行网络配置的守护进程，基本上所有网络接口设置以及内核的netlink事件都可以由netifd来处理完成。&#xA;在启动netifd之前用户需要将所需的配置写入uci配置文件/etc/config/network中，以告知netifd如何设置这些网络接口，如IP地址、上网类型等。如果在netifd运行过程中需要修改配置，则只需更新并保存/etc/config/network，执行/etc/init.d/network reload，netifd便可根据配置文件差异快速地完成网络接口的更新。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Openwrt ubus实现进程间通信举例</title>
      <link>http://shanks.link/blog/2022/10/20/openwrt-ubus%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B8%BE%E4%BE%8B/</link>
      <pubDate>Thu, 20 Oct 2022 18:00:22 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/20/openwrt-ubus%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%B8%BE%E4%BE%8B/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://shanks.link/blog/2022/10/20/openwrt-%E4%BD%BF%E7%94%A8-ubus%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1/&#34;&gt;上一篇文章&lt;/a&gt;介绍了ubus的组件和实现原理，本文通过代码实例介绍使用ubus进行进程间通信的三种方式。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;invoke的方式实现端对端通信&#xA;最简单的情景就是一个提供服务的server端，一个请求服务的client端，client请求server的服务。&#xA;下面的例子中，server注册了一个名为“scan_prog”的对象，该对象中提供一个“scan”方法：&#xA;ubus_invoke.h：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#ifndef __UBUS_INVOKE_H__&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define __UBUS_INVOKE_H__&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;json/json.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&amp;lt;libubox/blobmsg_json.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; prog_attr {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;char&lt;/span&gt; name[64];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#00f&#34;&gt;int&lt;/span&gt; chn_id;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#define PROG_MAX&#x9;8&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;#endif  &lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;/* __UBUS_INVOKE_H__ */&lt;/span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;invoke_server.c：&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenWrt 使用 ubus实现进程通信</title>
      <link>http://shanks.link/blog/2022/10/20/openwrt-%E4%BD%BF%E7%94%A8-ubus%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Thu, 20 Oct 2022 17:49:36 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/20/openwrt-%E4%BD%BF%E7%94%A8-ubus%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1/</guid>
      <description>&lt;p&gt;ubus为openwrt平台开发中的进程间通信提供了一个通用的框架。它让进程间通信的实现变得非常简单，并且ubus具有很强的可移植性，可以很方便的移植到其他linux平台上使用。本文描述了ubus的实现原理和整体框架。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenWRT 编译百科全书</title>
      <link>http://shanks.link/blog/2022/10/17/openwrt-%E7%BC%96%E8%AF%91%E7%99%BE%E7%A7%91%E5%85%A8%E4%B9%A6/</link>
      <pubDate>Mon, 17 Oct 2022 17:15:52 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/17/openwrt-%E7%BC%96%E8%AF%91%E7%99%BE%E7%A7%91%E5%85%A8%E4%B9%A6/</guid>
      <description>&lt;h2 id=&#34;配置編譯環境&#34;&gt;配置編譯環境&lt;/h2&gt;&#xA;&lt;p&gt;必須使用&lt;strong&gt;非root用戶&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;安裝依賴包&#34;&gt;安裝依賴包&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// Ubuntu 14.04 必選&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# apt-get install asciidoc bash bc binutils bzip2 fastjar flex git-core g++ build-essential util-linux gawk libgtk2.0-dev intltool jikespg zlib1g-dev genisoimage libncurses5-dev libssl-dev patch perl-modules python2.7-dev rsync ruby sdcc unzip wget gettext xsltproc libboost1.55-dev libboost1.55-tools-dev libxml-parser-perl libusb-dev bin86 bcc bzr ecj sharutils openjdk-7-jdk zip gcc-multilib quilt&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// Ubuntu 14.04 可選&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# apt-get install subversion mercurial cvs&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// ArchLinux 必選&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# pacman -S base-devel&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# pacman -S [--needed] asciidoc b43-fwcutter bash bc bin86 boost binutils bzip2 cdrkit fastjar flex gawk gettext git gtk2 intltool jdk7-openjdk libusb libxslt ncurses openssl patch perl python2 rsync ruby sdcc sharutils unzip util-linux wget zlib gcc make perl-extutils-makemaker findutils libstdc++5 lib32-libstdc++5&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// libstdc++  可能需要版本6,待測&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// 根據wiki，ArchLinux部分必選包在AUR裡面&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ yaourt -S bcc jikes&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// ArchLinux 可選&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00;font-style:italic&#34;&gt;# pacman -S subversion&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;首次配置需要檢出源代碼這裡用subversion檢出開發trunk分支&#34;&gt;首次配置需要檢出源代碼，這裡用subversion檢出開發trunk分支&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ svn co svn://svn.openwrt.org/openwrt/trunk/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這時，就會出現名為&lt;code&gt;trunk&lt;/code&gt;的文件夾，這就是將來我們的工作目錄。 如果已經有了以前的版本庫，需要按照下面的命令更新&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenWRT Packet 相关的问题</title>
      <link>http://shanks.link/blog/2022/10/17/openwrt-packet-%E7%9B%B8%E5%85%B3%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 17 Oct 2022 10:32:11 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/17/openwrt-packet-%E7%9B%B8%E5%85%B3%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;h4 id=&#34;dns-无法主动解析&#34;&gt;DNS 无法主动解析&lt;/h4&gt;&#xA;&lt;p&gt;​&#x9;&#x9;若执行 opkg update 失败，则尝试执行 ping  downloads.openwrt.org，若也失败，则手动在 PC上 ping downloads.openwrt.org 得到 IP 后，修改路由器的host文件。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenWrt Web GUI 开发之 Luci 框架粗解</title>
      <link>http://shanks.link/blog/2022/10/13/openwrt-web-gui-%E5%BC%80%E5%8F%91%E4%B9%8B-luci-%E6%A1%86%E6%9E%B6%E7%B2%97%E8%A7%A3/</link>
      <pubDate>Thu, 13 Oct 2022 20:41:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/13/openwrt-web-gui-%E5%BC%80%E5%8F%91%E4%B9%8B-luci-%E6%A1%86%E6%9E%B6%E7%B2%97%E8%A7%A3/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;本博文全部内容在 &lt;a href=&#34;https://so.csdn.net/so/search?q=GitHub&amp;amp;spm=1001.2101.3001.7020&#34;&gt;GitHub&lt;/a&gt; 仓库上同步，可以在 👉 &lt;a href=&#34;https://github.com/RDpWTeHM/Embedded-GUI-Develop/tree/master/Luci-of-OpenWrt&#34;&gt;GitHub 🔗&lt;/a&gt; 上找到。&#xA;本博文是 GitHub 上的 README 内容，故本文内部分链接是以 GitHub 上&lt;a href=&#34;https://so.csdn.net/so/search?q=%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84&amp;amp;spm=1001.2101.3001.7020&#34;&gt;相对路径&lt;/a&gt;放置的，有需要请在 GitHub 中下载/查看。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;因为个人的水平和精力是有限的，如果本目录下的内容存在错误，疏忽之处，欢迎指出：可创建 Issue 或者 fork 修改后向本仓库做 pull request&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenWrt编译开启Luci</title>
      <link>http://shanks.link/blog/2022/10/13/openwrt%E7%BC%96%E8%AF%91%E5%BC%80%E5%90%AFluci/</link>
      <pubDate>Thu, 13 Oct 2022 13:50:25 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/13/openwrt%E7%BC%96%E8%AF%91%E5%BC%80%E5%90%AFluci/</guid>
      <description>&lt;h2 id=&#34;一openwrt的web界面&#34;&gt;一、&lt;a href=&#34;https://so.csdn.net/so/search?q=OpenWRT&amp;amp;spm=1001.2101.3001.7020&#34;&gt;OpenWRT&lt;/a&gt;的web界面&lt;/h2&gt;&#xA;&lt;p&gt;我们买来的&lt;a href=&#34;https://so.csdn.net/so/search?q=%E8%B7%AF%E7%94%B1%E5%99%A8&amp;amp;spm=1001.2101.3001.7020&#34;&gt;路由器&lt;/a&gt;在浏览器输入192.168.1.1（有些是其他地址）就能进入一个web的配置界面。OpenWRT也能添加默认的web界面。OpenWRT的web界面是使用LuCI来构造的。（LuCI自行百度）&lt;/p&gt;&#xA;&lt;h2 id=&#34;二配置web界面&#34;&gt;二、配置web界面&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;make menuconfig进入配置界面&#xA;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/80fa594691bbb5eb5377ff06b4e2af73.png&#34; alt=&#34;这里写图片描述&#34;&gt;&#xA;&lt;strong&gt;进入LuCI&lt;/strong&gt;&#xA;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/5f413a58646e7b77f761ea7809f57c2e.png&#34; alt=&#34;这里写图片描述&#34;&gt;&#xA;&lt;strong&gt;进入Collections&lt;/strong&gt;&#xA;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/932b6c158a099e64d9a76af5ca3d6e6b.png&#34; alt=&#34;这里写图片描述&#34;&gt;&#xA;&lt;strong&gt;选中luci。保存退出&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://yangyongda.blog.csdn.net/article/details/54023329&#34;&gt;以上内容转载自网友的blog，若有侵权请联系站长&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>5种常见的开源路由器固件优缺点</title>
      <link>http://shanks.link/blog/2022/10/13/5%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E5%BC%80%E6%BA%90%E8%B7%AF%E7%94%B1%E5%99%A8%E5%9B%BA%E4%BB%B6%E4%BC%98%E7%BC%BA%E7%82%B9/</link>
      <pubDate>Thu, 13 Oct 2022 10:08:16 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/13/5%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E5%BC%80%E6%BA%90%E8%B7%AF%E7%94%B1%E5%99%A8%E5%9B%BA%E4%BB%B6%E4%BC%98%E7%BC%BA%E7%82%B9/</guid>
      <description>&lt;p&gt;  除了智能手机外，路由器和无线接入点无疑是最常被破解和修改的消费级设备。一方面破解这些设备较为简单，另一方面破解、修改设备参数后能带来一系列好处，比如拥有更多的特性，改善路由功能，加强安全性，而且破解后还能配置原厂固件通常不允许修改的参数(例如天线输出功率)。&lt;/p&gt;</description>
    </item>
    <item>
      <title>openwrt，ddwrt，tomato这些路由器固件是怎么开发出来的？</title>
      <link>http://shanks.link/blog/2022/10/13/openwrtddwrttomato%E8%BF%99%E4%BA%9B%E8%B7%AF%E7%94%B1%E5%99%A8%E5%9B%BA%E4%BB%B6%E6%98%AF%E6%80%8E%E4%B9%88%E5%BC%80%E5%8F%91%E5%87%BA%E6%9D%A5%E7%9A%84/</link>
      <pubDate>Thu, 13 Oct 2022 09:54:04 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/13/openwrtddwrttomato%E8%BF%99%E4%BA%9B%E8%B7%AF%E7%94%B1%E5%99%A8%E5%9B%BA%E4%BB%B6%E6%98%AF%E6%80%8E%E4%B9%88%E5%BC%80%E5%8F%91%E5%87%BA%E6%9D%A5%E7%9A%84/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;2002年10月，&lt;strong&gt;Linksys&lt;/strong&gt;公司（由一对移民美国的台湾夫妇&lt;a href=&#34;https://www.zhihu.com/search?q=%E6%9B%B9%E8%8B%B1%E4%BC%9F&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1001410286%7D&#34;&gt;曹英伟&lt;/a&gt;和吴健创建）发布了名为&lt;strong&gt;WRT54G&lt;/strong&gt;的无线路由器的第1个版本，该机型基于32-bit &lt;strong&gt;MIPS&lt;/strong&gt;芯片，搭载了基于&lt;strong&gt;Linux&lt;/strong&gt;内核的固件，并且可以刷机；&#xA;WRT的含义，Linksys原意可能是指 &lt;strong&gt;W&lt;/strong&gt;irless &lt;strong&gt;R&lt;/strong&gt;eceiver/&lt;strong&gt;T&lt;/strong&gt;ransmitter，现在大家都解读为&lt;strong&gt;W&lt;/strong&gt;irless &lt;strong&gt;R&lt;/strong&gt;ou&lt;strong&gt;T&lt;/strong&gt;er；&lt;/li&gt;&#xA;&lt;li&gt;2003年3月，&lt;strong&gt;Cisco&lt;/strong&gt;公司以5亿美元的价格收购了Linksys，成为其子公司，此后Linksys推出的产品都标记上 &lt;strong&gt;Linksys by Cisco&lt;/strong&gt;；&lt;/li&gt;&#xA;&lt;li&gt;2003年6月，Linux Kernel 开发组听闻&lt;strong&gt;WRT54G&lt;/strong&gt;搭载了包含GPL开源协议的Linux代码，要求Linksys开源相关部分的代码，为此FSF(&lt;a href=&#34;https://www.zhihu.com/search?q=%E8%87%AA%E7%94%B1%E8%BD%AF%E4%BB%B6%E5%9F%BA%E9%87%91%E4%BC%9A&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1001410286%7D&#34;&gt;自由软件基金会&lt;/a&gt;)还起诉Cisco；&lt;/li&gt;&#xA;&lt;li&gt;2003年7月，尽管各方对&lt;strong&gt;WRT54G固件&lt;/strong&gt;是否应该开源有所争议，不过Cisco和Linksys迫于外界压力还是开源了&lt;strong&gt;WRT54G固件，至此，各种定制固件和路由器刷机开始流行了起来（&lt;strong&gt;Lintel在其2012年的一份文档中说是2003年3月思科被迫开源，其实有误，3月份思科和领势还在忙收购的事吧&lt;/strong&gt;）；&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;2004年1月**，**OpenWrt 项目启动（据其官网自我介绍，未找到源码或论坛讨论等其他佐证），基于WRT54G固件开发，后来（不知道是多久以后，根据2004和2005年的论坛信息显示，&lt;strong&gt;Alchemy&lt;/strong&gt;如日中天的时候OpenWrt还是个弟弟）发布名为“stable release”的版本；&lt;/li&gt;&#xA;&lt;li&gt;2004年6月，Sevasoft公司基于Linksys固件放出了&lt;strong&gt;Alchemy v1.0&lt;/strong&gt;，他们做的固件在当时是最流行的，在v1.0之前的pre版本就很流行了，开发也很活跃，Sevasoft也是WRT54G系列最早的开源开发者之一；&lt;/li&gt;&#xA;&lt;li&gt;2004年11月， Timothy Jans(又叫 Avenger 2.0)，基于Linksys开源的WRT54G系列的固件发布了**HyperWRT，**主要是开放一些官版受限的功能，但又尽可能保持原汁原味；&lt;/li&gt;&#xA;&lt;li&gt;2005年1-2月，Linksys为了支持这些第三方固件把&lt;strong&gt;WRT54G v4&lt;/strong&gt;机型拿来重新上市**，&lt;strong&gt;并重命名为&lt;/strong&gt;WRT54GL**其中L是指Linux，据Linksys相关负责人在2018年称，&lt;strong&gt;WRT54GL&lt;/strong&gt;是迄今为止最畅销的路由器；&lt;/li&gt;&#xA;&lt;li&gt;Sveasoft公司鉴于自己在&lt;strong&gt;Alchemy&lt;/strong&gt;固件上取得的巨大成功，有了转商业运营赚钱的想法，但限于GPL协议，又不得不开源，想出的变通做法就是，让用户每年交20美元的订阅费，付费用户可以进入论坛享用商用版固件，而免费用户只有使用更新较慢的版本，Alchemy社区内也有人看不惯这种收费行为，于是自行修改Alchemy然后对外发布；&lt;/li&gt;&#xA;&lt;li&gt;2005年1月22日，Sebastian Gottschall(又叫BrainSlayer)基于&lt;strong&gt;Alchemy&lt;/strong&gt; &lt;strong&gt;v16&lt;/strong&gt;固件开发了第一版&lt;strong&gt;DD-WRT v16&lt;/strong&gt;固件，版本号沿用Alchemy的，DD是德国东部 Dresden城市的汽车牌照的缩写，该城市是DD-WRT开发组生活的地方；&lt;/li&gt;&#xA;&lt;li&gt;2005年2月，&lt;strong&gt;HyperWRT&lt;/strong&gt;原版停更， &lt;a href=&#34;https://www.zhihu.com/search?q=tofu&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1001410286%7D&#34;&gt;tofu&lt;/a&gt; 和  Thibor 两名开发者基于它继续开发，项目名为 &lt;strong&gt;HyperWRT +tofu&lt;/strong&gt; 和  &lt;strong&gt;HyperWRT Thibor&lt;/strong&gt;；&lt;/li&gt;&#xA;&lt;li&gt;2005年中，&lt;strong&gt;OpenWrt&lt;/strong&gt; 发布了名为 “experimental”的版本；&lt;/li&gt;&#xA;&lt;li&gt;2005年12月，&lt;strong&gt;&lt;a href=&#34;https://www.zhihu.com/search?q=DD-WRT+v23&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1001410286%7D&#34;&gt;DD-WRT v23&lt;/a&gt;&lt;strong&gt;发布，鉴于&lt;/strong&gt;Alchemy&lt;/strong&gt;社区的内斗和商业付费的风险，DD-WRT自v23开始将固件核心替换为了OpenWrt；&lt;/li&gt;&#xA;&lt;li&gt;2006年2月，HyperWRT+tofu停止开发，合并入&lt;strong&gt;HyperWRT Thibor&lt;/strong&gt;，后者开发至2008年2月停更；&lt;/li&gt;&#xA;&lt;li&gt;2006年12月， Jonathan Zarate发布了 &lt;strong&gt;Tomato(番茄，也简称TT)&lt;/strong&gt; 的第一个版本，基于&lt;strong&gt;HyperWRT&lt;/strong&gt;为Linksys WRT54G系列和Buffalo WHR-G54S系列机型定制更易用功能更强的固件，主要支持博通Broadcom的系列芯片；&lt;/li&gt;&#xA;&lt;li&gt;2007年1月，&lt;strong&gt;OpenWrt&lt;/strong&gt;发布了代号为White Russian的固件，这个版本之后的OpenWrt才变得越发流行；&lt;/li&gt;&#xA;&lt;li&gt;2008年7月14日，Eric Bishop基于OpenWrt Kamikaze(v7.x和v8.x)发布了**Gargoyle(&lt;a href=&#34;https://www.zhihu.com/search?q=%E7%9F%B3%E5%83%8F%E9%AC%BC&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1001410286%7D&#34;&gt;石像鬼&lt;/a&gt;)**固件的第一个稳定版v1.0，加入了自己的包管理器，格式为 &lt;a href=&#34;https://www.zhihu.com/search?q=gpkg&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1001410286%7D&#34;&gt;gpkg&lt;/a&gt;；&lt;/li&gt;&#xA;&lt;li&gt;2008年7月26日，&lt;strong&gt;DD-WRT v24 SP1&lt;/strong&gt; 发布，然后至今停更，从2010年起DD-WRT社区诸多开发者在不断发布各种变体版本的固件；&lt;/li&gt;&#xA;&lt;li&gt;2010年，华硕ASUS发布了&lt;strong&gt;RT-N56U&lt;/strong&gt;路由器（具体发布日期没找到，华硕官网说RT-N56U获得了2010年的iF设计奖），该机型搭载的是&lt;strong&gt;联发科MTK&lt;/strong&gt;的芯片；&lt;/li&gt;&#xA;&lt;li&gt;2010年6月28日，&lt;strong&gt;Tomato(番茄)&lt;/strong&gt; 官方更新了v1.28稳定版，然后至今还未更新；&lt;/li&gt;&#xA;&lt;li&gt;2011年1月，华硕在CES上发布了&lt;strong&gt;RT-N66U&lt;/strong&gt;路由器，该机型最早使用&lt;strong&gt;Asuswrt&lt;/strong&gt;固件的（华硕更早机器搭载的固件还没统一成型），&lt;strong&gt;Asuswrt&lt;/strong&gt;是基于Tomato-RT/Tomato-USB开发，主要支持博通Broadcom芯片和部分高通Atheros芯片；同月，高通Qualcomm收购创锐讯&lt;strong&gt;Atheros&lt;/strong&gt;为全资子公司，后者主要研发无线通讯芯片；&lt;/li&gt;&#xA;&lt;li&gt;2012年5月3日，俄罗斯人Andy &lt;strong&gt;Padavan(老毛子)&lt;strong&gt;创建了&lt;/strong&gt;rt-n56u&lt;/strong&gt;项目并提交初始化代码，基于 &lt;a href=&#34;https://www.zhihu.com/search?q=Asuswrt-Merlin&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1001410286%7D&#34;&gt;Asuswrt-Merlin&lt;/a&gt; 固件开发，由于RT-N56U搭载的是&lt;a href=&#34;https://www.zhihu.com/search?q=%E8%81%94%E5%8F%91%E7%A7%91%E8%8A%AF%E7%89%87&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1001410286%7D&#34;&gt;联发科芯片&lt;/a&gt;，后来Padavan被移植到多款基于联发科芯片的路由；&lt;/li&gt;&#xA;&lt;li&gt;2012年6月19日，加拿大人Eric Sauvageau创建了&lt;strong&gt;Asuswrt-Merlin(梅林)&lt;/strong&gt; 项目并提交了初始化代码，基于 Asuswrt  3.0.0.3.144；&lt;/li&gt;&#xA;&lt;li&gt;2013年10月，Cisco公司将Linksys卖给了Belkin公司，Linksys至此与思科无关，新东家Belkin保留了Linksys原品牌；&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;2013年-2016年，国内各大神开始在论坛活跃最频繁的时间段，发布相关教程和他们基于OpenWrt/LEDE、Tomato、DD等定制的固件，Lean、Lintel、&lt;a href=&#34;https://www.zhihu.com/search?q=%E4%BD%90%E9%A1%BB%E4%B9%8B%E7%94%B7&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1001410286%7D&#34;&gt;佐须之男&lt;/a&gt;都出名在这个时段；&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;2016年3月1日，佐须之男在Tomato基础上(应该是基于Tomato v1.28)，发布了**Tomato Phoenix(不死鸟)**的第一个公开测试版，主要增加了Tomato对联发科芯片的支持；&lt;/li&gt;&#xA;&lt;li&gt;2016年5月，OpenWrt 的部分核心成员基于OpenWrt另起炉灶开了&lt;strong&gt;LEDE&lt;/strong&gt;项目，主要因看不惯既有社区的乌烟瘴气和旧源码的质量；&lt;/li&gt;&#xA;&lt;li&gt;2017年1月24日，Lintel宣布因团队接手Newifi系列路由的固件维护，而**PandoraBox(潘多拉)**停止更新，该固件是为了照顾部分英文水平较菜和动手能力较差的玩家，对OpenWRT/LEDE做了本地化，并预编译或安装了大陆用户常用的某些功能，最早发布在 &lt;a href=&#34;https://link.zhihu.com/?target=http%3A//openwrt.org.cn/&#34;&gt;openwrt.org.cn&lt;/a&gt;上；&lt;/li&gt;&#xA;&lt;li&gt;2017年2月，LEDE的第一个稳定版发布，版本号为v17.01.0，LEDE的主要改进是重构了OpenWrt代码，替换了文件系统改为JFFS2，更友好的Web界面LuCI，更多的opkg包支持等；&lt;/li&gt;&#xA;&lt;li&gt;2018年1月，OpenWrt 老项目和离家出走的LEDE决定复合，名为&lt;strong&gt;OpenWrt/LEDE&lt;/strong&gt;，在原LEDE团队的规矩和主导下运作，但名字仍叫&lt;strong&gt;OpenWrt&lt;/strong&gt;；&lt;/li&gt;&#xA;&lt;li&gt;2018-2019年，OpenWrt和LEDE主要在版本号为v18.x的代码上完成合并工作，DD-WRT、Asuswrt-Merlin、Padavan等活跃项目也在持续更新。&lt;/li&gt;&#xA;&lt;li&gt;现在，随着&lt;a href=&#34;https://www.zhihu.com/search?q=%E8%B7%AF%E7%94%B1%E5%9B%BA%E4%BB%B6&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1001410286%7D&#34;&gt;路由固件&lt;/a&gt;定制、开发技术的普及，各路论坛里基于OpenWrt/LEDE、DD-WRT、Merlin、Padavan、Tomato等知名固件的各种私人订制层出不穷……&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;参考资料&lt;/strong&gt;：&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenWRT Luci 初探</title>
      <link>http://shanks.link/blog/2022/10/10/openwrt-luci-%E5%88%9D%E6%8E%A2/</link>
      <pubDate>Mon, 10 Oct 2022 09:17:20 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/10/openwrt-luci-%E5%88%9D%E6%8E%A2/</guid>
      <description>&lt;p&gt;什么是Luci呢？先直观的感受一下，打开web浏览器，输入R2的网关地址，然后出现了一个web登录界面，这个就是Openwrt Luci的应用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenWRT 相关资料汇总</title>
      <link>http://shanks.link/blog/2022/10/09/openwrt-%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/</link>
      <pubDate>Sun, 09 Oct 2022 14:42:05 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/09/openwrt-%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.openwrt.org&#34;&gt;官网&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-user/start&#34;&gt;开发者参考手册目录&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://git.openwrt.org/&#34;&gt;软件包的源码仓库&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://lxr.openwrt.org/source/&#34;&gt;另一些官方软件&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://downloads.openwrt.org/&#34;&gt;固件以及相关配置下载&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>OpenWrt 编译杂记</title>
      <link>http://shanks.link/blog/2022/09/29/openwrt-%E7%BC%96%E8%AF%91%E6%9D%82%E8%AE%B0/</link>
      <pubDate>Thu, 29 Sep 2022 14:32:47 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/29/openwrt-%E7%BC%96%E8%AF%91%E6%9D%82%E8%AE%B0/</guid>
      <description>&lt;h4 id=&#34;概述&#34;&gt;概述：&lt;/h4&gt;&#xA;&lt;p&gt;​&#x9;根据github大神提供的教程，用人家的编译代码输入命令行逐步执行就好了！（中间输入自己路由的cpu架构和cpu型号以及路由的型号），如果要装插件，位置在luci -application里，自己选择就好了了！&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenWrt 代码目录简介</title>
      <link>http://shanks.link/blog/2022/09/13/openwrt-%E4%BB%A3%E7%A0%81%E7%9B%AE%E5%BD%95%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 13 Sep 2022 10:29:11 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/09/13/openwrt-%E4%BB%A3%E7%A0%81%E7%9B%AE%E5%BD%95%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h2 id=&#34;顶层目录&#34;&gt;顶层目录&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20191011223104301.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;目 录&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;含 义&lt;/strong&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;config&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;编译选项配置文件，包含全局编译设置、开发人员编译设置、目标文件格式设置和内核 编译设置等 4 部分&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;include&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;包含准备环境脚本、下载补丁脚本、编译 Makefile 以及编译指令等&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;package&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;各种功能的软件包，软件包仅包含 Makefile 和修改补丁及配置文件。其中 Makefile 包含 源代码真正的地址及 MD5 值。OpenWrt 社区的修改代码以补丁包形式管理，package 只 保存一些常用的软件包&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;scripts&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;包含准备环境脚本、下载补丁脚本、编译 Makefile 以及编译指令等&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;target&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;指的是嵌入式平台，包括特定嵌入式平台的内容&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;toolchain&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;编译器和C库等（交叉编译工具），例如包含编译工具gcc和glibc库&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;tools&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;通用命令/工具，用来生成固件的辅助工具，如打补丁工具patch、编译工具make及squashfs等&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;config目录&#34;&gt;config目录&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;目录下存放的是编译配置文件，是 OpenWrt 15.05 的新增目录，是将一些编译选项配置文件放在此处，包含全局编译设置、开发人员编译设置、目标文件格式设置和内核编译设置等4部分。&lt;/li&gt;&#xA;&lt;li&gt;编译源码时，输入 make defconfig 命令，这个目录下的配置文件会被集中读取并生成一个 .config 配置文件，该文件在下面会介绍。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;包含文件&#34;&gt;包含文件&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20191011222922127.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
