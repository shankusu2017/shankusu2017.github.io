<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Golang编程语言知识介绍</title>
    <link>http://shanks.link/categories/go/</link>
    <description>Recent content in go on Golang编程语言知识介绍</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 07 Dec 2023 10:34:12 +0800</lastBuildDate><atom:link href="http://shanks.link/categories/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go 常用命令 Go Common commands</title>
      <link>http://shanks.link/blog/2023/12/07/go-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-go-common-commands/</link>
      <pubDate>Thu, 07 Dec 2023 10:34:12 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2023/12/07/go-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-go-common-commands/</guid>
      <description>一键安装 go one key install go apt-get install go 设置代理 set proxy go env -w GOPROXY=https://goproxy.cn,direct 构建 go.mod create go.mod go mod init xxx.com/xxx 设置模块代理 在 go.mod 中手动添加</description>
    </item>
    
    <item>
      <title>Copy a slice in Go</title>
      <link>http://shanks.link/blog/2023/03/13/copy-a-slice-in-go/</link>
      <pubDate>Mon, 13 Mar 2023 13:29:22 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2023/03/13/copy-a-slice-in-go/</guid>
      <description>To duplicate a slice in Go, getting a deep copy of its contents, you need to either use the built-in copy() function, or create a new empty slice and add all the elements of the first slice to it using the append() function. Because of how slices are built in Go, assigning one slice to another only makes a shallow copy, and you should not use it if you want</description>
    </item>
    
    <item>
      <title>golang 中 channel 的详细使用、使用注意事项及死锁分析</title>
      <link>http://shanks.link/blog/2023/03/13/golang-%E4%B8%AD-channel-%E7%9A%84%E8%AF%A6%E7%BB%86%E4%BD%BF%E7%94%A8%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E5%8F%8A%E6%AD%BB%E9%94%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 13 Mar 2023 13:29:22 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2023/03/13/golang-%E4%B8%AD-channel-%E7%9A%84%E8%AF%A6%E7%BB%86%E4%BD%BF%E7%94%A8%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E5%8F%8A%E6%AD%BB%E9%94%81%E5%88%86%E6%9E%90/</guid>
      <description>golang 中 channel 的详细使用、使用注意事项及死锁分析 什么是 channel 管道# 它是一个数据管道，可以往里面写数据，从里面读数据。 channel 是 goroutine 之间数据通信桥梁，而且是线程安</description>
    </item>
    
    <item>
      <title>golang 获取本机网卡IP、网关，可以通过IP地址来进行路由选择（多网卡）</title>
      <link>http://shanks.link/blog/2022/12/07/golang-%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%BA%E7%BD%91%E5%8D%A1ip%E7%BD%91%E5%85%B3%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87ip%E5%9C%B0%E5%9D%80%E6%9D%A5%E8%BF%9B%E8%A1%8C%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9%E5%A4%9A%E7%BD%91%E5%8D%A1/</link>
      <pubDate>Wed, 07 Dec 2022 13:23:06 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/12/07/golang-%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%BA%E7%BD%91%E5%8D%A1ip%E7%BD%91%E5%85%B3%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87ip%E5%9C%B0%E5%9D%80%E6%9D%A5%E8%BF%9B%E8%A1%8C%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9%E5%A4%9A%E7%BD%91%E5%8D%A1/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;syscall&amp;#34; &amp;#34;net&amp;#34; &amp;#34;unsafe&amp;#34; &amp;#34;sort&amp;#34; ) type rtInfo struct { Dst net.IPNet Gateway, PrefSrc net.IP OutputIface uint32 Priority uint32 } type routeSlice []*rtInfo type router struct { ifaces []net.Interface addrs []net.IP v4 routeSlice } func getRouteInfo() (*router, error) { rtr := &amp;amp;router{} tab, err := syscall.NetlinkRIB(syscall.RTM_GETROUTE, syscall.AF_INET) if err != nil { return nil, err } msgs, err := syscall.ParseNetlinkMessage(tab) if err != nil { return</description>
    </item>
    
    <item>
      <title>Installing Go from source and cross compile</title>
      <link>http://shanks.link/blog/2022/11/08/installing-go-from-source-and-cross-compile/</link>
      <pubDate>Tue, 08 Nov 2022 13:53:12 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/11/08/installing-go-from-source-and-cross-compile/</guid>
      <description>This topic describes how to build and run Go from source code. To install with an installer, see Download and install. Introduction Go is an open source project, distributed under a BSD-style license. This document explains how to check out the sources, build them on your own machine, and run them. Most users don&amp;rsquo;t need to do this, and will instead install from precompiled binary packages as described in Download</description>
    </item>
    
    <item>
      <title>Go更细粒度的读写锁设计</title>
      <link>http://shanks.link/blog/2022/07/17/go%E6%9B%B4%E7%BB%86%E7%B2%92%E5%BA%A6%E7%9A%84%E8%AF%BB%E5%86%99%E9%94%81%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sun, 17 Jul 2022 21:54:38 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/07/17/go%E6%9B%B4%E7%BB%86%E7%B2%92%E5%BA%A6%E7%9A%84%E8%AF%BB%E5%86%99%E9%94%81%E8%AE%BE%E8%AE%A1/</guid>
      <description>Go更细粒度的读写锁设计 在《Go精妙的互斥锁设计》一文中，我们详细地讲解了互斥锁的实现原理。互斥锁为了避免竞争条件，它只允许一个线程进入代码</description>
    </item>
    
    <item>
      <title>go语言调度器源代码情景分析之九：操作系统线程及线程调度</title>
      <link>http://shanks.link/blog/2022/07/17/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%B9%9D%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BA%BF%E7%A8%8B%E5%8F%8A%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Sun, 17 Jul 2022 21:54:38 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/07/17/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%B9%9D%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BA%BF%E7%A8%8B%E5%8F%8A%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-04-25 本文是《go调度器源代码情景分析》系列 第一章 预备知识的第九小节。 要深入理解goroutine的调度器，就需要对</description>
    </item>
    
    <item>
      <title>深入了解map</title>
      <link>http://shanks.link/blog/2022/04/24/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3map/</link>
      <pubDate>Sun, 24 Apr 2022 22:19:30 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/04/24/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3map/</guid>
      <description>摘要 map 通过 hasTable 实现了我们最常见的 key-value 存储，能快速的对数据集增删查改。同时 Go 里的 map 也有很多特殊的地方，比如它的无序性、并发不安全等。今天，就让我们</description>
    </item>
    
    <item>
      <title>Golang系列之channel全面解析</title>
      <link>http://shanks.link/blog/2022/04/24/golang%E7%B3%BB%E5%88%97%E4%B9%8Bchannel%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Sun, 24 Apr 2022 18:39:34 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/04/24/golang%E7%B3%BB%E5%88%97%E4%B9%8Bchannel%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/</guid>
      <description>原文链接 前言 channel 是 goroutine 与 goroutine 之间通信的重要桥梁，借助 channel，我们能很轻易的写出一个多协程通信程序。今天，我们就来看看这个 channel 的常用用法以及底</description>
    </item>
    
    <item>
      <title>Goroutinue理解</title>
      <link>http://shanks.link/blog/2022/04/24/goroutinue%E7%90%86%E8%A7%A3/</link>
      <pubDate>Sun, 24 Apr 2022 15:53:47 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/04/24/goroutinue%E7%90%86%E8%A7%A3/</guid>
      <description>原文链接 Go语言最大的特色就是从语言层面支持并发（Goroutine），Goroutine是Go中最基本的执行单元。事实上每一个Go程序至少</description>
    </item>
    
    <item>
      <title>Go面试总结</title>
      <link>http://shanks.link/blog/2022/04/24/go%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 24 Apr 2022 15:08:40 +0800</pubDate>
      
      <guid>http://shanks.link/blog/2022/04/24/go%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</guid>
      <description>原文链接 相比较于其他语言, Go 有什么优势或者特点？ Go 允许跨平台编译，编译出来的是二进制的可执行文件，直接部署在对应系统上即可运行。 Go 在语言层次</description>
    </item>
    
    <item>
      <title>golang 中slice 、map、chan作为函数参数分析</title>
      <link>http://shanks.link/blog/2021/08/20/golang-%E4%B8%ADslice-mapchan%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 20 Aug 2021 11:07:45 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/20/golang-%E4%B8%ADslice-mapchan%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%88%86%E6%9E%90/</guid>
      <description>golang 中slice 、map、chan作为函数参数分析 写这篇文章之前考虑一个问题： go里面都是值传递，不存在引用传递？ https://cloud.tencent.com/developer/article/1416563 先来总结一下slice、m</description>
    </item>
    
    <item>
      <title>Golang知识小结</title>
      <link>http://shanks.link/blog/2021/08/10/golang%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Tue, 10 Aug 2021 20:27:06 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/10/golang%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93/</guid>
      <description>string string类型采用UTF-8编码，且不可修的，len返回byte数量而不是字符数量，eg(len(你好)==6 数组和slice 数组在函数</description>
    </item>
    
    <item>
      <title>Go学习建议</title>
      <link>http://shanks.link/blog/2021/08/04/go%E5%AD%A6%E4%B9%A0%E5%BB%BA%E8%AE%AE/</link>
      <pubDate>Wed, 04 Aug 2021 20:10:55 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/08/04/go%E5%AD%A6%E4%B9%A0%E5%BB%BA%E8%AE%AE/</guid>
      <description>如果学习 Go 整理了目前市面上的各类图书，特别是开源的图书，阅读学习建议分享给你 入门建议 Go 语言入门图书挺多的，根据我的了解和大家的反馈、讨论，比</description>
    </item>
    
    <item>
      <title>gdb 提示 coredump 文件 truncated 问题排查</title>
      <link>http://shanks.link/blog/2021/07/27/gdb-%E6%8F%90%E7%A4%BA-coredump-%E6%96%87%E4%BB%B6-truncated-%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</link>
      <pubDate>Tue, 27 Jul 2021 18:28:34 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/27/gdb-%E6%8F%90%E7%A4%BA-coredump-%E6%96%87%E4%BB%B6-truncated-%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</guid>
      <description>gdb 提示 coredump 文件 truncated 问题排查 本文选自“字节跳动基础架构实践”系列文章。 “字节跳动基础架构实践”系列文章是由字节跳动基础架构部门各技术团队及专家倾力</description>
    </item>
    
    <item>
      <title>go的一次故障排除</title>
      <link>http://shanks.link/blog/2021/07/27/go%E7%9A%84%E4%B8%80%E6%AC%A1%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4/</link>
      <pubDate>Tue, 27 Jul 2021 18:25:31 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/27/go%E7%9A%84%E4%B8%80%E6%AC%A1%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4/</guid>
      <description>“���”引发的线上事故 最近遇到了一起依赖升级 + 异常数据引发的线上事故，教训惨痛，本文对此进行回故和总结。 背景 起因是我们使用的服务框架版本比</description>
    </item>
    
    <item>
      <title>字节跳动在 Go 网络库上的实践</title>
      <link>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%9C%A8-go-%E7%BD%91%E7%BB%9C%E5%BA%93%E4%B8%8A%E7%9A%84%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 27 Jul 2021 17:11:01 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%9C%A8-go-%E7%BD%91%E7%BB%9C%E5%BA%93%E4%B8%8A%E7%9A%84%E5%AE%9E%E8%B7%B5/</guid>
      <description>字节跳动在 Go 网络库上的实践 本文选自“字节跳动基础架构实践”系列文章。 “字节跳动基础架构实践”系列文章是由字节跳动基础架构部门各技术团队及专家</description>
    </item>
    
    <item>
      <title>golang 的channels 行为</title>
      <link>http://shanks.link/blog/2021/07/19/golang-%E7%9A%84channels-%E8%A1%8C%E4%B8%BA/</link>
      <pubDate>Mon, 19 Jul 2021 16:22:27 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/19/golang-%E7%9A%84channels-%E8%A1%8C%E4%B8%BA/</guid>
      <description>简介 当我第一次使用 Go 的 channels 工作的时候，我犯了一个错误，把 channels 考虑为一个数据结构。我把 channels 看作为 goroutines 之间提供自动同步访问的队列。这种结构上的理解导致我</description>
    </item>
    
    <item>
      <title>GO 开发者对 GO 初学者的建议</title>
      <link>http://shanks.link/blog/2021/07/19/go-%E5%BC%80%E5%8F%91%E8%80%85%E5%AF%B9-go-%E5%88%9D%E5%AD%A6%E8%80%85%E7%9A%84%E5%BB%BA%E8%AE%AE/</link>
      <pubDate>Mon, 19 Jul 2021 16:02:51 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/19/go-%E5%BC%80%E5%8F%91%E8%80%85%E5%AF%B9-go-%E5%88%9D%E5%AD%A6%E8%80%85%E7%9A%84%E5%BB%BA%E8%AE%AE/</guid>
      <description>注：原文地址为 Advise from Go developers to Go programming newbies 以促进 India 的 go 编程作为 GopherConIndia 承诺的一部分。我们采访了 40 位 Gophers（一个 Gopher 代表一个 GO 项目或是任何地方的 GO 程序员）</description>
    </item>
    
    <item>
      <title>Go 为什么这么快 GPM模型简介</title>
      <link>http://shanks.link/blog/2021/07/08/go-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%B9%88%E5%BF%AB-gpm%E6%A8%A1%E5%9E%8B%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 08 Jul 2021 11:28:22 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/07/08/go-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%B9%88%E5%BF%AB-gpm%E6%A8%A1%E5%9E%8B%E7%AE%80%E4%BB%8B/</guid>
      <description>作者：joellwang，腾讯 CSIG 后台开发工程师 本文主要介绍了 Go 程序为了实现极高的并发性能，其内部调度器的实现架构（G-P-M 模型），以及为了</description>
    </item>
    
    <item>
      <title>如何避免Go变量被GC</title>
      <link>http://shanks.link/blog/2021/06/15/%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8Dgo%E5%8F%98%E9%87%8F%E8%A2%ABgc/</link>
      <pubDate>Tue, 15 Jun 2021 17:15:06 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/06/15/%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8Dgo%E5%8F%98%E9%87%8F%E8%A2%ABgc/</guid>
      <description>Illustration created for “A Journey With Go”, made from the original Go Gopher, created by Renee French. 本文基于 Go 1.13。 在 Go 中，我们不需要自己管理内存分配和释放。然而，有些时候我们需要对程序进行更细</description>
    </item>
    
    <item>
      <title>Go内存分配器的核心思想</title>
      <link>http://shanks.link/blog/2021/05/06/go%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8%E7%9A%84%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3/</link>
      <pubDate>Thu, 06 May 2021 17:45:50 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/06/go%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8%E7%9A%84%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3/</guid>
      <description>1、内存分配器的核心思想 Go 的内存分配器核心思想是将内存使用多级管理，降低锁的粒度。每个线程都有自己的本地内存，使用时先从线程本地的内存池进行</description>
    </item>
    
    <item>
      <title>Go工具之generate</title>
      <link>http://shanks.link/blog/2021/05/06/go%E5%B7%A5%E5%85%B7%E4%B9%8Bgenerate/</link>
      <pubDate>Thu, 06 May 2021 17:13:09 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/06/go%E5%B7%A5%E5%85%B7%E4%B9%8Bgenerate/</guid>
      <description>Go语言提供了一系列强大的工具，灵活使用这些工具，能够让我们的项目开发更加容易，工具集包含如下。 bug start a bug report build compile packages and dependencies clean remove object files and cached files doc show documentation for package</description>
    </item>
    
    <item>
      <title>Go是如何设计Map的</title>
      <link>http://shanks.link/blog/2021/05/06/go%E6%98%AF%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1map%E7%9A%84/</link>
      <pubDate>Thu, 06 May 2021 15:36:51 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/05/06/go%E6%98%AF%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1map%E7%9A%84/</guid>
      <description>由于本文篇幅较长，故将目录整理如下 ** ** 什么是Map 维基百科的定义 In computer science, an associative array, map, symbol table, or dictionary is an abstract data type composed of a collection of (key, value) pairs, such that each possible key appears at most once in the collection. 说明</description>
    </item>
    
    <item>
      <title>详解内联优化</title>
      <link>http://shanks.link/blog/2021/04/30/%E8%AF%A6%E8%A7%A3%E5%86%85%E8%81%94%E4%BC%98%E5%8C%96/</link>
      <pubDate>Fri, 30 Apr 2021 17:54:15 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/30/%E8%AF%A6%E8%A7%A3%E5%86%85%E8%81%94%E4%BC%98%E5%8C%96/</guid>
      <description>详解内联优化 为了保证程序的执行高效与安全，现代编译器并不会将程序员的代码直接翻译成相应地机器码，它需要做一系列的检查与优化。Go编译器默认做</description>
    </item>
    
    <item>
      <title>Go精妙的互斥锁设计</title>
      <link>http://shanks.link/blog/2021/04/30/go%E7%B2%BE%E5%A6%99%E7%9A%84%E4%BA%92%E6%96%A5%E9%94%81%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Fri, 30 Apr 2021 16:46:29 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/30/go%E7%B2%BE%E5%A6%99%E7%9A%84%E4%BA%92%E6%96%A5%E9%94%81%E8%AE%BE%E8%AE%A1/</guid>
      <description>*Some people, when confronted with a problem, think, “I know, I’ll use threads,” and then two they hav erpoblesms.* 1. 竞争条件 多线程程序在多核CPU机器上访问共享资源时，难免会遇到问题。我们可以</description>
    </item>
    
    <item>
      <title>Go中看似简单的WaitGroup源码设计，竟然暗含这么多知识？</title>
      <link>http://shanks.link/blog/2021/04/30/go%E4%B8%AD%E7%9C%8B%E4%BC%BC%E7%AE%80%E5%8D%95%E7%9A%84waitgroup%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E7%AB%9F%E7%84%B6%E6%9A%97%E5%90%AB%E8%BF%99%E4%B9%88%E5%A4%9A%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Fri, 30 Apr 2021 16:30:32 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/30/go%E4%B8%AD%E7%9C%8B%E4%BC%BC%E7%AE%80%E5%8D%95%E7%9A%84waitgroup%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E7%AB%9F%E7%84%B6%E6%9A%97%E5%90%AB%E8%BF%99%E4%B9%88%E5%A4%9A%E7%9F%A5%E8%AF%86/</guid>
      <description>Go中看似简单的WaitGroup源码设计，竟然暗含这么多知识？ Go语言提供的协程goroutine可以让我们很容易地写出多线程程序，但是，</description>
    </item>
    
    <item>
      <title>如何有效地测试Go代码</title>
      <link>http://shanks.link/blog/2021/04/30/%E5%A6%82%E4%BD%95%E6%9C%89%E6%95%88%E5%9C%B0%E6%B5%8B%E8%AF%95go%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Fri, 30 Apr 2021 16:21:08 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/30/%E5%A6%82%E4%BD%95%E6%9C%89%E6%95%88%E5%9C%B0%E6%B5%8B%E8%AF%95go%E4%BB%A3%E7%A0%81/</guid>
      <description>如何有效地测试Go代码 单元测试 如果把开发程序比作盖房子，那么我们必须确保所有的用料都是合格的，否则盖起来的房子就会存在问题。对于程序而言，我</description>
    </item>
    
    <item>
      <title>同步原理的基石</title>
      <link>http://shanks.link/blog/2021/04/30/%E5%90%8C%E6%AD%A5%E5%8E%9F%E7%90%86%E7%9A%84%E5%9F%BA%E7%9F%B3/</link>
      <pubDate>Fri, 30 Apr 2021 15:56:17 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/30/%E5%90%8C%E6%AD%A5%E5%8E%9F%E7%90%86%E7%9A%84%E5%9F%BA%E7%9F%B3/</guid>
      <description>同步原语的基石 Go是一门以并发编程见长的语言，它提供了一系列的同步原语方便开发者使用，例如sync包下的Mutex、RWMutex、Wait</description>
    </item>
    
    <item>
      <title>Golang append扩容机制</title>
      <link>http://shanks.link/blog/2021/04/30/golang-append%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Fri, 30 Apr 2021 11:37:56 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/30/golang-append%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/</guid>
      <description>append扩容机制 在《切片传递的隐藏危机》一文，小菜刀有简单地提及到切片扩容的问题。在读者讨论群，有人举了以下例子，并想得到一个合理的回答</description>
    </item>
    
    <item>
      <title>浅谈逃逸分析</title>
      <link>http://shanks.link/blog/2021/04/30/%E6%B5%85%E8%B0%88%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 30 Apr 2021 11:31:37 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/30/%E6%B5%85%E8%B0%88%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</guid>
      <description>详解逃逸分析 Go是一门带有垃圾回收的现代语言，它抛弃了传统C/C++的开发者需要手动管理内存的方式，实现了内存的主动申请和释放的管理。Go的</description>
    </item>
    
    <item>
      <title>Once函数单次调用</title>
      <link>http://shanks.link/blog/2021/04/29/once%E5%87%BD%E6%95%B0%E5%8D%95%E6%AC%A1%E8%B0%83%E7%94%A8/</link>
      <pubDate>Thu, 29 Apr 2021 17:59:10 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/29/once%E5%87%BD%E6%95%B0%E5%8D%95%E6%AC%A1%E8%B0%83%E7%94%A8/</guid>
      <description>认识单例 超超：您好，面试官~ 面试官：你好，你平时开发是用 windows 还是 linux 居多？ 超超：￣□￣｜｜我平时都是用windows开发的。 面试官：那你知道 windows 的</description>
    </item>
    
    <item>
      <title>切片传递的隐藏危机</title>
      <link>http://shanks.link/blog/2021/04/29/%E5%88%87%E7%89%87%E4%BC%A0%E9%80%92%E7%9A%84%E9%9A%90%E8%97%8F%E5%8D%B1%E6%9C%BA/</link>
      <pubDate>Thu, 29 Apr 2021 11:47:34 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/29/%E5%88%87%E7%89%87%E4%BC%A0%E9%80%92%E7%9A%84%E9%9A%90%E8%97%8F%E5%8D%B1%E6%9C%BA/</guid>
      <description>切片传递的隐藏危机 在Go的源码库或者其他开源项目中，会发现有些函数在需要用到切片入参时，它采用是指向切片类型的指针，而非切片类型。这里未免会</description>
    </item>
    
    <item>
      <title>一文读懂channel设计</title>
      <link>http://shanks.link/blog/2021/04/29/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82channel%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Thu, 29 Apr 2021 11:30:12 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/29/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82channel%E8%AE%BE%E8%AE%A1/</guid>
      <description>在Go中，要理解channel，首先需要认识goroutine。 为什么会有goroutine 现代操作系统中为我们提供了三种基本的构造并发程序</description>
    </item>
    
    <item>
      <title>Go函数调用惯例</title>
      <link>http://shanks.link/blog/2021/04/28/go%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%83%AF%E4%BE%8B/</link>
      <pubDate>Wed, 28 Apr 2021 11:59:41 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/28/go%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%83%AF%E4%BE%8B/</guid>
      <description>Go函数调用惯例 本文旨在探讨Go函数中的一个问题：**为什么Go函数能支持多参数返回，而C/C++、java不行？**这其实牵涉到了一个叫做</description>
    </item>
    
    <item>
      <title>Go的string与[]byte转换原理</title>
      <link>http://shanks.link/blog/2021/04/27/go%E7%9A%84string%E4%B8%8Ebyte%E8%BD%AC%E6%8D%A2%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 27 Apr 2021 15:13:15 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/27/go%E7%9A%84string%E4%B8%8Ebyte%E8%BD%AC%E6%8D%A2%E5%8E%9F%E7%90%86/</guid>
      <description>string类型和[]byte类型是我们编程时最常使用到的数据结构。本文将探讨两者之间的转换方式，通过分析它们之间的内在联系来拨开迷雾。 两种</description>
    </item>
    
    <item>
      <title>Go工具之vet静态诊断器</title>
      <link>http://shanks.link/blog/2021/04/27/go%E5%B7%A5%E5%85%B7%E4%B9%8Bvet%E9%9D%99%E6%80%81%E8%AF%8A%E6%96%AD%E5%99%A8/</link>
      <pubDate>Tue, 27 Apr 2021 15:06:32 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/27/go%E5%B7%A5%E5%85%B7%E4%B9%8Bvet%E9%9D%99%E6%80%81%E8%AF%8A%E6%96%AD%E5%99%A8/</guid>
      <description>Go工具之vet——静态诊断器 go的vet工具是go代码静态诊断器，可以用以检查go项目中可通过编译但仍可能存在错误的代码，例如无法访问的代</description>
    </item>
    
    <item>
      <title>不能忽略GoRoutinue的启动时间</title>
      <link>http://shanks.link/blog/2021/04/27/%E4%B8%8D%E8%83%BD%E5%BF%BD%E7%95%A5goroutinue%E7%9A%84%E5%90%AF%E5%8A%A8%E6%97%B6%E9%97%B4/</link>
      <pubDate>Tue, 27 Apr 2021 14:48:35 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/27/%E4%B8%8D%E8%83%BD%E5%BF%BD%E7%95%A5goroutinue%E7%9A%84%E5%90%AF%E5%8A%A8%E6%97%B6%E9%97%B4/</guid>
      <description>不要忽略goroutine的启动时间 项目中需要将数据推给多个服务器，大致如下 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sync&amp;#34; ) func mockSendToServer(url string) { fmt.Printf(&amp;#34;server url: %s\n&amp;#34;, url) } func main() { urls := []string{&amp;#34;0.0.0.0:5000&amp;#34;, &amp;#34;0.0.0.0:6000&amp;#34;, &amp;#34;0.0.0.0:7000&amp;#34;} wg := sync.WaitGroup{} for _, url := range</description>
    </item>
    
    <item>
      <title>深入理解sync.Once</title>
      <link>http://shanks.link/blog/2021/04/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3sync.once/</link>
      <pubDate>Tue, 27 Apr 2021 11:43:13 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3sync.once/</guid>
      <description>深入理解sync.Once sync.Once是让函数方法只被调用执行一次的实现，其最常应用于单例模式之下，例如初始化系统配置、保持数据库唯一</description>
    </item>
    
    <item>
      <title>Go no copy 机制</title>
      <link>http://shanks.link/blog/2021/04/27/go-no-copy-%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 27 Apr 2021 11:11:13 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/27/go-no-copy-%E6%9C%BA%E5%88%B6/</guid>
      <description>no copy机制 小菜刀读Go源码时，发现一个高频注释语句“XXX must not be copied after first use“。例如sync包下的Pool、Cond、WaitGroup</description>
    </item>
    
    <item>
      <title>信号处理与Go程序的优雅退出</title>
      <link>http://shanks.link/blog/2021/04/26/%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E4%B8%8Ego%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%BC%98%E9%9B%85%E9%80%80%E5%87%BA/</link>
      <pubDate>Mon, 26 Apr 2021 19:00:14 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/26/%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E4%B8%8Ego%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%BC%98%E9%9B%85%E9%80%80%E5%87%BA/</guid>
      <description>信号处理与Go程序的优雅退出 学过计算机系统的人，应该知道异常控制流（ECF）。异常控制流发生在计算机系统的各个层次。比如，在硬件层，硬件检测</description>
    </item>
    
    <item>
      <title>深入理解syncMap</title>
      <link>http://shanks.link/blog/2021/04/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3syncmap/</link>
      <pubDate>Mon, 26 Apr 2021 18:45:00 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3syncmap/</guid>
      <description>深入理解sync.Map golang中内置了map关键字，但是它是非线程安全的。从go 1.9开始，标准库加入了sync.Map，提供用于并发</description>
    </item>
    
    <item>
      <title>Golang开发者学习图鉴</title>
      <link>http://shanks.link/blog/2021/04/26/golang%E5%BC%80%E5%8F%91%E8%80%85%E5%AD%A6%E4%B9%A0%E5%9B%BE%E9%89%B4/</link>
      <pubDate>Mon, 26 Apr 2021 18:08:01 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/26/golang%E5%BC%80%E5%8F%91%E8%80%85%E5%AD%A6%E4%B9%A0%E5%9B%BE%E9%89%B4/</guid>
      <description>Golang开发者学习图鉴 想成为一名优秀的Golang开发者，你知道需要掌握哪些技能吗？为了帮助你更好的上🚗，本文为你提供了2020版Go开</description>
    </item>
    
    <item>
      <title>Go并发控制</title>
      <link>http://shanks.link/blog/2021/04/26/go%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Mon, 26 Apr 2021 17:54:51 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/26/go%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</guid>
      <description>Golang并发控制简述 引言 Golang中通过go关键字就可开启一个goroutine，因此，在Go中可以轻松写出并发代码。但是，如何对这些</description>
    </item>
    
    <item>
      <title>Go之Sort排序</title>
      <link>http://shanks.link/blog/2021/04/26/go%E4%B9%8Bsort%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Mon, 26 Apr 2021 17:43:34 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/26/go%E4%B9%8Bsort%E6%8E%92%E5%BA%8F/</guid>
      <description>Golang之sort包 Go语言是一门非常简单优雅的语言，其源码更是其风格标杆。看源码，不仅能学习Go的设计哲学，了解如何调用库函数，同时帮</description>
    </item>
    
    <item>
      <title>Go语言内部包--控制包成员的对外暴露</title>
      <link>http://shanks.link/blog/2021/04/26/go%E8%AF%AD%E8%A8%80%E5%86%85%E9%83%A8%E5%8C%85-%E6%8E%A7%E5%88%B6%E5%8C%85%E6%88%90%E5%91%98%E7%9A%84%E5%AF%B9%E5%A4%96%E6%9A%B4%E9%9C%B2/</link>
      <pubDate>Mon, 26 Apr 2021 11:21:21 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/26/go%E8%AF%AD%E8%A8%80%E5%86%85%E9%83%A8%E5%8C%85-%E6%8E%A7%E5%88%B6%E5%8C%85%E6%88%90%E5%91%98%E7%9A%84%E5%AF%B9%E5%A4%96%E6%9A%B4%E9%9C%B2/</guid>
      <description>Go语言内部包&amp;ndash;控制包成员的对外暴露 Go 语言中的软件包推荐按照：组织名/项目名 的形式安排软件包的文件目录结构，一般「项目名」文件目</description>
    </item>
    
    <item>
      <title>Go 面试官：什么是协程，协程和线程的区别和联系？</title>
      <link>http://shanks.link/blog/2021/04/25/go-%E9%9D%A2%E8%AF%95%E5%AE%98%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%8F%E7%A8%8B%E5%8D%8F%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB/</link>
      <pubDate>Sun, 25 Apr 2021 11:17:04 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/25/go-%E9%9D%A2%E8%AF%95%E5%AE%98%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%8F%E7%A8%8B%E5%8D%8F%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB/</guid>
      <description>既要理解线程，还要讲解协程，并且诠释两者间的区别，但是由于提到线程，就必然涉及进程，因此本文将会同时梳理介绍 “进程、协程、协程” 三者的随笔知</description>
    </item>
    
    <item>
      <title>从底层到应用，想深入Map这篇文章千万不要错过！</title>
      <link>http://shanks.link/blog/2021/04/20/%E4%BB%8E%E5%BA%95%E5%B1%82%E5%88%B0%E5%BA%94%E7%94%A8%E6%83%B3%E6%B7%B1%E5%85%A5map%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E5%8D%83%E4%B8%87%E4%B8%8D%E8%A6%81%E9%94%99%E8%BF%87/</link>
      <pubDate>Tue, 20 Apr 2021 15:25:11 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/20/%E4%BB%8E%E5%BA%95%E5%B1%82%E5%88%B0%E5%BA%94%E7%94%A8%E6%83%B3%E6%B7%B1%E5%85%A5map%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E5%8D%83%E4%B8%87%E4%B8%8D%E8%A6%81%E9%94%99%E8%BF%87/</guid>
      <description>转载自上山打老虎的blog 超超经过了一番磨难通过了面试官单例的灵魂拷问，面试官貌似想通过一道场景应用题来考验超超对Golang的容器是否足够</description>
    </item>
    
    <item>
      <title>嗯，你觉得 Go 在什么时候会抢占 P？</title>
      <link>http://shanks.link/blog/2021/04/19/%E5%97%AF%E4%BD%A0%E8%A7%89%E5%BE%97-go-%E5%9C%A8%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%8A%A2%E5%8D%A0-p/</link>
      <pubDate>Mon, 19 Apr 2021 20:13:34 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/19/%E5%97%AF%E4%BD%A0%E8%A7%89%E5%BE%97-go-%E5%9C%A8%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%8A%A2%E5%8D%A0-p/</guid>
      <description>嗯，你觉得 Go 在什么时候会抢占 P？ 前几天我们有聊到《单核 CPU，开两个 Goroutine，其中一个死循环，会怎么样？》的问题，我们在一个细节部</description>
    </item>
    
    <item>
      <title>The Go runtime scheduler&#39;s clever way of dealing with system calls</title>
      <link>http://shanks.link/blog/2021/04/19/the-go-runtime-schedulers-clever-way-of-dealing-with-system-calls/</link>
      <pubDate>Mon, 19 Apr 2021 17:53:16 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/19/the-go-runtime-schedulers-clever-way-of-dealing-with-system-calls/</guid>
      <description>The Go runtime scheduler&amp;rsquo;s clever way of dealing with system calls One of Go&amp;rsquo;s signature features is goroutines, which are lightweight threads that are managed by the Go runtime. The Go runtime implements goroutines using a M:N work stealing scheduler to multiplex goroutines on to operating system threads. The scheduler has special terminology for three important entities; a G is a goroutine, an M is an OS thread (a &amp;lsquo;machine&amp;rsquo;),</description>
    </item>
    
    <item>
      <title>用 Go struct 不能犯的一个低级错误！</title>
      <link>http://shanks.link/blog/2021/04/18/%E7%94%A8-go-struct-%E4%B8%8D%E8%83%BD%E7%8A%AF%E7%9A%84%E4%B8%80%E4%B8%AA%E4%BD%8E%E7%BA%A7%E9%94%99%E8%AF%AF/</link>
      <pubDate>Sun, 18 Apr 2021 00:42:39 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/18/%E7%94%A8-go-struct-%E4%B8%8D%E8%83%BD%E7%8A%AF%E7%9A%84%E4%B8%80%E4%B8%AA%E4%BD%8E%E7%BA%A7%E9%94%99%E8%AF%AF/</guid>
      <description>转载自煎鱼的blog 用 Go struct 不能犯的一个低级错误！ 原创 陈煎鱼 脑子进煎鱼了 3天前 收录于话题 #Go45 #面试题13 大家好，我是煎鱼。 前段时间我分享了 《手撕</description>
    </item>
    
    <item>
      <title>Goroutine 泄露的 N 种方法，真刺激！</title>
      <link>http://shanks.link/blog/2021/04/18/goroutine-%E6%B3%84%E9%9C%B2%E7%9A%84-n-%E7%A7%8D%E6%96%B9%E6%B3%95%E7%9C%9F%E5%88%BA%E6%BF%80/</link>
      <pubDate>Sun, 18 Apr 2021 00:10:42 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/18/goroutine-%E6%B3%84%E9%9C%B2%E7%9A%84-n-%E7%A7%8D%E6%96%B9%E6%B3%95%E7%9C%9F%E5%88%BA%E6%BF%80/</guid>
      <description>转载自煎鱼的blog 大家好，我是煎鱼。 前几天分享 Go 群友提问的文章时，有读者在朋友圈下提到，希望我能够针对 Goroutine 泄露这块进行讲解，他在面试的时候经</description>
    </item>
    
    <item>
      <title>你知道 Go 结构体和结构体指针调用有什么区别吗？</title>
      <link>http://shanks.link/blog/2021/04/17/%E4%BD%A0%E7%9F%A5%E9%81%93-go-%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E7%BB%93%E6%9E%84%E4%BD%93%E6%8C%87%E9%92%88%E8%B0%83%E7%94%A8%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%E5%90%97/</link>
      <pubDate>Sat, 17 Apr 2021 23:59:23 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/17/%E4%BD%A0%E7%9F%A5%E9%81%93-go-%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E7%BB%93%E6%9E%84%E4%BD%93%E6%8C%87%E9%92%88%E8%B0%83%E7%94%A8%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%E5%90%97/</guid>
      <description>转载自煎鱼的blog 本期的男主角是《Go 结构体和结构体指针调用有什么区别》，希望对大家有所帮助，带来一些思考。 请在此处默念自己心目中的答案，</description>
    </item>
    
    <item>
      <title>再见 Go 面试官：单核 CPU，开两个 Goroutine，其中一个死循环，会怎么样</title>
      <link>http://shanks.link/blog/2021/04/17/%E5%86%8D%E8%A7%81-go-%E9%9D%A2%E8%AF%95%E5%AE%98%E5%8D%95%E6%A0%B8-cpu%E5%BC%80%E4%B8%A4%E4%B8%AA-goroutine%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%AD%BB%E5%BE%AA%E7%8E%AF%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7/</link>
      <pubDate>Sat, 17 Apr 2021 23:45:39 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/17/%E5%86%8D%E8%A7%81-go-%E9%9D%A2%E8%AF%95%E5%AE%98%E5%8D%95%E6%A0%B8-cpu%E5%BC%80%E4%B8%A4%E4%B8%AA-goroutine%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%AD%BB%E5%BE%AA%E7%8E%AF%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7/</guid>
      <description>以下转载自煎鱼的blog 最近金三银四，是面试的季节。在我的 Go 读者交流群里出现了许多小伙伴在讨论自己面试过程中所遇到的一些 Go 面试题。若大家有兴</description>
    </item>
    
    <item>
      <title>Go 内存泄露之痛，这篇把 Go timer.After 问题根因讲透了！</title>
      <link>http://shanks.link/blog/2021/04/17/go-%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%B9%8B%E7%97%9B%E8%BF%99%E7%AF%87%E6%8A%8A-go-timer.after-%E9%97%AE%E9%A2%98%E6%A0%B9%E5%9B%A0%E8%AE%B2%E9%80%8F%E4%BA%86/</link>
      <pubDate>Sat, 17 Apr 2021 23:33:30 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/17/go-%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%B9%8B%E7%97%9B%E8%BF%99%E7%AF%87%E6%8A%8A-go-timer.after-%E9%97%AE%E9%A2%98%E6%A0%B9%E5%9B%A0%E8%AE%B2%E9%80%8F%E4%BA%86/</guid>
      <description>转载自煎鱼的blog 前几天在公众号分享了一篇 Go timer 源码解析的文章《难以驾驭的 Go timer，一文带你参透计时器的奥秘》。 如果大家也有兴趣共同交流</description>
    </item>
    
    <item>
      <title>手撕 Go 面试官：Go 结构体是否可以比较，为什么？</title>
      <link>http://shanks.link/blog/2021/04/16/%E6%89%8B%E6%92%95-go-%E9%9D%A2%E8%AF%95%E5%AE%98go-%E7%BB%93%E6%9E%84%E4%BD%93%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E6%AF%94%E8%BE%83%E4%B8%BA%E4%BB%80%E4%B9%88/</link>
      <pubDate>Fri, 16 Apr 2021 18:58:13 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/16/%E6%89%8B%E6%92%95-go-%E9%9D%A2%E8%AF%95%E5%AE%98go-%E7%BB%93%E6%9E%84%E4%BD%93%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E6%AF%94%E8%BE%83%E4%B8%BA%E4%BB%80%E4%B9%88/</guid>
      <description>转载自煎鱼的blog 今天的男主角，是 Go 工程师的必修技能，也是极容易踩坑的地方，就是 “Go 面试题：Go 结构体（struct）是否可以比较？” 如</description>
    </item>
    
    <item>
      <title>难以驾驭的 Go timer，一文带你参透计时器的奥秘</title>
      <link>http://shanks.link/blog/2021/04/16/%E9%9A%BE%E4%BB%A5%E9%A9%BE%E9%A9%AD%E7%9A%84-go-timer%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E5%8F%82%E9%80%8F%E8%AE%A1%E6%97%B6%E5%99%A8%E7%9A%84%E5%A5%A5%E7%A7%98/</link>
      <pubDate>Fri, 16 Apr 2021 18:40:40 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/16/%E9%9A%BE%E4%BB%A5%E9%A9%BE%E9%A9%AD%E7%9A%84-go-timer%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E5%8F%82%E9%80%8F%E8%AE%A1%E6%97%B6%E5%99%A8%E7%9A%84%E5%A5%A5%E7%A7%98/</guid>
      <description>转载自煎鱼的blog #Go进阶之旅1 大家好，我是煎鱼。久违的源码剖析系列，让我们一起努力，看看谁能坚持到最后，因为学习一定是给能够坚持重复啃</description>
    </item>
    
    <item>
      <title>再见 Go 面试官：GMP 模型，为什么要有 P？</title>
      <link>http://shanks.link/blog/2021/04/16/%E5%86%8D%E8%A7%81-go-%E9%9D%A2%E8%AF%95%E5%AE%98gmp-%E6%A8%A1%E5%9E%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89-p/</link>
      <pubDate>Fri, 16 Apr 2021 18:20:16 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/16/%E5%86%8D%E8%A7%81-go-%E9%9D%A2%E8%AF%95%E5%AE%98gmp-%E6%A8%A1%E5%9E%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89-p/</guid>
      <description>转载自煎鱼的blog 最近金三银四，是面试的季节。在我的 Go 读者交流群里出现了许多小伙伴在讨论自己面试过程中所遇到的一些 Go 面试题。 今天的主角，是</description>
    </item>
    
    <item>
      <title>Go 群友提问：进程、线程都有 ID，为什么 Goroutine 没有 ID？</title>
      <link>http://shanks.link/blog/2021/04/16/go-%E7%BE%A4%E5%8F%8B%E6%8F%90%E9%97%AE%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E9%83%BD%E6%9C%89-id%E4%B8%BA%E4%BB%80%E4%B9%88-goroutine-%E6%B2%A1%E6%9C%89-id/</link>
      <pubDate>Fri, 16 Apr 2021 17:32:55 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/16/go-%E7%BE%A4%E5%8F%8B%E6%8F%90%E9%97%AE%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E9%83%BD%E6%9C%89-id%E4%B8%BA%E4%BB%80%E4%B9%88-goroutine-%E6%B2%A1%E6%9C%89-id/</guid>
      <description>转载自煎鱼的blog 今天的主角，是大家在既有语言基础的情况下，学 Goroutine 时会容易纠结的一点。就是 “进程、线程都有 ID，为什么 Goroutine 没有 Goroutin</description>
    </item>
    
    <item>
      <title>Go 语言中的一等公民：看似普通的函数，凭什么？</title>
      <link>http://shanks.link/blog/2021/04/16/go-%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E4%B8%80%E7%AD%89%E5%85%AC%E6%B0%91%E7%9C%8B%E4%BC%BC%E6%99%AE%E9%80%9A%E7%9A%84%E5%87%BD%E6%95%B0%E5%87%AD%E4%BB%80%E4%B9%88/</link>
      <pubDate>Fri, 16 Apr 2021 17:19:05 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/16/go-%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E4%B8%80%E7%AD%89%E5%85%AC%E6%B0%91%E7%9C%8B%E4%BC%BC%E6%99%AE%E9%80%9A%E7%9A%84%E5%87%BD%E6%95%B0%E5%87%AD%E4%BB%80%E4%B9%88/</guid>
      <description>转载自煎鱼的blog 在 Go 语言中，一提函数，大家提的最多的就是 “Go 语言的函数是一等公民”。这个定义来的非常突然，我们先了解一下什么是一等公民</description>
    </item>
    
    <item>
      <title>Go 面试题：Go interface 的一个 坑 及原理分析</title>
      <link>http://shanks.link/blog/2021/04/16/go-%E9%9D%A2%E8%AF%95%E9%A2%98go-interface-%E7%9A%84%E4%B8%80%E4%B8%AA-%E5%9D%91-%E5%8F%8A%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 16 Apr 2021 17:10:27 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/16/go-%E9%9D%A2%E8%AF%95%E9%A2%98go-interface-%E7%9A%84%E4%B8%80%E4%B8%AA-%E5%9D%91-%E5%8F%8A%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</guid>
      <description>以下内容转载自煎鱼的blog Go 面试题：Go interface 的一个 “坑” 及原理分析 原创 陈煎鱼 脑子进煎鱼了 3月16日 收录于话题 #Go45 #面试题13 大家好，我是煎鱼。</description>
    </item>
    
    <item>
      <title>Go 群友提问：学习 defer 时很懵逼，这道不会做！</title>
      <link>http://shanks.link/blog/2021/04/16/go-%E7%BE%A4%E5%8F%8B%E6%8F%90%E9%97%AE%E5%AD%A6%E4%B9%A0-defer-%E6%97%B6%E5%BE%88%E6%87%B5%E9%80%BC%E8%BF%99%E9%81%93%E4%B8%8D%E4%BC%9A%E5%81%9A/</link>
      <pubDate>Fri, 16 Apr 2021 17:00:42 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/16/go-%E7%BE%A4%E5%8F%8B%E6%8F%90%E9%97%AE%E5%AD%A6%E4%B9%A0-defer-%E6%97%B6%E5%BE%88%E6%87%B5%E9%80%BC%E8%BF%99%E9%81%93%E4%B8%8D%E4%BC%9A%E5%81%9A/</guid>
      <description>Go 群友提问：学习 defer 时很懵逼，这道不会做！ 转载自煎鱼的blog 前几天在读者交流群里看到一位小伙伴，在向大家咨询 Go 相关的技术问题。疑问是：“各位</description>
    </item>
    
    <item>
      <title>Go 群友提问：Goroutine 数量控制在多少合适，会影响 GC 和调度？</title>
      <link>http://shanks.link/blog/2021/04/16/go-%E7%BE%A4%E5%8F%8B%E6%8F%90%E9%97%AEgoroutine-%E6%95%B0%E9%87%8F%E6%8E%A7%E5%88%B6%E5%9C%A8%E5%A4%9A%E5%B0%91%E5%90%88%E9%80%82%E4%BC%9A%E5%BD%B1%E5%93%8D-gc-%E5%92%8C%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Fri, 16 Apr 2021 15:53:17 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/16/go-%E7%BE%A4%E5%8F%8B%E6%8F%90%E9%97%AEgoroutine-%E6%95%B0%E9%87%8F%E6%8E%A7%E5%88%B6%E5%9C%A8%E5%A4%9A%E5%B0%91%E5%90%88%E9%80%82%E4%BC%9A%E5%BD%B1%E5%93%8D-gc-%E5%92%8C%E8%B0%83%E5%BA%A6/</guid>
      <description>以下内容转载自煎鱼的blog 前几天在读者交流群里看到一位小伙伴，发出了一个致命提问，那就是：“单机的 goroutine 数量控制在多少比较合适？”。 也许你和群</description>
    </item>
    
    <item>
      <title>Go 面试题： new 和 make 是什么，差异在哪？</title>
      <link>http://shanks.link/blog/2021/04/16/go-%E9%9D%A2%E8%AF%95%E9%A2%98-new-%E5%92%8C-make-%E6%98%AF%E4%BB%80%E4%B9%88%E5%B7%AE%E5%BC%82%E5%9C%A8%E5%93%AA/</link>
      <pubDate>Fri, 16 Apr 2021 14:49:39 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/16/go-%E9%9D%A2%E8%AF%95%E9%A2%98-new-%E5%92%8C-make-%E6%98%AF%E4%BB%80%E4%B9%88%E5%B7%AE%E5%BC%82%E5%9C%A8%E5%93%AA/</guid>
      <description>转载自煎鱼的blog Go 面试题： new 和 make 是什么，差异在哪？ 在 Go 语言中，有两个比较雷同的内置函数，分别是 new 和 make 方法，其主要用途都是用于分配相应类型</description>
    </item>
    
    <item>
      <title>灵魂拷问 Go 语言：这个变量到底分配到哪里了？</title>
      <link>http://shanks.link/blog/2021/04/16/%E7%81%B5%E9%AD%82%E6%8B%B7%E9%97%AE-go-%E8%AF%AD%E8%A8%80%E8%BF%99%E4%B8%AA%E5%8F%98%E9%87%8F%E5%88%B0%E5%BA%95%E5%88%86%E9%85%8D%E5%88%B0%E5%93%AA%E9%87%8C%E4%BA%86/</link>
      <pubDate>Fri, 16 Apr 2021 11:18:05 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/16/%E7%81%B5%E9%AD%82%E6%8B%B7%E9%97%AE-go-%E8%AF%AD%E8%A8%80%E8%BF%99%E4%B8%AA%E5%8F%98%E9%87%8F%E5%88%B0%E5%BA%95%E5%88%86%E9%85%8D%E5%88%B0%E5%93%AA%E9%87%8C%E4%BA%86/</guid>
      <description>以下内容转载自煎鱼的blog 我们在写代码的时候，有时候会想这个变量到底分配到哪里了？这时候可能会有人说，在栈上，在堆上。信我准没错&amp;hell</description>
    </item>
    
    <item>
      <title>Go1.16 新特性：Go mod 的后悔药，仅需这一招</title>
      <link>http://shanks.link/blog/2021/04/16/go1.16-%E6%96%B0%E7%89%B9%E6%80%A7go-mod-%E7%9A%84%E5%90%8E%E6%82%94%E8%8D%AF%E4%BB%85%E9%9C%80%E8%BF%99%E4%B8%80%E6%8B%9B/</link>
      <pubDate>Fri, 16 Apr 2021 11:07:00 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/16/go1.16-%E6%96%B0%E7%89%B9%E6%80%A7go-mod-%E7%9A%84%E5%90%8E%E6%82%94%E8%8D%AF%E4%BB%85%E9%9C%80%E8%BF%99%E4%B8%80%E6%8B%9B/</guid>
      <description>以下内容转载自煎鱼的blog 前几天 Go 官方正式发布了 1.16 版本。从这个版本起，环境变量 GO111MODULE 的默认值正式修改为 on。 这也意味着 Go modules 将更进一步推进其业务</description>
    </item>
    
    <item>
      <title>Go1.16 新特性：详解内存管理机制的变更</title>
      <link>http://shanks.link/blog/2021/04/16/go1.16-%E6%96%B0%E7%89%B9%E6%80%A7%E8%AF%A6%E8%A7%A3%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6%E7%9A%84%E5%8F%98%E6%9B%B4/</link>
      <pubDate>Fri, 16 Apr 2021 10:55:29 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/16/go1.16-%E6%96%B0%E7%89%B9%E6%80%A7%E8%AF%A6%E8%A7%A3%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6%E7%9A%84%E5%8F%98%E6%9B%B4/</guid>
      <description>以下内容转载自煎鱼的blog 在上一篇 Go1.16 特性介绍的文章中我们有提到，从 v1.16 起，Go 在 Linux 下的默认内存管理策略会从MADV_FREE 改回 MADV_DONTNEED 策略。 这时</description>
    </item>
    
    <item>
      <title>Go116新特性Goembed</title>
      <link>http://shanks.link/blog/2021/04/15/go116%E6%96%B0%E7%89%B9%E6%80%A7goembed/</link>
      <pubDate>Thu, 15 Apr 2021 19:32:27 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/15/go116%E6%96%B0%E7%89%B9%E6%80%A7goembed/</guid>
      <description>Go1.16 新特性：一文快速上手 Go embed 以下内容转载自煎鱼的blog 大家好，我是正在沉迷学习煎鱼的煎鱼。 在以前，很多从其他语言转过来 Go 语言的同学会问到，或</description>
    </item>
    
    <item>
      <title>上下文Context</title>
      <link>http://shanks.link/blog/2021/04/15/%E4%B8%8A%E4%B8%8B%E6%96%87context/</link>
      <pubDate>Thu, 15 Apr 2021 18:19:18 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/15/%E4%B8%8A%E4%B8%8B%E6%96%87context/</guid>
      <description>以下内容转载自面向信仰编程 6.1 上下文 Context # 上下文 context.Context Go 语言中用来设置截止日期、同步信号，传递请求相关值的结构体。上下文与 Goroutine 有比较密切的关系，是 Go 语</description>
    </item>
    
    <item>
      <title>一文吃透 Go 语言解密之上下文 context</title>
      <link>http://shanks.link/blog/2021/04/15/%E4%B8%80%E6%96%87%E5%90%83%E9%80%8F-go-%E8%AF%AD%E8%A8%80%E8%A7%A3%E5%AF%86%E4%B9%8B%E4%B8%8A%E4%B8%8B%E6%96%87-context/</link>
      <pubDate>Thu, 15 Apr 2021 16:08:31 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/15/%E4%B8%80%E6%96%87%E5%90%83%E9%80%8F-go-%E8%AF%AD%E8%A8%80%E8%A7%A3%E5%AF%86%E4%B9%8B%E4%B8%8A%E4%B8%8B%E6%96%87-context/</guid>
      <description>一文吃透 Go 语言解密之上下文 context 转载自煎鱼的blog 上下文（Context）是 Go 语言中非常有特色的一个特性， 在 Go 1.7 版本中正式引入新标准库 cont</description>
    </item>
    
    <item>
      <title>一文吃透 Go 语言解密之接口 interface</title>
      <link>http://shanks.link/blog/2021/04/15/%E4%B8%80%E6%96%87%E5%90%83%E9%80%8F-go-%E8%AF%AD%E8%A8%80%E8%A7%A3%E5%AF%86%E4%B9%8B%E6%8E%A5%E5%8F%A3-interface/</link>
      <pubDate>Thu, 15 Apr 2021 15:34:27 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/15/%E4%B8%80%E6%96%87%E5%90%83%E9%80%8F-go-%E8%AF%AD%E8%A8%80%E8%A7%A3%E5%AF%86%E4%B9%8B%E6%8E%A5%E5%8F%A3-interface/</guid>
      <description>一文吃透 Go 语言解密之接口 interface 转载自煎鱼的blog 自古流传着一个传言&amp;hellip;在 Go 语言面试的时候必有人会问接口（interface）的实现</description>
    </item>
    
    <item>
      <title>一文带你解密 Go 语言之通道 channel</title>
      <link>http://shanks.link/blog/2021/04/15/%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E8%A7%A3%E5%AF%86-go-%E8%AF%AD%E8%A8%80%E4%B9%8B%E9%80%9A%E9%81%93-channel/</link>
      <pubDate>Thu, 15 Apr 2021 11:42:26 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/15/%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E8%A7%A3%E5%AF%86-go-%E8%AF%AD%E8%A8%80%E4%B9%8B%E9%80%9A%E9%81%93-channel/</guid>
      <description>转载自煎鱼的blog 今天这篇文章主要是针对 Go channel 的重点分析，一开始写的时候以为范围不会太大，但洋洋洒洒还是写破了万字，成为了一篇覆盖面较广和有</description>
    </item>
    
    <item>
      <title>解密 Go 语言之反射 reflect</title>
      <link>http://shanks.link/blog/2021/04/15/%E8%A7%A3%E5%AF%86-go-%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%8F%8D%E5%B0%84-reflect/</link>
      <pubDate>Thu, 15 Apr 2021 11:32:37 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/15/%E8%A7%A3%E5%AF%86-go-%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%8F%8D%E5%B0%84-reflect/</guid>
      <description>解密 Go 语言之反射 reflect 转载自煎鱼的blog 大家好，我是煎鱼。今天是 2020 年的最后一天，让我们一起继续愉快的学习吧 ：）。 在所有的语言中，反射这一功能基</description>
    </item>
    
    <item>
      <title>干货满满的 Go Modules 知识分享</title>
      <link>http://shanks.link/blog/2021/04/14/%E5%B9%B2%E8%B4%A7%E6%BB%A1%E6%BB%A1%E7%9A%84-go-modules-%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/</link>
      <pubDate>Wed, 14 Apr 2021 23:57:17 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/14/%E5%B9%B2%E8%B4%A7%E6%BB%A1%E6%BB%A1%E7%9A%84-go-modules-%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/</guid>
      <description>转载自煎鱼的blog 大家好，我是煎鱼。 马上 2021 年了，Go 也即将在明年发布 Go1.16。但 Go Modules 仍然是大家关注的话题之一。早期汇总过傲飞分享的 《G</description>
    </item>
    
    <item>
      <title>Go 错误处理：用 panic 取代 err != nil 的模式</title>
      <link>http://shanks.link/blog/2021/04/14/go-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E7%94%A8-panic-%E5%8F%96%E4%BB%A3-err-nil-%E7%9A%84%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 14 Apr 2021 14:33:59 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/14/go-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E7%94%A8-panic-%E5%8F%96%E4%BB%A3-err-nil-%E7%9A%84%E6%A8%A1%E5%BC%8F/</guid>
      <description>Go 错误处理：用 panic 取代 err != nil 的模式 转载自煎鱼的blog 前段时间我分享了文章 《先睹为快，Go2 Error 的挣扎之路》后，和一位朋友进行了一次深度交流，他</description>
    </item>
    
    <item>
      <title>先睹为快，Go2 Error 的挣扎之路</title>
      <link>http://shanks.link/blog/2021/04/14/%E5%85%88%E7%9D%B9%E4%B8%BA%E5%BF%ABgo2-error-%E7%9A%84%E6%8C%A3%E6%89%8E%E4%B9%8B%E8%B7%AF/</link>
      <pubDate>Wed, 14 Apr 2021 11:42:13 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/14/%E5%85%88%E7%9D%B9%E4%B8%BA%E5%BF%ABgo2-error-%E7%9A%84%E6%8C%A3%E6%89%8E%E4%B9%8B%E8%B7%AF/</guid>
      <description>先睹为快，Go2 Error 的挣扎之路 转载自煎鱼的blog 自从 Go 语言在国内火热以来，除去泛型，其次最具槽点的就是 Go 对错误的处理方式，一句经典的 if err != nil</description>
    </item>
    
    <item>
      <title>万字长文 | 从实践到原理，带你参透 gRPC</title>
      <link>http://shanks.link/blog/2021/04/13/%E4%B8%87%E5%AD%97%E9%95%BF%E6%96%87-%E4%BB%8E%E5%AE%9E%E8%B7%B5%E5%88%B0%E5%8E%9F%E7%90%86%E5%B8%A6%E4%BD%A0%E5%8F%82%E9%80%8F-grpc/</link>
      <pubDate>Tue, 13 Apr 2021 18:51:13 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/13/%E4%B8%87%E5%AD%97%E9%95%BF%E6%96%87-%E4%BB%8E%E5%AE%9E%E8%B7%B5%E5%88%B0%E5%8E%9F%E7%90%86%E5%B8%A6%E4%BD%A0%E5%8F%82%E9%80%8F-grpc/</guid>
      <description>转载自煎鱼的blog 万字长文 | 从实践到原理，带你参透 gRPC 原创 陈煎鱼 脑子进煎鱼了 2020-12-14 大家好，我是煎鱼。 gRPC 在 Go 语言中大放异彩，越来越多的小伙伴在使用</description>
    </item>
    
    <item>
      <title>必须要学的 Go 进程诊断工具 gops</title>
      <link>http://shanks.link/blog/2021/04/13/%E5%BF%85%E9%A1%BB%E8%A6%81%E5%AD%A6%E7%9A%84-go-%E8%BF%9B%E7%A8%8B%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7-gops/</link>
      <pubDate>Tue, 13 Apr 2021 18:27:04 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/13/%E5%BF%85%E9%A1%BB%E8%A6%81%E5%AD%A6%E7%9A%84-go-%E8%BF%9B%E7%A8%8B%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7-gops/</guid>
      <description>转载自煎鱼的blog 必须要学的 Go 进程诊断工具 gops 在类 Unix 系统中，我们常常会使用 ps 命令来查看系统当前所运行的进程信息，该命令为我们提供了较大的帮助</description>
    </item>
    
    <item>
      <title>为什么 Go 占用那么多的虚拟内存？</title>
      <link>http://shanks.link/blog/2021/04/13/%E4%B8%BA%E4%BB%80%E4%B9%88-go-%E5%8D%A0%E7%94%A8%E9%82%A3%E4%B9%88%E5%A4%9A%E7%9A%84%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</link>
      <pubDate>Tue, 13 Apr 2021 17:48:57 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/13/%E4%B8%BA%E4%BB%80%E4%B9%88-go-%E5%8D%A0%E7%94%A8%E9%82%A3%E4%B9%88%E5%A4%9A%E7%9A%84%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</guid>
      <description>转载自煎鱼的blog 前段时间，某同学说某服务的容器因为超出内存限制，不断地重启，问我们是不是有内存泄露，赶紧排查，然后解决掉，省的出问题。 我</description>
    </item>
    
    <item>
      <title>详解 Go 程序的启动流程，你知道 g0，m0 是什么吗？</title>
      <link>http://shanks.link/blog/2021/04/13/%E8%AF%A6%E8%A7%A3-go-%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E4%BD%A0%E7%9F%A5%E9%81%93-g0m0-%E6%98%AF%E4%BB%80%E4%B9%88%E5%90%97/</link>
      <pubDate>Tue, 13 Apr 2021 16:52:04 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/13/%E8%AF%A6%E8%A7%A3-go-%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E4%BD%A0%E7%9F%A5%E9%81%93-g0m0-%E6%98%AF%E4%BB%80%E4%B9%88%E5%90%97/</guid>
      <description>转载自煎鱼的blog 详解 Go 程序的启动流程，你知道 g0，m0 是什么吗？ 大家好，我是煎鱼。 自古应用程序均从 Hello World 开始，你我所写的 Go 语言亦然： import &amp;#34;fmt&amp;#34; func</description>
    </item>
    
    <item>
      <title>go单例模式</title>
      <link>http://shanks.link/blog/2021/04/05/go%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 05 Apr 2021 12:09:42 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/05/go%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>原文链接 Go语言中的单例模式 在过去的几年中，Go语言的发展是惊人的，并且吸引了很多由其他语言（Python、PHP、Ruby）转向Go语言的</description>
    </item>
    
    <item>
      <title>Golang 切片与函数参数陷阱</title>
      <link>http://shanks.link/blog/2021/04/05/golang-%E5%88%87%E7%89%87%E4%B8%8E%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E9%99%B7%E9%98%B1/</link>
      <pubDate>Mon, 05 Apr 2021 12:03:39 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/05/golang-%E5%88%87%E7%89%87%E4%B8%8E%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E9%99%B7%E9%98%B1/</guid>
      <description>原文链接 线性结构是计算机最常用的数据结构之一。无论是数组（arrary）还是链表（list），在编程中不可或缺。golang也有数组，不同于</description>
    </item>
    
    <item>
      <title>go 汇编入门 如何学习Golang？万字详文教你Go语言入门</title>
      <link>http://shanks.link/blog/2021/04/04/go-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8-%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0golang%E4%B8%87%E5%AD%97%E8%AF%A6%E6%96%87%E6%95%99%E4%BD%A0go%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/</link>
      <pubDate>Sun, 04 Apr 2021 21:15:18 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/04/go-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8-%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0golang%E4%B8%87%E5%AD%97%E8%AF%A6%E6%96%87%E6%95%99%E4%BD%A0go%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/</guid>
      <description>作者：ivansli，腾讯开发工程师 在深入学习 Golang 的 runtime 和标准库实现的时候发现，如果对 Golang 汇编没有一定了解的话，很难深入了解其底层实现机制。在这里</description>
    </item>
    
    <item>
      <title>深入浅出Go Runtime</title>
      <link>http://shanks.link/blog/2021/04/04/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAgo-runtime/</link>
      <pubDate>Sun, 04 Apr 2021 20:53:10 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/04/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAgo-runtime/</guid>
      <description>以下内容转载自 yifhao 介绍 基于2019.02发布的go 1.12 linux amd64版本, 主要介绍了Runtime一些原理和实现的一些细节, 对大家容易不容易理解或</description>
    </item>
    
    <item>
      <title>Goroutine 的切换过程涉及了什么</title>
      <link>http://shanks.link/blog/2021/04/04/goroutine-%E7%9A%84%E5%88%87%E6%8D%A2%E8%BF%87%E7%A8%8B%E6%B6%89%E5%8F%8A%E4%BA%86%E4%BB%80%E4%B9%88/</link>
      <pubDate>Sun, 04 Apr 2021 17:56:52 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/04/goroutine-%E7%9A%84%E5%88%87%E6%8D%A2%E8%BF%87%E7%A8%8B%E6%B6%89%E5%8F%8A%E4%BA%86%E4%BB%80%E4%B9%88/</guid>
      <description>GCTT:anxk Go语言中文网 点击上方蓝色“Go语言中文网”关注，每天一起学 Go Illustration created for “A Journey With Go”, made from the original Go Gopher, created by Renee French. 本文基于 Go 1.13 版本。 Goroutine 很轻，它只需要</description>
    </item>
    
    <item>
      <title>Go：Goroutine, OS线程 以及 CPU管理</title>
      <link>http://shanks.link/blog/2021/04/04/gogoroutine-os%E7%BA%BF%E7%A8%8B-%E4%BB%A5%E5%8F%8A-cpu%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sun, 04 Apr 2021 17:22:55 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/04/gogoroutine-os%E7%BA%BF%E7%A8%8B-%E4%BB%A5%E5%8F%8A-cpu%E7%AE%A1%E7%90%86/</guid>
      <description>中文翻译 英文原文 操作系统的线程创建以及切换是需要开销的，会影响程序的性能。Go致力于尽可能地从内核中获取优势，所以从最开始的时候设计就考虑到</description>
    </item>
    
    <item>
      <title>go g0,特殊的Goroutinue</title>
      <link>http://shanks.link/blog/2021/04/04/go-g0%E7%89%B9%E6%AE%8A%E7%9A%84goroutinue/</link>
      <pubDate>Sun, 04 Apr 2021 17:14:06 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/04/go-g0%E7%89%B9%E6%AE%8A%E7%9A%84goroutinue/</guid>
      <description>原文链接 ℹ️ 这篇文章基于 Go 1.13。 在 Go 中创建的所有 Goroutine 都会被一个内部的调度器所管理。Go 调度器尝试为所有的 Goroutine 分配运行时间，并且在当前的 Goroutine 阻塞</description>
    </item>
    
    <item>
      <title>Goroutine 数量控制在多少合适，会影响 GC 和调度？</title>
      <link>http://shanks.link/blog/2021/04/04/goroutine-%E6%95%B0%E9%87%8F%E6%8E%A7%E5%88%B6%E5%9C%A8%E5%A4%9A%E5%B0%91%E5%90%88%E9%80%82%E4%BC%9A%E5%BD%B1%E5%93%8D-gc-%E5%92%8C%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Sun, 04 Apr 2021 17:02:42 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/04/goroutine-%E6%95%B0%E9%87%8F%E6%8E%A7%E5%88%B6%E5%9C%A8%E5%A4%9A%E5%B0%91%E5%90%88%E9%80%82%E4%BC%9A%E5%BD%B1%E5%93%8D-gc-%E5%92%8C%E8%B0%83%E5%BA%A6/</guid>
      <description>大家好，我是煎鱼。 前几天在读者交流群里看到一位小伙伴，发出了一个致命提问，那就是：“单机的 goroutine 数量控制在多少比较合适？”。 也许你和群内小伙伴第</description>
    </item>
    
    <item>
      <title>go高效内存分配</title>
      <link>http://shanks.link/blog/2021/04/04/go%E9%AB%98%E6%95%88%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</link>
      <pubDate>Sun, 04 Apr 2021 16:38:51 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/04/go%E9%AB%98%E6%95%88%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</guid>
      <description>原文链接 手动内存管理真的很坑爹(如C C++)，好在我们有强大的自动化系统能够管理内存分配和生命周期，从而解放我们的双手。 但是呢，如果你想通过</description>
    </item>
    
    <item>
      <title>详解Go逃逸分析</title>
      <link>http://shanks.link/blog/2021/04/04/%E8%AF%A6%E8%A7%A3go%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 04 Apr 2021 16:15:00 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/04/%E8%AF%A6%E8%A7%A3go%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</guid>
      <description>原文链接机器铃砍菜刀 Go是一门带有垃圾回收的现代语言，它抛弃了传统C/C++的开发者需要手动管理内存的方式，实现了内存的主动申请和释放的管理</description>
    </item>
    
    <item>
      <title>理解golang调度之三：并发</title>
      <link>http://shanks.link/blog/2021/04/04/%E7%90%86%E8%A7%A3golang%E8%B0%83%E5%BA%A6%E4%B9%8B%E4%B8%89%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Sun, 04 Apr 2021 00:42:03 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/04/%E7%90%86%E8%A7%A3golang%E8%B0%83%E5%BA%A6%E4%B9%8B%E4%B8%89%E5%B9%B6%E5%8F%91/</guid>
      <description>简介 当我在解决一个问题尤其是新问题的时候，我开始不会去考虑并发(concurrency)是否合适。我首先会去找一系列的解决方式然后确保它有效</description>
    </item>
    
    <item>
      <title>理解golang调度之二 ：Go调度器</title>
      <link>http://shanks.link/blog/2021/04/04/%E7%90%86%E8%A7%A3golang%E8%B0%83%E5%BA%A6%E4%B9%8B%E4%BA%8C-go%E8%B0%83%E5%BA%A6%E5%99%A8/</link>
      <pubDate>Sun, 04 Apr 2021 00:32:10 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/04/%E7%90%86%E8%A7%A3golang%E8%B0%83%E5%BA%A6%E4%B9%8B%E4%BA%8C-go%E8%B0%83%E5%BA%A6%E5%99%A8/</guid>
      <description>原文链接 简介 第一篇文章解释了关于操作系统层级的调度，这对于理解Go的调度是很重要的。这一部分我会在语义层级解释Go调度器是如何工作的，并且着</description>
    </item>
    
    <item>
      <title>理解golang调度之一 ：操作系统调度</title>
      <link>http://shanks.link/blog/2021/04/04/%E7%90%86%E8%A7%A3golang%E8%B0%83%E5%BA%A6%E4%B9%8B%E4%B8%80-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Sun, 04 Apr 2021 00:23:24 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/04/%E7%90%86%E8%A7%A3golang%E8%B0%83%E5%BA%A6%E4%B9%8B%E4%B8%80-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%B0%83%E5%BA%A6/</guid>
      <description>原文链接 简介 golang调度器的设计行为能够使你的多线程go程序更有效率、性能更好，这要归功于golang调度器对于操作系统调度器的支持。对</description>
    </item>
    
    <item>
      <title>go 垃圾回收：三色算法</title>
      <link>http://shanks.link/blog/2021/04/03/go-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%89%E8%89%B2%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 03 Apr 2021 23:36:19 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%89%E8%89%B2%E7%AE%97%E6%B3%95/</guid>
      <description>原文链接 三色算法 go垃圾回收器的操作都是基于三色算法，这篇文章主要来说明此算法。 注意：三色算法并不是go独有的，它也会在其它编程语言中使用到</description>
    </item>
    
    <item>
      <title>深入 Go Golang 内存分配超级棒的文章：Go 内存分配器可视化指南</title>
      <link>http://shanks.link/blog/2021/04/03/%E6%B7%B1%E5%85%A5-go-golang-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E8%B6%85%E7%BA%A7%E6%A3%92%E7%9A%84%E6%96%87%E7%AB%A0go-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8%E5%8F%AF%E8%A7%86%E5%8C%96%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sat, 03 Apr 2021 23:18:12 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/%E6%B7%B1%E5%85%A5-go-golang-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E8%B6%85%E7%BA%A7%E6%A3%92%E7%9A%84%E6%96%87%E7%AB%A0go-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8%E5%8F%AF%E8%A7%86%E5%8C%96%E6%8C%87%E5%8D%97/</guid>
      <description>翻译地址 原文链接 当我第一次开始尝试理解 Go 语言的内存分配器时，整个过程让我抓狂。一切看起来都像一个神秘的黑盒子。因为几乎所有技术魔法（tech</description>
    </item>
    
    <item>
      <title>go 定时器 ticker和timer</title>
      <link>http://shanks.link/blog/2021/04/03/go-%E5%AE%9A%E6%97%B6%E5%99%A8-ticker%E5%92%8Ctimer/</link>
      <pubDate>Sat, 03 Apr 2021 23:13:19 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go-%E5%AE%9A%E6%97%B6%E5%99%A8-ticker%E5%92%8Ctimer/</guid>
      <description>原文链接 两种类型的定时器：ticker和timer。两者有什么区别呢？请看如下代码： ticker package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main() { d := time.Duration(time.Second*2) t := time.NewTicker(d) defer t.Stop() for { &amp;lt;- t.C fmt.Println(&amp;#34;timeout...&amp;#34;) } } ti</description>
    </item>
    
    <item>
      <title>go 使用protobuf</title>
      <link>http://shanks.link/blog/2021/04/03/go-%E4%BD%BF%E7%94%A8protobuf/</link>
      <pubDate>Sat, 03 Apr 2021 23:03:31 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go-%E4%BD%BF%E7%94%A8protobuf/</guid>
      <description>原文链接发布于 2017-05-03 为什么要使用protobuf 最近的项目中，一直使用Json做数据传输。Json用起来的确很方便。但相对于protobuf数据</description>
    </item>
    
    <item>
      <title>How to Use Websockets in go</title>
      <link>http://shanks.link/blog/2021/04/03/how-to-use-websockets-in-go/</link>
      <pubDate>Sat, 03 Apr 2021 22:54:19 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/how-to-use-websockets-in-go/</guid>
      <description>原文链接 Sending a message and getting an instant response without refreshing the page is something we take for granted. But in the past, enabling real-time functionality was a real challenge for developers. The developer community has come a long way from HTTP long polling and AJAX and has finally found a solution for building truly real-time apps. This solution comes in the form of WebSockets, which make</description>
    </item>
    
    <item>
      <title>go系统学习推荐书籍</title>
      <link>http://shanks.link/blog/2021/04/03/go%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E6%8E%A8%E8%8D%90%E4%B9%A6%E7%B1%8D/</link>
      <pubDate>Sat, 03 Apr 2021 22:36:26 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E6%8E%A8%E8%8D%90%E4%B9%A6%E7%B1%8D/</guid>
      <description>Tony Bai 一个程序员的心路历程 Go语言的发展现状 如果从2007年9月20日那个下午三个“程序员大佬”在谷歌总部的一间办公室里进行的一次有关设计一门</description>
    </item>
    
    <item>
      <title>go post请求常用的几种方式</title>
      <link>http://shanks.link/blog/2021/04/03/go-post%E8%AF%B7%E6%B1%82%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Sat, 03 Apr 2021 22:31:41 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go-post%E8%AF%B7%E6%B1%82%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid>
      <description>原文链接 post请求常用的几种方式，记录一下 func httpPost() { resp, err := http.Post(&amp;#34;https://www.abcd123.top/api/v1/login&amp;#34;, &amp;#34;application/x-www-form-urlencoded&amp;#34;, strings.NewReader(&amp;#34;username=test&amp;amp;password=ab123123&amp;#34;)) if err != nil { fmt.Println(err) } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) if err != nil { // handle error } fmt.Println(string(body)) } func httpPostForm() { resp, err := http.PostForm(&amp;#34;https://www.denlery.top/api/v1/login&amp;#34;, url.Values{&amp;#34;username&amp;#34;: {&amp;#34;auto&amp;#34;}, &amp;#34;password&amp;#34;: {&amp;#34;auto123123&amp;#34;}}) if err != nil</description>
    </item>
    
    <item>
      <title>go中的init函数以及main函数</title>
      <link>http://shanks.link/blog/2021/04/03/go%E4%B8%AD%E7%9A%84init%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8Amain%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 03 Apr 2021 22:27:14 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go%E4%B8%AD%E7%9A%84init%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8Amain%E5%87%BD%E6%95%B0/</guid>
      <description>原文链接 首先我们看一个例子：init函数： init 函数可在package main中，可在其他package中，可在同一个package中出现多次。</description>
    </item>
    
    <item>
      <title>go 语言中关于包导入必学的8个知识点</title>
      <link>http://shanks.link/blog/2021/04/03/go-%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%85%B3%E4%BA%8E%E5%8C%85%E5%AF%BC%E5%85%A5%E5%BF%85%E5%AD%A6%E7%9A%848%E4%B8%AA%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
      <pubDate>Sat, 03 Apr 2021 22:21:55 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go-%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%85%B3%E4%BA%8E%E5%8C%85%E5%AF%BC%E5%85%A5%E5%BF%85%E5%AD%A6%E7%9A%848%E4%B8%AA%E7%9F%A5%E8%AF%86%E7%82%B9/</guid>
      <description>Hi，大家好，我是明哥。 在自己学习 Golang 的这段时间里，我写了详细的学习笔记放在我的个人微信公众号 《Go编程时光》，对于 Go 语言，我也算是个初学者，</description>
    </item>
    
    <item>
      <title>go struct详解</title>
      <link>http://shanks.link/blog/2021/04/03/go-struct%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 03 Apr 2021 22:15:06 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go-struct%E8%AF%A6%E8%A7%A3/</guid>
      <description>Go Struct超详细讲解 原创作者，程序员读书 Go语言中提供了对struct的支持,struct,中文翻译称为结构体，与数组一样，属于复合类型</description>
    </item>
    
    <item>
      <title>go语言panic,recover的实现</title>
      <link>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80panicrecover%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sat, 03 Apr 2021 14:26:05 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80panicrecover%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-07-02 本文主要分析Go语言的panic/recover在AMD64 Linux平台下的实现，包括： 主动调用 panic() 函数所引发</description>
    </item>
    
    <item>
      <title>go深入理解defer（上）defer基础</title>
      <link>http://shanks.link/blog/2021/04/03/go%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3defer%E4%B8%8Adefer%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 03 Apr 2021 11:04:11 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3defer%E4%B8%8Adefer%E5%9F%BA%E7%A1%80/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-06-11 深入理解 defer 分上下两篇文章，本文为上篇，主要介绍如下内容： 为什么需要 defer； defer 语法及语义； defer 使用要点； defer 语句</description>
    </item>
    
    <item>
      <title>抢占系统调用执行时间过长的goroutine（22）</title>
      <link>http://shanks.link/blog/2021/04/03/%E6%8A%A2%E5%8D%A0%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E7%9A%84goroutine22/</link>
      <pubDate>Sat, 03 Apr 2021 10:37:43 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/%E6%8A%A2%E5%8D%A0%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E7%9A%84goroutine22/</guid>
      <description>​​​​​​​​​原创 爱写程序的阿波张 源码游记 2019-06-01 本文是《Go语言调度器源代码情景分析》系列的第22篇，也是第六章《抢占调度》的第2小节。 上一</description>
    </item>
    
    <item>
      <title>因goroutine运行时间过长而发生的抢占调度（21）</title>
      <link>http://shanks.link/blog/2021/04/03/%E5%9B%A0goroutine%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E8%80%8C%E5%8F%91%E7%94%9F%E7%9A%84%E6%8A%A2%E5%8D%A0%E8%B0%83%E5%BA%A621/</link>
      <pubDate>Sat, 03 Apr 2021 10:34:06 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/%E5%9B%A0goroutine%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E8%80%8C%E5%8F%91%E7%94%9F%E7%9A%84%E6%8A%A2%E5%8D%A0%E8%B0%83%E5%BA%A621/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-05-28 本文是《Go语言调度器源代码情景分析》系列的第21篇，也是第六章《抢占调度》的第1小节。 前面几节我们分析了Go</description>
    </item>
    
    <item>
      <title>go语言调度器之主动调度(20)</title>
      <link>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B9%8B%E4%B8%BB%E5%8A%A8%E8%B0%83%E5%BA%A620/</link>
      <pubDate>Sat, 03 Apr 2021 10:29:25 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B9%8B%E4%B8%BB%E5%8A%A8%E8%B0%83%E5%BA%A620/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-05-24 本文是《Go语言调度器源代码情景分析》系列的第20篇，也是第五章《主动调度》的第1小节。 Goroutine的主</description>
    </item>
    
    <item>
      <title>工作线程的唤醒及创建(19)</title>
      <link>http://shanks.link/blog/2021/04/03/%E5%B7%A5%E4%BD%9C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%94%A4%E9%86%92%E5%8F%8A%E5%88%9B%E5%BB%BA19/</link>
      <pubDate>Sat, 03 Apr 2021 10:24:35 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/%E5%B7%A5%E4%BD%9C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%94%A4%E9%86%92%E5%8F%8A%E5%88%9B%E5%BB%BA19/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-05-23 本文是《Go语言调度器源代码情景分析》系列的第19篇，也是第四章《Goroutine被动调度》的第2小节。 本文</description>
    </item>
    
    <item>
      <title>goroutine被动调度之一（18）</title>
      <link>http://shanks.link/blog/2021/04/03/goroutine%E8%A2%AB%E5%8A%A8%E8%B0%83%E5%BA%A6%E4%B9%8B%E4%B8%8018/</link>
      <pubDate>Sat, 03 Apr 2021 10:21:58 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/goroutine%E8%A2%AB%E5%8A%A8%E8%B0%83%E5%BA%A6%E4%B9%8B%E4%B8%8018/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-05-22 本文是《Go语言调度器源代码情景分析》系列的第18篇，也是第四章《Goroutine被动调度》的第1小节。 前一</description>
    </item>
    
    <item>
      <title>go语言调度器之盗取goroutine(17)</title>
      <link>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B9%8B%E7%9B%97%E5%8F%96goroutine17/</link>
      <pubDate>Sat, 03 Apr 2021 10:14:00 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B9%8B%E7%9B%97%E5%8F%96goroutine17/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-05-17 本文是《Go语言调度器源代码情景分析》系列的第17篇，也是第三章《Goroutine调度策略》的第2小节。 上一</description>
    </item>
    
    <item>
      <title>第三章 goroutine调度策略（16）</title>
      <link>http://shanks.link/blog/2021/04/03/%E7%AC%AC%E4%B8%89%E7%AB%A0-goroutine%E8%B0%83%E5%BA%A6%E7%AD%96%E7%95%A516/</link>
      <pubDate>Sat, 03 Apr 2021 10:12:03 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/%E7%AC%AC%E4%B8%89%E7%AB%A0-goroutine%E8%B0%83%E5%BA%A6%E7%AD%96%E7%95%A516/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-05-14 本文是《Go语言调度器源代码情景分析》系列的第16篇，也是第三章《Goroutine调度策略》的第1小节。 在调</description>
    </item>
    
    <item>
      <title>非main goroutine的退出及调度循环（15）</title>
      <link>http://shanks.link/blog/2021/04/03/%E9%9D%9Emain-goroutine%E7%9A%84%E9%80%80%E5%87%BA%E5%8F%8A%E8%B0%83%E5%BA%A6%E5%BE%AA%E7%8E%AF15/</link>
      <pubDate>Sat, 03 Apr 2021 10:07:03 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/%E9%9D%9Emain-goroutine%E7%9A%84%E9%80%80%E5%87%BA%E5%8F%8A%E8%B0%83%E5%BA%A6%E5%BE%AA%E7%8E%AF15/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-05-12 本文是《Go语言调度器源代码情景分析》系列的第15篇，也是第二章的第5小节。 上一节我们说过main gorout</description>
    </item>
    
    <item>
      <title>go语言调度器之调度main goroutine（14)</title>
      <link>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B9%8B%E8%B0%83%E5%BA%A6main-goroutine14/</link>
      <pubDate>Sat, 03 Apr 2021 10:01:28 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B9%8B%E8%B0%83%E5%BA%A6main-goroutine14/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-05-09 本文是《Go语言调度器源代码情景分析》系列的第14篇，也是第二章的第4小节 上一节我们通过分析main gorou</description>
    </item>
    
    <item>
      <title>go语言调度器之创建main goroutine(13)</title>
      <link>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B9%8B%E5%88%9B%E5%BB%BAmain-goroutine13/</link>
      <pubDate>Sat, 03 Apr 2021 09:53:43 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E4%B9%8B%E5%88%9B%E5%BB%BAmain-goroutine13/</guid>
      <description>原创 爱写程序的阿波张 源码游记 本文是《Go语言调度器源代码情景分析》系列的第13篇，也是第二章的第3小节。 上一节我们分析了调度器的初始化，这一</description>
    </item>
    
    <item>
      <title>go语言goroutine调度器初始化 十二</title>
      <link>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80goroutine%E8%B0%83%E5%BA%A6%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96-%E5%8D%81%E4%BA%8C/</link>
      <pubDate>Sat, 03 Apr 2021 00:23:53 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80goroutine%E8%B0%83%E5%BA%A6%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96-%E5%8D%81%E4%BA%8C/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-05-05 本文是《Go语言调度器源代码情景分析》系列的第12篇，也是第二章的第2小节。 本章将以下面这个简单的Hello W</description>
    </item>
    
    <item>
      <title>goroutine调度器概述(11)</title>
      <link>http://shanks.link/blog/2021/04/03/goroutine%E8%B0%83%E5%BA%A6%E5%99%A8%E6%A6%82%E8%BF%B011/</link>
      <pubDate>Sat, 03 Apr 2021 00:13:50 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/goroutine%E8%B0%83%E5%BA%A6%E5%99%A8%E6%A6%82%E8%BF%B011/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-05-01 本文是《go调度器源代码情景分析》系列的第11篇，也是第二章的第1小节。 goroutine简介 goroutin</description>
    </item>
    
    <item>
      <title>go语言调度器源代码情景分析之十：线程本地存储</title>
      <link>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E5%8D%81%E7%BA%BF%E7%A8%8B%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/</link>
      <pubDate>Sat, 03 Apr 2021 00:09:46 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/03/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E5%8D%81%E7%BA%BF%E7%A8%8B%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-04-27 本文是《go调度器源代码情景分析》系列 第一章 预备知识的第十小节，也是预备知识的最后一小节。 线程本地存储又叫线程</description>
    </item>
    
    <item>
      <title>go语言调度器源代码情景分析之八：系统调用</title>
      <link>http://shanks.link/blog/2021/04/02/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E5%85%AB%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</link>
      <pubDate>Fri, 02 Apr 2021 13:13:55 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/02/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E5%85%AB%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-04-24 我们将在最后一章讨论有关系统调用方面的抢占调度，所以这里有必要对系统调用有个基本的了解。 系统调用是指使用类似函</description>
    </item>
    
    <item>
      <title>go语言调度器源代码情景分析之七：函数调用过程</title>
      <link>http://shanks.link/blog/2021/04/02/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%B8%83%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Fri, 02 Apr 2021 13:00:41 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/02/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%B8%83%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-04-22 前面几节我们介绍了CPU寄存器、内存、汇编指令以及栈等基础知识，为了达到融会贯通加深理解的目的，这一节我们来综</description>
    </item>
    
    <item>
      <title>go语言调度器源代码情景分析之六：go汇编语言</title>
      <link>http://shanks.link/blog/2021/04/02/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E5%85%ADgo%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/</link>
      <pubDate>Fri, 02 Apr 2021 12:54:48 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/02/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E5%85%ADgo%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-04-21 go语言runtime（包括调度器）源代码中有部分代码是用汇编语言编写的，不过这些汇编代码并非针对特定体系结构</description>
    </item>
    
    <item>
      <title>go语言调度器源代码情景分析之五：汇编指令</title>
      <link>http://shanks.link/blog/2021/04/02/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%BA%94%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Fri, 02 Apr 2021 12:47:46 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/02/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%BA%94%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/</guid>
      <description>原创 爱写程序的阿波张 源码游记 2019-04-20 汇编语言是每位后端程序员都应该掌握的一门语言，因为学会了汇编语言，不管是对我们调试程序还是研究与理解计算机底层</description>
    </item>
    
    <item>
      <title>go语言调度器源代码情景分析之四：函数调用栈</title>
      <link>http://shanks.link/blog/2021/04/01/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E5%9B%9B%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A0%88/</link>
      <pubDate>Thu, 01 Apr 2021 23:52:57 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/01/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E5%9B%9B%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A0%88/</guid>
      <description>原创 阿波张 源码游记 2019-04-19 什么是栈 栈是一种“后进先出”的数据结构，它相当于一个容器，当需要往容器里面添加元素时只能放在最上面的一个元素之上，需要取</description>
    </item>
    
    <item>
      <title>go语言调度器源代码情景分析之三：内存</title>
      <link>http://shanks.link/blog/2021/04/01/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%B8%89%E5%86%85%E5%AD%98/</link>
      <pubDate>Thu, 01 Apr 2021 23:32:28 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/01/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%B8%89%E5%86%85%E5%AD%98/</guid>
      <description>原创 张方波 源码游记 2019-04-18 内存是计算机系统的存储设备，其主要作用是协助CPU在执行程序时存储数据和指令。 内存由大量内存单元组成，内存单元大小为1个</description>
    </item>
    
    <item>
      <title>go语言调度器源代码情景分析之二：CPU寄存器</title>
      <link>http://shanks.link/blog/2021/04/01/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%BA%8Ccpu%E5%AF%84%E5%AD%98%E5%99%A8/</link>
      <pubDate>Thu, 01 Apr 2021 23:26:01 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/04/01/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90%E4%B9%8B%E4%BA%8Ccpu%E5%AF%84%E5%AD%98%E5%99%A8/</guid>
      <description>原创 张方波 源码游记 2019-04-17 寄存器是CPU内部的存储单元，用于存放从内存读取而来的数据（包括指令）和CPU运算的中间结果，之所以要使用寄存器来临时存</description>
    </item>
    
    <item>
      <title>go语言调度器源代码情景分析1</title>
      <link>http://shanks.link/blog/2021/03/31/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%901/</link>
      <pubDate>Wed, 31 Mar 2021 14:18:56 +0000</pubDate>
      
      <guid>http://shanks.link/blog/2021/03/31/go%E8%AF%AD%E8%A8%80%E8%B0%83%E5%BA%A6%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%901/</guid>
      <description>原创 张方波 源码游记 2019-04-16 专栏简介 本专栏以精心设计的情景为线索，结合go语言最新1.12版源代码深入细致的分析了goroutine调度器实现原理。</description>
    </item>
    
  </channel>
</rss>
