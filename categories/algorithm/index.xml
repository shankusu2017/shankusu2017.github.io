<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithm on Golang入门指南</title>
    <link>http://shanks.link/categories/algorithm/</link>
    <description>Recent content in Algorithm on Golang入门指南</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 02 Dec 2022 16:37:40 +0800</lastBuildDate>
    <atom:link href="http://shanks.link/categories/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>深度剖析各种BloomFilter的原理、改进、应用场景</title>
      <link>http://shanks.link/blog/2022/12/02/%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%90%84%E7%A7%8Dbloomfilter%E7%9A%84%E5%8E%9F%E7%90%86%E6%94%B9%E8%BF%9B%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</link>
      <pubDate>Fri, 02 Dec 2022 16:37:40 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/12/02/%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%90%84%E7%A7%8Dbloomfilter%E7%9A%84%E5%8E%9F%E7%90%86%E6%94%B9%E8%BF%9B%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</guid>
      <description>&lt;p&gt;　　Bloom Filter是由Bloom在1970年提出的一种多哈希函数映射的快速查找算法。通常应用在一些需要快速判断某个元素是否属于集合，但是并不严格要求100%正确的场合。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LRU原理和Redis的实现</title>
      <link>http://shanks.link/blog/2022/10/09/lru%E5%8E%9F%E7%90%86%E5%92%8Credis%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 09 Oct 2022 10:02:18 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/10/09/lru%E5%8E%9F%E7%90%86%E5%92%8Credis%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;很久前参加过今日头条的面试，遇到一个题，目前半部分是如何实现 LRU，后半部分是 Redis 中如何实现 LRU。&lt;/p&gt;&#xA;&lt;p&gt;我的第一反应是操作系统课程里学过，应该是内存不够的场景下，淘汰旧内容的策略。LRU &amp;hellip; Least Recent Used，淘汰掉最不经常使用的。可以稍微多补充两句，因为计算机体系结构中，最大的最可靠的存储是硬盘，它容量很大，并且内容可以固化，但是访问速度很慢，所以需要把使用的内容载入内存中；内存速度很快，但是容量有限，并且断电后内容会丢失，并且为了进一步提升性能，还有CPU内部的 L1 Cache，L2 Cache等概念。因为速度越快的地方，它的单位成本越高，容量越小，新的内容不断被载入，旧的内容肯定要被淘汰，所以就有这样的使用背景。&lt;/p&gt;</description>
    </item>
    <item>
      <title>排序算法</title>
      <link>http://shanks.link/blog/2022/04/27/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 27 Apr 2022 16:31:08 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/27/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;p&gt;排序指的是将一组对象按照某种逻辑重新排列的过程，在计算机早期，大约30%的时间都用在排序上，今天这个比例降低了，这得益于高效的排序算法。排序有大量的应用场景，它往往是解决问题的第一步,它很基础但很重要，比如快速排序就被誉为20世纪科学和工程领域10大算法之一。排序如此有用的一个重要原因是在一个有序数组中查找一个元素比在一个无序数组中查找要简单的多。今天我们就来研究一下。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lru</title>
      <link>http://shanks.link/blog/2022/04/26/lru/</link>
      <pubDate>Tue, 26 Apr 2022 17:00:17 +0800</pubDate>
      <guid>http://shanks.link/blog/2022/04/26/lru/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/161269766&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;LRU-least recently used-最近最少使用算法，是一种内存数据淘汰策略，使用常见是当内存不足时，需要淘汰最近最少使用的数据。LRU常用语缓存系统的淘汰策略。&lt;/p&gt;</description>
    </item>
    <item>
      <title>数学之美每章小结</title>
      <link>http://shanks.link/blog/2021/10/09/%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E%E6%AF%8F%E7%AB%A0%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Sat, 09 Oct 2021 14:59:21 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/10/09/%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E%E6%AF%8F%E7%AB%A0%E5%B0%8F%E7%BB%93/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_37431224/article/details/106841246&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;书评：本书讲的是道而不是术，真正的术还要自己细致的研究下去，目前看的第一遍总结的不是很好，后面再看会继续完善。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;第1章文字和语言vs数字和信息&#34;&gt;第1章：文字和语言VS数字和信息&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1文字和数字&#34;&gt;1.文字和数字&lt;/h2&gt;&#xA;&lt;p&gt;讲了一堆古代文字，其实就是为了引出下面两个概念用于翻译&lt;/p&gt;</description>
    </item>
    <item>
      <title>HyperLogLog 算法详解</title>
      <link>http://shanks.link/blog/2021/08/24/hyperloglog-%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 24 Aug 2021 18:23:20 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/24/hyperloglog-%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;p&gt;首发于&lt;a href=&#34;https://www.zhihu.com/column/techcats&#34;&gt;技术猫开源俱乐部&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;hyperloglog-算法详解&#34;&gt;HyperLogLog 算法详解&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/people/abserari&#34;&gt;Abser Ari&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;基数计数基本概念&#34;&gt;基数计数基本概念&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://pic4.zhimg.com/80/v2-d1c9f07d292ba8a9fe2ea93a246ee377_1440w.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;概率算法&#34;&gt;概率算法&lt;/h2&gt;&#xA;&lt;p&gt;实际上目前还没有发现更好的在大数据场景中准确计算基数的高效算法，因此在不追求绝对准确的情况下，使用概率算法算是一个不错的解决方案。概率算法不直接存储数据集合本身，通过一定的概率统计方法预估基数值，这种方法可以大大节省内存，同时保证误差控制在一定范围内。目前用于基数计数的概率算法包括:&lt;/p&gt;</description>
    </item>
    <item>
      <title>常见的10种排序算法</title>
      <link>http://shanks.link/blog/2021/08/12/%E5%B8%B8%E8%A7%81%E7%9A%8410%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Thu, 12 Aug 2021 23:31:57 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/08/12/%E5%B8%B8%E8%A7%81%E7%9A%8410%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h1 id=&#34;常见的排序算法常见的10种排序&#34;&gt;[常见的排序算法——常见的10种排序]&lt;/h1&gt;&#xA;&lt;h2 id=&#34;常见算法可以分为两大类&#34;&gt;常见算法可以分为两大类：&lt;/h2&gt;&#xA;&lt;p&gt;　　非线性时间比较类排序：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此称为非线性时间比较类排序。&lt;/p&gt;&#xA;&lt;p&gt;　　线性时间非比较类排序：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此称为线性时间非比较类排序。&#xA;&lt;img src=&#34;http://shanks.link/img/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/1730367-20190711231258717-1334457150.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>哈希表</title>
      <link>http://shanks.link/blog/2021/06/26/%E5%93%88%E5%B8%8C%E8%A1%A8/</link>
      <pubDate>Sat, 26 Jun 2021 22:55:54 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/06/26/%E5%93%88%E5%B8%8C%E8%A1%A8/</guid>
      <description>&lt;h3 id=&#34;哈希表&#34;&gt;哈希表&lt;/h3&gt;&#xA;&lt;h4 id=&#34;什么是哈希表&#34;&gt;什么是哈希表&lt;/h4&gt;&#xA;&lt;p&gt;哈希表就是一个元素有一一对应位置的一个表，如下图，哈希表也叫散列表，和函数的一个x对应一个y类似，不存在多个y对应一个x，当然哈希表可能有多个数对应一个下标，我们后面讲，这里暂且理解为和函数一样，是一种映射。&#xA;在图中，哈希表存的数据位整形，如果我们存手机号，可以将后四位作为key，或者是后四位经过一个算数处理，当作key也可以。&lt;/p&gt;</description>
    </item>
    <item>
      <title>面试题型系列:滑动窗口技巧</title>
      <link>http://shanks.link/blog/2021/04/29/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%9E%8B%E7%B3%BB%E5%88%97%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Thu, 29 Apr 2021 17:52:09 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/29/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%9E%8B%E7%B3%BB%E5%88%97%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%8A%80%E5%B7%A7/</guid>
      <description>&lt;h2 id=&#34;面试题型系列滑动窗口技巧&#34;&gt;面试题型系列：滑动窗口技巧&lt;/h2&gt;&#xA;&lt;p&gt;本文是公众号读者上山打老虎的第二篇原创投稿，主要内容是讲解算法技巧之滑动窗口。上山兄一直保持着刷题的习惯，并形成了自己的一套做题心得，当然他也是无情的offer收割机。同时上山兄会持续给本号投稿算法类文章，代码示例均采用Go语言，希望该算法系列文章有助读者更好地备战面试。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CPU缓存体系对程序的影响</title>
      <link>http://shanks.link/blog/2021/04/28/cpu%E7%BC%93%E5%AD%98%E4%BD%93%E7%B3%BB%E5%AF%B9%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%BD%B1%E5%93%8D/</link>
      <pubDate>Wed, 28 Apr 2021 11:36:26 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/28/cpu%E7%BC%93%E5%AD%98%E4%BD%93%E7%B3%BB%E5%AF%B9%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%BD%B1%E5%93%8D/</guid>
      <description>&lt;h2 id=&#34;cpu缓存体系对go程序的影响&#34;&gt;CPU缓存体系对Go程序的影响&lt;/h2&gt;&#xA;&lt;p&gt;小菜刀最近在medium上阅读了一篇高赞文章《Go and CPU Caches》，其地址为&lt;em&gt;&lt;a href=&#34;https://teivah.medium.com/go-and-cpu-caches-af5d32cc5592&#34;&gt;https://teivah.medium.com/go-and-cpu-caches-af5d32cc5592&lt;/a&gt;&lt;/em&gt;，感觉收获颇多。小菜刀在该文章的基础上做了些修改和扩展，整理出来分享给读者朋友们。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;CPU缓存体系&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;现代计算机处理器架构多数采用对称多处理系统（Symmetric multiprocessing system，SMS）。在这个系统中，每一个核心都当成是独立的处理器，多处理器被连接到同一个共享的主存上，并由单一操作系统来控制。&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据库连接池</title>
      <link>http://shanks.link/blog/2021/04/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</link>
      <pubDate>Tue, 27 Apr 2021 11:18:05 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</guid>
      <description>&lt;h2 id=&#34;数据库连接池&#34;&gt;数据库连接池&lt;/h2&gt;&#xA;&lt;p&gt;池（Pool）是指某类资源的容器，它是一种用于提高程序效率和降低系统开销的技术，比如线程池、连接池、内存池、对象池。但它们的核心理念一致：&lt;strong&gt;资源&lt;strong&gt;&lt;strong&gt;复用&lt;/strong&gt;&lt;/strong&gt;。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>万能钥匙中间层</title>
      <link>http://shanks.link/blog/2021/04/26/%E4%B8%87%E8%83%BD%E9%92%A5%E5%8C%99%E4%B8%AD%E9%97%B4%E5%B1%82/</link>
      <pubDate>Mon, 26 Apr 2021 19:13:05 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/26/%E4%B8%87%E8%83%BD%E9%92%A5%E5%8C%99%E4%B8%AD%E9%97%B4%E5%B1%82/</guid>
      <description>&lt;h2 id=&#34;万能钥匙-中间层&#34;&gt;万能钥匙-中间层&lt;/h2&gt;&#xA;&lt;p&gt;最近小菜刀重读《程序员的自我修养》，里面提到过一句名言：&lt;strong&gt;计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;上述名言概括了计算机系统软件体系结构的设计要点，整个体系结构从上到下都是按照严格的层次结构设计的。不仅是计算机系统软件整个体系是这样的，体系里面的每个组件比如操作系统本身，应用程序、软件系统甚至很多硬件结构都是按照这种层次的结构组织和设计的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>高并发系统之限流技术</title>
      <link>http://shanks.link/blog/2021/04/26/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E4%B9%8B%E9%99%90%E6%B5%81%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Mon, 26 Apr 2021 18:19:51 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/26/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E4%B9%8B%E9%99%90%E6%B5%81%E6%8A%80%E6%9C%AF/</guid>
      <description>&lt;h2 id=&#34;高并发系统之限流技术&#34;&gt;高并发系统之限流技术&lt;/h2&gt;&#xA;&lt;p&gt;在开发高并发系统时，有三把利器用来保护系统：缓存、降级和限流。限流是指通过对并发访问/请求进行限速或者对一个时间内的的请求进行限量来保护系统，一旦达到限制条件则可以拒绝服务。&lt;/p&gt;</description>
    </item>
    <item>
      <title>垃圾回收GC浅谈</title>
      <link>http://shanks.link/blog/2021/04/04/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6gc%E6%B5%85%E8%B0%88/</link>
      <pubDate>Sun, 04 Apr 2021 16:30:16 +0000</pubDate>
      <guid>http://shanks.link/blog/2021/04/04/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6gc%E6%B5%85%E8%B0%88/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6844903857609244685&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;关于内存&lt;/strong&gt;&#xA;计算机通过两个机制，去实现内存的高效使用。&lt;/p&gt;&#xA;&lt;p&gt;第一种机制是虚拟内存。硬盘的容量其实是远远大于内存的(RAM)，虚拟内存会在内存不足的时候，把不经常访问的内存的数据写到硬盘里。虽然说硬盘容量比较大，但是它的访问速度却很慢。如果内存和硬盘交换数据过于频繁，处理速度就会下降，计算机就会看上去像卡死了一样，这种现象被叫做抖动(Thrushing)。造成电脑蓝屏的主要原因之一就是抖动。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
