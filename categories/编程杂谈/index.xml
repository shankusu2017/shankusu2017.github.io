<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程杂谈 on 程序员的小天地</title>
    <link>http://shanks.link/categories/%E7%BC%96%E7%A8%8B%E6%9D%82%E8%B0%88/</link>
    <description>Recent content in 编程杂谈 on 程序员的小天地</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 21 Sep 2023 09:47:40 +0800</lastBuildDate>
    <atom:link href="http://shanks.link/categories/%E7%BC%96%E7%A8%8B%E6%9D%82%E8%B0%88/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title> [程序员应该阅读的非编程类书籍</title>
      <link>http://shanks.link/blog/2023/09/21/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E9%98%85%E8%AF%BB%E7%9A%84%E9%9D%9E%E7%BC%96%E7%A8%8B%E7%B1%BB%E4%B9%A6%E7%B1%8D/</link>
      <pubDate>Thu, 21 Sep 2023 09:47:40 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/21/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E9%98%85%E8%AF%BB%E7%9A%84%E9%9D%9E%E7%BC%96%E7%A8%8B%E7%B1%BB%E4%B9%A6%E7%B1%8D/</guid>
      <description>&lt;p&gt;在 stackoverflow 上有人提问 &lt;a href=&#34;http://stackoverflow.com/q/38210/343194&#34;&gt;程序员应该阅读的非编程类书籍有哪些？&lt;/a&gt; 本来只想整理编程类书籍，&#xA;不过突然眼前一亮，发现了《The Art of War - Sun Tzu》回答者的推荐说明引用 Wikipedia 上的：&lt;/p&gt;&#xA;&lt;p&gt;亚马逊提供免费的　Kindle　版读本：&lt;a href=&#34;http://www.amazon.cn/gp/product/B00AA7KMKG/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=536&amp;amp;creative=3132&amp;amp;creativeASIN=B00AA7KMKG&amp;amp;linkCode=as2&amp;amp;tag=favbook-23&#34;&gt;孙子兵法&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>免费的编程中文书籍索引</title>
      <link>http://shanks.link/blog/2023/09/21/%E5%85%8D%E8%B4%B9%E7%9A%84%E7%BC%96%E7%A8%8B%E4%B8%AD%E6%96%87%E4%B9%A6%E7%B1%8D%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Thu, 21 Sep 2023 09:45:40 +0800</pubDate>
      <guid>http://shanks.link/blog/2023/09/21/%E5%85%8D%E8%B4%B9%E7%9A%84%E7%BC%96%E7%A8%8B%E4%B8%AD%E6%96%87%E4%B9%A6%E7%B1%8D%E7%B4%A2%E5%BC%95/</guid>
      <description>&lt;h1 id=&#34;免费的编程中文书籍索引&#34;&gt;免费的编程中文书籍索引&lt;/h1&gt;&#xA;&lt;p&gt;免费的编程中文书籍索引，欢迎投稿。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;国外程序员在 &lt;a href=&#34;http://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read/1713%231713&#34;&gt;stackoverflow&lt;/a&gt; 推荐的程序员必读书籍，&lt;a href=&#34;http://justjavac.com/other/2012/05/15/qualified-programmer-should-read-what-books.html&#34; title=&#34;一个合格的程序员应该读过哪些书&#34;&gt;中文版&lt;/a&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/38210/what-non-programming-books-should-programmers-read&#34;&gt;stackoverflow&lt;/a&gt; 上的程序员应该阅读的非编程类书籍有哪些？ &lt;a href=&#34;what-non-programming-books-should-programmers-read.md&#34;&gt;中文版&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/vhf/free-programming-books&#34;&gt;github&lt;/a&gt; 上的一个流行的编程书籍索引  &lt;a href=&#34;https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md&#34;&gt;中文版&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;欢迎订阅我的微信公众帐号，只推送原创文字。欢迎扫描二维码订阅：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux内存管理小结三-其他内存相关知识</title>
      <link>http://shanks.link/blog/2021/07/30/linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%B0%8F%E7%BB%93%E4%B8%89-%E5%85%B6%E4%BB%96%E5%86%85%E5%AD%98%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Fri, 30 Jul 2021 18:17:27 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/30/linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%B0%8F%E7%BB%93%E4%B8%89-%E5%85%B6%E4%BB%96%E5%86%85%E5%AD%98%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</guid>
      <description>&lt;h1 id=&#34;其他内存相关知识linux内存管理小结三&#34;&gt;其他内存相关知识——Linux内存管理小结三&lt;/h1&gt;&#xA;&lt;h1 id=&#34;overcommit和oom&#34;&gt;【Overcommit和OOM】&lt;/h1&gt;&#xA;&lt;p&gt;​     在Unix中，当一个用户进程使用malloc()函数申请内存时，假如返回值是NULL，说明当前系统没有足够的可用内存。一般程序都会判断malloc返回值是null时便报错退出。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux内存管理小结二-glibc内存管理</title>
      <link>http://shanks.link/blog/2021/07/30/linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%B0%8F%E7%BB%93%E4%BA%8C-glibc%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
      <pubDate>Fri, 30 Jul 2021 18:14:38 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/30/linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%B0%8F%E7%BB%93%E4%BA%8C-glibc%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;h1 id=&#34;glibc内存管理linux内存管理小结二&#34;&gt;glibc内存管理——Linux内存管理小结二&lt;/h1&gt;&#xA;&lt;h1 id=&#34;引言&#34;&gt;【引言】&lt;/h1&gt;&#xA;&lt;p&gt;最近在生产环境遇到一个奇怪的现象，nginx占用的虚拟内存和物理内存都很高，并且一直不会下降。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/%E7%BC%96%E7%A8%8B%E6%9D%82%E8%B0%88/2.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;因为服务器本身的业务量并不大，而且对比集群其他服务器nginx才几十兆的内存消耗，第一个想到的就是内存泄漏。但是连续观察了多天，内存也没有进一步上涨，和以前遇过的内存泄漏问题不是很像。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux内存管理小结一-什么是物理/虚拟/共享内存</title>
      <link>http://shanks.link/blog/2021/07/30/linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%B0%8F%E7%BB%93%E4%B8%80-%E4%BB%80%E4%B9%88%E6%98%AF%E7%89%A9%E7%90%86/%E8%99%9A%E6%8B%9F/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/</link>
      <pubDate>Fri, 30 Jul 2021 18:10:45 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/30/linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%B0%8F%E7%BB%93%E4%B8%80-%E4%BB%80%E4%B9%88%E6%98%AF%E7%89%A9%E7%90%86/%E8%99%9A%E6%8B%9F/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/</guid>
      <description>&lt;h1 id=&#34;什么是物理虚拟共享内存linux内存管理小结一&#34;&gt;什么是物理/虚拟/共享内存——Linux内存管理小结一&lt;/h1&gt;&#xA;&lt;h1 id=&#34;物理内存和虚拟内存到底有什么区别&#34;&gt;物理内存和虚拟内存到底有什么区别？&lt;/h1&gt;&#xA;&lt;p&gt;提到内存，我们会想到经常接触的三个词：虚拟内存、物理内存、共享内存。它们分别对应top输出中的VIRT、RES、SHR三列。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://shanks.link/img/%E7%BC%96%E7%A8%8B%E6%9D%82%E8%B0%88/11.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;1-物理内存&#34;&gt;1. 物理内存&lt;/h1&gt;&#xA;&lt;p&gt;​    系统的物理内存被划分为许多相同大小的部分，也称作内存页。内存页的大小取决于CPU的架构和操作系统的配置，一般为4KB。物理内存的使用主要分为以下几方面：&lt;/p&gt;</description>
    </item>
    <item>
      <title>malloc_stats---检查内存泄露的神器</title>
      <link>http://shanks.link/blog/2021/07/30/malloc_stats---%E6%A3%80%E6%9F%A5%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E7%9A%84%E7%A5%9E%E5%99%A8/</link>
      <pubDate>Fri, 30 Jul 2021 17:58:40 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/30/malloc_stats---%E6%A3%80%E6%9F%A5%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E7%9A%84%E7%A5%9E%E5%99%A8/</guid>
      <description>&lt;p&gt;在之前的博客中提到过，&lt;a href=&#34;http://blog.csdn.net/hust_wusen/article/details/8776002&#34;&gt;valgrind可以&lt;/a&gt;用来检测内存泄露，但在使用中，往往会遇到一些问题，给调试工作带来很多不必要的麻烦，我自己遇到的有以下两种：&lt;/p&gt;&#xA;&lt;p&gt;(1)内存泄露误检（系统初始化时，可能有一些需要长期保存在内存中的&lt;a href=&#34;http://lib.csdn.net/base/datastructure&#34;&gt;数据结构&lt;/a&gt;，这些空间是永远不释放的，而这些内存会被认为绝对泄露）&lt;/p&gt;&#xA;&lt;p&gt;(2) valgrind检查内存泄露过于全面，运行后的结果太多往往很难从中找到有用的信息。有时候，我们只需要关注某些函数，可能在执行某个操作，调用某些函数时会出现内存泄露，此时，valgrind的工作显得冗余而复杂&lt;/p&gt;</description>
    </item>
    <item>
      <title>c运行库、c标准库、windows API的区别和联系</title>
      <link>http://shanks.link/blog/2021/07/30/c%E8%BF%90%E8%A1%8C%E5%BA%93c%E6%A0%87%E5%87%86%E5%BA%93windows-api%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB/</link>
      <pubDate>Fri, 30 Jul 2021 17:29:46 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/30/c%E8%BF%90%E8%A1%8C%E5%BA%93c%E6%A0%87%E5%87%86%E5%BA%93windows-api%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB/</guid>
      <description>&lt;h1 id=&#34;c运行库c标准库windows-api的区别和联系&#34;&gt;&lt;a href=&#34;https://www.cnblogs.com/renyuan/p/5031100.html&#34;&gt;c运行库、c标准库、windows API的区别和联系&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;C运行时库函数&lt;/strong&gt;&#xA;C运行时库函数是指C语言本身支持的一些基本函数，通常是汇编直接实现的。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;API函数&lt;/strong&gt;&#xA;API函数是操作系统为方便用户设计应用程序而提供的实现特定功能的函数，API函数也是C语言的函数实现的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>为什么请求时,需要使用URLEncode做encode转码操作</title>
      <link>http://shanks.link/blog/2021/07/30/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B7%E6%B1%82%E6%97%B6%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8urlencode%E5%81%9Aencode%E8%BD%AC%E7%A0%81%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Fri, 30 Jul 2021 17:18:15 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/30/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B7%E6%B1%82%E6%97%B6%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8urlencode%E5%81%9Aencode%E8%BD%AC%E7%A0%81%E6%93%8D%E4%BD%9C/</guid>
      <description>&lt;h1 id=&#34;为什么请求时需使用urlencode做encode转码操作&#34;&gt;为什么请求时,需使用URLEncode做encode转码操作&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.blogjava.net/donghang73/archive/2011/08/10/356208.html&#34;&gt;为什么要对url进行encode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;发现现在几乎所有的网站都对url中的汉字和特殊的字符，进行了urlencode操作，也就是：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://hi.baidu.com/%BE%B2%D0%C4%C0%CF%C8%CB/creat/blog/&#34;&gt;http://hi.baidu.com/%BE%B2%D0%C4%C0%CF%C8%CB/creat/blog/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;这个样子，中间%形式的，肯定就是我的登录用户名称了吧。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何阅读一份源代码?</title>
      <link>http://shanks.link/blog/2021/07/30/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E4%BB%BD%E6%BA%90%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Fri, 30 Jul 2021 17:04:53 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/30/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E4%BB%BD%E6%BA%90%E4%BB%A3%E7%A0%81/</guid>
      <description>&lt;h1 id=&#34;如何阅读一份源代码&#34;&gt;如何阅读一份源代码？&lt;/h1&gt;&#xA;&lt;h2 id=&#34;contents&#34;&gt;CONTENTS&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.codedump.info/post/20190324-how-to-read-code/#%E5%85%88%E8%B7%91%E8%B5%B7%E6%9D%A5&#34;&gt;先跑起来&lt;/a&gt;&lt;a href=&#34;https://www.codedump.info/post/20190324-how-to-read-code/#%E8%B0%83%E8%AF%95%E6%89%8B%E6%AE%B5&#34;&gt;调试手段&lt;/a&gt;&lt;a href=&#34;https://www.codedump.info/post/20190324-how-to-read-code/#%E4%BD%BF%E7%94%A8%E9%A1%BA%E6%89%8B%E7%9A%84%E5%B7%A5%E5%85%B7&#34;&gt;使用顺手的工具&lt;/a&gt;&lt;a href=&#34;https://www.codedump.info/post/20190324-how-to-read-code/#%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90&#34;&gt;情景分析&lt;/a&gt;&lt;a href=&#34;https://www.codedump.info/post/20190324-how-to-read-code/#%E5%88%A9%E7%94%A8%E5%A5%BD%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B&#34;&gt;利用好测试用例&lt;/a&gt;&lt;a href=&#34;https://www.codedump.info/post/20190324-how-to-read-code/#%E5%8E%98%E6%B8%85%E6%A0%B8%E5%BF%83%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB&#34;&gt;厘清核心数据结构之间的关系&lt;/a&gt;&lt;a href=&#34;https://www.codedump.info/post/20190324-how-to-read-code/#%E6%95%B4%E4%BD%93%E5%92%8C%E7%BB%86%E8%8A%82&#34;&gt;整体和细节&lt;/a&gt;&lt;a href=&#34;https://www.codedump.info/post/20190324-how-to-read-code/#%E5%A4%9A%E9%97%AE%E8%87%AA%E5%B7%B1%E5%87%A0%E4%B8%AA%E9%97%AE%E9%A2%98&#34;&gt;多问自己几个问题&lt;/a&gt;&lt;a href=&#34;https://www.codedump.info/post/20190324-how-to-read-code/#%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0&#34;&gt;写自己的代码阅读笔记&lt;/a&gt;&lt;a href=&#34;https://www.codedump.info/post/20190324-how-to-read-code/#%E6%80%BB%E7%BB%93&#34;&gt;总结&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;我在本文的基础上做了一些补充和改进，见&lt;a href=&#34;https://www.codedump.info/post/20200605-how-to-read-code-v2020/&#34;&gt;《如何阅读一份源代码？（2020年版）》&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;阅读源代码的能力算是程序员的一种底层基础能力之一，这个能力之所以重要，原因在于：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不可避免的需要阅读或者接手他人的项目。比如调研一个开源项目，比如接手一个其他人的项目。&lt;/li&gt;&#xA;&lt;li&gt;阅读优秀的项目源码是学习他人优秀经验的重要途径之一，这一点我自己深有体会。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;然而，读代码比写代码还是更难一些，原因在于“&lt;a href=&#34;https://www.zhihu.com/question/21820752/answer/19427754&#34;&gt;写代码是在表达自己,读代码是在理解别人&lt;/a&gt;”。因为面对的项目多，项目的作者有各自的风格，理解起来需要花费不少的精力。&lt;/p&gt;</description>
    </item>
    <item>
      <title>字节跳动 Flink 单点恢复功能实践</title>
      <link>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8-flink-%E5%8D%95%E7%82%B9%E6%81%A2%E5%A4%8D%E5%8A%9F%E8%83%BD%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 27 Jul 2021 18:21:02 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/27/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8-flink-%E5%8D%95%E7%82%B9%E6%81%A2%E5%A4%8D%E5%8A%9F%E8%83%BD%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;h1 id=&#34;跳动-flink-单点恢复功能实践&#34;&gt;跳动 Flink 单点恢复功能实践&lt;/h1&gt;&#xA;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;&#xA;&lt;p&gt;在字节跳动的实时计算场景中，我们有很多任务（数量 2k+）会直接服务于线上，其输出时延和稳定性会直接影响线上产品的用户体验，这类任务通常具有如下特点：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kernel trace tools（三）：中断和软中断关闭时间过长问题追踪</title>
      <link>http://shanks.link/blog/2021/07/27/kernel-trace-tools%E4%B8%89%E4%B8%AD%E6%96%AD%E5%92%8C%E8%BD%AF%E4%B8%AD%E6%96%AD%E5%85%B3%E9%97%AD%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E9%97%AE%E9%A2%98%E8%BF%BD%E8%B8%AA/</link>
      <pubDate>Tue, 27 Jul 2021 18:09:23 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/27/kernel-trace-tools%E4%B8%89%E4%B8%AD%E6%96%AD%E5%92%8C%E8%BD%AF%E4%B8%AD%E6%96%AD%E5%85%B3%E9%97%AD%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E9%97%AE%E9%A2%98%E8%BF%BD%E8%B8%AA/</guid>
      <description>&lt;h1 id=&#34;kernel-trace-tools三内核-runqueue-延迟跟踪&#34;&gt;Kernel trace tools（三）：内核 runqueue 延迟跟踪&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;本文是由字节跳动系统部 STE 团队出品的“kernel trace tools”系列文章之一，以介绍团队自研多类延迟问题追踪工具。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kernel trace tools（二）：中断和软中断关闭时间过长问题追踪</title>
      <link>http://shanks.link/blog/2021/07/27/kernel-trace-tools%E4%BA%8C%E4%B8%AD%E6%96%AD%E5%92%8C%E8%BD%AF%E4%B8%AD%E6%96%AD%E5%85%B3%E9%97%AD%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E9%97%AE%E9%A2%98%E8%BF%BD%E8%B8%AA/</link>
      <pubDate>Tue, 27 Jul 2021 18:03:53 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/27/kernel-trace-tools%E4%BA%8C%E4%B8%AD%E6%96%AD%E5%92%8C%E8%BD%AF%E4%B8%AD%E6%96%AD%E5%85%B3%E9%97%AD%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E9%97%AE%E9%A2%98%E8%BF%BD%E8%B8%AA/</guid>
      <description>&lt;h1 id=&#34;kernel-trace-tools二内核态执行时间跟踪&#34;&gt;Kernel trace tools（二）：内核态执行时间跟踪&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;本文是由字节跳动系统部 STE 团队出品的“kernel trace tools”系列文章之一，以介绍团队自研多类延迟问题追踪工具。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kernel trace tools（一）：中断和软中断关闭时间过长问题追踪</title>
      <link>http://shanks.link/blog/2021/07/27/kernel-trace-tools%E4%B8%80%E4%B8%AD%E6%96%AD%E5%92%8C%E8%BD%AF%E4%B8%AD%E6%96%AD%E5%85%B3%E9%97%AD%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E9%97%AE%E9%A2%98%E8%BF%BD%E8%B8%AA/</link>
      <pubDate>Tue, 27 Jul 2021 17:57:14 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/27/kernel-trace-tools%E4%B8%80%E4%B8%AD%E6%96%AD%E5%92%8C%E8%BD%AF%E4%B8%AD%E6%96%AD%E5%85%B3%E9%97%AD%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E9%97%AE%E9%A2%98%E8%BF%BD%E8%B8%AA/</guid>
      <description>&lt;h1 id=&#34;kenel-trace-tools一中断和软中断关闭时间过长问题追踪&#34;&gt;kenel trace tools（一）：中断和软中断关闭时间过长问题追踪&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;本文是由字节跳动系统部 STE 团队出品的 “kernel trace tools” 系列文章，以介绍团队自研多类延迟问题追踪工具。&lt;/p&gt;</description>
    </item>
    <item>
      <title>基于有限状态机与消息队列的三方支付系统补单实践</title>
      <link>http://shanks.link/blog/2021/07/27/%E5%9F%BA%E4%BA%8E%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA%E4%B8%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%A1%A5%E5%8D%95%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 27 Jul 2021 17:46:19 +0800</pubDate>
      <guid>http://shanks.link/blog/2021/07/27/%E5%9F%BA%E4%BA%8E%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA%E4%B8%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%A1%A5%E5%8D%95%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;h1 id=&#34;基于有限状态机与消息队列的三方支付系统补单实践&#34;&gt;基于有限状态机与消息队列的三方支付系统补单实践&lt;/h1&gt;&#xA;&lt;h1 id=&#34;0-引言&#34;&gt;0. 引言&lt;/h1&gt;&#xA;&lt;p&gt;在日常生活中，从线下的超市购物到线上的外卖点餐、电商网购等，支付无时无刻不在发生，不论是通过现金、pos 机刷卡还是微信支付宝等第三方支付。线上支付有着及时便捷一气呵成的极致体验，当然也有少数的时候体验不够丝滑，比如早期我们在 PC 版 12306 买火车票，当支付完成后，订单的支付状态却经常不能及时更新，会有一段时间的延迟，有时甚至会等待很长时间处在未支付状态。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
